using System.Collections.Generic;
using Optima.Fais.Data;
using Optima.Fais.Repository;
using System.Linq;
using Optima.Fais.Dto;
using System;
using Microsoft.EntityFrameworkCore;
using System.Globalization;
using Optima.Fais.Model.Utils;
using System.Text;
using Optima.Fais.Model;
using System.Linq.Expressions;
using System.Threading.Tasks;
using System.Data;
using System.Collections;
using System.Data.SqlClient;
using Microsoft.SqlServer.Server;
using Optima.Fais.Dto.Sync;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using System.Drawing;
using System.Net.Http;

namespace Optima.Fais.EfRepository
{
    public class AssetsRepository : Repository<Model.Asset>, IAssetsRepository
    {
        IAssetNiRepository _assetNiRepository;

        public AssetsRepository(ApplicationDbContext context, IAssetNiRepository assetNiRepository)
            : base(context, (filter) => { return (a) => (a.InvNo.Contains(filter) || a.Name.Contains(filter)); })
        {
            _assetNiRepository = assetNiRepository;
        }

        //    public int AddAsset(AddAsset assetDto, out List<Dto.CreateAssetSAP> createAsset)
        //    {
        //        Model.Asset asset = null;
        //        Model.AssetDep assetDep = null;
        //        Model.AssetDepMD assetDepMD = null;
        //        Model.AssetInv assetInv = null;
        //        Model.AssetAC assetAC = null;
        //        Model.AssetAdmMD assetAdmMD = null;
        //        Model.AccMonth accMonth = null;
        //        Model.Document document = null;
        //        Model.AssetOp assetOp = null;
        //        Model.OrderOp orderOp = null;
        //        Model.OfferOp offerOp = null;
        //        Model.BudgetOp budgetOp = null;
        //        Model.Inventory inventory = null;
        //        Model.InventoryAsset inventoryAsset = null;
        //        DateTime? documentDate = null;
        //        Model.Administration administration = null;
        //        Model.AccSystem accSystem = null;
        //        Model.AssetClass assetClass = null;
        //        // Model.AssetCategory assetCategory = null;
        //        Model.DictionaryItem dictionaryItem = null;
        //        //Model.SubCategory subCategory = null;
        //        Model.AssetClassType assetClassType = null;
        //        Model.Partner partner = null;
        //        Model.CostCenter costCenter = null;
        //        // Model.Company company = null;
        //        // Model.Room room = null;
        //        Model.AssetState assetState = null;
        //        // Model.AssetType assetType = null;
        //        Model.InvState invState = null;
        //        Model.Employee employee = null;
        //        Model.Material material = null;
        //        Model.DocumentType documentType = null;
        //        Model.Order order = null;
        //        Model.OfferMaterial offerMaterial = null;
        //        Model.OrderMaterial orderMaterial = null;
        //        Model.BudgetManager budgetManager = null;
        //       //Model.Accountancy accountancy = null;

        //        List<Dto.CreateAssetSAP> sap = new List<Dto.CreateAssetSAP>();


        //        string accSystemDefault = "RON";
        //        string assetClassTypeDefault = "-";

        //        documentType = _context.Set<Model.DocumentType>().AsNoTracking().Where(d => d.ParentCode == "CREATEASSET").FirstOrDefault();

        //        Model.EntityType entityType = null;

        //        inventory = _context.Set<Model.Inventory>().AsNoTracking().Where(i => i.Active == true).Single();
        //        invState = _context.Set<Model.InvState>().Where(a => a.Id == 1).Single();
        //        assetState = _context.Set<Model.AssetState>().Where(a => a.Id == 9).Single();

        //        assetClassType = _context.Set<Model.AssetClassType>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();
        //        assetClass = _context.Set<Model.AssetClass>().Where(a => (a.Id == 22)).FirstOrDefault();
        //        accSystem = _context.Set<Model.AccSystem>().Where(a => (a.Code == accSystemDefault)).FirstOrDefault();

        //        budgetManager = _context.Set<Model.BudgetManager>().AsNoTracking().Where(a => (a.Code == "2022")).FirstOrDefault();

        //        int quantity = 1;

        //        for (int j = 0; j < quantity; j++)
        //        {

        //            order = _context.Set<Model.Order>().Include(b => b.Budget).Include(b => b.BudgetBase).Include(b => b.Offer).Include(c => c.Contract).ThenInclude(c => c.ContractAmount).Where(c => c.Id == assetDto.OrderId).SingleOrDefault();

        //            // order.QuantityRem = order.QuantityRem > 0 ? order.QuantityRem - 1 : order.Quantity;

        //            entityType = _context.Set<Model.EntityType>().Where(c => c.UploadFolder == "NEWASSET").FirstOrDefault();

        //            asset = new Model.Asset()
        //            {
        //                Document = document
        //            };
        //            _context.Add(asset);



        //            costCenter = _context.Set<Model.CostCenter>()
        //                .Include(c => c.Room)
        //                .Include(c => c.AdmCenter)
        //                .Include(c => c.Region)
        //                .Include(c => c.Company)
        //                .Include(a => a.Administration)
        //                .Include(d => d.Division)
        //                .ThenInclude(d => d.Department)
        //                .Where(a => a.Id == assetDto.CostCenterId).Single();

        //            subCategory = _context.Set<Model.SubCategory>()
        //                .Include(a => a.Category)
        //                    
        //                .Where(a => a.Id == assetDto.SubCategoryId).Single();


        //            //dictionaryItem = _context.Set<Model.DictionaryItem>().Where(a => a.Name == subCategory.Name).FirstOrDefault();

        //            if (dictionaryItem == null)
        //            {
        //                dictionaryItem = new Model.DictionaryItem()
        //                {
        //                    Code = "NEW",
        //                    Name = subCategory.Name,
        //                    IsDeleted = false,
        //                    AssetCategoryId = subCategory.Category.InterCompany.AssetCategoryId,
        //                    DictionaryTypeId = 1
        //                };

        //                _context.Add(dictionaryItem);
        //            }

        //            employee = _context.Set<Model.Employee>().Include(c => c.CostCenter).Where(a => a.Id == assetDto.EmployeeId).SingleOrDefault();

        //            material = _context.Set<Model.Material>().Include(a => a.SubType).Where(a => a.Id == assetDto.MaterialId).Single();

        //            orderMaterial = _context.Set<Model.OrderMaterial>().Where(a => a.Id == assetDto.OrderMaterialId).SingleOrDefault();

        //            offerMaterial = _context.Set<Model.OfferMaterial>().Where(a => a.Id == orderMaterial.OfferMaterialId).SingleOrDefault();


        //if (offerMaterial != null)
        //{

        //	// offerMaterial.AppStateId = offerMaterial.OrdersQuantity == offerMaterial.ReceptionsQuantity ? 7 : 6;
        //	//offerMaterial.ReceptionsQuantity += 1;
        //	offerMaterial.ReceptionsPrice = assetDto.ReceptionPrice;
        //	//offerMaterial.ReceptionsValue = offerMaterial.Price + offerMaterial.ReceptionsValue;

        //	//if (offerMaterial.Quantity == offerMaterial.ReceptionsQuantity)
        //	//{
        //	//	offerMaterial.AppStateId = 17;
        //	//}

        //	_context.Update(offerMaterial);
        //}

        //if (orderMaterial != null)
        //{

        //	//order.ValueFin = order.ValueFin - offerMaterial.Price;
        //	//orderMaterial.AppStateId = orderMaterial.OrdersQuantity == orderMaterial.ReceptionsQuantity ? 7 : 6;
        //	//orderMaterial.ReceptionsQuantity += 1;
        //	orderMaterial.ReceptionsPrice = assetDto.ReceptionPrice;
        //	//orderMaterial.ReceptionsValue = orderMaterial.Price + orderMaterial.ReceptionsValue;

        //	//if (orderMaterial.Quantity == orderMaterial.ReceptionsQuantity)
        //	//{
        //	//	orderMaterial.AppStateId = 17;
        //	//}

        //	_context.Update(orderMaterial);
        //}

        //if (orderMaterial.Price > 2500)
        //{
        //                //accountancy = _context.Set<Model.Accountancy>()

        //                //  .Include(a => a.Account)
        //                //  
        //                //  .Include(a => a.AssetCategory)
        //                //  .Include(a => a.AssetType)
        //                //  .Where(a => a.InterCompanyId == subCategory.Category.InterCompanyId && a.Value > 2500 && a.IsDeleted == false).Single();

        //                accountancy = _context.Set<Model.Accountancy>()

        //                  .Include(a => a.Account)
        //                  
        //                  .Include(a => a.AssetCategory)
        //                  .Include(a => a.AssetType)
        //                  .Where(a => a.SubCategoryId == assetDto.SubCategoryId && a.Value > 2500 && a.IsDeleted == false).Single();
        //            }
        //else
        //{
        //                //accountancy = _context.Set<Model.Accountancy>()

        //                //  .Include(a => a.Account)
        //                //  
        //                //  .Include(a => a.AssetCategory)
        //                //  .Include(a => a.AssetType)
        //                //  .Where(a => a.InterCompanyId == subCategory.Category.InterCompanyId && a.Value == 2500 && a.IsDeleted == false).Single();

        //                accountancy = _context.Set<Model.Accountancy>()

        //                 .Include(a => a.Account)
        //                 
        //                 .Include(a => a.AssetCategory)
        //                 .Include(a => a.AssetType)
        //                 .Where(a => a.SubCategoryId == assetDto.SubCategoryId && a.Value == 2500 && a.IsDeleted == false).Single();
        //            }

        //            document = new Model.Document
        //{
        //	Approved = true,
        //	DocumentTypeId = documentType != null ? documentType.Id : 1,
        //	DocNo1 = assetDto.DocNo1 ?? string.Empty,
        //	DocNo2 = string.Empty,
        //	DocumentDate = DateTime.Now,
        //	CreationDate = DateTime.Now,
        //	CostCenterId = costCenter != null ? costCenter.Id : (int?)null,
        //	RegisterDate = DateTime.Now,
        //	Details = string.Empty,
        //	ParentDocumentId = inventory.DocumentId
        //};


        //            partner = _context.Set<Model.Partner>().Where(a => a.Id == order.Offer.PartnerId).FirstOrDefault();

        //            document.PartnerId = partner.Id;

        //            _context.Add(document);

        //            int? value = null;

        //            asset.InvNo = costCenter.Company.Code + "OPT0000000000" + entityType.Name;
        //            asset.Name = assetDto.Name;
        //            asset.PurchaseDate = DateTime.Now;
        //            asset.SerialNumber = assetDto.SerialNumber;
        //            asset.ERPCode = costCenter.Company.Code + "OPT0000000000" + entityType.Name;
        //            asset.Document = document;
        //            asset.Validated = true;
        //            asset.SAPCode = costCenter.Company.Code + "OPT0000000000" + entityType.Name;
        //            asset.AssetStateId = assetState.Id;
        //            //asset.AssetTypeId = accountancy.AssetTypeId;
        //            asset.CostCenterId = costCenter.Id;
        //            //asset.AssetCategoryId = accountancy.AssetCategoryId;
        //            asset.Employee = employee;
        //            asset.RoomId = costCenter.RoomId;
        //            asset.ValueInv = orderMaterial.Price;
        //            asset.ValueRem = orderMaterial.Price;
        //            asset.InvStateId = invState.Id;
        //            asset.Quantity = 1;
        //            asset.Custody = false;
        //            //asset.UomId = assetDto.UomId;
        //            asset.Company = costCenter.Company;
        //            asset.Validated = true;
        //            
        //            asset.BudgetManagerId = budgetManager.Id;
        //            //asset.AssetNatureId = assetDto.AssetNatureId;
        //            asset.SubTypeId = material.SubTypeId;
        //            //asset.InsuranceCategoryId = assetDto.InsuranceCategoryId;
        //            //asset.BrandId = assetDto.BrandId;
        //            //asset.ModelId = assetDto.ModelId;
        //            //asset.InterCompanyId = assetDto.InterCompanyId;
        //            asset.ProjectId = order.ProjectId;
        //            //asset.InvoiceDate = assetDto.InvoiceDate;
        //            //asset.PODate = assetDto.PODate;
        //            //asset.ReceptionDate = assetDto.ReceptionDate;
        //            //asset.RemovalDate = assetDto.RemovalDate;
        //            asset.IsTemp = false;
        //            //asset.DimensionId = assetDto.DimensionId;
        //            asset.DictionaryItem = dictionaryItem;
        //            asset.IsAccepted = true;
        //            asset.IsReconcile = false;
        //            asset.OrderId = order.Id;
        //            asset.BudgetId = order.BudgetId;
        //            asset.BudgetBaseId = order.BudgetBaseId;
        //            //asset.DivisionId = assetDto.DivisionId;
        //            //asset.ProjectTypeId = assetDto.ProjectTypeId;
        //            asset.AgreementNo = assetDto.PlateNo;
        //           // asset.Name = subCategory.Name;
        //            asset.MaterialId = assetDto.MaterialId;
        //            asset.AdministrationId = costCenter.AdministrationId;
        //            asset.DepartmentId = costCenter.Division.DepartmentId;
        //            //asset.AccountId = accountancy.AccountId;
        //            //asset.ExpAccountId = accountancy.ExpAccountId;
        //            asset.AllowLabel = true;
        //            asset.MaterialId = material.Id;
        //            asset.DivisionId = costCenter.DivisionId;
        //            //asset.ProjectTypeId = order.Budget.ProjectTypeId;
        //            asset.ProjectTypeId = order.BudgetBase.ProjectTypeId;
        //            asset.RateId = order.Contract.ContractAmount.RateId;
        //            asset.ContractId = order.ContractId;
        //            asset.UomId = order.Contract.ContractAmount.UomId;
        //            asset.NetAmount = orderMaterial.Price;
        //            asset.OrderMaterialId = assetDto.OrderMaterialId;
        //            asset.OfferMaterialId = orderMaterial.OfferMaterialId;
        //            asset.ReceptionPrice = assetDto.ReceptionPrice;
        //            asset.CostCenterEmpId = employee != null && employee.CostCenter != null ? employee.CostCenter.Id : assetDto.CostCenterId;


        //            assetAC = new Model.AssetAC
        //            {
        //                AssetClassTypeId = assetClassType.Id,
        //                Asset = asset,
        //                AssetClassId = assetClass.Id,
        //                AssetClassIdIn = assetClass.Id
        //            };


        //            _context.Set<Model.AssetAC>().Add(assetAC);

        //            var monthSum = 0;


        //            assetDep = new Model.AssetDep
        //            {
        //                AccSystem = accSystem,
        //                Asset = asset,
        //                DepPeriod = (int)monthSum,
        //                DepPeriodIn = (int)monthSum,
        //                DepPeriodMonth = (int)monthSum,
        //                DepPeriodMonthIn = 0,
        //                DepPeriodRem = (int)monthSum,
        //                DepPeriodRemIn = (int)monthSum,
        //                UsageStartDate = documentDate,
        //                ValueDep = orderMaterial.Price,
        //                ValueDepIn = orderMaterial.Price,
        //                ValueDepPU = orderMaterial.Price,
        //                ValueDepPUIn = orderMaterial.Price,
        //                ValueDepYTD = orderMaterial.Price,
        //                ValueDepYTDIn = orderMaterial.Price,
        //                ValueInv = orderMaterial.Price,
        //                ValueInvIn = orderMaterial.Price,
        //                ValueRem = orderMaterial.Price,
        //                ValueRemIn = orderMaterial.Price
        //            };

        //            _context.Set<Model.AssetDep>().Add(assetDep);


        //            assetInv = new Model.AssetInv
        //            {
        //                Asset = asset,
        //                AllowLabel = true,
        //                Barcode = entityType.Code + entityType.Name,
        //                InvName = asset.Name,
        //                InvNoOld = string.Empty,
        //                InvStateId = invState.Id
        //            };

        //            _context.Set<Model.AssetInv>().Add(assetInv);


        //            accMonth = _context.Set<Model.AccMonth>().Where(a => a.IsActive == true).FirstOrDefault();

        //            assetDepMD = new Model.AssetDepMD
        //            {
        //                AccMonth = accMonth,
        //                AccSystem = accSystem,
        //                Asset = asset,
        //                DepPeriod = (int)monthSum,
        //                DepPeriodMonth = (int)monthSum,
        //                DepPeriodRem = 0,
        //                ValueDep = orderMaterial.Price,
        //                ValueDepPU = orderMaterial.Price,
        //                ValueDepYTD = orderMaterial.Price,
        //                ValueInv = orderMaterial.Price,
        //                ValueRem = orderMaterial.Price
        //            };

        //            _context.Set<Model.AssetDepMD>().Add(assetDepMD);


        //            assetAdmMD = new Model.AssetAdmMD
        //            {
        //                AccMonth = accMonth,
        //                Asset = asset,
        //                Administration = administration,
        //                DepartmentId = null
        //            };

        //            assetAdmMD.AssetStateId = assetState.Id;
        //            //assetAdmMD.AssetTypeId = accountancy.AssetTypeId;
        //            assetAdmMD.CostCenterId = costCenter.Id;
        //            assetAdmMD.EmployeeId = employee.Id;
        //            assetAdmMD.RoomId = costCenter.RoomId;
        //            //assetAdmMD.AssetCategoryId = accountancy.AssetCategoryId;
        //            assetAdmMD.AssetClass = assetClass;
        //            

        //            //assetAdmMD.AssetNatureId = assetDto.AssetNatureId;
        //            assetAdmMD.BudgetManagerId = budgetManager.Id;
        //            assetAdmMD.SubTypeId = material.SubTypeId;
        //            //assetAdmMD.InsuranceCategoryId = assetDto.InsuranceCategoryId;
        //            //assetAdmMD.ModelId = assetDto.ModelId;
        //            //assetAdmMD.BrandId = assetDto.BrandId;
        //            //
        //            assetAdmMD.ProjectId = order.ProjectId;

        //            assetAdmMD.AdmCenterId = costCenter.AdmCenterId;
        //            assetAdmMD.RegionId = costCenter.RegionId;
        //            assetAdmMD.AdministrationId = costCenter.AdministrationId;
        //            assetAdmMD.DepartmentId = costCenter.Division.DepartmentId;
        //            //assetAdmMD.AccountId = accountancy.AccountId;
        //            //assetAdmMD.AccountId = accountancy.AccountId;
        //            assetAdmMD.DivisionId = costCenter.DivisionId;
        //            // assetAdmMD.ProjectTypeId = order.Budget.ProjectTypeId;
        //            assetAdmMD.ProjectTypeId = order.BudgetBase.ProjectTypeId;

        //            _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);

        //            entityType.Name = StringsADD(entityType.Name, "1");

        //            _context.Update(entityType);

        //            if (inventory != null)
        //            {
        //                inventoryAsset = new Model.InventoryAsset
        //                {
        //                    QInitial = 1,
        //                    QFinal = 0,
        //                    InventoryId = inventory.Id,
        //                    Asset = asset,
        //                    EmployeeIdInitial = employee.Id,
        //                    RoomIdInitial = costCenter.RoomId,
        //                    SerialNumber = assetDto.SerialNumber,
        //                    StateIdInitial = invState.Id,
        //                    CostCenterInitial = costCenter,
        //                    AdministrationIdInitial = costCenter.AdministrationId
        //                };

        //                _context.Add(inventoryAsset);

        //                assetOp = new Model.AssetOp()
        //                {
        //                    Asset = asset,
        //                    Document = document,
        //                    RoomIdInitial = costCenter.RoomId,
        //                    RoomIdFinal = costCenter.RoomId,
        //                    EmployeeIdInitial = employee.Id,
        //                    EmployeeIdFinal = employee.Id,
        //                    //AssetCategoryIdInitial = accountancy.AssetCategoryId,
        //                    //AssetCategoryIdFinal = accountancy.AssetCategoryId,
        //                    InvStateIdInitial = invState.Id,
        //                    InvStateIdFinal = invState.Id,
        //                    AdministrationInitial = administration,
        //                    AdministrationFinal = administration,
        //                    AccSystem = accSystem,
        //                    DocumentId = document.Id
        //                };

        //                assetOp.AssetStateIdInitial = assetState.Id;
        //                assetOp.AssetStateIdFinal = assetState.Id;
        //                assetOp.CostCenterInitial = costCenter;
        //                assetOp.CostCenterFinal = costCenter;
        //                assetOp.DepartmentIdInitial = null;
        //                assetOp.DepartmentIdFinal = null;
        //                assetOp.InvName = assetDto.Name;
        //                //assetOp.AssetTypeIdInitial = accountancy.AssetTypeId; 
        //                //assetOp.AssetTypeIdFinal = accountancy.AssetTypeId;
        //                assetOp.AdministrationIdInitial = costCenter.AdministrationId;
        //                assetOp.AdministrationIdFinal = costCenter.AdministrationId;
        //                _context.Add(assetOp);


        //                //orderOp = new Model.OrderOp()
        //                //{
        //                //    AccMonthId = inventory.AccMonthId,
        //                //    AccSystemId = null,
        //                //    
        //                //    
        //                //    AdministrationIdInitial = order.AdministrationId,
        //                //    AdministrationIdFinal = order.AdministrationId,
        //                //    OrderId = order.Id,
        //                //    BudgetManagerIdInitial = null,
        //                //    BudgetManagerIdFinal = null,
        //                //    BudgetStateId = order.AppStateId,
        //                //    CompanyIdInitial = order.CompanyId,
        //                //    CompanyIdFinal = order.CompanyId,
        //                //    CostCenterIdInitial = order.CostCenterId,
        //                //    CostCenterIdFinal = order.CostCenterId,
        //                //    CreatedAt = DateTime.Now,
        //                //    CreatedBy = order.UserId,
        //                //    Document = document,
        //                //    DstConfAt = DateTime.Now,
        //                //    DstConfBy = order.UserId,
        //                //    EmployeeIdInitial = order.EmployeeId,
        //                //    EmployeeIdFinal = order.EmployeeId,
        //                //    InfoIni = order.Info,
        //                //    InfoFin = order.Info,
        //                //    InterCompanyIdInitial = order.InterCompanyId,
        //                //    InterCompanyIdFinal = order.InterCompanyId,
        //                //    IsAccepted = false,
        //                //    IsDeleted = false,
        //                //    ModifiedAt = DateTime.Now,
        //                //    ModifiedBy = order.UserId,
        //                //    PartnerIdInitial = order.PartnerId,
        //                //    PartnerIdFinal = order.PartnerId,
        //                //    ProjectIdInitial = order.ProjectId,
        //                //    ProjectIdFinal = order.ProjectId,
        //                //    QuantityIni = order.Quantity,
        //                //    QuantityFin = order.QuantityRem,
        //                //    SubTypeIdInitial = order.SubTypeId,
        //                //    SubTypeIdFinal = order.SubTypeId,
        //                //    Validated = true,
        //                //    ValueFin1 = order.ValueFin,
        //                //    ValueIni1 = order.ValueIni,
        //                //    ValueFin2 = order.ValueFin,
        //                //    ValueIni2 = order.ValueIni,
        //                //    Guid = Guid.NewGuid(),
        //                //    BudgetIdInitial = order.BudgetId,
        //                //    BudgetIdFinal = order.BudgetId,
        //                //    OfferIdInitial = order.OfferId,
        //                //    OfferIdFinal = order.OfferId,
        //                //    UomId = order.UomId
        //                //};

        //                //_context.Add(orderOp);


        //                //budgetOp = new Model.BudgetOp()
        //                //{
        //                //    AccMonthId = order.Budget.AccMonthId,
        //                //    AccSystemId = null,
        //                //    
        //                //    
        //                //    AdministrationIdInitial = order.Budget.AdministrationId,
        //                //    AdministrationIdFinal = order.Budget.AdministrationId,
        //                //    BudgetId = order.Budget.Id,
        //                //    BudgetManagerIdInitial = null,
        //                //    BudgetManagerIdFinal = null,
        //                //    BudgetStateId = order.Budget.AppStateId,
        //                //    CompanyIdInitial = order.Budget.CompanyId,
        //                //    CompanyIdFinal = order.Budget.CompanyId,
        //                //    CostCenterIdInitial = order.Budget.CostCenterId,
        //                //    CostCenterIdFinal = order.Budget.CostCenterId,
        //                //    CreatedAt = DateTime.Now,
        //                //    CreatedBy = order.Budget.UserId,
        //                //    Document = document,
        //                //    DstConfAt = DateTime.Now,
        //                //    DstConfBy = order.Budget.UserId,
        //                //    EmployeeIdInitial = order.Budget.EmployeeId,
        //                //    EmployeeIdFinal = order.Budget.EmployeeId,
        //                //    InfoIni = order.Budget.Info,
        //                //    InfoFin = order.Budget.Info,
        //                //    InterCompanyIdInitial = order.Budget.InterCompanyId,
        //                //    InterCompanyIdFinal = order.Budget.InterCompanyId,
        //                //    IsAccepted = false,
        //                //    IsDeleted = false,
        //                //    ModifiedAt = DateTime.Now,
        //                //    ModifiedBy = order.Budget.UserId,
        //                //    PartnerIdInitial = order.Budget.PartnerId,
        //                //    PartnerIdFinal = order.Budget.PartnerId,
        //                //    ProjectIdInitial = order.Budget.ProjectId,
        //                //    ProjectIdFinal = order.Budget.ProjectId,
        //                //    QuantityIni = order.Budget.Quantity,
        //                //    QuantityFin = order.Budget.QuantityRem,
        //                //    SubTypeIdInitial = order.Budget.SubTypeId,
        //                //    SubTypeIdFinal = order.Budget.SubTypeId,
        //                //    Validated = true,
        //                //    ValueFin1 = order.Budget.ValueFin,
        //                //    ValueIni1 = order.Budget.ValueIni,
        //                //    ValueFin2 = order.Budget.ValueFin,
        //                //    ValueIni2 = order.Budget.ValueIni,
        //                //    Guid = Guid.NewGuid()
        //                //};

        //                // _context.Add(budgetOp);


        //                //offerOp = new Model.OfferOp()
        //                //{
        //                //    AccMonthId = order.Offer.AccMonthId,
        //                //    AccSystemId = null,
        //                //    AccountIdInitial = order.Offer.AccountId,
        //                //    AccountIdFinal = order.Offer.AccountId,
        //                //    AdministrationIdInitial = order.Offer.AdministrationId,
        //                //    AdministrationIdFinal = order.Offer.AdministrationId,
        //                //    OfferId = order.Offer.Id,
        //                //    BudgetManagerIdInitial = null,
        //                //    BudgetManagerIdFinal = null,
        //                //    BudgetStateId = 1,
        //                //    CompanyIdInitial = order.Offer.CompanyId,
        //                //    CompanyIdFinal = order.Offer.CompanyId,
        //                //    CostCenterIdInitial = order.Offer.CostCenterId,
        //                //    CostCenterIdFinal = order.Offer.CostCenterId,
        //                //    CreatedAt = DateTime.Now,
        //                //    CreatedBy = order.Offer.UserId,
        //                //    Document = document,
        //                //    DstConfAt = DateTime.Now,
        //                //    DstConfBy = order.Offer.UserId,
        //                //    EmployeeIdInitial = order.Offer.EmployeeId,
        //                //    EmployeeIdFinal = order.Offer.EmployeeId,
        //                //    InfoIni = order.Offer.Info,
        //                //    InfoFin = order.Offer.Info,
        //                //    InterCompanyIdInitial = order.Offer.InterCompanyId,
        //                //    InterCompanyIdFinal = order.Offer.InterCompanyId,
        //                //    IsAccepted = false,
        //                //    IsDeleted = false,
        //                //    ModifiedAt = DateTime.Now,
        //                //    ModifiedBy = order.Offer.UserId,
        //                //    PartnerIdInitial = order.Offer.PartnerId,
        //                //    PartnerIdFinal = order.Offer.PartnerId,
        //                //    ProjectIdInitial = order.Offer.ProjectId,
        //                //    ProjectIdFinal = order.Offer.ProjectId,
        //                //    QuantityIni = order.Offer.Quantity,
        //                //    QuantityFin = order.Offer.QuantityRem,
        //                //    SubTypeIdInitial = order.Offer.SubTypeId,
        //                //    SubTypeIdFinal = order.Offer.SubTypeId,
        //                //    Validated = true,
        //                //    ValueFin1 = order.Offer.ValueFin,
        //                //    ValueIni1 = order.Offer.ValueIni,
        //                //    ValueFin2 = order.Offer.ValueFin,
        //                //    ValueIni2 = order.Offer.ValueIni,
        //                //    Guid = Guid.NewGuid()
        //                //};

        //                //_context.Add(offerOp);

        //                var lastInventoryDoc = "";
        //                // var lastInventoryDate = inventory.End.Value.ToString("yyyyMMdd");
        //                var lastInventoryDate = DateTime.Now.ToString("yyyyMMdd");
        //                var committee = _context.Committees.AsNoTracking().Where(a => a.IsDeleted == false && a.CostCenterId == assetDto.CostCenterId).FirstOrDefault();

        //                if(committee != null)
        //	{
        //                    lastInventoryDoc = committee.Document1;
        //                }

        //                var names = SplitToLines(material.Name, 50);
        //                var countNames = names.Count();

        //                //asset.Name1 = countNames > 0 ? names.ElementAt(0) : "";
        //                //asset.Name2 = countNames > 1 ? names.ElementAt(1) : "";
        //                //asset.Name3 = countNames > 2 ? names.ElementAt(2) : "";
        //                //asset.LastInventoryDate = lastInventoryDate;
        //                //asset.LastInventoryDoc = lastInventoryDoc;
        //                //asset.PlateNo = assetDto.PlateNo != null && assetDto.PlateNo != "" ? assetDto.PlateNo : "";
        //                //asset.InConservation = assetDto.InConservation;
        //                //asset.NotSync = true;

        //                sap.Add(new Dto.CreateAssetSAP()
        //                {
        //                    XSUBNO = "",
        //                    COMPANYCODE = costCenter.Company.Code,
        //		ASSET = "",
        //		SUBNUMBER = "",
        //		ASSETCLASS = accountancy.ExpAccount.Name,
        //		POSTCAP = "",
        //		DESCRIPT = countNames > 0 ? names.ElementAt(0) : "",
        //		DESCRIPT2 = countNames > 1 ? names.ElementAt(1) : "",
        //		INVENT_NO = asset.InvNo,
        //		SERIAL_NO = assetDto.SerialNumber == null || assetDto.SerialNumber == "" ? "" : assetDto.SerialNumber,
        //		QUANTITY = 1,
        //		BASE_UOM = "ST",
        //		LAST_INVENTORY_DATE = lastInventoryDate,
        //		LAST_INVENTORY_DOCNO = lastInventoryDoc,
        //		//CAP_DATE = assetDto.CapitalizationDate != null ? assetDto.CapitalizationDate.ToString("yyyyMMdd") : "00000000",
        //                    CAP_DATE = "00000000",
        //                    COSTCENTER = employee != null && employee.CostCenter != null ? employee.CostCenter.Code: costCenter.Code,
        //                    RESP_CCTR = costCenter.Code,
        //		INTERN_ORD = "",
        //		PLANT = "RO02",
        //		LOCATION = "",
        //		ROOM = "",
        //		PERSON_NO = employee.InternalCode,
        //		PLATE_NO = assetDto.PlateNo != null && assetDto.PlateNo != "" ? assetDto.PlateNo : "",
        //		ZZCLAS = accountancy.AssetCategory.Code,
        //		IN_CONSERVATION = assetDto.InConservation ? "X": "",
        //		PROP_IND = "1",
        //		OPTIMA_ASSET_NO = asset.InvNo,
        //		OPTIMA_ASSET_PARENT_NO = "",
        //		TESTRUN = "",
        //		VENDOR_NO = partner.RegistryNumber,
        //                    //VENDOR_NO = ""
        //                });
        //            }
        //        }

        //        _context.SaveChanges();

        //        var count = _context.Set<Model.RecordCount>().FromSql("UpdateAllAssets").ToList();

        //        createAsset = new List<Dto.CreateAssetSAP>();

        //        for (int i = 0; i < sap.Count; i++)
        //        {
        //            createAsset.Add(sap[i]);
        //        }

        //        return asset.Id;
        //    }
        public async Task<Model.CreateAssetSAPResult> CreateAssetSAP(AddAsset assetDto)
        {
            Model.Asset asset = null;
            Model.Asset assetEntity = null;
            Model.AssetDep assetDep = null;
            Model.AssetDepMD assetDepMD = null;
            Model.AssetInv assetInv = null;
            Model.AssetAC assetAC = null;
            Model.AssetAdmMD assetAdmMD = null;
            // Model.AccMonth accMonth = null;
            Model.Document document = null;
            Model.AssetOp assetOp = null;
            Model.OrderOp orderOp = null;
            Model.OfferOp offerOp = null;
            Model.BudgetOp budgetOp = null;
            Model.Inventory inventory = null;
            Model.InventoryAsset inventoryAsset = null;
            DateTime? documentDate = null;
            Model.Administration administration = null;
            Model.AccSystem accSystem = null;
            Model.AssetClass assetClass = null;
            // Model.AssetCategory assetCategory = null;
            Model.DictionaryItem dictionaryItem = null;
            //Model.SubCategory subCategory = null;
            Model.AssetClassType assetClassType = null;
            Model.Partner partner = null;
            Model.CostCenter costCenter = null;
            // Model.Company company = null;
            // Model.Room room = null;
            // Model.AssetState assetState = null;
            // Model.AssetType assetType = null;
            Model.InvState invState = null;
            Model.Employee employee = null;
            Model.Material material = null;
            Model.DocumentType documentType = null;
            Model.Order order = null;
            Model.OfferMaterial offerMaterial = null;
            //Model.OrderMaterial orderMaterial = null;
            //Model.RequestBudgetForecast requestBudgetForecast = null;
            //Model.RequestBudgetForecastMaterial requestBudgetForecastMaterial = null;
            Model.RequestBFMaterialCostCenter requestBFMaterialCostCenter = null;
            List<Model.RequestBudgetForecastMaterial> requestBudgetForecastMaterials = null;
            List<Model.RequestBFMaterialCostCenter> requestBFMaterialCostCenters = null;
            Model.CreateAssetSAP createAssetSAP = null;
            Model.BudgetBaseAsset budgetBaseAsset = null;
            Model.EntityType entityType = null;

            if (assetDto.Id > 0)
            {
                asset = await _context.Set<Model.Asset>().Where(a => a.Id == assetDto.Id).SingleAsync();
                document = await _context.Set<Model.Document>().Where(a => a.Id == asset.DocumentId).SingleAsync();

                document.DocNo1 = assetDto.DocNo1;
                asset.SerialNumber = assetDto.SerialNumber;

                _context.Update(document);
                _context.SaveChanges();

                return new Model.CreateAssetSAPResult { Success = true, ErrorMessage = "OK" };
            }
            else
            {
                string accSystemDefault = "RON";
                string assetClassTypeDefault = "-";

                documentType = await _context.Set<Model.DocumentType>().AsNoTracking().Where(d => d.Code == "CREATEASSET").SingleAsync();
                inventory = await _context.Set<Model.Inventory>().AsNoTracking().Where(i => i.Active == true).SingleAsync();
                invState = await _context.Set<Model.InvState>().Where(a => a.Id == 1).SingleAsync();
                int assetStateId = await _context.Set<Model.AssetState>().AsNoTracking().Where(a => a.Code == "RECEPTION").Select(a => a.Id).SingleAsync();

                assetClassType = await _context.Set<Model.AssetClassType>().Where(a => (a.Code == assetClassTypeDefault)).SingleAsync();
                assetClass = await _context.Set<Model.AssetClass>().Where(a => (a.Id == 22)).SingleAsync();
                accSystem = await _context.Set<Model.AccSystem>().Where(a => (a.Code == accSystemDefault)).SingleAsync();

                //int quantity = 0;


                foreach (var item in assetDto.RequestBudgetForecasts)
                {
                    requestBudgetForecastMaterials = await _context.Set<Model.RequestBudgetForecastMaterial>().Where(r => r.RequestBudgetForecastId == item && r.IsDeleted == false && r.QuantityRem > 0).ToListAsync();

                    for (int m = 0; m < requestBudgetForecastMaterials.Count; m++)
                    {
                        requestBFMaterialCostCenters = await _context.Set<Model.RequestBFMaterialCostCenter>().Where(r => r.RequestBudgetForecastMaterialId == requestBudgetForecastMaterials[m].Id && r.QuantityRem > 0 && r.IsDeleted == false).ToListAsync();

                        for (int c = 0; c < requestBFMaterialCostCenters.Count; c++)
                        {
                            assetEntity = null;
                            requestBFMaterialCostCenter = await _context.Set<Model.RequestBFMaterialCostCenter>()
                                    .Include(r => r.RequestBudgetForecastMaterial)
                                    .ThenInclude(r => r.RequestBudgetForecast)
                                    .ThenInclude(r => r.BudgetForecast)
                                    .ThenInclude(r => r.BudgetBase)
                                    .Include(r => r.RequestBudgetForecastMaterial).ThenInclude(r => r.Material)
                                    .Where(r => r.Id == requestBFMaterialCostCenters[c].Id).SingleAsync();

                            order = await _context.Set<Model.Order>()
                                        .Include(r => r.Rate)
                                        .Include(b => b.OrderType)
                                        .Include(b => b.BudgetBase)
                                        .Include(b => b.BudgetForecast.BudgetBase)
                                        .Include(b => b.Offer)
                                        .Include(c => c.Contract).ThenInclude(c => c.ContractAmount)
                                        .Where(c => c.Id == requestBFMaterialCostCenter.OrderId).SingleAsync();

                            if (!requestBFMaterialCostCenter.Multiple)
                            {
                                entityType = await _context.Set<Model.EntityType>().Where(c => c.UploadFolder == "NEWASSET").SingleAsync();

                                if (requestBFMaterialCostCenters[c].RequestBudgetForecastMaterial.ParentAsset != null && requestBFMaterialCostCenters[c].RequestBudgetForecastMaterial.ParentAsset != "")
                                {
                                    assetEntity = await _context.Set<Model.Asset>().AsNoTracking().Where(a => (a.InvNo == requestBFMaterialCostCenters[c].RequestBudgetForecastMaterial.ParentAsset && a.SubNo == "0000" && a.IsDeleted == false)).FirstOrDefaultAsync();
                                }

                                order = await _context.Set<Model.Order>()
                                         .Include(r => r.Rate)
                                         .Include(b => b.OrderType)
                                         .Include(b => b.BudgetBase)
                                         .Include(b => b.BudgetForecast.BudgetBase)
                                         .Include(b => b.Offer)
                                         .Include(c => c.Contract).ThenInclude(c => c.ContractAmount)
                                         .Where(c => c.Id == requestBFMaterialCostCenter.OrderId).SingleAsync();

                                // order.QuantityRem = order.QuantityRem > 0 ? order.QuantityRem - 1 : order.Quantity;

                                asset = new Model.Asset()
                                {
                                    Document = document
                                };

                                _context.Add(asset);

                                costCenter = await _context.Set<Model.CostCenter>()
                                    .Include(c => c.Room)
                                    .Include(c => c.AdmCenter)
                                    .Include(c => c.Region)
                                    .Include(c => c.Company)
                                    .Include(a => a.Administration)
                                    .Include(d => d.Division)
                                    .ThenInclude(d => d.Department)
                                    .Where(a => a.Id == requestBFMaterialCostCenter.CostCenterId).SingleAsync();

                                //subCategory = await _context.Set<Model.SubCategory>()
                                //    .Include(a => a.Category)
                                //    .Where(a => a.Id == requestBFMaterialCostCenter.RequestBudgetForecastMaterial.Material.SubCategoryId).SingleAsync();


                                //dictionaryItem = await _context.Set<Model.DictionaryItem>().Where(a => a.Name == subCategory.Name).SingleOrDefaultAsync();

                                //if (dictionaryItem == null)
                                //{
                                //    dictionaryItem = new Model.DictionaryItem()
                                //    {
                                //        Code = "NEW",
                                //        Name = subCategory.Name,
                                //        IsDeleted = false,
                                //        AssetCategoryId = subCategory.Category.InterCompany.AssetCategoryId,
                                //        DictionaryTypeId = 1
                                //    };

                                //    _context.Add(dictionaryItem);
                                //}

                                employee = await _context.Set<Model.Employee>().Include(c => c.CostCenter).Where(a => a.Id == requestBFMaterialCostCenter.EmployeeId).SingleOrDefaultAsync();
                                material = await _context.Set<Model.Material>().Include(a => a.SubType).Where(a => a.Id == requestBFMaterialCostCenter.RequestBudgetForecastMaterial.MaterialId).SingleAsync();
                                //orderMaterial = await _context.Set<Model.OrderMaterial>().Where(a => a.Id == assetDto.OrderMaterialId).SingleAsync();
                                offerMaterial = await _context.Set<Model.OfferMaterial>().Where(a => a.Id == requestBFMaterialCostCenter.RequestBudgetForecastMaterial.OfferMaterialId).SingleAsync();

                                if (offerMaterial != null)
                                {

                                    // offerMaterial.AppStateId = offerMaterial.OrdersQuantity == offerMaterial.ReceptionsQuantity ? 7 : 6;
                                    //offerMaterial.ReceptionsQuantity += 1;
                                    offerMaterial.ReceptionsPrice = requestBFMaterialCostCenter.PriceRon;
                                    //offerMaterial.ReceptionsValue = offerMaterial.Price + offerMaterial.ReceptionsValue;

                                    //if (offerMaterial.Quantity == offerMaterial.ReceptionsQuantity)
                                    //{
                                    //	offerMaterial.AppStateId = 17;
                                    //}

                                    _context.Update(offerMaterial);
                                }

                                //if (orderMaterial != null)
                                //{

                                //    //order.ValueFin = order.ValueFin - offerMaterial.Price;
                                //    //orderMaterial.AppStateId = orderMaterial.OrdersQuantity == orderMaterial.ReceptionsQuantity ? 7 : 6;
                                //    //orderMaterial.ReceptionsQuantity += 1;
                                //    orderMaterial.ReceptionsPrice = assetDto.ReceptionPrice;
                                //    //orderMaterial.ReceptionsValue = orderMaterial.Price + orderMaterial.ReceptionsValue;

                                //    //if (orderMaterial.Quantity == orderMaterial.ReceptionsQuantity)
                                //    //{
                                //    //	orderMaterial.AppStateId = 17;
                                //    //}

                                //    _context.Update(orderMaterial);
                                //}

                                //if (requestBFMaterialCostCenter.ValueRon > 2500)
                                //{
                                //    //accountancy = _context.Set<Model.Accountancy>()

                                //    //  .Include(a => a.Account)
                                //    //  
                                //    //  .Include(a => a.AssetCategory)
                                //    //  .Include(a => a.AssetType)
                                //    //  .Where(a => a.InterCompanyId == subCategory.Category.InterCompanyId && a.Value > 2500 && a.IsDeleted == false).Single();

                                //    accountancy = await _context.Set<Model.Accountancy>()

                                //      .Include(a => a.Account)
                                //      
                                //      .Include(a => a.AssetCategory)
                                //      .Include(a => a.AssetType)
                                //      .Where(a => a.SubCategoryId == requestBFMaterialCostCenter.RequestBudgetForecastMaterial.Material.SubCategoryId && a.Value > 2500 && a.IsDeleted == false).SingleOrDefaultAsync();

                                //    //                           if(accountancy == null)
                                //    //{
                                //    //                               accountancyDif = await _context.Set<Model.Accountancy>()

                                //    //                                 .Include(a => a.Account)
                                //    //                                 
                                //    //                                 .Include(a => a.AssetCategory)
                                //    //                                 .Include(a => a.AssetType)
                                //    //                                 .Where(a => a.SubCategoryId == assetDto.SubCategoryId && a.Value == 2500 && a.IsDeleted == false).SingleOrDefaultAsync();

                                //    //                               if(accountancyDif != null)
                                //    //	{
                                //    //                                   accountancy = new Model.Accountancy ()
                                //    //		{
                                //    //                                       AccountId = accountancyDiff.AccountId,
                                //    //                                       AssetCategoryId = accountancyDiff
                                //    //		}
                                //    //	}
                                //    //                           }

                                //    if (accountancy == null) return new Model.CreateAssetSAPResult { Success = false, ErrorMessage = $"Lipsa mapare cont GL pentru subCategoria: {subCategory.Code + " - " + subCategory.Name}!" };
                                //}
                                //else
                                //{
                                //    //accountancy = _context.Set<Model.Accountancy>()

                                //    //  .Include(a => a.Account)
                                //    //  
                                //    //  .Include(a => a.AssetCategory)
                                //    //  .Include(a => a.AssetType)
                                //    //  .Where(a => a.InterCompanyId == subCategory.Category.InterCompanyId && a.Value == 2500 && a.IsDeleted == false).Single();

                                //    accountancy = await _context.Set<Model.Accountancy>()

                                //     .Include(a => a.Account)
                                //     
                                //     .Include(a => a.AssetCategory)
                                //     .Include(a => a.AssetType)
                                //     .Where(a => a.SubCategoryId == requestBFMaterialCostCenter.RequestBudgetForecastMaterial.Material.SubCategoryId && a.Value == 2500 && a.IsDeleted == false).SingleOrDefaultAsync();

                                //    if (accountancy == null) return new Model.CreateAssetSAPResult { Success = false, ErrorMessage = $"Lipsa mapare cont GL pentru subCategoria: {subCategory.Code + " - " + subCategory.Name}!" };
                                //}


                                //if (accountancy.ExpAccount != null && accountancy.ExpAccount.RequireSN)
                                //{
                                //    if (assetDto.SerialNumber == null || (assetDto.SerialNumber != null && assetDto.SerialNumber.Trim().Length < 4))
                                //    {
                                //        return new Model.CreateAssetSAPResult { Success = false, ErrorMessage = $"Seria pentru : {accountancy.ExpAccount.Code + " este obligatorie!"}!" };
                                //    }
                                //}
                                //else
                                //{
                                //    assetDto.SerialNumber = string.Empty;
                                //}

                                document = new Model.Document
                                {
                                    Approved = true,
                                    DocumentTypeId = documentType != null ? documentType.Id : 1,
                                    DocNo1 = string.Empty,
                                    DocNo2 = string.Empty,
                                    DocumentDate = DateTime.Now,
                                    CreationDate = DateTime.Now,
                                    CostCenterId = costCenter != null ? costCenter.Id : (int?)null,
                                    RegisterDate = DateTime.Now,
                                    Details = string.Empty,
                                    ParentDocumentId = inventory.DocumentId
                                };


                                partner = await _context.Set<Model.Partner>().Where(a => a.Id == order.Offer.PartnerId).SingleOrDefaultAsync();

                                document.PartnerId = partner.Id;

                                _context.Add(document);

                                int? value = null;

                                asset.InvNo = costCenter.Company.Code + "OPT0000000000" + entityType.Name;
                                asset.Name = material.Name;
                                asset.PurchaseDate = DateTime.Now;
                                asset.SerialNumber = "";// assetDto.SerialNumber;
                                asset.ERPCode = costCenter.Company.Code + "OPT0000000000" + entityType.Name;
                                asset.Document = document;
                                asset.Validated = true;
                                asset.SAPCode = costCenter.Company.Code + "OPT0000000000" + entityType.Name;
                                asset.AssetStateId = assetStateId;
                                ////asset.AssetTypeId = accountancy.AssetTypeId;
                                asset.CostCenterId = costCenter.Id;
                                asset.DepartmentId = costCenter.Division.DepartmentId;
                                asset.DivisionId = costCenter.DivisionId;

                                ////asset.AssetCategoryId = accountancy.AssetCategoryId;
                                asset.Employee = employee;
                                asset.RoomId = costCenter.RoomId;
                                //asset.ValueInv = orderMaterial.Price;
                                //asset.ValueInvRon = orderMaterial.Price * order.Rate.Value;
                                //asset.ValueRem = orderMaterial.Price;
                                //asset.ValueRemRon = orderMaterial.Price * order.Rate.Value;

                                asset.ValueInv = requestBFMaterialCostCenter.Price;
                                asset.ValueInvRon = requestBFMaterialCostCenter.PriceRon;
                                asset.ValueRem = requestBFMaterialCostCenter.Price;
                                asset.ValueRemRon = requestBFMaterialCostCenter.PriceRon;

                                asset.InvStateId = invState.Id;
                                asset.Quantity = requestBFMaterialCostCenter.QuantityRem;
                                asset.Custody = false;
                                //asset.UomId = assetDto.UomId;
                                asset.Company = costCenter.Company;
                                asset.Validated = true;
                                
                                asset.BudgetManagerId = inventory.BudgetManagerId;
                                //asset.AssetNatureId = assetDto.AssetNatureId;
                                asset.SubTypeId = material.SubTypeId;
                                //asset.InsuranceCategoryId = assetDto.InsuranceCategoryId;
                                //asset.BrandId = assetDto.BrandId;
                                //asset.ModelId = assetDto.ModelId;
                                //asset.InterCompanyId = assetDto.InterCompanyId;
                                asset.ProjectId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.RequestBudgetForecast.BudgetForecast.BudgetBase.ProjectId;
                                //asset.InvoiceDate = assetDto.InvoiceDate;
                                //asset.PODate = assetDto.PODate;
                                //asset.ReceptionDate = assetDto.ReceptionDate;
                                //asset.RemovalDate = assetDto.RemovalDate;
                                asset.IsTemp = false;
                                //asset.DimensionId = assetDto.DimensionId;
                                asset.DictionaryItem = dictionaryItem;
                                asset.IsAccepted = true;
                                asset.IsReconcile = false;
                                asset.OrderId = order.Id;
                                asset.BudgetId = order.BudgetId;
                                asset.BudgetBaseId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.RequestBudgetForecast.BudgetForecast.BudgetBaseId;
                                //asset.DivisionId = assetDto.DivisionId;
                                //asset.ProjectTypeId = assetDto.ProjectTypeId;
                                asset.AgreementNo = string.Empty;// assetDto.PlateNo;
                               // asset.Name = subCategory.Name;
                                asset.MaterialId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.MaterialId;
                                asset.AdministrationId = costCenter.AdministrationId;
                                asset.DepartmentId = costCenter.Division.DepartmentId;
                                //asset.AccountId = accountancy.AccountId;
                                //asset.ExpAccountId = accountancy.ExpAccountId;
                                asset.AllowLabel = true;
                                asset.MaterialId = material.Id;
                                asset.DivisionId = costCenter.DivisionId;
                                //asset.ProjectTypeId = order.Budget.ProjectTypeId;
                                asset.ProjectTypeId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.RequestBudgetForecast.BudgetForecast.BudgetBase.ProjectTypeId;
                                asset.RateId = order.Contract != null ? order.Contract.ContractAmount.RateId : null;
                                asset.ContractId = order.ContractId;
                                // asset.UomId = order.Contract.ContractAmount.UomId;
                                asset.UomId = order.UomId;
                                //asset.NetAmount = orderMaterial.Price;
                                //asset.NetAmountRon = orderMaterial.Price * order.Rate.Value;
                                //asset.OrderMaterialId = assetDto.OrderMaterialId;
                                //asset.OfferMaterialId = orderMaterial.OfferMaterialId;

                                asset.NetAmount = requestBFMaterialCostCenter.Price;
                                asset.NetAmountRon = requestBFMaterialCostCenter.PriceRon;
                                asset.OrderMaterialId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.OrderMaterialId;
                                asset.OfferMaterialId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.OfferMaterialId;
                                asset.BudgetForecastId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.RequestBudgetForecast.BudgetForecastId;
                                asset.ReqBFMaterialId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.Id;
                                asset.ReqBFMCostCenterId = requestBFMaterialCostCenter.Id;
                                asset.ReceptionPrice = requestBFMaterialCostCenter.PriceRon;
                                asset.CostCenterEmpId = employee != null && employee.CostCenter != null ? employee.CostCenter.Id : requestBFMaterialCostCenter.CostCenterId;
                                asset.ParentAssetId = assetEntity != null ? assetEntity.Id : (int?)null;
                                //asset.SubCategoryId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.Material.SubCategoryId;
                                asset.RequestId = offerMaterial.RequestId;
                                asset.Wip = order.OrderType.Code == "WIP" ? true : false;


                                assetAC = new Model.AssetAC
                                {
                                    AssetClassTypeId = assetClassType.Id,
                                    Asset = asset,
                                    AssetClassId = assetClass.Id,
                                    AssetClassIdIn = assetClass.Id
                                };


                                _context.Set<Model.AssetAC>().Add(assetAC);

                                var monthSum = 0;


                                assetDep = new Model.AssetDep
                                {
                                    AccSystem = accSystem,
                                    Asset = asset,
                                    DepPeriod = (int)monthSum,
                                    DepPeriodIn = (int)monthSum,
                                    DepPeriodMonth = (int)monthSum,
                                    DepPeriodMonthIn = 0,
                                    DepPeriodRem = (int)monthSum,
                                    DepPeriodRemIn = (int)monthSum,
                                    UsageStartDate = documentDate,
                                    ValueDep = requestBFMaterialCostCenter.Price,
                                    ValueDepIn = requestBFMaterialCostCenter.Price,
                                    ValueDepPU = requestBFMaterialCostCenter.Price,
                                    ValueDepPUIn = requestBFMaterialCostCenter.Price,
                                    ValueDepYTD = requestBFMaterialCostCenter.Price,
                                    ValueDepYTDIn = requestBFMaterialCostCenter.Price,
                                    ValueInv = requestBFMaterialCostCenter.Price,
                                    ValueInvIn = requestBFMaterialCostCenter.Price,
                                    ValueRem = requestBFMaterialCostCenter.Price,
                                    ValueRemIn = requestBFMaterialCostCenter.Price
                                };

                                _context.Set<Model.AssetDep>().Add(assetDep);


                                assetInv = new Model.AssetInv
                                {
                                    Asset = asset,
                                    AllowLabel = true,
                                    Barcode = entityType.Code + entityType.Name,
                                    InvName = asset.Name,
                                    InvNoOld = string.Empty,
                                    InvStateId = invState.Id
                                };

                                _context.Set<Model.AssetInv>().Add(assetInv);

                                assetDepMD = new Model.AssetDepMD
                                {
                                    AccMonthId = inventory.AccMonthId.Value,
                                    AccSystem = accSystem,
                                    Asset = asset,
                                    UsefulLife = (int)monthSum,
                                    TotLifeInpPeriods = (int)monthSum,
                                    RemLifeInPeriods = 0,
                                    AccumulDep = requestBFMaterialCostCenter.Price,
                                    BkValFYStart = requestBFMaterialCostCenter.Price,
                                    DepForYear = requestBFMaterialCostCenter.Price,
                                    CurrentAPC = requestBFMaterialCostCenter.Price,
                                    PosCap = requestBFMaterialCostCenter.Price
                                };

                                _context.Set<Model.AssetDepMD>().Add(assetDepMD);


                                assetAdmMD = new Model.AssetAdmMD
                                {
                                    AccMonthId = inventory.AccMonthId.Value,
                                    Asset = asset,
                                    Administration = administration,
                                    DepartmentId = null
                                };

                                assetAdmMD.AssetStateId = assetStateId;
                                //assetAdmMD.AssetTypeId = accountancy.AssetTypeId;
                                assetAdmMD.CostCenterId = costCenter.Id;

                                costCenter = _context.Set<Model.CostCenter>().Include(c => c.Division).Where(c => c.Id == asset.CostCenterId).SingleOrDefault();

                                assetAdmMD.DepartmentId = costCenter.Division.DepartmentId;
                                assetAdmMD.DivisionId = costCenter.DivisionId;

                                assetAdmMD.EmployeeId = employee != null ? employee.Id : (int?)null;
                                assetAdmMD.RoomId = costCenter.RoomId;
                                //assetAdmMD.AssetCategoryId = accountancy.AssetCategoryId;
                                assetAdmMD.AssetClass = assetClass;
                                

                                //assetAdmMD.AssetNatureId = assetDto.AssetNatureId;
                                assetAdmMD.BudgetManagerId = inventory.BudgetManagerId;
                                assetAdmMD.SubTypeId = material.SubTypeId;
                                //assetAdmMD.InsuranceCategoryId = assetDto.InsuranceCategoryId;
                                //assetAdmMD.ModelId = assetDto.ModelId;
                                //assetAdmMD.BrandId = assetDto.BrandId;
                                //
                                assetAdmMD.ProjectId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.RequestBudgetForecast.BudgetForecast.BudgetBase.ProjectId;

                                assetAdmMD.AdmCenterId = costCenter.AdmCenterId;
                                assetAdmMD.RegionId = costCenter.RegionId;
                                assetAdmMD.AdministrationId = costCenter.AdministrationId;
                                assetAdmMD.DepartmentId = costCenter.Division.DepartmentId;
                                //assetAdmMD.AccountId = accountancy.AccountId;
                                //assetAdmMD.AccountId = accountancy.AccountId;
                                assetAdmMD.DivisionId = costCenter.DivisionId;
                                // assetAdmMD.ProjectTypeId = order.Budget.ProjectTypeId;
                                assetAdmMD.ProjectTypeId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.RequestBudgetForecast.BudgetForecast.BudgetBase.ProjectTypeId;

                                _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);

                                entityType.Name = StringsADD(entityType.Name, "1");

                                _context.Update(entityType);

                                if (inventory != null)
                                {
                                    inventoryAsset = new Model.InventoryAsset
                                    {
                                        QInitial = 1,
                                        QFinal = 0,
                                        InventoryId = inventory.Id,
                                        Asset = asset,
                                        EmployeeIdInitial = employee != null ? employee.Id : (int?)null,
                                        RoomIdInitial = costCenter.RoomId,
                                        SerialNumber = "",// assetDto.SerialNumber,
                                        StateIdInitial = invState.Id,
                                        CostCenterInitial = costCenter,
                                        AdministrationIdInitial = costCenter.AdministrationId,
                                        IsTemp = false
                                    };

                                    _context.Add(inventoryAsset);

                                    assetOp = new Model.AssetOp()
                                    {
                                        Asset = asset,
                                        Document = document,
                                        RoomIdInitial = costCenter.RoomId,
                                        RoomIdFinal = costCenter.RoomId,
                                        EmployeeIdInitial = employee != null ? employee.Id : (int?)null,
                                        EmployeeIdFinal = employee != null ? employee.Id : (int?)null,
                                        //AssetCategoryIdInitial = accountancy.AssetCategoryId,
                                        //AssetCategoryIdFinal = accountancy.AssetCategoryId,
                                        InvStateIdInitial = invState.Id,
                                        InvStateIdFinal = invState.Id,
                                        AdministrationInitial = administration,
                                        AdministrationFinal = administration,
                                        AccSystem = accSystem,
                                        DocumentId = document.Id
                                    };

                                    assetOp.AssetStateIdInitial = assetStateId;
                                    assetOp.AssetStateIdFinal = assetStateId;
                                    assetOp.CostCenterInitial = costCenter;
                                    assetOp.CostCenterFinal = costCenter;
                                    assetOp.DepartmentIdInitial = null;
                                    assetOp.DepartmentIdFinal = null;
                                    assetOp.InvName = material.Name;
                                    ////assetOp.AssetTypeIdInitial = accountancy.AssetTypeId;  
                                    //assetOp.AssetTypeIdFinal = accountancy.AssetTypeId;
                                    assetOp.AdministrationIdInitial = costCenter.AdministrationId;
                                    assetOp.AdministrationIdFinal = costCenter.AdministrationId;
                                    _context.Add(assetOp);


                                    //orderOp = new Model.OrderOp()
                                    //{
                                    //    AccMonthId = inventory.AccMonthId,
                                    //    AccSystemId = null,
                                    //    
                                    //    
                                    //    AdministrationIdInitial = order.AdministrationId,
                                    //    AdministrationIdFinal = order.AdministrationId,
                                    //    OrderId = order.Id,
                                    //    BudgetManagerIdInitial = null,
                                    //    BudgetManagerIdFinal = null,
                                    //    BudgetStateId = order.AppStateId,
                                    //    CompanyIdInitial = order.CompanyId,
                                    //    CompanyIdFinal = order.CompanyId,
                                    //    CostCenterIdInitial = order.CostCenterId,
                                    //    CostCenterIdFinal = order.CostCenterId,
                                    //    CreatedAt = DateTime.Now,
                                    //    CreatedBy = order.UserId,
                                    //    Document = document,
                                    //    DstConfAt = DateTime.Now,
                                    //    DstConfBy = order.UserId,
                                    //    EmployeeIdInitial = order.EmployeeId,
                                    //    EmployeeIdFinal = order.EmployeeId,
                                    //    InfoIni = order.Info,
                                    //    InfoFin = order.Info,
                                    //    InterCompanyIdInitial = order.InterCompanyId,
                                    //    InterCompanyIdFinal = order.InterCompanyId,
                                    //    IsAccepted = false,
                                    //    IsDeleted = false,
                                    //    ModifiedAt = DateTime.Now,
                                    //    ModifiedBy = order.UserId,
                                    //    PartnerIdInitial = order.PartnerId,
                                    //    PartnerIdFinal = order.PartnerId,
                                    //    ProjectIdInitial = order.ProjectId,
                                    //    ProjectIdFinal = order.ProjectId,
                                    //    QuantityIni = order.Quantity,
                                    //    QuantityFin = order.QuantityRem,
                                    //    SubTypeIdInitial = order.SubTypeId,
                                    //    SubTypeIdFinal = order.SubTypeId,
                                    //    Validated = true,
                                    //    ValueFin1 = order.ValueFin,
                                    //    ValueIni1 = order.ValueIni,
                                    //    ValueFin2 = order.ValueFin,
                                    //    ValueIni2 = order.ValueIni,
                                    //    Guid = Guid.NewGuid(),
                                    //    BudgetIdInitial = order.BudgetId,
                                    //    BudgetIdFinal = order.BudgetId,
                                    //    OfferIdInitial = order.OfferId,
                                    //    OfferIdFinal = order.OfferId,
                                    //    UomId = order.UomId
                                    //};

                                    //_context.Add(orderOp);


                                    //budgetOp = new Model.BudgetOp()
                                    //{
                                    //    AccMonthId = order.Budget.AccMonthId,
                                    //    AccSystemId = null,
                                    //    
                                    //    
                                    //    AdministrationIdInitial = order.Budget.AdministrationId,
                                    //    AdministrationIdFinal = order.Budget.AdministrationId,
                                    //    BudgetId = order.Budget.Id,
                                    //    BudgetManagerIdInitial = null,
                                    //    BudgetManagerIdFinal = null,
                                    //    BudgetStateId = order.Budget.AppStateId,
                                    //    CompanyIdInitial = order.Budget.CompanyId,
                                    //    CompanyIdFinal = order.Budget.CompanyId,
                                    //    CostCenterIdInitial = order.Budget.CostCenterId,
                                    //    CostCenterIdFinal = order.Budget.CostCenterId,
                                    //    CreatedAt = DateTime.Now,
                                    //    CreatedBy = order.Budget.UserId,
                                    //    Document = document,
                                    //    DstConfAt = DateTime.Now,
                                    //    DstConfBy = order.Budget.UserId,
                                    //    EmployeeIdInitial = order.Budget.EmployeeId,
                                    //    EmployeeIdFinal = order.Budget.EmployeeId,
                                    //    InfoIni = order.Budget.Info,
                                    //    InfoFin = order.Budget.Info,
                                    //    InterCompanyIdInitial = order.Budget.InterCompanyId,
                                    //    InterCompanyIdFinal = order.Budget.InterCompanyId,
                                    //    IsAccepted = false,
                                    //    IsDeleted = false,
                                    //    ModifiedAt = DateTime.Now,
                                    //    ModifiedBy = order.Budget.UserId,
                                    //    PartnerIdInitial = order.Budget.PartnerId,
                                    //    PartnerIdFinal = order.Budget.PartnerId,
                                    //    ProjectIdInitial = order.Budget.ProjectId,
                                    //    ProjectIdFinal = order.Budget.ProjectId,
                                    //    QuantityIni = order.Budget.Quantity,
                                    //    QuantityFin = order.Budget.QuantityRem,
                                    //    SubTypeIdInitial = order.Budget.SubTypeId,
                                    //    SubTypeIdFinal = order.Budget.SubTypeId,
                                    //    Validated = true,
                                    //    ValueFin1 = order.Budget.ValueFin,
                                    //    ValueIni1 = order.Budget.ValueIni,
                                    //    ValueFin2 = order.Budget.ValueFin,
                                    //    ValueIni2 = order.Budget.ValueIni,
                                    //    Guid = Guid.NewGuid()
                                    //};

                                    // _context.Add(budgetOp);


                                    //offerOp = new Model.OfferOp()
                                    //{
                                    //    AccMonthId = order.Offer.AccMonthId,
                                    //    AccSystemId = null,
                                    //    AccountIdInitial = order.Offer.AccountId,
                                    //    AccountIdFinal = order.Offer.AccountId,
                                    //    AdministrationIdInitial = order.Offer.AdministrationId,
                                    //    AdministrationIdFinal = order.Offer.AdministrationId,
                                    //    OfferId = order.Offer.Id,
                                    //    BudgetManagerIdInitial = null,
                                    //    BudgetManagerIdFinal = null,
                                    //    BudgetStateId = 1,
                                    //    CompanyIdInitial = order.Offer.CompanyId,
                                    //    CompanyIdFinal = order.Offer.CompanyId,
                                    //    CostCenterIdInitial = order.Offer.CostCenterId,
                                    //    CostCenterIdFinal = order.Offer.CostCenterId,
                                    //    CreatedAt = DateTime.Now,
                                    //    CreatedBy = order.Offer.UserId,
                                    //    Document = document,
                                    //    DstConfAt = DateTime.Now,
                                    //    DstConfBy = order.Offer.UserId,
                                    //    EmployeeIdInitial = order.Offer.EmployeeId,
                                    //    EmployeeIdFinal = order.Offer.EmployeeId,
                                    //    InfoIni = order.Offer.Info,
                                    //    InfoFin = order.Offer.Info,
                                    //    InterCompanyIdInitial = order.Offer.InterCompanyId,
                                    //    InterCompanyIdFinal = order.Offer.InterCompanyId,
                                    //    IsAccepted = false,
                                    //    IsDeleted = false,
                                    //    ModifiedAt = DateTime.Now,
                                    //    ModifiedBy = order.Offer.UserId,
                                    //    PartnerIdInitial = order.Offer.PartnerId,
                                    //    PartnerIdFinal = order.Offer.PartnerId,
                                    //    ProjectIdInitial = order.Offer.ProjectId,
                                    //    ProjectIdFinal = order.Offer.ProjectId,
                                    //    QuantityIni = order.Offer.Quantity,
                                    //    QuantityFin = order.Offer.QuantityRem,
                                    //    SubTypeIdInitial = order.Offer.SubTypeId,
                                    //    SubTypeIdFinal = order.Offer.SubTypeId,
                                    //    Validated = true,
                                    //    ValueFin1 = order.Offer.ValueFin,
                                    //    ValueIni1 = order.Offer.ValueIni,
                                    //    ValueFin2 = order.Offer.ValueFin,
                                    //    ValueIni2 = order.Offer.ValueIni,
                                    //    Guid = Guid.NewGuid()
                                    //};

                                    //_context.Add(offerOp);

                                    // var lastInventoryDoc = "";
                                    // var lastInventoryDate = inventory.End.Value.ToString("yyyyMMdd");
                                    // var lastInventoryDate = DateTime.Now.ToString("yyyyMMdd");
                                    //var committee = _context.Committees.AsNoTracking().Where(a => a.IsDeleted == false && a.CostCenterId == assetDto.CostCenterId).FirstOrDefault();

                                    //if (committee != null)
                                    //{
                                    //    lastInventoryDoc = committee.Document1;
                                    //}

                                    var names = SplitToLines(material.Name, 50);
                                    var countNames = names.Count();

                                    //asset.Name1 = countNames > 0 ? names.ElementAt(0) : "";
                                    //asset.Name2 = countNames > 1 ? names.ElementAt(1) : "";
                                    //asset.Name3 = countNames > 2 ? names.ElementAt(2) : "";
                                    //asset.LastInventoryDate = lastInventoryDate;
                                    //asset.LastInventoryDoc = lastInventoryDoc;
                                    //asset.PlateNo = assetDto.PlateNo != null && assetDto.PlateNo != "" ? assetDto.PlateNo : "";
                                    //asset.InConservation = assetDto.InConservation;
                                    //asset.NotSync = true;

                                    createAssetSAP = new Model.CreateAssetSAP();
#if DEBUG
                                    createAssetSAP.IsDeleted = true;
#endif

                                    createAssetSAP.XSUBNO = assetEntity != null ? "X" : "";
                                    createAssetSAP.COMPANYCODE = costCenter.Company.Code;
                                    createAssetSAP.ASSET = assetEntity != null ? assetEntity.InvNo : "";
                                    createAssetSAP.SUBNUMBER = "";
                                    //createAssetSAP.ASSETCLASS = accountancy.ExpAccount.Name;
                                    createAssetSAP.POSTCAP = "";
                                    createAssetSAP.DESCRIPT = countNames > 0 ? names.ElementAt(0) : "";
                                    createAssetSAP.DESCRIPT2 = countNames > 1 ? names.ElementAt(1) : "";
                                    createAssetSAP.INVENT_NO = asset.InvNo;
                                    createAssetSAP.SERIAL_NO = "";// assetDto.SerialNumber == null || assetDto.SerialNumber == "" ? "" : assetDto.SerialNumber;
                                    createAssetSAP.QUANTITY = requestBFMaterialCostCenter.QuantityRem;
                                    createAssetSAP.BASE_UOM = "ST";
                                    createAssetSAP.LAST_INVENTORY_DATE = "00000000";
                                    createAssetSAP.LAST_INVENTORY_DOCNO = "";
                                    //createAssetSAP.CAP_DATE = assetDto.CapitalizationDate != null ? assetDto.CapitalizationDate.ToString("yyyyMMdd") : "00000000";
                                    createAssetSAP.CAP_DATE = "00000000";
                                    createAssetSAP.COSTCENTER = employee != null && employee.CostCenter != null ? employee.CostCenter.Code : costCenter.Code;
                                    createAssetSAP.RESP_CCTR = costCenter.Code;
                                    createAssetSAP.INTERN_ORD = "";
                                    createAssetSAP.PLANT = "RO02";
                                    createAssetSAP.LOCATION = "";
                                    createAssetSAP.ROOM = "";
                                    createAssetSAP.PERSON_NO = employee != null ? employee.InternalCode : "";
                                    createAssetSAP.PLATE_NO = "";// assetDto.PlateNo != null && assetDto.PlateNo != "" ? assetDto.PlateNo : "";
                                    //createAssetSAP.ZZCLAS = accountancy.AssetCategory.Code;
                                    // createAssetSAP.IN_CONSERVATION = assetDto.InConservation ? "X" : "";
                                    createAssetSAP.IN_CONSERVATION = "";
                                    createAssetSAP.PROP_IND = "1";
                                    createAssetSAP.OPTIMA_ASSET_NO = asset.InvNo;
                                    createAssetSAP.OPTIMA_ASSET_PARENT_NO = "";
                                    createAssetSAP.TESTRUN = "";
                                    createAssetSAP.VENDOR_NO = partner.RegistryNumber;
                                    //createAssetSAP.VENDOR_NO = "";
                                    createAssetSAP.Asset = asset;
                                    createAssetSAP.NotSync = true;
                                    createAssetSAP.SyncErrorCount = 0;
                                    createAssetSAP.BudgetManagerId = inventory.BudgetManagerId.Value;
                                    createAssetSAP.AccMonthId = inventory.AccMonthId.Value;
                                    createAssetSAP.CreatedBy = _context.UserId;
                                    createAssetSAP.ModifiedBy = _context.UserId;
                                    createAssetSAP.INVOICE = document.DocNo1;


                                    // asset.CreateAssetSAP = createAssetSAP;

                                    asset.NotSync = true;
                                    asset.IsLocked = true;

                                    _context.Add(createAssetSAP);
                                }

                                budgetBaseAsset = new BudgetBaseAsset()
                                {
                                    BudgetBaseId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.RequestBudgetForecast.BudgetForecast.BudgetBaseId,
                                    BudgetTypeId = 1,
                                    BudgetManagerId = inventory.BudgetManagerId.Value,
                                    AccMonthId = inventory.AccMonthId.Value,
                                    AppStateId = 1,
                                    Asset = asset,
                                    IsLast = true,
                                    IsFirst = true,
                                };



                                //            if(inventory.AccMonthId == 32)
                                //{
                                //                budgetBaseAsset.April = orderMaterial.Price;
                                //}
                                //else if (inventory.AccMonthId == 33)
                                //            {
                                //                budgetBaseAsset.May = orderMaterial.Price;
                                //            }
                                //            else if (inventory.AccMonthId == 34)
                                //            {
                                //                budgetBaseAsset.June = orderMaterial.Price;
                                //            }
                                //            else if (inventory.AccMonthId == 35)
                                //            {
                                //                budgetBaseAsset.July = orderMaterial.Price;
                                //            }
                                //            else if (inventory.AccMonthId == 36)
                                //            {
                                //                budgetBaseAsset.August = orderMaterial.Price;
                                //            }
                                //            else if (inventory.AccMonthId == 37)
                                //            {
                                //                budgetBaseAsset.September = orderMaterial.Price;
                                //            }
                                //            else if (inventory.AccMonthId == 38)
                                //            {
                                //                budgetBaseAsset.Octomber = orderMaterial.Price;
                                //            }
                                //            else if (inventory.AccMonthId == 39)
                                //            {
                                //                budgetBaseAsset.November = orderMaterial.Price;
                                //            }
                                //            else if (inventory.AccMonthId == 40)
                                //            {
                                //                budgetBaseAsset.December = orderMaterial.Price;
                                //            }
                                //            else if (inventory.AccMonthId == 41)
                                //            {
                                //                budgetBaseAsset.January = orderMaterial.Price;
                                //            }
                                //            else if (inventory.AccMonthId == 42)
                                //            {
                                //                budgetBaseAsset.February = orderMaterial.Price;
                                //            }
                                //            else if (inventory.AccMonthId == 43)
                                //            {
                                //                budgetBaseAsset.March = orderMaterial.Price;
                                //            }

                                // budgetBaseAsset.November = orderMaterial.Price;

                                _context.Add(budgetBaseAsset);

                                _context.SaveChanges();
                            }
                            else
                            {
                                for (int j = 0; j < requestBFMaterialCostCenters[c].QuantityRem; j++)
                                {
                                    entityType = await _context.Set<Model.EntityType>().Where(c => c.UploadFolder == "NEWASSET").SingleAsync();

                                    if (requestBFMaterialCostCenters[c].RequestBudgetForecastMaterial.ParentAsset != null && requestBFMaterialCostCenters[c].RequestBudgetForecastMaterial.ParentAsset != "")
                                    {
                                        assetEntity = await _context.Set<Model.Asset>().AsNoTracking().Where(a => (a.InvNo == requestBFMaterialCostCenters[c].RequestBudgetForecastMaterial.ParentAsset && a.SubNo == "0000" && a.IsDeleted == false)).FirstOrDefaultAsync();
                                    }

                                    // order.QuantityRem = order.QuantityRem > 0 ? order.QuantityRem - 1 : order.Quantity;

                                    asset = new Model.Asset()
                                    {
                                        Document = document
                                    };

                                    _context.Add(asset);

                                    costCenter = await _context.Set<Model.CostCenter>()
                                        .Include(c => c.Room)
                                        .Include(c => c.AdmCenter)
                                        .Include(c => c.Region)
                                        .Include(c => c.Company)
                                        .Include(a => a.Administration)
                                        .Include(d => d.Division)
                                        .ThenInclude(d => d.Department)
                                        .Where(a => a.Id == requestBFMaterialCostCenter.CostCenterId).SingleAsync();

                                    //subCategory = await _context.Set<Model.SubCategory>()
                                    //    .Include(a => a.Category)
                                    //    .Where(a => a.Id == requestBFMaterialCostCenter.RequestBudgetForecastMaterial.Material.SubCategoryId).SingleAsync();


                                    //dictionaryItem = await _context.Set<Model.DictionaryItem>().Where(a => a.Name == subCategory.Name).SingleOrDefaultAsync();

                                    if (dictionaryItem == null)
                                    {
                                        //dictionaryItem = new Model.DictionaryItem()
                                        //{
                                        //    Code = "NEW",
                                        //    Name = subCategory.Name,
                                        //    IsDeleted = false,
                                        //    AssetCategoryId = subCategory.Category.InterCompany.AssetCategoryId,
                                        //    DictionaryTypeId = 1
                                        //};

                                        //_context.Add(dictionaryItem);
                                    }

                                    employee = await _context.Set<Model.Employee>().Include(c => c.CostCenter).Where(a => a.Id == requestBFMaterialCostCenters[c].EmployeeId).SingleOrDefaultAsync();
                                    material = await _context.Set<Model.Material>().Include(a => a.SubType).Where(a => a.Id == requestBFMaterialCostCenter.RequestBudgetForecastMaterial.MaterialId).SingleAsync();
                                    //orderMaterial = await _context.Set<Model.OrderMaterial>().Where(a => a.Id == assetDto.OrderMaterialId).SingleAsync();

                                    offerMaterial = await _context.Set<Model.OfferMaterial>().Where(a => a.Id == requestBFMaterialCostCenter.RequestBudgetForecastMaterial.OfferMaterialId).SingleAsync();

                                    if (offerMaterial != null)
                                    {

                                        // offerMaterial.AppStateId = offerMaterial.OrdersQuantity == offerMaterial.ReceptionsQuantity ? 7 : 6;
                                        //offerMaterial.ReceptionsQuantity += 1;
                                        offerMaterial.ReceptionsPrice = requestBFMaterialCostCenter.PriceRon;
                                        //offerMaterial.ReceptionsValue = offerMaterial.Price + offerMaterial.ReceptionsValue;

                                        //if (offerMaterial.Quantity == offerMaterial.ReceptionsQuantity)
                                        //{
                                        //	offerMaterial.AppStateId = 17;
                                        //}

                                        _context.Update(offerMaterial);
                                    }

                                    //if (orderMaterial != null)
                                    //{

                                    //    //order.ValueFin = order.ValueFin - offerMaterial.Price;
                                    //    //orderMaterial.AppStateId = orderMaterial.OrdersQuantity == orderMaterial.ReceptionsQuantity ? 7 : 6;
                                    //    //orderMaterial.ReceptionsQuantity += 1;
                                    //    orderMaterial.ReceptionsPrice = assetDto.ReceptionPrice;
                                    //    //orderMaterial.ReceptionsValue = orderMaterial.Price + orderMaterial.ReceptionsValue;

                                    //    //if (orderMaterial.Quantity == orderMaterial.ReceptionsQuantity)
                                    //    //{
                                    //    //	orderMaterial.AppStateId = 17;
                                    //    //}

                                    //    _context.Update(orderMaterial);
                                    //}

                                    //if (requestBFMaterialCostCenter.Price > 2500)
                                    //{
                                    //    //accountancy = _context.Set<Model.Accountancy>()

                                    //    //  .Include(a => a.Account)
                                    //    //  
                                    //    //  .Include(a => a.AssetCategory)
                                    //    //  .Include(a => a.AssetType)
                                    //    //  .Where(a => a.InterCompanyId == subCategory.Category.InterCompanyId && a.Value > 2500 && a.IsDeleted == false).Single();

                                    //    accountancy = await _context.Set<Model.Accountancy>()

                                    //      .Include(a => a.Account)
                                    //      
                                    //      .Include(a => a.AssetCategory)
                                    //      .Include(a => a.AssetType)
                                    //      .Where(a => a.SubCategoryId == requestBFMaterialCostCenter.RequestBudgetForecastMaterial.Material.SubCategoryId && a.Value > 2500 && a.IsDeleted == false).SingleOrDefaultAsync();

                                    //    if (accountancy == null) return new Model.CreateAssetSAPResult { Success = false, ErrorMessage = $"Lipsa mapare cont GL pentru subCategoria: {subCategory.Code + " - " + subCategory.Name}!" };
                                    //}
                                    //else
                                    //{
                                    //    //accountancy = _context.Set<Model.Accountancy>()

                                    //    //  .Include(a => a.Account)
                                    //    //  
                                    //    //  .Include(a => a.AssetCategory)
                                    //    //  .Include(a => a.AssetType)
                                    //    //  .Where(a => a.InterCompanyId == subCategory.Category.InterCompanyId && a.Value == 2500 && a.IsDeleted == false).Single();

                                    //    accountancy = await _context.Set<Model.Accountancy>()

                                    //     .Include(a => a.Account)
                                    //     
                                    //     .Include(a => a.AssetCategory)
                                    //     .Include(a => a.AssetType)
                                    //     .Where(a => a.SubCategoryId == requestBFMaterialCostCenter.RequestBudgetForecastMaterial.Material.SubCategoryId && a.Value == 2500 && a.IsDeleted == false).SingleOrDefaultAsync();

                                    //    if (accountancy == null) return new Model.CreateAssetSAPResult { Success = false, ErrorMessage = $"Lipsa mapare cont GL pentru subCategoria: {subCategory.Code + " - " + subCategory.Name}!" };
                                    //}


                                    //if (accountancy.ExpAccount != null && accountancy.ExpAccount.RequireSN)
                                    //{
                                    //    if (assetDto.SerialNumber == null || (assetDto.SerialNumber != null && assetDto.SerialNumber.Trim().Length < 4))
                                    //    {
                                    //        return new Model.CreateAssetSAPResult { Success = false, ErrorMessage = $"Seria pentru : {accountancy.ExpAccount.Code + " este obligatorie!"}!" };
                                    //    }
                                    //}
                                    //else
                                    //{
                                    //    assetDto.SerialNumber = string.Empty;
                                    //}

                                    document = new Model.Document
                                    {
                                        Approved = true,
                                        DocumentTypeId = documentType != null ? documentType.Id : 1,
                                        DocNo1 = string.Empty,
                                        DocNo2 = string.Empty,
                                        DocumentDate = DateTime.Now,
                                        CreationDate = DateTime.Now,
                                        CostCenterId = costCenter != null ? costCenter.Id : (int?)null,
                                        RegisterDate = DateTime.Now,
                                        Details = string.Empty,
                                        ParentDocumentId = inventory.DocumentId
                                    };


                                    partner = await _context.Set<Model.Partner>().Where(a => a.Id == order.Offer.PartnerId).SingleOrDefaultAsync();

                                    document.PartnerId = partner.Id;

                                    _context.Add(document);

                                    int? value = null;

                                    asset.InvNo = costCenter.Company.Code + "OPT0000000000" + entityType.Name;
                                    asset.Name = material.Name;
                                    asset.PurchaseDate = DateTime.Now;
                                    asset.SerialNumber = "";// assetDto.SerialNumber;
                                    asset.ERPCode = costCenter.Company.Code + "OPT0000000000" + entityType.Name;
                                    asset.Document = document;
                                    asset.Validated = true;
                                    asset.SAPCode = costCenter.Company.Code + "OPT0000000000" + entityType.Name;
                                    asset.AssetStateId = assetStateId;
                                    //asset.AssetTypeId = accountancy.AssetTypeId;
                                    asset.CostCenterId = costCenter.Id;

                                    costCenter = _context.Set<Model.CostCenter>().Include(c => c.Division).Where(c => c.Id == asset.CostCenterId).SingleOrDefault();

                                    asset.DepartmentId = costCenter.Division.DepartmentId;
                                    asset.DivisionId = costCenter.DivisionId;
                                    //asset.AssetCategoryId = accountancy.AssetCategoryId;
                                    asset.Employee = employee;
                                    asset.RoomId = costCenter.RoomId;
                                    //asset.ValueInv = orderMaterial.Price;
                                    //asset.ValueInvRon = orderMaterial.Price * order.Rate.Value;
                                    //asset.ValueRem = orderMaterial.Price;
                                    //asset.ValueRemRon = orderMaterial.Price * order.Rate.Value;

                                    asset.ValueInv = requestBFMaterialCostCenter.Price;
                                    asset.ValueInvRon = requestBFMaterialCostCenter.PriceRon;
                                    asset.ValueRem = requestBFMaterialCostCenter.Price;
                                    asset.ValueRemRon = requestBFMaterialCostCenter.PriceRon;

                                    asset.InvStateId = invState.Id;
                                    asset.Quantity = 1;
                                    asset.Custody = false;
                                    //asset.UomId = assetDto.UomId;
                                    asset.Company = costCenter.Company;
                                    asset.Validated = true;
                                    
                                    asset.BudgetManagerId = inventory.BudgetManagerId;
                                    //asset.AssetNatureId = assetDto.AssetNatureId;
                                    asset.SubTypeId = material.SubTypeId;
                                    //asset.InsuranceCategoryId = assetDto.InsuranceCategoryId;
                                    //asset.BrandId = assetDto.BrandId;
                                    //asset.ModelId = assetDto.ModelId;
                                    //asset.InterCompanyId = assetDto.InterCompanyId;
                                    asset.ProjectId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.RequestBudgetForecast.BudgetForecast.BudgetBase.ProjectId;
                                    //asset.InvoiceDate = assetDto.InvoiceDate;
                                    //asset.PODate = assetDto.PODate;
                                    //asset.ReceptionDate = assetDto.ReceptionDate;
                                    //asset.RemovalDate = assetDto.RemovalDate;
                                    asset.IsTemp = false;
                                    //asset.DimensionId = assetDto.DimensionId;
                                    asset.DictionaryItem = dictionaryItem;
                                    asset.IsAccepted = true;
                                    asset.IsReconcile = false;
                                    asset.OrderId = order.Id;
                                    asset.BudgetId = order.BudgetId;
                                    asset.BudgetBaseId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.RequestBudgetForecast.BudgetForecast.BudgetBaseId;
                                    //asset.DivisionId = assetDto.DivisionId;
                                    //asset.ProjectTypeId = assetDto.ProjectTypeId;
                                    asset.AgreementNo = "";// assetDto.PlateNo;
                                   // asset.Name = subCategory.Name;
                                    asset.MaterialId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.MaterialId;
                                    asset.AdministrationId = costCenter.AdministrationId;
                                    asset.DepartmentId = costCenter.Division.DepartmentId;
                                    //asset.AccountId = accountancy.AccountId;
                                    //asset.ExpAccountId = accountancy.ExpAccountId;
                                    asset.AllowLabel = true;
                                    asset.MaterialId = material.Id;
                                    asset.DivisionId = costCenter.DivisionId;
                                    //asset.ProjectTypeId = order.Budget.ProjectTypeId;
                                    asset.ProjectTypeId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.RequestBudgetForecast.BudgetForecast.BudgetBase.ProjectTypeId;
                                    asset.RateId = order.Contract != null && order.Contract.ContractAmount != null ? order.Contract.ContractAmount.RateId : null;
                                    asset.ContractId = order.ContractId;
                                    // asset.UomId = order.Contract.ContractAmount.UomId;
                                    asset.UomId = order.UomId;
                                    //asset.NetAmount = orderMaterial.Price;
                                    //asset.NetAmountRon = orderMaterial.Price * order.Rate.Value;
                                    //asset.OrderMaterialId = assetDto.OrderMaterialId;
                                    //asset.OfferMaterialId = orderMaterial.OfferMaterialId;

                                    asset.NetAmount = requestBFMaterialCostCenter.Price;
                                    asset.NetAmountRon = requestBFMaterialCostCenter.PriceRon;
                                    asset.OrderMaterialId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.OrderMaterialId;
                                    asset.OfferMaterialId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.OfferMaterialId;
                                    asset.BudgetForecastId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.RequestBudgetForecast.BudgetForecastId;
                                    asset.ReqBFMaterialId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.Id;
                                    asset.ReqBFMCostCenterId = requestBFMaterialCostCenter.Id;

                                    asset.ReceptionPrice = requestBFMaterialCostCenter.PriceRon;
                                    asset.CostCenterEmpId = employee != null && employee.CostCenter != null ? employee.CostCenter.Id : requestBFMaterialCostCenter.CostCenterId;
                                    asset.ParentAssetId = assetEntity != null ? assetEntity.Id : (int?)null;
                                    //asset.SubCategoryId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.Material.SubCategoryId;
                                    asset.RequestId = offerMaterial.RequestId;
                                    asset.Wip = order.OrderType.Code == "WIP" ? true : false;

                                    assetAC = new Model.AssetAC
                                    {
                                        AssetClassTypeId = assetClassType.Id,
                                        Asset = asset,
                                        AssetClassId = assetClass.Id,
                                        AssetClassIdIn = assetClass.Id
                                    };


                                    _context.Set<Model.AssetAC>().Add(assetAC);

                                    var monthSum = 0;


                                    assetDep = new Model.AssetDep
                                    {
                                        AccSystem = accSystem,
                                        Asset = asset,
                                        DepPeriod = (int)monthSum,
                                        DepPeriodIn = (int)monthSum,
                                        DepPeriodMonth = (int)monthSum,
                                        DepPeriodMonthIn = 0,
                                        DepPeriodRem = (int)monthSum,
                                        DepPeriodRemIn = (int)monthSum,
                                        UsageStartDate = documentDate,
                                        ValueDep = requestBFMaterialCostCenter.Price,
                                        ValueDepIn = requestBFMaterialCostCenter.Price,
                                        ValueDepPU = requestBFMaterialCostCenter.Price,
                                        ValueDepPUIn = requestBFMaterialCostCenter.Price,
                                        ValueDepYTD = requestBFMaterialCostCenter.Price,
                                        ValueDepYTDIn = requestBFMaterialCostCenter.Price,
                                        ValueInv = requestBFMaterialCostCenter.Price,
                                        ValueInvIn = requestBFMaterialCostCenter.Price,
                                        ValueRem = requestBFMaterialCostCenter.Price,
                                        ValueRemIn = requestBFMaterialCostCenter.Price
                                    };

                                    _context.Set<Model.AssetDep>().Add(assetDep);


                                    assetInv = new Model.AssetInv
                                    {
                                        Asset = asset,
                                        AllowLabel = true,
                                        Barcode = entityType.Code + entityType.Name,
                                        InvName = asset.Name,
                                        InvNoOld = string.Empty,
                                        InvStateId = invState.Id
                                    };

                                    _context.Set<Model.AssetInv>().Add(assetInv);

                                    assetDepMD = new Model.AssetDepMD
                                    {
                                        AccMonthId = inventory.AccMonthId.Value,
                                        AccSystem = accSystem,
                                        Asset = asset,
                                        UsefulLife = (int)monthSum,
                                        TotLifeInpPeriods = (int)monthSum,
                                        RemLifeInPeriods = 0,
                                        AccumulDep = requestBFMaterialCostCenter.Price,
                                        BkValFYStart = requestBFMaterialCostCenter.Price,
                                        DepForYear = requestBFMaterialCostCenter.Price,
                                        CurrentAPC = requestBFMaterialCostCenter.Price,
                                        PosCap = requestBFMaterialCostCenter.Price
                                    };

                                    _context.Set<Model.AssetDepMD>().Add(assetDepMD);


                                    assetAdmMD = new Model.AssetAdmMD
                                    {
                                        AccMonthId = inventory.AccMonthId.Value,
                                        Asset = asset,
                                        Administration = administration,
                                        DepartmentId = null
                                    };

                                    assetAdmMD.AssetStateId = assetStateId;
                                    //assetAdmMD.AssetTypeId = accountancy.AssetTypeId;
                                    assetAdmMD.CostCenterId = costCenter.Id;
                                    assetAdmMD.DepartmentId = costCenter.Division.DepartmentId;
                                    assetAdmMD.DivisionId = costCenter.DivisionId;
                                    assetAdmMD.EmployeeId = employee != null ? employee.Id : (int?)null;
                                    assetAdmMD.RoomId = costCenter.RoomId;
                                    //assetAdmMD.AssetCategoryId = accountancy.AssetCategoryId;
                                    assetAdmMD.AssetClass = assetClass;
                                    

                                    //assetAdmMD.AssetNatureId = assetDto.AssetNatureId;
                                    assetAdmMD.BudgetManagerId = inventory.BudgetManagerId;
                                    assetAdmMD.SubTypeId = material.SubTypeId;
                                    //assetAdmMD.InsuranceCategoryId = assetDto.InsuranceCategoryId;
                                    //assetAdmMD.ModelId = assetDto.ModelId;
                                    //assetAdmMD.BrandId = assetDto.BrandId;
                                    //
                                    assetAdmMD.ProjectId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.RequestBudgetForecast.BudgetForecast.BudgetBase.ProjectId;

                                    assetAdmMD.AdmCenterId = costCenter.AdmCenterId;
                                    assetAdmMD.RegionId = costCenter.RegionId;
                                    assetAdmMD.AdministrationId = costCenter.AdministrationId;
                                    assetAdmMD.DepartmentId = costCenter.Division.DepartmentId;
                                    //assetAdmMD.AccountId = accountancy.AccountId;
                                    //assetAdmMD.AccountId = accountancy.AccountId;
                                    assetAdmMD.DivisionId = costCenter.DivisionId;
                                    // assetAdmMD.ProjectTypeId = order.Budget.ProjectTypeId;
                                    assetAdmMD.ProjectTypeId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.RequestBudgetForecast.BudgetForecast.BudgetBase.ProjectTypeId;

                                    _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);

                                    entityType.Name = StringsADD(entityType.Name, "1");

                                    _context.Update(entityType);

                                    if (inventory != null)
                                    {
                                        inventoryAsset = new Model.InventoryAsset
                                        {
                                            QInitial = 1,
                                            QFinal = 0,
                                            InventoryId = inventory.Id,
                                            Asset = asset,
                                            EmployeeIdInitial = employee != null ? employee.Id : (int?)null,
                                            RoomIdInitial = costCenter.RoomId,
                                            SerialNumber = "",//assetDto.SerialNumber,
                                            StateIdInitial = invState.Id,
                                            CostCenterInitial = costCenter,
                                            AdministrationIdInitial = costCenter.AdministrationId,
                                            IsTemp = false
                                        };

                                        _context.Add(inventoryAsset);

                                        assetOp = new Model.AssetOp()
                                        {
                                            Asset = asset,
                                            Document = document,
                                            RoomIdInitial = costCenter.RoomId,
                                            RoomIdFinal = costCenter.RoomId,
                                            EmployeeIdInitial = employee != null ? employee.Id : (int?)null,
                                            EmployeeIdFinal = employee != null ? employee.Id : (int?)null,
                                            //AssetCategoryIdInitial = accountancy.AssetCategoryId,
                                            //AssetCategoryIdFinal = accountancy.AssetCategoryId,
                                            InvStateIdInitial = invState.Id,
                                            InvStateIdFinal = invState.Id,
                                            AdministrationInitial = administration,
                                            AdministrationFinal = administration,
                                            AccSystem = accSystem,
                                            DocumentId = document.Id
                                        };

                                        assetOp.AssetStateIdInitial = assetStateId;
                                        assetOp.AssetStateIdFinal = assetStateId;
                                        assetOp.CostCenterInitial = costCenter;
                                        assetOp.CostCenterFinal = costCenter;
                                        assetOp.DepartmentIdInitial = null;
                                        assetOp.DepartmentIdFinal = null;
                                        assetOp.InvName = material.Name;
                                        //assetOp.AssetTypeIdInitial = accountancy.AssetTypeId; 
                                        //assetOp.AssetTypeIdFinal = accountancy.AssetTypeId;
                                        assetOp.AdministrationIdInitial = costCenter.AdministrationId;
                                        assetOp.AdministrationIdFinal = costCenter.AdministrationId;
                                        _context.Add(assetOp);


                                        //orderOp = new Model.OrderOp()
                                        //{
                                        //    AccMonthId = inventory.AccMonthId,
                                        //    AccSystemId = null,
                                        //    
                                        //    
                                        //    AdministrationIdInitial = order.AdministrationId,
                                        //    AdministrationIdFinal = order.AdministrationId,
                                        //    OrderId = order.Id,
                                        //    BudgetManagerIdInitial = null,
                                        //    BudgetManagerIdFinal = null,
                                        //    BudgetStateId = order.AppStateId,
                                        //    CompanyIdInitial = order.CompanyId,
                                        //    CompanyIdFinal = order.CompanyId,
                                        //    CostCenterIdInitial = order.CostCenterId,
                                        //    CostCenterIdFinal = order.CostCenterId,
                                        //    CreatedAt = DateTime.Now,
                                        //    CreatedBy = order.UserId,
                                        //    Document = document,
                                        //    DstConfAt = DateTime.Now,
                                        //    DstConfBy = order.UserId,
                                        //    EmployeeIdInitial = order.EmployeeId,
                                        //    EmployeeIdFinal = order.EmployeeId,
                                        //    InfoIni = order.Info,
                                        //    InfoFin = order.Info,
                                        //    InterCompanyIdInitial = order.InterCompanyId,
                                        //    InterCompanyIdFinal = order.InterCompanyId,
                                        //    IsAccepted = false,
                                        //    IsDeleted = false,
                                        //    ModifiedAt = DateTime.Now,
                                        //    ModifiedBy = order.UserId,
                                        //    PartnerIdInitial = order.PartnerId,
                                        //    PartnerIdFinal = order.PartnerId,
                                        //    ProjectIdInitial = order.ProjectId,
                                        //    ProjectIdFinal = order.ProjectId,
                                        //    QuantityIni = order.Quantity,
                                        //    QuantityFin = order.QuantityRem,
                                        //    SubTypeIdInitial = order.SubTypeId,
                                        //    SubTypeIdFinal = order.SubTypeId,
                                        //    Validated = true,
                                        //    ValueFin1 = order.ValueFin,
                                        //    ValueIni1 = order.ValueIni,
                                        //    ValueFin2 = order.ValueFin,
                                        //    ValueIni2 = order.ValueIni,
                                        //    Guid = Guid.NewGuid(),
                                        //    BudgetIdInitial = order.BudgetId,
                                        //    BudgetIdFinal = order.BudgetId,
                                        //    OfferIdInitial = order.OfferId,
                                        //    OfferIdFinal = order.OfferId,
                                        //    UomId = order.UomId
                                        //};

                                        //_context.Add(orderOp);


                                        //budgetOp = new Model.BudgetOp()
                                        //{
                                        //    AccMonthId = order.Budget.AccMonthId,
                                        //    AccSystemId = null,
                                        //    
                                        //    
                                        //    AdministrationIdInitial = order.Budget.AdministrationId,
                                        //    AdministrationIdFinal = order.Budget.AdministrationId,
                                        //    BudgetId = order.Budget.Id,
                                        //    BudgetManagerIdInitial = null,
                                        //    BudgetManagerIdFinal = null,
                                        //    BudgetStateId = order.Budget.AppStateId,
                                        //    CompanyIdInitial = order.Budget.CompanyId,
                                        //    CompanyIdFinal = order.Budget.CompanyId,
                                        //    CostCenterIdInitial = order.Budget.CostCenterId,
                                        //    CostCenterIdFinal = order.Budget.CostCenterId,
                                        //    CreatedAt = DateTime.Now,
                                        //    CreatedBy = order.Budget.UserId,
                                        //    Document = document,
                                        //    DstConfAt = DateTime.Now,
                                        //    DstConfBy = order.Budget.UserId,
                                        //    EmployeeIdInitial = order.Budget.EmployeeId,
                                        //    EmployeeIdFinal = order.Budget.EmployeeId,
                                        //    InfoIni = order.Budget.Info,
                                        //    InfoFin = order.Budget.Info,
                                        //    InterCompanyIdInitial = order.Budget.InterCompanyId,
                                        //    InterCompanyIdFinal = order.Budget.InterCompanyId,
                                        //    IsAccepted = false,
                                        //    IsDeleted = false,
                                        //    ModifiedAt = DateTime.Now,
                                        //    ModifiedBy = order.Budget.UserId,
                                        //    PartnerIdInitial = order.Budget.PartnerId,
                                        //    PartnerIdFinal = order.Budget.PartnerId,
                                        //    ProjectIdInitial = order.Budget.ProjectId,
                                        //    ProjectIdFinal = order.Budget.ProjectId,
                                        //    QuantityIni = order.Budget.Quantity,
                                        //    QuantityFin = order.Budget.QuantityRem,
                                        //    SubTypeIdInitial = order.Budget.SubTypeId,
                                        //    SubTypeIdFinal = order.Budget.SubTypeId,
                                        //    Validated = true,
                                        //    ValueFin1 = order.Budget.ValueFin,
                                        //    ValueIni1 = order.Budget.ValueIni,
                                        //    ValueFin2 = order.Budget.ValueFin,
                                        //    ValueIni2 = order.Budget.ValueIni,
                                        //    Guid = Guid.NewGuid()
                                        //};

                                        // _context.Add(budgetOp);


                                        //offerOp = new Model.OfferOp()
                                        //{
                                        //    AccMonthId = order.Offer.AccMonthId,
                                        //    AccSystemId = null,
                                        //    AccountIdInitial = order.Offer.AccountId,
                                        //    AccountIdFinal = order.Offer.AccountId,
                                        //    AdministrationIdInitial = order.Offer.AdministrationId,
                                        //    AdministrationIdFinal = order.Offer.AdministrationId,
                                        //    OfferId = order.Offer.Id,
                                        //    BudgetManagerIdInitial = null,
                                        //    BudgetManagerIdFinal = null,
                                        //    BudgetStateId = 1,
                                        //    CompanyIdInitial = order.Offer.CompanyId,
                                        //    CompanyIdFinal = order.Offer.CompanyId,
                                        //    CostCenterIdInitial = order.Offer.CostCenterId,
                                        //    CostCenterIdFinal = order.Offer.CostCenterId,
                                        //    CreatedAt = DateTime.Now,
                                        //    CreatedBy = order.Offer.UserId,
                                        //    Document = document,
                                        //    DstConfAt = DateTime.Now,
                                        //    DstConfBy = order.Offer.UserId,
                                        //    EmployeeIdInitial = order.Offer.EmployeeId,
                                        //    EmployeeIdFinal = order.Offer.EmployeeId,
                                        //    InfoIni = order.Offer.Info,
                                        //    InfoFin = order.Offer.Info,
                                        //    InterCompanyIdInitial = order.Offer.InterCompanyId,
                                        //    InterCompanyIdFinal = order.Offer.InterCompanyId,
                                        //    IsAccepted = false,
                                        //    IsDeleted = false,
                                        //    ModifiedAt = DateTime.Now,
                                        //    ModifiedBy = order.Offer.UserId,
                                        //    PartnerIdInitial = order.Offer.PartnerId,
                                        //    PartnerIdFinal = order.Offer.PartnerId,
                                        //    ProjectIdInitial = order.Offer.ProjectId,
                                        //    ProjectIdFinal = order.Offer.ProjectId,
                                        //    QuantityIni = order.Offer.Quantity,
                                        //    QuantityFin = order.Offer.QuantityRem,
                                        //    SubTypeIdInitial = order.Offer.SubTypeId,
                                        //    SubTypeIdFinal = order.Offer.SubTypeId,
                                        //    Validated = true,
                                        //    ValueFin1 = order.Offer.ValueFin,
                                        //    ValueIni1 = order.Offer.ValueIni,
                                        //    ValueFin2 = order.Offer.ValueFin,
                                        //    ValueIni2 = order.Offer.ValueIni,
                                        //    Guid = Guid.NewGuid()
                                        //};

                                        //_context.Add(offerOp);

                                        // var lastInventoryDoc = "";
                                        // var lastInventoryDate = inventory.End.Value.ToString("yyyyMMdd");
                                        // var lastInventoryDate = DateTime.Now.ToString("yyyyMMdd");
                                        //var committee = _context.Committees.AsNoTracking().Where(a => a.IsDeleted == false && a.CostCenterId == assetDto.CostCenterId).FirstOrDefault();

                                        //if (committee != null)
                                        //{
                                        //    lastInventoryDoc = committee.Document1;
                                        //}

                                        var names = SplitToLines(material.Name, 50);
                                        var countNames = names.Count();

                                        //asset.Name1 = countNames > 0 ? names.ElementAt(0) : "";
                                        //asset.Name2 = countNames > 1 ? names.ElementAt(1) : "";
                                        //asset.Name3 = countNames > 2 ? names.ElementAt(2) : "";
                                        //asset.LastInventoryDate = lastInventoryDate;
                                        //asset.LastInventoryDoc = lastInventoryDoc;
                                        //asset.PlateNo = assetDto.PlateNo != null && assetDto.PlateNo != "" ? assetDto.PlateNo : "";
                                        //asset.InConservation = assetDto.InConservation;
                                        //asset.NotSync = true;

                                        createAssetSAP = new Model.CreateAssetSAP();

#if DEBUG
                                        createAssetSAP.IsDeleted = true;
#endif
                                        createAssetSAP.XSUBNO = assetEntity != null ? "X" : "";
                                        createAssetSAP.COMPANYCODE = costCenter.Company.Code;
                                        createAssetSAP.ASSET = assetEntity != null ? assetEntity.InvNo : "";
                                        createAssetSAP.SUBNUMBER = "";
                                        //createAssetSAP.ASSETCLASS = accountancy.ExpAccount.Name;
                                        createAssetSAP.POSTCAP = "";
                                        createAssetSAP.DESCRIPT = countNames > 0 ? names.ElementAt(0) : "";
                                        createAssetSAP.DESCRIPT2 = countNames > 1 ? names.ElementAt(1) : "";
                                        createAssetSAP.INVENT_NO = asset.InvNo;
                                        createAssetSAP.SERIAL_NO = "";// assetDto.SerialNumber == null || assetDto.SerialNumber == "" ? "" : assetDto.SerialNumber;
                                        createAssetSAP.QUANTITY = 1;
                                        createAssetSAP.BASE_UOM = "ST";
                                        createAssetSAP.LAST_INVENTORY_DATE = "00000000";
                                        createAssetSAP.LAST_INVENTORY_DOCNO = "";
                                        //createAssetSAP.CAP_DATE = assetDto.CapitalizationDate != null ? assetDto.CapitalizationDate.ToString("yyyyMMdd") : "00000000";
                                        createAssetSAP.CAP_DATE = "00000000";
                                        createAssetSAP.COSTCENTER = employee != null && employee.CostCenter != null ? employee.CostCenter.Code : costCenter.Code;
                                        createAssetSAP.RESP_CCTR = costCenter.Code;
                                        createAssetSAP.INTERN_ORD = "";
                                        createAssetSAP.PLANT = "RO02";
                                        createAssetSAP.LOCATION = "";
                                        createAssetSAP.ROOM = "";
                                        createAssetSAP.PERSON_NO = employee != null ? employee.InternalCode : "";
                                        createAssetSAP.PLATE_NO = "";// assetDto.PlateNo != null && assetDto.PlateNo != "" ? assetDto.PlateNo : "";
                                        //createAssetSAP.ZZCLAS = accountancy.AssetCategory.Code;
                                        // createAssetSAP.IN_CONSERVATION = assetDto.InConservation ? "X" : "";
                                        createAssetSAP.IN_CONSERVATION = "";
                                        createAssetSAP.PROP_IND = "1";
                                        createAssetSAP.OPTIMA_ASSET_NO = asset.InvNo;
                                        createAssetSAP.OPTIMA_ASSET_PARENT_NO = "";
                                        createAssetSAP.TESTRUN = "";
                                        createAssetSAP.VENDOR_NO = partner.RegistryNumber;
                                        //createAssetSAP.VENDOR_NO = "";
                                        createAssetSAP.Asset = asset;
                                        createAssetSAP.NotSync = true;
                                        createAssetSAP.SyncErrorCount = 0;
                                        createAssetSAP.BudgetManagerId = inventory.BudgetManagerId.Value;
                                        createAssetSAP.AccMonthId = inventory.AccMonthId.Value;
                                        createAssetSAP.CreatedBy = _context.UserId;
                                        createAssetSAP.ModifiedBy = _context.UserId;
                                        createAssetSAP.INVOICE = document.DocNo1;

                                        // asset.CreateAssetSAP = createAssetSAP;

                                        asset.NotSync = true;
                                        asset.IsLocked = true;

                                        _context.Add(createAssetSAP);
                                    }

                                    budgetBaseAsset = new BudgetBaseAsset()
                                    {
                                        BudgetBaseId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.RequestBudgetForecast.BudgetForecast.BudgetBaseId,
                                        BudgetTypeId = 1,
                                        BudgetManagerId = inventory.BudgetManagerId.Value,
                                        AccMonthId = inventory.AccMonthId.Value,
                                        AppStateId = 1,
                                        Asset = asset,
                                        IsLast = true,
                                        IsFirst = true,
                                    };



                                    //            if(inventory.AccMonthId == 32)
                                    //{
                                    //                budgetBaseAsset.April = orderMaterial.Price;
                                    //}
                                    //else if (inventory.AccMonthId == 33)
                                    //            {
                                    //                budgetBaseAsset.May = orderMaterial.Price;
                                    //            }
                                    //            else if (inventory.AccMonthId == 34)
                                    //            {
                                    //                budgetBaseAsset.June = orderMaterial.Price;
                                    //            }
                                    //            else if (inventory.AccMonthId == 35)
                                    //            {
                                    //                budgetBaseAsset.July = orderMaterial.Price;
                                    //            }
                                    //            else if (inventory.AccMonthId == 36)
                                    //            {
                                    //                budgetBaseAsset.August = orderMaterial.Price;
                                    //            }
                                    //            else if (inventory.AccMonthId == 37)
                                    //            {
                                    //                budgetBaseAsset.September = orderMaterial.Price;
                                    //            }
                                    //            else if (inventory.AccMonthId == 38)
                                    //            {
                                    //                budgetBaseAsset.Octomber = orderMaterial.Price;
                                    //            }
                                    //            else if (inventory.AccMonthId == 39)
                                    //            {
                                    //                budgetBaseAsset.November = orderMaterial.Price;
                                    //            }
                                    //            else if (inventory.AccMonthId == 40)
                                    //            {
                                    //                budgetBaseAsset.December = orderMaterial.Price;
                                    //            }
                                    //            else if (inventory.AccMonthId == 41)
                                    //            {
                                    //                budgetBaseAsset.January = orderMaterial.Price;
                                    //            }
                                    //            else if (inventory.AccMonthId == 42)
                                    //            {
                                    //                budgetBaseAsset.February = orderMaterial.Price;
                                    //            }
                                    //            else if (inventory.AccMonthId == 43)
                                    //            {
                                    //                budgetBaseAsset.March = orderMaterial.Price;
                                    //            }

                                    // budgetBaseAsset.November = orderMaterial.Price;

                                    _context.Add(budgetBaseAsset);

                                    _context.SaveChanges();
                                }
                            }
                        }
                    }


                }

                var count = await _context.Set<Model.RecordCount>().FromSql("UpdateAllAssets").ToListAsync();
                var countOffer = await _context.Set<Model.RecordCount>().FromSql("UpdateAllOffers").ToListAsync();
                var countOrd = _context.Set<Model.RecordCount>().FromSql("UpdateAllOrders").ToList();
                var countContract = await _context.Set<Model.RecordCount>().FromSql("UpdateAllContracts").ToListAsync();
                var countContractAmount = await _context.Set<Model.RecordCount>().FromSql("UpdateAllContractAmount").ToListAsync();
                var countBudget = await _context.Set<Model.RecordCount>().FromSql("UpdateAllBudgetBase").ToListAsync();
                // var countOfferMaterials = _context.Set<Model.RecordCount>().FromSql("UpdateAllOfferMaterials").ToList();
                var countOfferMaterials2 = _context.Set<Model.RecordCount>().FromSql("UpdateAllOfferMaterials2").ToList();
                var UpdateAllRequestBudgetForecastMaterials = _context.Set<Model.RecordCount>().FromSql("UpdateAllRequestBudgetForecastMaterials").ToList();
                var UpdateAllRequestBFMaterialCostCenters = _context.Set<Model.RecordCount>().FromSql("UpdateAllRequestBFMaterialCostCenters").ToList();

                return new Model.CreateAssetSAPResult { Success = true, ErrorMessage = "OK" };
            }


        }
        public async Task<Model.CreateAssetSAPResult> CreatePreReceptionAssetSAP(AddAsset assetDto)
        {
            Model.Asset asset = null;
            Model.Asset assetEntity = null;
            Model.AssetDep assetDep = null;
            Model.AssetDepMD assetDepMD = null;
            Model.AssetInv assetInv = null;
            Model.AssetAC assetAC = null;
            Model.AssetAdmMD assetAdmMD = null;
            // Model.AccMonth accMonth = null;
            Model.Document document = null;
            Model.AssetOp assetOp = null;
            Model.OrderOp orderOp = null;
            Model.OfferOp offerOp = null;
            Model.BudgetOp budgetOp = null;
            Model.Inventory inventory = null;
            Model.InventoryAsset inventoryAsset = null;
            DateTime? documentDate = null;
            Model.Administration administration = null;
            Model.AccSystem accSystem = null;
            Model.AssetClass assetClass = null;
            // Model.AssetCategory assetCategory = null;
            Model.DictionaryItem dictionaryItem = null;
            //Model.SubCategory subCategory = null;
            Model.AssetClassType assetClassType = null;
            Model.Partner partner = null;
            Model.CostCenter costCenter = null;
            // Model.Company company = null;
            // Model.Room room = null;
            // Model.AssetState assetState = null;
            // Model.AssetType assetType = null;
            Model.InvState invState = null;
            Model.Employee employee = null;
            Model.Material material = null;
            Model.DocumentType documentType = null;
            Model.Order order = null;
            Model.OfferMaterial offerMaterial = null;
            //Model.OrderMaterial orderMaterial = null;
            //Model.RequestBudgetForecast requestBudgetForecast = null;
            //Model.RequestBudgetForecastMaterial requestBudgetForecastMaterial = null;
            Model.RequestBFMaterialCostCenter requestBFMaterialCostCenter = null;
            List<Model.RequestBudgetForecastMaterial> requestBudgetForecastMaterials = null;
            List<Model.RequestBFMaterialCostCenter> requestBFMaterialCostCenters = null;
            Model.CreateAssetSAP createAssetSAP = null;
            Model.BudgetBaseAsset budgetBaseAsset = null;
            Model.EntityType entityType = null;
            int? defaultNull = null;

            if (assetDto.Id > 0)
            {
                asset = await _context.Set<Model.Asset>().Where(a => a.Id == assetDto.Id).SingleAsync();
                document = await _context.Set<Model.Document>().Where(a => a.Id == asset.DocumentId).SingleAsync();

                document.DocNo1 = assetDto.DocNo1;
                asset.SerialNumber = assetDto.SerialNumber;

                _context.Update(document);
                _context.SaveChanges();

                return new Model.CreateAssetSAPResult { Success = true, ErrorMessage = "OK" };
            }
            else
            {
                string accSystemDefault = "RON";
                string assetClassTypeDefault = "-";

                documentType = await _context.Set<Model.DocumentType>().AsNoTracking().Where(d => d.Code == "CREATEASSET").SingleAsync();
                inventory = await _context.Set<Model.Inventory>().AsNoTracking().Where(i => i.Active == true).SingleAsync();
                invState = await _context.Set<Model.InvState>().Where(a => a.Id == 1).SingleAsync();
                int assetStateId = await _context.Set<Model.AssetState>().AsNoTracking().Where(a => a.Code == "PRE_RECEPTION").Select(a => a.Id).SingleAsync();

                assetClassType = await _context.Set<Model.AssetClassType>().Where(a => (a.Code == assetClassTypeDefault)).SingleAsync();
                assetClass = await _context.Set<Model.AssetClass>().Where(a => (a.Id == 22)).SingleAsync();
                accSystem = await _context.Set<Model.AccSystem>().Where(a => (a.Code == accSystemDefault)).SingleAsync();


                foreach (var item in assetDto.RequestBudgetForecasts)
                {
                    requestBudgetForecastMaterials = await _context.Set<Model.RequestBudgetForecastMaterial>().Where(r => r.RequestBudgetForecastId == item && r.IsDeleted == false && r.QuantityRem > 0).ToListAsync();

                    for (int m = 0; m < requestBudgetForecastMaterials.Count; m++)
                    {
                        requestBFMaterialCostCenters = await _context.Set<Model.RequestBFMaterialCostCenter>().Where(r => r.RequestBudgetForecastMaterialId == requestBudgetForecastMaterials[m].Id && r.QuantityRem > 0 && r.IsDeleted == false).ToListAsync();

                        for (int c = 0; c < requestBFMaterialCostCenters.Count; c++)
                        {
                            assetEntity = null;

                            requestBFMaterialCostCenter = await _context.Set<Model.RequestBFMaterialCostCenter>()
                                    .Include(r => r.RequestBudgetForecastMaterial)
                                    .ThenInclude(r => r.RequestBudgetForecast)
                                    .ThenInclude(r => r.BudgetForecast)
                                    .ThenInclude(r => r.BudgetBase)
                                    .Include(r => r.RequestBudgetForecastMaterial).ThenInclude(r => r.Material)
                                    .Where(r => r.Id == requestBFMaterialCostCenters[c].Id).SingleAsync();

                            order = await _context.Set<Model.Order>()
                                        .Include(r => r.Rate)
                                        .Include(b => b.OrderType)
                                        .Include(b => b.BudgetBase)
                                        .Include(b => b.BudgetForecast.BudgetBase)
                                        .Include(b => b.Offer)
                                        .Include(c => c.Contract).ThenInclude(c => c.ContractAmount)
                                        .Where(c => c.Id == requestBFMaterialCostCenter.OrderId).SingleAsync();

                            if (!requestBFMaterialCostCenter.Multiple)
                            {
                                entityType = await _context.Set<Model.EntityType>().Where(c => c.UploadFolder == "NEWASSET").SingleAsync();

                                if (requestBFMaterialCostCenters[c].RequestBudgetForecastMaterial.ParentAsset != null && requestBFMaterialCostCenters[c].RequestBudgetForecastMaterial.ParentAsset != "")
                                {
                                    assetEntity = await _context.Set<Model.Asset>().AsNoTracking().Where(a => (a.InvNo == requestBFMaterialCostCenters[c].RequestBudgetForecastMaterial.ParentAsset && a.SubNo == "0000" && a.IsDeleted == false)).FirstOrDefaultAsync();
                                }

                                order = await _context.Set<Model.Order>()
                                         .Include(r => r.Rate)
                                         .Include(b => b.OrderType)
                                         .Include(b => b.BudgetBase)
                                         .Include(b => b.BudgetForecast.BudgetBase)
                                         .Include(b => b.Offer)
                                         .Include(c => c.Contract).ThenInclude(c => c.ContractAmount)
                                         .Where(c => c.Id == requestBFMaterialCostCenter.OrderId).SingleAsync();

                                asset = new Model.Asset()
                                {
                                    Document = document
                                };

                                _context.Add(asset);

                                costCenter = await _context.Set<Model.CostCenter>()
                                    .Include(c => c.Room)
                                    .Include(c => c.AdmCenter)
                                    .Include(c => c.Region)
                                    .Include(c => c.Company)
                                    .Include(a => a.Administration)
                                    .Include(d => d.Division)
                                    .ThenInclude(d => d.Department)
                                    .Where(a => a.Id == requestBFMaterialCostCenter.CostCenterId).SingleAsync();

                                //if (requestBFMaterialCostCenter.RequestBudgetForecastMaterial.Material != null && requestBFMaterialCostCenter.RequestBudgetForecastMaterial.Material.SubCategoryId != null)
                                //{
                                //    subCategory = await _context.Set<Model.SubCategory>()
                                //    .Include(a => a.Category)
                                //    .Where(a => a.Id == requestBFMaterialCostCenter.RequestBudgetForecastMaterial.Material.SubCategoryId).SingleAsync();
                                //}
                                //else
                                //{
                                //    subCategory = await _context.Set<Model.SubCategory>()
                                //    .Include(a => a.Category)
                                //    .Where(a => a.Code == "NO_SUB").SingleAsync();
                                //}

                                //dictionaryItem = await _context.Set<Model.DictionaryItem>().Where(a => a.Name == subCategory.Name).SingleOrDefaultAsync();

                                if (dictionaryItem == null)
                                {
                                    //dictionaryItem = new Model.DictionaryItem()
                                    //{
                                    //    Code = "NEW",
                                    //    Name = subCategory.Name,
                                    //    IsDeleted = false,
                                    //    AssetCategoryId = subCategory.Category.InterCompany.AssetCategoryId,
                                    //    DictionaryTypeId = 1
                                    //};

                                    _context.Add(dictionaryItem);
                                }

                                employee = await _context.Set<Model.Employee>().Include(c => c.CostCenter).Where(a => a.Id == requestBFMaterialCostCenter.EmployeeId).SingleOrDefaultAsync();
                                material = await _context.Set<Model.Material>().Include(a => a.SubType).Where(a => a.Id == requestBFMaterialCostCenter.RequestBudgetForecastMaterial.MaterialId).SingleAsync();
                                offerMaterial = await _context.Set<Model.OfferMaterial>().Where(a => a.Id == requestBFMaterialCostCenter.RequestBudgetForecastMaterial.OfferMaterialId).SingleAsync();

                                if (offerMaterial != null)
                                {
                                    offerMaterial.ReceptionsPrice = requestBFMaterialCostCenter.PriceRon;

                                    _context.Update(offerMaterial);
                                }

                                //if (requestBFMaterialCostCenter.RequestBudgetForecastMaterial.Material.SubCategoryId != null)
                                //{
                                //    //if (requestBFMaterialCostCenter.ValueRon > 2500)
                                //    //{
                                //    //    accountancy = await _context.Set<Model.Accountancy>()

                                //    //      .Include(a => a.Account)
                                //    //      
                                //    //      .Include(a => a.AssetCategory)
                                //    //      .Include(a => a.AssetType)
                                //    //      .Where(a => a.SubCategoryId == requestBFMaterialCostCenter.RequestBudgetForecastMaterial.Material.SubCategoryId && a.Value > 2500 && a.IsDeleted == false)
                                //    //      .SingleOrDefaultAsync();

                                //    //    // if (accountancy == null) return new Model.CreateAssetSAPResult { Success = false, ErrorMessage = $"Lipsa mapare cont GL pentru subCategoria: {subCategory.Code + " - " + subCategory.Name}!" };
                                //    //}
                                //    //else
                                //    //{

                                //    //    accountancy = await _context.Set<Model.Accountancy>()

                                //    //     .Include(a => a.Account)
                                //    //     
                                //    //     .Include(a => a.AssetCategory)
                                //    //     .Include(a => a.AssetType)
                                //    //     .Where(a => a.SubCategoryId == requestBFMaterialCostCenter.RequestBudgetForecastMaterial.Material.SubCategoryId && a.Value == 2500 && a.IsDeleted == false).SingleOrDefaultAsync();

                                //    //    // if (accountancy == null) return new Model.CreateAssetSAPResult { Success = false, ErrorMessage = $"Lipsa mapare cont GL pentru subCategoria: {subCategory.Code + " - " + subCategory.Name}!" };
                                //    //}
                                //}

                                document = new Model.Document
                                {
                                    Approved = true,
                                    DocumentTypeId = documentType != null ? documentType.Id : 1,
                                    DocNo1 = string.Empty,
                                    DocNo2 = string.Empty,
                                    DocumentDate = DateTime.Now,
                                    CreationDate = DateTime.Now,
                                    CostCenterId = costCenter != null ? costCenter.Id : (int?)null,
                                    RegisterDate = DateTime.Now,
                                    Details = string.Empty,
                                    ParentDocumentId = inventory.DocumentId
                                };

                                partner = await _context.Set<Model.Partner>().Where(a => a.Id == order.Offer.PartnerId).SingleOrDefaultAsync();

                                document.PartnerId = partner.Id;

                                _context.Add(document);

                                int? value = null;

                                asset.InvNo = costCenter.Company.Code + "OPT0000000000" + entityType.Name;
                                asset.Name = material.Name;
                                asset.PurchaseDate = DateTime.Now;
                                asset.SerialNumber = "";// assetDto.SerialNumber;
                                asset.ERPCode = costCenter.Company.Code + "OPT0000000000" + entityType.Name;
                                asset.Document = document;
                                asset.Validated = true;
                                asset.SAPCode = costCenter.Company.Code + "OPT0000000000" + entityType.Name;
                                asset.AssetStateId = assetStateId;
                                //asset.AssetTypeId = accountancy != null ? accountancy.AssetTypeId : defaultNull;
                                asset.CostCenterId = costCenter.Id;

                                costCenter = _context.Set<Model.CostCenter>().Include(c => c.Division).Where(c => c.Id == asset.CostCenterId).SingleOrDefault();

                                asset.DepartmentId = costCenter.Division.DepartmentId;
                                asset.DivisionId = costCenter.DivisionId;
                                //asset.AssetCategoryId = accountancy != null ? accountancy.AssetCategoryId : defaultNull;
                                asset.Employee = employee;
                                asset.RoomId = costCenter.RoomId;
                                //asset.ValueInv = orderMaterial.Price;
                                //asset.ValueInvRon = orderMaterial.Price * order.Rate.Value;
                                //asset.ValueRem = orderMaterial.Price;
                                //asset.ValueRemRon = orderMaterial.Price * order.Rate.Value;

                                asset.ValueInv = requestBFMaterialCostCenter.Price;
                                asset.ValueInvRon = requestBFMaterialCostCenter.PriceRon;
                                asset.ValueRem = requestBFMaterialCostCenter.Price;
                                asset.ValueRemRon = requestBFMaterialCostCenter.PriceRon;

                                asset.InvStateId = invState.Id;
                                asset.Quantity = requestBFMaterialCostCenter.QuantityRem;
                                asset.Custody = false;
                                //asset.UomId = assetDto.UomId;
                                asset.Company = costCenter.Company;
                                asset.Validated = true;
                                
                                asset.BudgetManagerId = inventory.BudgetManagerId;
                                //asset.AssetNatureId = assetDto.AssetNatureId;
                                asset.SubTypeId = material.SubTypeId;
                                //asset.InsuranceCategoryId = assetDto.InsuranceCategoryId;
                                //asset.BrandId = assetDto.BrandId;
                                //asset.ModelId = assetDto.ModelId;
                                //asset.InterCompanyId = assetDto.InterCompanyId;
                                asset.ProjectId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.RequestBudgetForecast.BudgetForecast.BudgetBase.ProjectId;
                                //asset.InvoiceDate = assetDto.InvoiceDate;
                                //asset.PODate = assetDto.PODate;
                                //asset.ReceptionDate = assetDto.ReceptionDate;
                                //asset.RemovalDate = assetDto.RemovalDate;
                                asset.IsTemp = false;
                                //asset.DimensionId = assetDto.DimensionId;
                                asset.DictionaryItem = dictionaryItem;
                                asset.IsAccepted = true;
                                asset.IsReconcile = false;
                                asset.OrderId = order.Id;
                                asset.BudgetId = order.BudgetId;
                                asset.BudgetBaseId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.RequestBudgetForecast.BudgetForecast.BudgetBaseId;
                                //asset.DivisionId = assetDto.DivisionId;
                                //asset.ProjectTypeId = assetDto.ProjectTypeId;
                                asset.AgreementNo = string.Empty;// assetDto.PlateNo;
                               // asset.Name = subCategory.Name;
                                asset.MaterialId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.MaterialId;
                                asset.AdministrationId = costCenter.AdministrationId;
                                asset.DepartmentId = costCenter.Division.DepartmentId;
                                //asset.AccountId = accountancy != null ? accountancy.AccountId : defaultNull;
                                //asset.ExpAccountId = accountancy != null ? accountancy.ExpAccountId : defaultNull;
                                asset.AllowLabel = true;
                                asset.MaterialId = material.Id;
                                asset.DivisionId = costCenter.DivisionId;
                                //asset.ProjectTypeId = order.Budget.ProjectTypeId;
                                asset.ProjectTypeId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.RequestBudgetForecast.BudgetForecast.BudgetBase.ProjectTypeId;
                                asset.RateId = order.Contract != null ? order.Contract.ContractAmount.RateId : null;
                                asset.ContractId = order.ContractId;
                                // asset.UomId = order.Contract.ContractAmount.UomId;
                                asset.UomId = order.UomId;
                                //asset.NetAmount = orderMaterial.Price;
                                //asset.NetAmountRon = orderMaterial.Price * order.Rate.Value;
                                //asset.OrderMaterialId = assetDto.OrderMaterialId;
                                //asset.OfferMaterialId = orderMaterial.OfferMaterialId;

                                asset.NetAmount = requestBFMaterialCostCenter.Price;
                                asset.NetAmountRon = requestBFMaterialCostCenter.PriceRon;
                                asset.OrderMaterialId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.OrderMaterialId;
                                asset.OfferMaterialId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.OfferMaterialId;
                                asset.BudgetForecastId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.RequestBudgetForecast.BudgetForecastId;
                                asset.ReqBFMaterialId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.Id;
                                asset.ReqBFMCostCenterId = requestBFMaterialCostCenter.Id;
                                asset.ReceptionPrice = requestBFMaterialCostCenter.PriceRon;
                                asset.CostCenterEmpId = employee != null && employee.CostCenter != null ? employee.CostCenter.Id : requestBFMaterialCostCenter.CostCenterId;
                                asset.ParentAssetId = assetEntity != null ? assetEntity.Id : (int?)null;
                                //asset.SubCategoryId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.Material.SubCategoryId;
                                asset.RequestId = offerMaterial.RequestId;
                                asset.Wip = order.OrderType.Code == "WIP" ? true : false;


                                assetAC = new Model.AssetAC
                                {
                                    AssetClassTypeId = assetClassType.Id,
                                    Asset = asset,
                                    AssetClassId = assetClass.Id,
                                    AssetClassIdIn = assetClass.Id
                                };


                                _context.Set<Model.AssetAC>().Add(assetAC);

                                var monthSum = 0;


                                assetDep = new Model.AssetDep
                                {
                                    AccSystem = accSystem,
                                    Asset = asset,
                                    DepPeriod = (int)monthSum,
                                    DepPeriodIn = (int)monthSum,
                                    DepPeriodMonth = (int)monthSum,
                                    DepPeriodMonthIn = 0,
                                    DepPeriodRem = (int)monthSum,
                                    DepPeriodRemIn = (int)monthSum,
                                    UsageStartDate = documentDate,
                                    ValueDep = requestBFMaterialCostCenter.Price,
                                    ValueDepIn = requestBFMaterialCostCenter.Price,
                                    ValueDepPU = requestBFMaterialCostCenter.Price,
                                    ValueDepPUIn = requestBFMaterialCostCenter.Price,
                                    ValueDepYTD = requestBFMaterialCostCenter.Price,
                                    ValueDepYTDIn = requestBFMaterialCostCenter.Price,
                                    ValueInv = requestBFMaterialCostCenter.Price,
                                    ValueInvIn = requestBFMaterialCostCenter.Price,
                                    ValueRem = requestBFMaterialCostCenter.Price,
                                    ValueRemIn = requestBFMaterialCostCenter.Price
                                };

                                _context.Set<Model.AssetDep>().Add(assetDep);


                                assetInv = new Model.AssetInv
                                {
                                    Asset = asset,
                                    AllowLabel = true,
                                    Barcode = entityType.Code + entityType.Name,
                                    InvName = asset.Name,
                                    InvNoOld = string.Empty,
                                    InvStateId = invState.Id
                                };

                                _context.Set<Model.AssetInv>().Add(assetInv);

                                assetDepMD = new Model.AssetDepMD
                                {
                                    AccMonthId = inventory.AccMonthId.Value,
                                    AccSystem = accSystem,
                                    Asset = asset,
                                    UsefulLife = (int)monthSum,
                                    TotLifeInpPeriods = (int)monthSum,
                                    RemLifeInPeriods = 0,
                                    AccumulDep = requestBFMaterialCostCenter.Price,
                                    BkValFYStart = requestBFMaterialCostCenter.Price,
                                    DepForYear = requestBFMaterialCostCenter.Price,
                                    CurrentAPC = requestBFMaterialCostCenter.Price,
                                    PosCap = requestBFMaterialCostCenter.Price
                                };

                                _context.Set<Model.AssetDepMD>().Add(assetDepMD);


                                assetAdmMD = new Model.AssetAdmMD
                                {
                                    AccMonthId = inventory.AccMonthId.Value,
                                    Asset = asset,
                                    Administration = administration,
                                    DepartmentId = null
                                };

                                assetAdmMD.AssetStateId = assetStateId;
                                //assetAdmMD.AssetTypeId = accountancy != null ? accountancy.AssetTypeId : defaultNull;
                                assetAdmMD.CostCenterId = costCenter.Id;
                                assetAdmMD.DepartmentId = costCenter.Division.DepartmentId;
                                assetAdmMD.DivisionId = costCenter.DivisionId;
                                assetAdmMD.EmployeeId = employee != null ? employee.Id : (int?)null;
                                assetAdmMD.RoomId = costCenter.RoomId;
                                //assetAdmMD.AssetCategoryId = accountancy != null ? accountancy.AssetCategoryId : defaultNull;
                                assetAdmMD.AssetClass = assetClass;
                                

                                //assetAdmMD.AssetNatureId = assetDto.AssetNatureId;
                                assetAdmMD.BudgetManagerId = inventory.BudgetManagerId;
                                assetAdmMD.SubTypeId = material.SubTypeId;
                                //assetAdmMD.InsuranceCategoryId = assetDto.InsuranceCategoryId;
                                //assetAdmMD.ModelId = assetDto.ModelId;
                                //assetAdmMD.BrandId = assetDto.BrandId;
                                //
                                assetAdmMD.ProjectId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.RequestBudgetForecast.BudgetForecast.BudgetBase.ProjectId;

                                assetAdmMD.AdmCenterId = costCenter.AdmCenterId;
                                assetAdmMD.RegionId = costCenter.RegionId;
                                assetAdmMD.AdministrationId = costCenter.AdministrationId;
                                assetAdmMD.DepartmentId = costCenter.Division.DepartmentId;
                                //assetAdmMD.AccountId = accountancy != null ? accountancy.AccountId : defaultNull;
                                //assetAdmMD.ExpAccountId = accountancy != null ? accountancy.ExpAccountId : defaultNull;
                                assetAdmMD.DivisionId = costCenter.DivisionId;
                                // assetAdmMD.ProjectTypeId = order.Budget.ProjectTypeId;
                                assetAdmMD.ProjectTypeId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.RequestBudgetForecast.BudgetForecast.BudgetBase.ProjectTypeId;

                                _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);

                                entityType.Name = StringsADD(entityType.Name, "1");

                                _context.Update(entityType);

                                if (inventory != null)
                                {
                                    inventoryAsset = new Model.InventoryAsset
                                    {
                                        QInitial = 1,
                                        QFinal = 0,
                                        InventoryId = inventory.Id,
                                        Asset = asset,
                                        EmployeeIdInitial = employee != null ? employee.Id : (int?)null,
                                        RoomIdInitial = costCenter.RoomId,
                                        SerialNumber = "",// assetDto.SerialNumber,
                                        StateIdInitial = invState.Id,
                                        CostCenterInitial = costCenter,
                                        AdministrationIdInitial = costCenter.AdministrationId,
                                        IsTemp = false
                                    };

                                    _context.Add(inventoryAsset);

                                    assetOp = new Model.AssetOp()
                                    {
                                        Asset = asset,
                                        Document = document,
                                        RoomIdInitial = costCenter.RoomId,
                                        RoomIdFinal = costCenter.RoomId,
                                        EmployeeIdInitial = employee != null ? employee.Id : (int?)null,
                                        EmployeeIdFinal = employee != null ? employee.Id : (int?)null,
                                        //AssetCategoryIdInitial = accountancy != null ? accountancy.AssetCategoryId : defaultNull,
                                        //AssetCategoryIdFinal = accountancy != null ? accountancy.AssetCategoryId : defaultNull,
                                        InvStateIdInitial = invState.Id,
                                        InvStateIdFinal = invState.Id,
                                        AdministrationInitial = administration,
                                        AdministrationFinal = administration,
                                        AccSystem = accSystem,
                                        DocumentId = document.Id
                                    };

                                    assetOp.AssetStateIdInitial = assetStateId;
                                    assetOp.AssetStateIdFinal = assetStateId;
                                    assetOp.CostCenterInitial = costCenter;
                                    assetOp.CostCenterFinal = costCenter;
                                    assetOp.DepartmentIdInitial = null;
                                    assetOp.DepartmentIdFinal = null;
                                    assetOp.InvName = material.Name;
                                    //assetOp.AssetTypeIdInitial = accountancy != null ? accountancy.AssetTypeId : defaultNull;
                                    //assetOp.AssetTypeIdFinal = accountancy != null ? accountancy.AssetTypeId : defaultNull;
                                    assetOp.AdministrationIdInitial = costCenter.AdministrationId;
                                    assetOp.AdministrationIdFinal = costCenter.AdministrationId;
                                    _context.Add(assetOp);


                                    //orderOp = new Model.OrderOp()
                                    //{
                                    //    AccMonthId = inventory.AccMonthId,
                                    //    AccSystemId = null,
                                    //    
                                    //    
                                    //    AdministrationIdInitial = order.AdministrationId,
                                    //    AdministrationIdFinal = order.AdministrationId,
                                    //    OrderId = order.Id,
                                    //    BudgetManagerIdInitial = null,
                                    //    BudgetManagerIdFinal = null,
                                    //    BudgetStateId = order.AppStateId,
                                    //    CompanyIdInitial = order.CompanyId,
                                    //    CompanyIdFinal = order.CompanyId,
                                    //    CostCenterIdInitial = order.CostCenterId,
                                    //    CostCenterIdFinal = order.CostCenterId,
                                    //    CreatedAt = DateTime.Now,
                                    //    CreatedBy = order.UserId,
                                    //    Document = document,
                                    //    DstConfAt = DateTime.Now,
                                    //    DstConfBy = order.UserId,
                                    //    EmployeeIdInitial = order.EmployeeId,
                                    //    EmployeeIdFinal = order.EmployeeId,
                                    //    InfoIni = order.Info,
                                    //    InfoFin = order.Info,
                                    //    InterCompanyIdInitial = order.InterCompanyId,
                                    //    InterCompanyIdFinal = order.InterCompanyId,
                                    //    IsAccepted = false,
                                    //    IsDeleted = false,
                                    //    ModifiedAt = DateTime.Now,
                                    //    ModifiedBy = order.UserId,
                                    //    PartnerIdInitial = order.PartnerId,
                                    //    PartnerIdFinal = order.PartnerId,
                                    //    ProjectIdInitial = order.ProjectId,
                                    //    ProjectIdFinal = order.ProjectId,
                                    //    QuantityIni = order.Quantity,
                                    //    QuantityFin = order.QuantityRem,
                                    //    SubTypeIdInitial = order.SubTypeId,
                                    //    SubTypeIdFinal = order.SubTypeId,
                                    //    Validated = true,
                                    //    ValueFin1 = order.ValueFin,
                                    //    ValueIni1 = order.ValueIni,
                                    //    ValueFin2 = order.ValueFin,
                                    //    ValueIni2 = order.ValueIni,
                                    //    Guid = Guid.NewGuid(),
                                    //    BudgetIdInitial = order.BudgetId,
                                    //    BudgetIdFinal = order.BudgetId,
                                    //    OfferIdInitial = order.OfferId,
                                    //    OfferIdFinal = order.OfferId,
                                    //    UomId = order.UomId
                                    //};

                                    //_context.Add(orderOp);


                                    //budgetOp = new Model.BudgetOp()
                                    //{
                                    //    AccMonthId = order.Budget.AccMonthId,
                                    //    AccSystemId = null,
                                    //    
                                    //    
                                    //    AdministrationIdInitial = order.Budget.AdministrationId,
                                    //    AdministrationIdFinal = order.Budget.AdministrationId,
                                    //    BudgetId = order.Budget.Id,
                                    //    BudgetManagerIdInitial = null,
                                    //    BudgetManagerIdFinal = null,
                                    //    BudgetStateId = order.Budget.AppStateId,
                                    //    CompanyIdInitial = order.Budget.CompanyId,
                                    //    CompanyIdFinal = order.Budget.CompanyId,
                                    //    CostCenterIdInitial = order.Budget.CostCenterId,
                                    //    CostCenterIdFinal = order.Budget.CostCenterId,
                                    //    CreatedAt = DateTime.Now,
                                    //    CreatedBy = order.Budget.UserId,
                                    //    Document = document,
                                    //    DstConfAt = DateTime.Now,
                                    //    DstConfBy = order.Budget.UserId,
                                    //    EmployeeIdInitial = order.Budget.EmployeeId,
                                    //    EmployeeIdFinal = order.Budget.EmployeeId,
                                    //    InfoIni = order.Budget.Info,
                                    //    InfoFin = order.Budget.Info,
                                    //    InterCompanyIdInitial = order.Budget.InterCompanyId,
                                    //    InterCompanyIdFinal = order.Budget.InterCompanyId,
                                    //    IsAccepted = false,
                                    //    IsDeleted = false,
                                    //    ModifiedAt = DateTime.Now,
                                    //    ModifiedBy = order.Budget.UserId,
                                    //    PartnerIdInitial = order.Budget.PartnerId,
                                    //    PartnerIdFinal = order.Budget.PartnerId,
                                    //    ProjectIdInitial = order.Budget.ProjectId,
                                    //    ProjectIdFinal = order.Budget.ProjectId,
                                    //    QuantityIni = order.Budget.Quantity,
                                    //    QuantityFin = order.Budget.QuantityRem,
                                    //    SubTypeIdInitial = order.Budget.SubTypeId,
                                    //    SubTypeIdFinal = order.Budget.SubTypeId,
                                    //    Validated = true,
                                    //    ValueFin1 = order.Budget.ValueFin,
                                    //    ValueIni1 = order.Budget.ValueIni,
                                    //    ValueFin2 = order.Budget.ValueFin,
                                    //    ValueIni2 = order.Budget.ValueIni,
                                    //    Guid = Guid.NewGuid()
                                    //};

                                    // _context.Add(budgetOp);


                                    //offerOp = new Model.OfferOp()
                                    //{
                                    //    AccMonthId = order.Offer.AccMonthId,
                                    //    AccSystemId = null,
                                    //    AccountIdInitial = order.Offer.AccountId,
                                    //    AccountIdFinal = order.Offer.AccountId,
                                    //    AdministrationIdInitial = order.Offer.AdministrationId,
                                    //    AdministrationIdFinal = order.Offer.AdministrationId,
                                    //    OfferId = order.Offer.Id,
                                    //    BudgetManagerIdInitial = null,
                                    //    BudgetManagerIdFinal = null,
                                    //    BudgetStateId = 1,
                                    //    CompanyIdInitial = order.Offer.CompanyId,
                                    //    CompanyIdFinal = order.Offer.CompanyId,
                                    //    CostCenterIdInitial = order.Offer.CostCenterId,
                                    //    CostCenterIdFinal = order.Offer.CostCenterId,
                                    //    CreatedAt = DateTime.Now,
                                    //    CreatedBy = order.Offer.UserId,
                                    //    Document = document,
                                    //    DstConfAt = DateTime.Now,
                                    //    DstConfBy = order.Offer.UserId,
                                    //    EmployeeIdInitial = order.Offer.EmployeeId,
                                    //    EmployeeIdFinal = order.Offer.EmployeeId,
                                    //    InfoIni = order.Offer.Info,
                                    //    InfoFin = order.Offer.Info,
                                    //    InterCompanyIdInitial = order.Offer.InterCompanyId,
                                    //    InterCompanyIdFinal = order.Offer.InterCompanyId,
                                    //    IsAccepted = false,
                                    //    IsDeleted = false,
                                    //    ModifiedAt = DateTime.Now,
                                    //    ModifiedBy = order.Offer.UserId,
                                    //    PartnerIdInitial = order.Offer.PartnerId,
                                    //    PartnerIdFinal = order.Offer.PartnerId,
                                    //    ProjectIdInitial = order.Offer.ProjectId,
                                    //    ProjectIdFinal = order.Offer.ProjectId,
                                    //    QuantityIni = order.Offer.Quantity,
                                    //    QuantityFin = order.Offer.QuantityRem,
                                    //    SubTypeIdInitial = order.Offer.SubTypeId,
                                    //    SubTypeIdFinal = order.Offer.SubTypeId,
                                    //    Validated = true,
                                    //    ValueFin1 = order.Offer.ValueFin,
                                    //    ValueIni1 = order.Offer.ValueIni,
                                    //    ValueFin2 = order.Offer.ValueFin,
                                    //    ValueIni2 = order.Offer.ValueIni,
                                    //    Guid = Guid.NewGuid()
                                    //};

                                    //_context.Add(offerOp);

                                    // var lastInventoryDoc = "";
                                    // var lastInventoryDate = inventory.End.Value.ToString("yyyyMMdd");
                                    // var lastInventoryDate = DateTime.Now.ToString("yyyyMMdd");
                                    //var committee = _context.Committees.AsNoTracking().Where(a => a.IsDeleted == false && a.CostCenterId == assetDto.CostCenterId).FirstOrDefault();

                                    //if (committee != null)
                                    //{
                                    //    lastInventoryDoc = committee.Document1;
                                    //}

                                    var names = SplitToLines(material.Name, 50);
                                    var countNames = names.Count();

                                    //asset.Name1 = countNames > 0 ? names.ElementAt(0) : "";
                                    //asset.Name2 = countNames > 1 ? names.ElementAt(1) : "";
                                    //asset.Name3 = countNames > 2 ? names.ElementAt(2) : "";
                                    //asset.LastInventoryDate = lastInventoryDate;
                                    //asset.LastInventoryDoc = lastInventoryDoc;
                                    //asset.PlateNo = assetDto.PlateNo != null && assetDto.PlateNo != "" ? assetDto.PlateNo : "";
                                    //asset.InConservation = assetDto.InConservation;
                                    //asset.NotSync = true;

                                    createAssetSAP = new Model.CreateAssetSAP();
#if DEBUG
                                    createAssetSAP.IsDeleted = true;
#endif

                                    createAssetSAP.IsTesting = true;
                                    createAssetSAP.XSUBNO = assetEntity != null ? "X" : "";
                                    createAssetSAP.COMPANYCODE = costCenter.Company.Code;
                                    createAssetSAP.ASSET = assetEntity != null ? assetEntity.InvNo : "";
                                    createAssetSAP.SUBNUMBER = "";
                                    //createAssetSAP.ASSETCLASS = accountancy != null ? accountancy.ExpAccount.Name : "";
                                    createAssetSAP.POSTCAP = "";
                                    createAssetSAP.DESCRIPT = countNames > 0 ? names.ElementAt(0) : "";
                                    createAssetSAP.DESCRIPT2 = countNames > 1 ? names.ElementAt(1) : "";
                                    createAssetSAP.INVENT_NO = asset.InvNo;
                                    createAssetSAP.SERIAL_NO = "";// assetDto.SerialNumber == null || assetDto.SerialNumber == "" ? "" : assetDto.SerialNumber;
                                    createAssetSAP.QUANTITY = requestBFMaterialCostCenter.QuantityRem;
                                    createAssetSAP.BASE_UOM = "ST";
                                    createAssetSAP.LAST_INVENTORY_DATE = "00000000";
                                    createAssetSAP.LAST_INVENTORY_DOCNO = "";
                                    //createAssetSAP.CAP_DATE = assetDto.CapitalizationDate != null ? assetDto.CapitalizationDate.ToString("yyyyMMdd") : "00000000";
                                    createAssetSAP.CAP_DATE = "00000000";
                                    createAssetSAP.COSTCENTER = employee != null && employee.CostCenter != null ? employee.CostCenter.Code : costCenter.Code;
                                    createAssetSAP.RESP_CCTR = costCenter.Code;
                                    createAssetSAP.INTERN_ORD = "";
                                    createAssetSAP.PLANT = "RO02";
                                    createAssetSAP.LOCATION = "";
                                    createAssetSAP.ROOM = "";
                                    createAssetSAP.PERSON_NO = employee != null ? employee.InternalCode : "";
                                    createAssetSAP.PLATE_NO = "";// assetDto.PlateNo != null && assetDto.PlateNo != "" ? assetDto.PlateNo : "";
                                    //createAssetSAP.ZZCLAS = accountancy != null && accountancy.AssetCategory != null ? accountancy.AssetCategory.Code : "";
                                    // createAssetSAP.IN_CONSERVATION = assetDto.InConservation ? "X" : "";
                                    createAssetSAP.IN_CONSERVATION = "";
                                    createAssetSAP.PROP_IND = "1";
                                    createAssetSAP.OPTIMA_ASSET_NO = asset.InvNo;
                                    createAssetSAP.OPTIMA_ASSET_PARENT_NO = "";
                                    createAssetSAP.TESTRUN = "";
                                    createAssetSAP.VENDOR_NO = partner.RegistryNumber;
                                    //createAssetSAP.VENDOR_NO = "";
                                    createAssetSAP.Asset = asset;
                                    createAssetSAP.NotSync = true;
                                    createAssetSAP.SyncErrorCount = 0;
                                    createAssetSAP.BudgetManagerId = inventory.BudgetManagerId.Value;
                                    createAssetSAP.AccMonthId = inventory.AccMonthId.Value;
                                    createAssetSAP.CreatedBy = _context.UserId;
                                    createAssetSAP.ModifiedBy = _context.UserId;
                                    createAssetSAP.INVOICE = document.DocNo1;


                                    // asset.CreateAssetSAP = createAssetSAP;

                                    asset.NotSync = true;
                                    asset.IsLocked = true;

                                    _context.Add(createAssetSAP);
                                }

                                budgetBaseAsset = new BudgetBaseAsset()
                                {
                                    BudgetBaseId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.RequestBudgetForecast.BudgetForecast.BudgetBaseId,
                                    BudgetTypeId = 1,
                                    BudgetManagerId = inventory.BudgetManagerId.Value,
                                    AccMonthId = inventory.AccMonthId.Value,
                                    AppStateId = 1,
                                    Asset = asset,
                                    IsLast = true,
                                    IsFirst = true,
                                };

                                _context.Add(budgetBaseAsset);

                                _context.SaveChanges();
                            }
                            else
                            {
                                for (int j = 0; j < requestBFMaterialCostCenters[c].QuantityRem; j++)
                                {
                                    entityType = await _context.Set<Model.EntityType>().Where(c => c.UploadFolder == "NEWASSET").SingleAsync();

                                    if (requestBFMaterialCostCenters[c].RequestBudgetForecastMaterial.ParentAsset != null && requestBFMaterialCostCenters[c].RequestBudgetForecastMaterial.ParentAsset != "")
                                    {
                                        assetEntity = await _context.Set<Model.Asset>().AsNoTracking().Where(a => (a.InvNo == requestBFMaterialCostCenters[c].RequestBudgetForecastMaterial.ParentAsset && a.SubNo == "0000" && a.IsDeleted == false)).FirstOrDefaultAsync();
                                    }

                                    asset = new Model.Asset()
                                    {
                                        Document = document
                                    };

                                    _context.Add(asset);

                                    costCenter = await _context.Set<Model.CostCenter>()
                                        .Include(c => c.Room)
                                        .Include(c => c.AdmCenter)
                                        .Include(c => c.Region)
                                        .Include(c => c.Company)
                                        .Include(a => a.Administration)
                                        .Include(d => d.Division)
                                        .ThenInclude(d => d.Department)
                                        .Where(a => a.Id == requestBFMaterialCostCenter.CostCenterId).SingleAsync();

                                    //if (requestBFMaterialCostCenter.RequestBudgetForecastMaterial.Material.SubCategoryId != null)
                                    //{
                                    //    subCategory = await _context.Set<Model.SubCategory>()
                                    //    .Include(a => a.Category)
                                            
                                    //    .Where(a => a.Id == requestBFMaterialCostCenter.RequestBudgetForecastMaterial.Material.SubCategoryId).SingleAsync();
                                    //}
                                    //else
                                    //{
                                    //    subCategory = await _context.Set<Model.SubCategory>()
                                    //    .Include(a => a.Category)
                                            
                                    //    .Where(a => a.Code == "NO_SUB").SingleAsync();
                                    //}


                                    //dictionaryItem = await _context.Set<Model.DictionaryItem>().Where(a => a.Name == subCategory.Name).SingleOrDefaultAsync();

                                    if (dictionaryItem == null)
                                    {
                                        //dictionaryItem = new Model.DictionaryItem()
                                        //{
                                        //    Code = "NEW",
                                        //    Name = subCategory.Name,
                                        //    IsDeleted = false,
                                        //    AssetCategoryId = subCategory.Category.InterCompany.AssetCategoryId,
                                        //    DictionaryTypeId = 1
                                        //};

                                        _context.Add(dictionaryItem);
                                    }

                                    employee = await _context.Set<Model.Employee>().Include(c => c.CostCenter).Where(a => a.Id == requestBFMaterialCostCenters[c].EmployeeId).SingleOrDefaultAsync();
                                    material = await _context.Set<Model.Material>().Include(a => a.SubType).Where(a => a.Id == requestBFMaterialCostCenter.RequestBudgetForecastMaterial.MaterialId).SingleAsync();

                                    offerMaterial = await _context.Set<Model.OfferMaterial>().Where(a => a.Id == requestBFMaterialCostCenter.RequestBudgetForecastMaterial.OfferMaterialId).SingleAsync();

                                    if (offerMaterial != null)
                                    {
                                        offerMaterial.ReceptionsPrice = requestBFMaterialCostCenter.PriceRon;

                                        _context.Update(offerMaterial);
                                    }

                                    //if (requestBFMaterialCostCenter.RequestBudgetForecastMaterial.Material.SubCategoryId != null)
                                    //{
                                    //    //if (requestBFMaterialCostCenter.Price > 2500)
                                    //    //{

                                    //    //    accountancy = await _context.Set<Model.Accountancy>()

                                    //    //      .Include(a => a.Account)
                                    //    //      
                                    //    //      .Include(a => a.AssetCategory)
                                    //    //      .Include(a => a.AssetType)
                                    //    //      .Where(a => a.SubCategoryId == requestBFMaterialCostCenter.RequestBudgetForecastMaterial.Material.SubCategoryId && a.Value > 2500 && a.IsDeleted == false).SingleOrDefaultAsync();

                                    //    //    // if (accountancy == null) return new Model.CreateAssetSAPResult { Success = false, ErrorMessage = $"Lipsa mapare cont GL pentru subCategoria: {subCategory.Code + " - " + subCategory.Name}!" };
                                    //    //}
                                    //    //else
                                    //    //{

                                    //    //    accountancy = await _context.Set<Model.Accountancy>()

                                    //    //     .Include(a => a.Account)
                                    //    //     
                                    //    //     .Include(a => a.AssetCategory)
                                    //    //     .Include(a => a.AssetType)
                                    //    //     .Where(a => a.SubCategoryId == requestBFMaterialCostCenter.RequestBudgetForecastMaterial.Material.SubCategoryId && a.Value == 2500 && a.IsDeleted == false).SingleOrDefaultAsync();

                                    //    //    // if (accountancy == null) return new Model.CreateAssetSAPResult { Success = false, ErrorMessage = $"Lipsa mapare cont GL pentru subCategoria: {subCategory.Code + " - " + subCategory.Name}!" };
                                    //    //}
                                    //}



                                    document = new Model.Document
                                    {
                                        Approved = true,
                                        DocumentTypeId = documentType != null ? documentType.Id : 1,
                                        DocNo1 = string.Empty,
                                        DocNo2 = string.Empty,
                                        DocumentDate = DateTime.Now,
                                        CreationDate = DateTime.Now,
                                        CostCenterId = costCenter != null ? costCenter.Id : (int?)null,
                                        RegisterDate = DateTime.Now,
                                        Details = string.Empty,
                                        ParentDocumentId = inventory.DocumentId
                                    };


                                    partner = await _context.Set<Model.Partner>().Where(a => a.Id == order.Offer.PartnerId).SingleOrDefaultAsync();

                                    document.PartnerId = partner.Id;

                                    _context.Add(document);

                                    int? value = null;

                                    asset.InvNo = costCenter.Company.Code + "OPT0000000000" + entityType.Name;
                                    asset.Name = material.Name;
                                    asset.PurchaseDate = DateTime.Now;
                                    asset.SerialNumber = "";// assetDto.SerialNumber;
                                    asset.ERPCode = costCenter.Company.Code + "OPT0000000000" + entityType.Name;
                                    asset.Document = document;
                                    asset.Validated = true;
                                    asset.SAPCode = costCenter.Company.Code + "OPT0000000000" + entityType.Name;
                                    asset.AssetStateId = assetStateId;
                                    //asset.AssetTypeId = accountancy != null ? accountancy.AssetTypeId : defaultNull;
                                    asset.CostCenterId = costCenter.Id;
                                    asset.DepartmentId = costCenter.Division.DepartmentId;
                                    asset.DivisionId = costCenter.DivisionId;
                                    //asset.AssetCategoryId = accountancy != null ? accountancy.AssetCategoryId : defaultNull;
                                    asset.Employee = employee;
                                    asset.RoomId = costCenter.RoomId;
                                    //asset.ValueInv = orderMaterial.Price;
                                    //asset.ValueInvRon = orderMaterial.Price * order.Rate.Value;
                                    //asset.ValueRem = orderMaterial.Price;
                                    //asset.ValueRemRon = orderMaterial.Price * order.Rate.Value;

                                    asset.ValueInv = requestBFMaterialCostCenter.Price;
                                    asset.ValueInvRon = requestBFMaterialCostCenter.PriceRon;
                                    asset.ValueRem = requestBFMaterialCostCenter.Price;
                                    asset.ValueRemRon = requestBFMaterialCostCenter.PriceRon;

                                    asset.InvStateId = invState.Id;
                                    asset.Quantity = 1;
                                    asset.Custody = false;
                                    //asset.UomId = assetDto.UomId;
                                    asset.Company = costCenter.Company;
                                    asset.Validated = true;
                                    
                                    asset.BudgetManagerId = inventory.BudgetManagerId;
                                    //asset.AssetNatureId = assetDto.AssetNatureId;
                                    asset.SubTypeId = material.SubTypeId;
                                    //asset.InsuranceCategoryId = assetDto.InsuranceCategoryId;
                                    //asset.BrandId = assetDto.BrandId;
                                    //asset.ModelId = assetDto.ModelId;
                                    //asset.InterCompanyId = assetDto.InterCompanyId;
                                    asset.ProjectId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.RequestBudgetForecast.BudgetForecast.BudgetBase.ProjectId;
                                    //asset.InvoiceDate = assetDto.InvoiceDate;
                                    //asset.PODate = assetDto.PODate;
                                    //asset.ReceptionDate = assetDto.ReceptionDate;
                                    //asset.RemovalDate = assetDto.RemovalDate;
                                    asset.IsTemp = false;
                                    //asset.DimensionId = assetDto.DimensionId;
                                    asset.DictionaryItem = dictionaryItem;
                                    asset.IsAccepted = true;
                                    asset.IsReconcile = false;
                                    asset.OrderId = order.Id;
                                    asset.BudgetId = order.BudgetId;
                                    asset.BudgetBaseId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.RequestBudgetForecast.BudgetForecast.BudgetBaseId;
                                    //asset.DivisionId = assetDto.DivisionId;
                                    //asset.ProjectTypeId = assetDto.ProjectTypeId;
                                    asset.AgreementNo = "";// assetDto.PlateNo;
                                   // asset.Name = subCategory.Name;
                                    asset.MaterialId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.MaterialId;
                                    asset.AdministrationId = costCenter.AdministrationId;
                                    asset.DepartmentId = costCenter.Division.DepartmentId;
                                    //asset.AccountId = accountancy != null ? accountancy.AccountId : defaultNull;
                                    //asset.ExpAccountId = accountancy != null ? accountancy.ExpAccountId : defaultNull;
                                    asset.AllowLabel = true;
                                    asset.MaterialId = material.Id;
                                    asset.DivisionId = costCenter.DivisionId;
                                    //asset.ProjectTypeId = order.Budget.ProjectTypeId;
                                    asset.ProjectTypeId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.RequestBudgetForecast.BudgetForecast.BudgetBase.ProjectTypeId;
                                    asset.RateId = order.Contract != null && order.Contract.ContractAmount != null ? order.Contract.ContractAmount.RateId : null;
                                    asset.ContractId = order.ContractId;
                                    // asset.UomId = order.Contract.ContractAmount.UomId;
                                    asset.UomId = order.UomId;
                                    //asset.NetAmount = orderMaterial.Price;
                                    //asset.NetAmountRon = orderMaterial.Price * order.Rate.Value;
                                    //asset.OrderMaterialId = assetDto.OrderMaterialId;
                                    //asset.OfferMaterialId = orderMaterial.OfferMaterialId;

                                    asset.NetAmount = requestBFMaterialCostCenter.Price;
                                    asset.NetAmountRon = requestBFMaterialCostCenter.PriceRon;
                                    asset.OrderMaterialId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.OrderMaterialId;
                                    asset.OfferMaterialId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.OfferMaterialId;
                                    asset.BudgetForecastId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.RequestBudgetForecast.BudgetForecastId;
                                    asset.ReqBFMaterialId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.Id;
                                    asset.ReqBFMCostCenterId = requestBFMaterialCostCenter.Id;

                                    asset.ReceptionPrice = requestBFMaterialCostCenter.PriceRon;
                                    asset.CostCenterEmpId = employee != null && employee.CostCenter != null ? employee.CostCenter.Id : requestBFMaterialCostCenter.CostCenterId;
                                    asset.ParentAssetId = assetEntity != null ? assetEntity.Id : (int?)null;
                                    //asset.SubCategoryId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.Material.SubCategoryId;
                                    asset.RequestId = offerMaterial.RequestId;
                                    asset.Wip = order.OrderType.Code == "WIP" ? true : false;

                                    assetAC = new Model.AssetAC
                                    {
                                        AssetClassTypeId = assetClassType.Id,
                                        Asset = asset,
                                        AssetClassId = assetClass.Id,
                                        AssetClassIdIn = assetClass.Id
                                    };


                                    _context.Set<Model.AssetAC>().Add(assetAC);

                                    var monthSum = 0;


                                    assetDep = new Model.AssetDep
                                    {
                                        AccSystem = accSystem,
                                        Asset = asset,
                                        DepPeriod = (int)monthSum,
                                        DepPeriodIn = (int)monthSum,
                                        DepPeriodMonth = (int)monthSum,
                                        DepPeriodMonthIn = 0,
                                        DepPeriodRem = (int)monthSum,
                                        DepPeriodRemIn = (int)monthSum,
                                        UsageStartDate = documentDate,
                                        ValueDep = requestBFMaterialCostCenter.Price,
                                        ValueDepIn = requestBFMaterialCostCenter.Price,
                                        ValueDepPU = requestBFMaterialCostCenter.Price,
                                        ValueDepPUIn = requestBFMaterialCostCenter.Price,
                                        ValueDepYTD = requestBFMaterialCostCenter.Price,
                                        ValueDepYTDIn = requestBFMaterialCostCenter.Price,
                                        ValueInv = requestBFMaterialCostCenter.Price,
                                        ValueInvIn = requestBFMaterialCostCenter.Price,
                                        ValueRem = requestBFMaterialCostCenter.Price,
                                        ValueRemIn = requestBFMaterialCostCenter.Price
                                    };

                                    _context.Set<Model.AssetDep>().Add(assetDep);


                                    assetInv = new Model.AssetInv
                                    {
                                        Asset = asset,
                                        AllowLabel = true,
                                        Barcode = entityType.Code + entityType.Name,
                                        InvName = asset.Name,
                                        InvNoOld = string.Empty,
                                        InvStateId = invState.Id
                                    };

                                    _context.Set<Model.AssetInv>().Add(assetInv);

                                    assetDepMD = new Model.AssetDepMD
                                    {
                                        AccMonthId = inventory.AccMonthId.Value,
                                        AccSystem = accSystem,
                                        Asset = asset,
                                        UsefulLife = (int)monthSum,
                                        TotLifeInpPeriods = (int)monthSum,
                                        RemLifeInPeriods = 0,
                                        AccumulDep = requestBFMaterialCostCenter.Price,
                                        BkValFYStart = requestBFMaterialCostCenter.Price,
                                        DepForYear = requestBFMaterialCostCenter.Price,
                                        CurrentAPC = requestBFMaterialCostCenter.Price,
                                        PosCap = requestBFMaterialCostCenter.Price
                                    };

                                    _context.Set<Model.AssetDepMD>().Add(assetDepMD);


                                    assetAdmMD = new Model.AssetAdmMD
                                    {
                                        AccMonthId = inventory.AccMonthId.Value,
                                        Asset = asset,
                                        Administration = administration,
                                        DepartmentId = null
                                    };

                                    assetAdmMD.AssetStateId = assetStateId;
                                    //assetAdmMD.AssetTypeId = accountancy != null ? accountancy.AssetTypeId : defaultNull;
                                    assetAdmMD.CostCenterId = costCenter.Id;
                                    assetAdmMD.DepartmentId = costCenter.Division.DepartmentId;
                                    assetAdmMD.DivisionId = costCenter.DivisionId;
                                    assetAdmMD.EmployeeId = employee != null ? employee.Id : (int?)null;
                                    assetAdmMD.RoomId = costCenter.RoomId;
                                    //assetAdmMD.AssetCategoryId = accountancy != null ? accountancy.AssetCategoryId : defaultNull;
                                    assetAdmMD.AssetClass = assetClass;
                                    

                                    //assetAdmMD.AssetNatureId = assetDto.AssetNatureId;
                                    assetAdmMD.BudgetManagerId = inventory.BudgetManagerId;
                                    assetAdmMD.SubTypeId = material.SubTypeId;
                                    //assetAdmMD.InsuranceCategoryId = assetDto.InsuranceCategoryId;
                                    //assetAdmMD.ModelId = assetDto.ModelId;
                                    //assetAdmMD.BrandId = assetDto.BrandId;
                                    //
                                    assetAdmMD.ProjectId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.RequestBudgetForecast.BudgetForecast.BudgetBase.ProjectId;

                                    assetAdmMD.AdmCenterId = costCenter.AdmCenterId;
                                    assetAdmMD.RegionId = costCenter.RegionId;
                                    assetAdmMD.AdministrationId = costCenter.AdministrationId;
                                    assetAdmMD.DepartmentId = costCenter.Division.DepartmentId;
                                    //assetAdmMD.AccountId = accountancy != null ? accountancy.AccountId : defaultNull;
                                    //assetAdmMD.ExpAccountId = accountancy != null ? accountancy.ExpAccountId : defaultNull;
                                    // assetAdmMD.ProjectTypeId = order.Budget.ProjectTypeId;
                                    assetAdmMD.ProjectTypeId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.RequestBudgetForecast.BudgetForecast.BudgetBase.ProjectTypeId;

                                    _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);

                                    entityType.Name = StringsADD(entityType.Name, "1");

                                    _context.Update(entityType);

                                    if (inventory != null)
                                    {
                                        inventoryAsset = new Model.InventoryAsset
                                        {
                                            QInitial = 1,
                                            QFinal = 0,
                                            InventoryId = inventory.Id,
                                            Asset = asset,
                                            EmployeeIdInitial = employee != null ? employee.Id : (int?)null,
                                            RoomIdInitial = costCenter.RoomId,
                                            SerialNumber = "",//assetDto.SerialNumber,
                                            StateIdInitial = invState.Id,
                                            CostCenterInitial = costCenter,
                                            AdministrationIdInitial = costCenter.AdministrationId,
                                            IsTemp = false
                                        };

                                        _context.Add(inventoryAsset);

                                        assetOp = new Model.AssetOp()
                                        {
                                            Asset = asset,
                                            Document = document,
                                            RoomIdInitial = costCenter.RoomId,
                                            RoomIdFinal = costCenter.RoomId,
                                            EmployeeIdInitial = employee != null ? employee.Id : (int?)null,
                                            EmployeeIdFinal = employee != null ? employee.Id : (int?)null,
                                            //AssetCategoryIdInitial = accountancy != null ? accountancy.AssetCategoryId : defaultNull,
                                            //AssetCategoryIdFinal = accountancy != null ? accountancy.AssetCategoryId : defaultNull,
                                            InvStateIdInitial = invState.Id,
                                            InvStateIdFinal = invState.Id,
                                            AdministrationInitial = administration,
                                            AdministrationFinal = administration,
                                            AccSystem = accSystem,
                                            DocumentId = document.Id
                                        };

                                        assetOp.AssetStateIdInitial = assetStateId;
                                        assetOp.AssetStateIdFinal = assetStateId;
                                        assetOp.CostCenterInitial = costCenter;
                                        assetOp.CostCenterFinal = costCenter;
                                        assetOp.DepartmentIdInitial = null;
                                        assetOp.DepartmentIdFinal = null;
                                        assetOp.InvName = material.Name;
                                        //assetOp.AssetTypeIdInitial = accountancy != null ? accountancy.AssetTypeId : defaultNull;
                                        //assetOp.AssetTypeIdFinal = accountancy != null ? accountancy.AssetTypeId : defaultNull;
                                        assetOp.AdministrationIdInitial = costCenter.AdministrationId;
                                        assetOp.AdministrationIdFinal = costCenter.AdministrationId;
                                        _context.Add(assetOp);


                                        //orderOp = new Model.OrderOp()
                                        //{
                                        //    AccMonthId = inventory.AccMonthId,
                                        //    AccSystemId = null,
                                        //    
                                        //    
                                        //    AdministrationIdInitial = order.AdministrationId,
                                        //    AdministrationIdFinal = order.AdministrationId,
                                        //    OrderId = order.Id,
                                        //    BudgetManagerIdInitial = null,
                                        //    BudgetManagerIdFinal = null,
                                        //    BudgetStateId = order.AppStateId,
                                        //    CompanyIdInitial = order.CompanyId,
                                        //    CompanyIdFinal = order.CompanyId,
                                        //    CostCenterIdInitial = order.CostCenterId,
                                        //    CostCenterIdFinal = order.CostCenterId,
                                        //    CreatedAt = DateTime.Now,
                                        //    CreatedBy = order.UserId,
                                        //    Document = document,
                                        //    DstConfAt = DateTime.Now,
                                        //    DstConfBy = order.UserId,
                                        //    EmployeeIdInitial = order.EmployeeId,
                                        //    EmployeeIdFinal = order.EmployeeId,
                                        //    InfoIni = order.Info,
                                        //    InfoFin = order.Info,
                                        //    InterCompanyIdInitial = order.InterCompanyId,
                                        //    InterCompanyIdFinal = order.InterCompanyId,
                                        //    IsAccepted = false,
                                        //    IsDeleted = false,
                                        //    ModifiedAt = DateTime.Now,
                                        //    ModifiedBy = order.UserId,
                                        //    PartnerIdInitial = order.PartnerId,
                                        //    PartnerIdFinal = order.PartnerId,
                                        //    ProjectIdInitial = order.ProjectId,
                                        //    ProjectIdFinal = order.ProjectId,
                                        //    QuantityIni = order.Quantity,
                                        //    QuantityFin = order.QuantityRem,
                                        //    SubTypeIdInitial = order.SubTypeId,
                                        //    SubTypeIdFinal = order.SubTypeId,
                                        //    Validated = true,
                                        //    ValueFin1 = order.ValueFin,
                                        //    ValueIni1 = order.ValueIni,
                                        //    ValueFin2 = order.ValueFin,
                                        //    ValueIni2 = order.ValueIni,
                                        //    Guid = Guid.NewGuid(),
                                        //    BudgetIdInitial = order.BudgetId,
                                        //    BudgetIdFinal = order.BudgetId,
                                        //    OfferIdInitial = order.OfferId,
                                        //    OfferIdFinal = order.OfferId,
                                        //    UomId = order.UomId
                                        //};

                                        //_context.Add(orderOp);


                                        //budgetOp = new Model.BudgetOp()
                                        //{
                                        //    AccMonthId = order.Budget.AccMonthId,
                                        //    AccSystemId = null,
                                        //    
                                        //    
                                        //    AdministrationIdInitial = order.Budget.AdministrationId,
                                        //    AdministrationIdFinal = order.Budget.AdministrationId,
                                        //    BudgetId = order.Budget.Id,
                                        //    BudgetManagerIdInitial = null,
                                        //    BudgetManagerIdFinal = null,
                                        //    BudgetStateId = order.Budget.AppStateId,
                                        //    CompanyIdInitial = order.Budget.CompanyId,
                                        //    CompanyIdFinal = order.Budget.CompanyId,
                                        //    CostCenterIdInitial = order.Budget.CostCenterId,
                                        //    CostCenterIdFinal = order.Budget.CostCenterId,
                                        //    CreatedAt = DateTime.Now,
                                        //    CreatedBy = order.Budget.UserId,
                                        //    Document = document,
                                        //    DstConfAt = DateTime.Now,
                                        //    DstConfBy = order.Budget.UserId,
                                        //    EmployeeIdInitial = order.Budget.EmployeeId,
                                        //    EmployeeIdFinal = order.Budget.EmployeeId,
                                        //    InfoIni = order.Budget.Info,
                                        //    InfoFin = order.Budget.Info,
                                        //    InterCompanyIdInitial = order.Budget.InterCompanyId,
                                        //    InterCompanyIdFinal = order.Budget.InterCompanyId,
                                        //    IsAccepted = false,
                                        //    IsDeleted = false,
                                        //    ModifiedAt = DateTime.Now,
                                        //    ModifiedBy = order.Budget.UserId,
                                        //    PartnerIdInitial = order.Budget.PartnerId,
                                        //    PartnerIdFinal = order.Budget.PartnerId,
                                        //    ProjectIdInitial = order.Budget.ProjectId,
                                        //    ProjectIdFinal = order.Budget.ProjectId,
                                        //    QuantityIni = order.Budget.Quantity,
                                        //    QuantityFin = order.Budget.QuantityRem,
                                        //    SubTypeIdInitial = order.Budget.SubTypeId,
                                        //    SubTypeIdFinal = order.Budget.SubTypeId,
                                        //    Validated = true,
                                        //    ValueFin1 = order.Budget.ValueFin,
                                        //    ValueIni1 = order.Budget.ValueIni,
                                        //    ValueFin2 = order.Budget.ValueFin,
                                        //    ValueIni2 = order.Budget.ValueIni,
                                        //    Guid = Guid.NewGuid()
                                        //};

                                        // _context.Add(budgetOp);


                                        //offerOp = new Model.OfferOp()
                                        //{
                                        //    AccMonthId = order.Offer.AccMonthId,
                                        //    AccSystemId = null,
                                        //    AccountIdInitial = order.Offer.AccountId,
                                        //    AccountIdFinal = order.Offer.AccountId,
                                        //    AdministrationIdInitial = order.Offer.AdministrationId,
                                        //    AdministrationIdFinal = order.Offer.AdministrationId,
                                        //    OfferId = order.Offer.Id,
                                        //    BudgetManagerIdInitial = null,
                                        //    BudgetManagerIdFinal = null,
                                        //    BudgetStateId = 1,
                                        //    CompanyIdInitial = order.Offer.CompanyId,
                                        //    CompanyIdFinal = order.Offer.CompanyId,
                                        //    CostCenterIdInitial = order.Offer.CostCenterId,
                                        //    CostCenterIdFinal = order.Offer.CostCenterId,
                                        //    CreatedAt = DateTime.Now,
                                        //    CreatedBy = order.Offer.UserId,
                                        //    Document = document,
                                        //    DstConfAt = DateTime.Now,
                                        //    DstConfBy = order.Offer.UserId,
                                        //    EmployeeIdInitial = order.Offer.EmployeeId,
                                        //    EmployeeIdFinal = order.Offer.EmployeeId,
                                        //    InfoIni = order.Offer.Info,
                                        //    InfoFin = order.Offer.Info,
                                        //    InterCompanyIdInitial = order.Offer.InterCompanyId,
                                        //    InterCompanyIdFinal = order.Offer.InterCompanyId,
                                        //    IsAccepted = false,
                                        //    IsDeleted = false,
                                        //    ModifiedAt = DateTime.Now,
                                        //    ModifiedBy = order.Offer.UserId,
                                        //    PartnerIdInitial = order.Offer.PartnerId,
                                        //    PartnerIdFinal = order.Offer.PartnerId,
                                        //    ProjectIdInitial = order.Offer.ProjectId,
                                        //    ProjectIdFinal = order.Offer.ProjectId,
                                        //    QuantityIni = order.Offer.Quantity,
                                        //    QuantityFin = order.Offer.QuantityRem,
                                        //    SubTypeIdInitial = order.Offer.SubTypeId,
                                        //    SubTypeIdFinal = order.Offer.SubTypeId,
                                        //    Validated = true,
                                        //    ValueFin1 = order.Offer.ValueFin,
                                        //    ValueIni1 = order.Offer.ValueIni,
                                        //    ValueFin2 = order.Offer.ValueFin,
                                        //    ValueIni2 = order.Offer.ValueIni,
                                        //    Guid = Guid.NewGuid()
                                        //};

                                        //_context.Add(offerOp);

                                        // var lastInventoryDoc = "";
                                        // var lastInventoryDate = inventory.End.Value.ToString("yyyyMMdd");
                                        // var lastInventoryDate = DateTime.Now.ToString("yyyyMMdd");
                                        //var committee = _context.Committees.AsNoTracking().Where(a => a.IsDeleted == false && a.CostCenterId == assetDto.CostCenterId).FirstOrDefault();

                                        //if (committee != null)
                                        //{
                                        //    lastInventoryDoc = committee.Document1;
                                        //}

                                        var names = SplitToLines(material.Name, 50);
                                        var countNames = names.Count();

                                        //asset.Name1 = countNames > 0 ? names.ElementAt(0) : "";
                                        //asset.Name2 = countNames > 1 ? names.ElementAt(1) : "";
                                        //asset.Name3 = countNames > 2 ? names.ElementAt(2) : "";
                                        //asset.LastInventoryDate = lastInventoryDate;
                                        //asset.LastInventoryDoc = lastInventoryDoc;
                                        //asset.PlateNo = assetDto.PlateNo != null && assetDto.PlateNo != "" ? assetDto.PlateNo : "";
                                        //asset.InConservation = assetDto.InConservation;
                                        //asset.NotSync = true;

                                        createAssetSAP = new Model.CreateAssetSAP();

#if DEBUG
                                        createAssetSAP.IsDeleted = true;
#endif
                                        createAssetSAP.IsTesting = true;
                                        createAssetSAP.XSUBNO = assetEntity != null ? "X" : "";
                                        createAssetSAP.COMPANYCODE = costCenter.Company.Code;
                                        createAssetSAP.ASSET = assetEntity != null ? assetEntity.InvNo : "";
                                        createAssetSAP.SUBNUMBER = "";
                                        //createAssetSAP.ASSETCLASS = accountancy != null ? accountancy.ExpAccount.Name : "";
                                        createAssetSAP.POSTCAP = "";
                                        createAssetSAP.DESCRIPT = countNames > 0 ? names.ElementAt(0) : "";
                                        createAssetSAP.DESCRIPT2 = countNames > 1 ? names.ElementAt(1) : "";
                                        createAssetSAP.INVENT_NO = asset.InvNo;
                                        createAssetSAP.SERIAL_NO = "";// assetDto.SerialNumber == null || assetDto.SerialNumber == "" ? "" : assetDto.SerialNumber;
                                        createAssetSAP.QUANTITY = 1;
                                        createAssetSAP.BASE_UOM = "ST";
                                        createAssetSAP.LAST_INVENTORY_DATE = "00000000";
                                        createAssetSAP.LAST_INVENTORY_DOCNO = "";
                                        //createAssetSAP.CAP_DATE = assetDto.CapitalizationDate != null ? assetDto.CapitalizationDate.ToString("yyyyMMdd") : "00000000";
                                        createAssetSAP.CAP_DATE = "00000000";
                                        createAssetSAP.COSTCENTER = employee != null && employee.CostCenter != null ? employee.CostCenter.Code : costCenter.Code;
                                        createAssetSAP.RESP_CCTR = costCenter.Code;
                                        createAssetSAP.INTERN_ORD = "";
                                        createAssetSAP.PLANT = "RO02";
                                        createAssetSAP.LOCATION = "";
                                        createAssetSAP.ROOM = "";
                                        createAssetSAP.PERSON_NO = employee != null ? employee.InternalCode : "";
                                        createAssetSAP.PLATE_NO = "";// assetDto.PlateNo != null && assetDto.PlateNo != "" ? assetDto.PlateNo : "";
                                        //createAssetSAP.ZZCLAS = accountancy != null && accountancy.AssetCategory != null ? accountancy.AssetCategory.Code : "";
                                        // createAssetSAP.IN_CONSERVATION = assetDto.InConservation ? "X" : "";
                                        createAssetSAP.IN_CONSERVATION = "";
                                        createAssetSAP.PROP_IND = "1";
                                        createAssetSAP.OPTIMA_ASSET_NO = asset.InvNo;
                                        createAssetSAP.OPTIMA_ASSET_PARENT_NO = "";
                                        createAssetSAP.TESTRUN = "";
                                        createAssetSAP.VENDOR_NO = partner.RegistryNumber;
                                        //createAssetSAP.VENDOR_NO = "";
                                        createAssetSAP.Asset = asset;
                                        createAssetSAP.NotSync = true;
                                        createAssetSAP.SyncErrorCount = 0;
                                        createAssetSAP.BudgetManagerId = inventory.BudgetManagerId.Value;
                                        createAssetSAP.AccMonthId = inventory.AccMonthId.Value;
                                        createAssetSAP.CreatedBy = _context.UserId;
                                        createAssetSAP.ModifiedBy = _context.UserId;
                                        createAssetSAP.INVOICE = document.DocNo1;

                                        // asset.CreateAssetSAP = createAssetSAP;

                                        asset.NotSync = true;
                                        asset.IsLocked = true;

                                        _context.Add(createAssetSAP);
                                    }

                                    budgetBaseAsset = new BudgetBaseAsset()
                                    {
                                        BudgetBaseId = requestBFMaterialCostCenter.RequestBudgetForecastMaterial.RequestBudgetForecast.BudgetForecast.BudgetBaseId,
                                        BudgetTypeId = 1,
                                        BudgetManagerId = inventory.BudgetManagerId.Value,
                                        AccMonthId = inventory.AccMonthId.Value,
                                        AppStateId = 1,
                                        Asset = asset,
                                        IsLast = true,
                                        IsFirst = true,
                                    };

                                    _context.Add(budgetBaseAsset);

                                    await _context.SaveChangesAsync();
                                }
                            }
                        }
                    }


                }

                var count = await _context.Set<Model.RecordCount>().FromSql("UpdateAllAssets").ToListAsync();
                var countOffer = await _context.Set<Model.RecordCount>().FromSql("UpdateAllOffers").ToListAsync();
                var countOrd = _context.Set<Model.RecordCount>().FromSql("UpdateAllOrders").ToList();
                var countContract = await _context.Set<Model.RecordCount>().FromSql("UpdateAllContracts").ToListAsync();
                var countContractAmount = await _context.Set<Model.RecordCount>().FromSql("UpdateAllContractAmount").ToListAsync();
                var countBudget = await _context.Set<Model.RecordCount>().FromSql("UpdateAllBudgetBase").ToListAsync();
                // var countOfferMaterials = _context.Set<Model.RecordCount>().FromSql("UpdateAllOfferMaterials").ToList();
                var countOfferMaterials2 = _context.Set<Model.RecordCount>().FromSql("UpdateAllOfferMaterials2").ToList();
                var UpdateAllRequestBudgetForecastMaterials = _context.Set<Model.RecordCount>().FromSql("UpdateAllRequestBudgetForecastMaterials").ToList();
                var UpdateAllRequestBFMaterialCostCenters = _context.Set<Model.RecordCount>().FromSql("UpdateAllRequestBFMaterialCostCenters").ToList();

                return new Model.CreateAssetSAPResult { Success = true, ErrorMessage = "OK" };
            }


        }
        public async Task<Model.CreateAssetSAPResult> ApprovePreReceptionAssetSAP(int assetId)
        {
            Model.Asset asset = null;
            Model.Asset assetEntity = null;
            Model.AssetDep assetDep = null;
            Model.AssetDepMD assetDepMD = null;
            Model.AssetInv assetInv = null;
            Model.AssetAC assetAC = null;
            Model.AssetAdmMD assetAdmMD = null;
            // Model.AccMonth accMonth = null;
            Model.Document document = null;
            Model.AssetOp assetOp = null;
            Model.OrderOp orderOp = null;
            Model.OfferOp offerOp = null;
            Model.BudgetOp budgetOp = null;
            Model.Inventory inventory = null;
            Model.InventoryAsset inventoryAsset = null;
            DateTime? documentDate = null;
            Model.Administration administration = null;
            Model.AccSystem accSystem = null;
            Model.AssetClass assetClass = null;
            // Model.AssetCategory assetCategory = null;
            Model.DictionaryItem dictionaryItem = null;
            //Model.SubCategory subCategory = null;
            Model.AssetClassType assetClassType = null;
            Model.Partner partner = null;
            Model.CostCenter costCenter = null;
            // Model.Company company = null;
            // Model.Room room = null;
            // Model.AssetState assetState = null;
            // Model.AssetType assetType = null;
            Model.InvState invState = null;
            Model.Employee employee = null;
            Model.Material material = null;
            Model.DocumentType documentType = null;
            Model.Order order = null;
            Model.OfferMaterial offerMaterial = null;
            //Model.OrderMaterial orderMaterial = null;
            //Model.RequestBudgetForecast requestBudgetForecast = null;
            //Model.RequestBudgetForecastMaterial requestBudgetForecastMaterial = null;
            Model.RequestBFMaterialCostCenter requestBFMaterialCostCenter = null;
            List<Model.RequestBudgetForecastMaterial> requestBudgetForecastMaterials = null;
            List<Model.RequestBFMaterialCostCenter> requestBFMaterialCostCenters = null;
           //Model.Accountancy accountancy = null;
            //Model.Accountancy accountancyDiff = null;
            Model.CreateAssetSAP createAssetSAP = null;
            Model.BudgetBaseAsset budgetBaseAsset = null;
            Model.EntityType entityType = null;
            int? defaultNull = null;

            asset = await _context.Set<Model.Asset>()
                    .Include(p => p.ReqBFMCostCenter)
                    .Include(p => p.ParentAsset)
                    .Include(p => p.Material)
                    .Include(p => p.Document).ThenInclude(p => p.Partner)
                    .Include(p => p.CostCenter).ThenInclude(c => c.Company)
                    .Where(a => a.Id == assetId)
                    .SingleAsync();

            int assetStateId = _context.Set<Model.AssetState>().AsNoTracking().Where(a => a.Code == "RECEPTION").Select(a => a.Id).SingleOrDefault();

            //if (asset.ReqBFMCostCenter.ValueRon > 2500)
            //{
            //    accountancy = await _context.Set<Model.Accountancy>()
            //        .Include(a => a.Account)
            //        
            //        .Include(a => a.AssetCategory)
            //        .Include(a => a.AssetType)
            //        .Where(a => a.SubCategoryId == asset.SubCategoryId && a.Value > 2500 && a.IsDeleted == false)
            //        .SingleOrDefaultAsync();

            //    if (accountancy == null) return new Model.CreateAssetSAPResult { Success = false, ErrorMessage = $" `Lipsa mapare cont GL pentru subCategoria: {asset.SubCategory.Code + " - " + asset.SubCategory.Name}!" };
            //}
            //else
            //{

            //    accountancy = await _context.Set<Model.Accountancy>()
            //        .Include(a => a.Account)
            //        
            //        .Include(a => a.AssetCategory)
            //        .Include(a => a.AssetType)
            //        .Where(a => a.SubCategoryId == asset.SubCategoryId && a.Value == 2500 && a.IsDeleted == false).SingleOrDefaultAsync();

            //    if (accountancy == null) return new Model.CreateAssetSAPResult { Success = false, ErrorMessage = $"Lipsa mapare cont GL pentru subCategoria: {asset.SubCategory.Code + " - " + asset.SubCategory.Name}!" };
            //}

            var names = SplitToLines(asset.Material.Name, 50);
            var countNames = names.Count();

            employee = await _context.Set<Model.Employee>().Include(c => c.CostCenter).Where(a => a.Id == asset.ReqBFMCostCenter.EmployeeId).SingleOrDefaultAsync();
            inventory = await _context.Set<Model.Inventory>().AsNoTracking().Where(i => i.Active == true).SingleAsync();

            //asset.AssetCategoryId = accountancy.AssetCategoryId;
            //asset.ExpAccountId = accountancy.ExpAccountId;
            asset.AssetStateId = assetStateId;
            asset.ModifiedAt = DateTime.Now;
            asset.ModifiedBy = _context.UserId;

            _context.Update(asset);

            createAssetSAP = new Model.CreateAssetSAP();
#if DEBUG
            createAssetSAP.IsDeleted = true;
#endif

            createAssetSAP.IsTesting = false;
            createAssetSAP.XSUBNO = asset.ParentAsset != null ? "X" : "";
            createAssetSAP.COMPANYCODE = asset.CostCenter.Company.Code;
            createAssetSAP.ASSET = asset.ParentAsset != null ? asset.ParentAsset.InvNo : "";
            createAssetSAP.SUBNUMBER = "";
            //createAssetSAP.ASSETCLASS = accountancy != null ? accountancy.ExpAccount.Name : "";
            createAssetSAP.POSTCAP = "";
            createAssetSAP.DESCRIPT = countNames > 0 ? names.ElementAt(0) : "";
            createAssetSAP.DESCRIPT2 = countNames > 1 ? names.ElementAt(1) : "";
            createAssetSAP.INVENT_NO = asset.InvNo;
            createAssetSAP.SERIAL_NO = "";// assetDto.SerialNumber == null || assetDto.SerialNumber == "" ? "" : assetDto.SerialNumber;
            createAssetSAP.QUANTITY = (int)asset.Quantity;
            createAssetSAP.BASE_UOM = "ST";
            createAssetSAP.LAST_INVENTORY_DATE = "00000000";
            createAssetSAP.LAST_INVENTORY_DOCNO = "";
            //createAssetSAP.CAP_DATE = assetDto.CapitalizationDate != null ? assetDto.CapitalizationDate.ToString("yyyyMMdd") : "00000000";
            createAssetSAP.CAP_DATE = "00000000";
            createAssetSAP.COSTCENTER = employee != null && employee.CostCenter != null ? employee.CostCenter.Code : asset.CostCenter.Code;
            createAssetSAP.RESP_CCTR = asset.CostCenter.Code;
            createAssetSAP.INTERN_ORD = "";
            createAssetSAP.PLANT = "RO02";
            createAssetSAP.LOCATION = "";
            createAssetSAP.ROOM = "";
            createAssetSAP.PERSON_NO = employee != null ? employee.InternalCode : "";
            createAssetSAP.PLATE_NO = "";// assetDto.PlateNo != null && assetDto.PlateNo != "" ? assetDto.PlateNo : "";
            //createAssetSAP.ZZCLAS = accountancy != null && accountancy.AssetCategory != null ? accountancy.AssetCategory.Code : "";
            // createAssetSAP.IN_CONSERVATION = assetDto.InConservation ? "X" : "";
            createAssetSAP.IN_CONSERVATION = "";
            createAssetSAP.PROP_IND = "1";
            createAssetSAP.OPTIMA_ASSET_NO = asset.InvNo;
            createAssetSAP.OPTIMA_ASSET_PARENT_NO = "";
            createAssetSAP.TESTRUN = "";
            createAssetSAP.VENDOR_NO = asset.Document.Partner.RegistryNumber;
            //createAssetSAP.VENDOR_NO = "";
            createAssetSAP.Asset = asset;
            createAssetSAP.NotSync = true;
            createAssetSAP.SyncErrorCount = 0;
            createAssetSAP.BudgetManagerId = inventory.BudgetManagerId.Value;
            createAssetSAP.AccMonthId = inventory.AccMonthId.Value;
            createAssetSAP.CreatedBy = _context.UserId;
            createAssetSAP.ModifiedBy = _context.UserId;
            createAssetSAP.INVOICE = asset.Document.DocNo1;

            // asset.CreateAssetSAP = createAssetSAP;

            asset.NotSync = true;
            asset.IsLocked = true;

            _context.Add(createAssetSAP);


            _context.SaveChanges();

            return new Model.CreateAssetSAPResult { Success = true, ErrorMessage = $"Numarul de inventar {asset.InvNo} / {asset.SubNo} a fost aprobat!" };

        }
        public Model.CreateAssetSAPResult CreateAssetInvPlusSAP(AddAssetInvPlus assetDto)
        {
            Model.Asset createAssetInvPlus = null;
            // Model.AssetDep assetDep = null;
            // Model.AssetDepMD assetDepMD = null;
            // Model.AssetInv assetInv = null;
            // Model.AssetAC assetAC = null;
            // Model.AssetAdmMD assetAdmMD = null;
            // Model.AccMonth accMonth = null;
            // Model.Document document = null;
            // Model.AssetOp assetOp = null;
            // Model.OrderOp orderOp = null;
            // Model.OfferOp offerOp = null;
            // Model.BudgetOp budgetOp = null;
            Model.Inventory inventory = null;
            // Model.InventoryAsset inventoryAsset = null;
            // DateTime? documentDate = null;
            // Model.Administration administration = null;
            // Model.AccSystem accSystem = null;
            // Model.AssetClass assetClass = null;
            // Model.AssetCategory assetCategory = null;
            // Model.DictionaryItem dictionaryItem = null;
            //Model.SubCategory subCategory = null;
            //Model.AssetClassType assetClassType = null;
            //Model.Partner partner = null;
            Model.CostCenter costCenter = null;
            // Model.Company company = null;
            // Model.Room room = null;
            // Model.AssetState assetState = null;
            // Model.AssetType assetType = null;
            // Model.InvState invState = null;
            Model.Employee employee = null;
            // Model.Material material = null;
            // Model.DocumentType documentType = null;
            // Model.Order order = null;
            //Model.OfferMaterial offerMaterial = null;
            //Model.OrderMaterial orderMaterial = null;
            // Model.BudgetManager budgetManager = null;
           //Model.Accountancy accountancy = null;
            Model.CreateAssetSAP createAssetSAP = null;

            inventory = _context.Set<Model.Inventory>().AsNoTracking().Where(i => i.Active == true).Single();
            createAssetInvPlus = _context.Set<Model.Asset>().Include(d => d.Document).ThenInclude(p => p.Partner).Where(a => a.Id == assetDto.AssetId).Single();
            costCenter = _context.Set<Model.CostCenter>().Include(c => c.Company).Where(a => a.Id == createAssetInvPlus.CostCenterId).Single();
            //subCategory = _context.Set<Model.SubCategory>().Where(a => a.Id == createAssetInvPlus.SubCategoryId).Single();
            employee = _context.Set<Model.Employee>().Include(c => c.CostCenter).Where(a => a.Id == createAssetInvPlus.EmployeeId).SingleOrDefault();

            int quantity = 1;

            for (int j = 0; j < quantity; j++)
            {

                //if (createAssetInvPlus.ValueInv > 2500)
                //{
                //    accountancy = _context.Set<Model.Accountancy>()

                //      .Include(a => a.Account)
                //      
                //      .Include(a => a.AssetCategory)
                //      .Include(a => a.AssetType)
                //      .Where(a => a.SubCategoryId == createAssetInvPlus.SubCategoryId && a.Value > 2500 && a.IsDeleted == false).SingleOrDefault();

                //    if (accountancy == null) return new Model.CreateAssetSAPResult { Success = false, ErrorMessage = $"Lipsa mapare cont GL pentru subCategoria: {subCategory.Code + " - " + subCategory.Name}!" };
                //}
                //else
                //{
                //    accountancy = _context.Set<Model.Accountancy>()

                //     .Include(a => a.Account)
                //     
                //     .Include(a => a.AssetCategory)
                //     .Include(a => a.AssetType)
                //     .Where(a => a.SubCategoryId == createAssetInvPlus.SubCategoryId && a.Value == 2500 && a.IsDeleted == false).SingleOrDefault();

                //    if (accountancy == null) return new Model.CreateAssetSAPResult { Success = false, ErrorMessage = $"Lipsa mapare cont GL pentru subCategoria: {subCategory.Code + " - " + subCategory.Name}!" };
                //}

                var lastInventoryDoc = "";
                // var lastInventoryDate = inventory.End.Value.ToString("yyyyMMdd");
                var lastInventoryDate = DateTime.Now.ToString("yyyyMMdd");
                var committee = _context.Committees.AsNoTracking().Where(a => a.IsDeleted == false && a.CostCenterId == createAssetInvPlus.CostCenterId).FirstOrDefault();

                if (committee != null)
                {
                    lastInventoryDoc = committee.Document1;
                }

                var names = SplitToLines(createAssetInvPlus.Name, 50);
                var countNames = names.Count();

                createAssetSAP = new Model.CreateAssetSAP();

                createAssetSAP.XSUBNO = "";
                createAssetSAP.COMPANYCODE = costCenter.Company.Code;
                createAssetSAP.ASSET = "";
                createAssetSAP.SUBNUMBER = "";
                //createAssetSAP.ASSETCLASS = accountancy.ExpAccount.Name;
                createAssetSAP.POSTCAP = "";
                createAssetSAP.DESCRIPT = countNames > 0 ? names.ElementAt(0) : "";
                createAssetSAP.DESCRIPT2 = countNames > 1 ? names.ElementAt(1) : "";
                createAssetSAP.INVENT_NO = createAssetInvPlus.InvNo;
                createAssetSAP.SERIAL_NO = createAssetInvPlus.SerialNumber == null || createAssetInvPlus.SerialNumber == "" ? "" : createAssetInvPlus.SerialNumber;
                createAssetSAP.QUANTITY = 1;
                createAssetSAP.BASE_UOM = "ST";
                createAssetSAP.LAST_INVENTORY_DATE = lastInventoryDate;
                createAssetSAP.LAST_INVENTORY_DOCNO = lastInventoryDoc;
                //createAssetSAP.CAP_DATE = assetDto.CapitalizationDate != null ? assetDto.CapitalizationDate.ToString("yyyyMMdd") : "00000000";
                createAssetSAP.CAP_DATE = "00000000";
                createAssetSAP.COSTCENTER = employee != null && employee.CostCenter != null ? employee.CostCenter.Code : costCenter.Code;
                createAssetSAP.RESP_CCTR = costCenter.Code;
                createAssetSAP.INTERN_ORD = "";
                createAssetSAP.PLANT = "RO02";
                createAssetSAP.LOCATION = "";
                createAssetSAP.ROOM = "";
                createAssetSAP.PERSON_NO = employee.InternalCode;
                createAssetSAP.PLATE_NO = createAssetInvPlus.AgreementNo != null && createAssetInvPlus.AgreementNo != "" ? createAssetInvPlus.AgreementNo : "";
                //createAssetSAP.ZZCLAS = accountancy.AssetCategory.Code;
                createAssetSAP.IN_CONSERVATION = "";
                createAssetSAP.PROP_IND = "1";
                createAssetSAP.OPTIMA_ASSET_NO = createAssetInvPlus.InvNo;
                createAssetSAP.OPTIMA_ASSET_PARENT_NO = "";
                createAssetSAP.TESTRUN = "";
                createAssetSAP.VENDOR_NO = createAssetInvPlus.Document.Partner != null ? createAssetInvPlus.Document.Partner.RegistryNumber : "";
                //createAssetSAP.VENDOR_NO = "";
                createAssetSAP.Asset = createAssetInvPlus;
                createAssetSAP.NotSync = true;
                createAssetSAP.SyncErrorCount = 0;
                createAssetSAP.BudgetManagerId = createAssetInvPlus.BudgetManagerId.Value;
                createAssetSAP.AccMonthId = inventory.AccMonthId.Value;
                createAssetSAP.CreatedBy = _context.UserId;
                createAssetSAP.ModifiedBy = _context.UserId;

                createAssetInvPlus.NotSync = true;
                createAssetSAP.InvPlus = true;

                _context.Add(createAssetSAP);
            }

            _context.SaveChanges();

            var count = _context.Set<Model.RecordCount>().FromSql("UpdateAllAssets").ToList();

            return new Model.CreateAssetSAPResult { Success = true, ErrorMessage = "OK" };
        }
        //   public int AddAssetStock(AddStockAsset assetDto, out List<Dto.TransferInStockInput> createAsset)
        //   {
        //       Model.Asset asset = null;
        //       Model.AssetDep assetDep = null;
        //       Model.AssetDepMD assetDepMD = null;
        //       Model.AssetInv assetInv = null;
        //       Model.AssetAC assetAC = null;
        //       Model.AssetAdmMD assetAdmMD = null;
        //       Model.AccMonth accMonth = null;
        //       Model.Document document = null;
        //       Model.AssetOp assetOp = null;
        //       Model.OrderOp orderOp = null;
        //       Model.OfferOp offerOp = null;
        //       Model.BudgetOp budgetOp = null;
        //       Model.Inventory inventory = null;
        //       Model.InventoryAsset inventoryAsset = null;
        //       DateTime? documentDate = null;
        //       // Model.Administration administration = null;
        //       Model.AccSystem accSystem = null;
        //       Model.AssetClass assetClass = null;
        //       // Model.AssetCategory assetCategory = null;
        //       Model.DictionaryItem dictionaryItem = null;
        //       //Model.SubCategory subCategory = null;
        //       Model.AssetClassType assetClassType = null;
        //       Model.Partner partner = null;
        //       Model.CostCenter costCenter = null;
        //       // Model.Company company = null;
        //       // Model.Room room = null;
        //       // Model.AdmCenter admCenter = null;
        //       Model.AssetState assetState = null;
        //       // Model.AssetType assetType = null;
        //       Model.InvState invState = null;
        //       Model.Employee employee = null;
        //       // Model.Material material = null;
        //       Model.DocumentType documentType = null;
        //       // Model.Order order = null;
        //       // Model.OfferMaterial offerMaterial = null;
        //       Model.Stock stock = null;
        //      //Model.Accountancy accountancy = null;
        //       Model.BudgetManager budgetManager = null;

        //       List<Dto.TransferInStockInput> sap = new List<TransferInStockInput>();


        //       string accSystemDefault = "RON";
        //       string assetClassTypeDefault = "-";

        //       if (assetDto.DocumentTypeId > 0)
        //       {
        //           documentType = _context.Set<Model.DocumentType>().Where(d => d.Id == assetDto.DocumentTypeId).FirstOrDefault();
        //       }

        //       Model.EntityType entityType = null;

        //       inventory = _context.Set<Model.Inventory>().AsNoTracking().Where(i => i.Active == true).Single();
        //       invState = _context.Set<Model.InvState>().Where(a => a.Id == 1).Single();
        //       assetState = _context.Set<Model.AssetState>().Where(a => a.Id == 9).Single();

        //       assetClassType = _context.Set<Model.AssetClassType>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();
        //       assetClass = _context.Set<Model.AssetClass>().Where(a => (a.Id == 22)).FirstOrDefault();
        //       accSystem = _context.Set<Model.AccSystem>().Where(a => (a.Code == accSystemDefault)).FirstOrDefault();

        //       budgetManager = _context.Set<Model.BudgetManager>().Where(a => (a.Code == "2022")).FirstOrDefault();

        //       int quantity = 1;

        //       for (int j = 0; j < quantity; j++)
        //       {

        //           // order = _context.Set<Model.Order>().Include(b => b.Budget).Include(b => b.Offer).Where(c => c.Id == 24).SingleOrDefault();

        //           entityType = _context.Set<Model.EntityType>().Where(c => c.UploadFolder == "NEWASSET").FirstOrDefault();

        //           asset = new Model.Asset()
        //           {
        //               Document = document
        //           };
        //           _context.Add(asset);

        //           stock = _context.Set<Model.Stock>().Include(c => c.Company).Include(m => m.Material).Where(a => a.Id == assetDto.StockId).Single();

        //           costCenter = _context.Set<Model.CostCenter>()
        //               .Include(c => c.Company)
        //               .Include(c => c.Room)
        //               .Include(c => c.AdmCenter)
        //               .Include(c => c.Region)
        //               .Include(c => c.Administration)
        //               .Include(c => c.Division)
        //                   .ThenInclude(d => d.Department)
        //               .Include(a => a.Storage)
        //                   .ThenInclude(p => p.Plant)
        //               .Where(a => a.Id == assetDto.CostCenterId).Single();




        //           subCategory = _context.Set<Model.SubCategory>()
        //               .Include(c => c.Category)
        //               .Where(a => a.Id == assetDto.SubCategoryId).Single();

        //           employee = _context.Set<Model.Employee>().Where(a => a.Id == assetDto.EmployeeId).Single();

        //           if (stock.Value > 500)
        //           {
        //               //accountancy = _context.Set<Model.Accountancy>()

        //               //  .Include(a => a.Account)
        //               //  
        //               //  .Include(a => a.AssetCategory)
        //               //  .Include(a => a.AssetType)
        //               //  .Where(a => a.InterCompanyId == subCategory.Category.InterCompanyId && a.Value > 2500 && a.IsDeleted == false).Single();

        //               accountancy = _context.Set<Model.Accountancy>()

        //                .Include(a => a.Account)
        //                
        //                .Include(a => a.AssetCategory)
        //                .Include(a => a.AssetType)
        //                .Where(a => a.SubCategoryId == subCategory.Id && a.Value > 2500 && a.IsDeleted == false).Single();
        //           }
        //           else
        //           {
        //               //accountancy = _context.Set<Model.Accountancy>()

        //               //  .Include(a => a.Account)
        //               //  
        //               //  .Include(a => a.AssetCategory)
        //               //  .Include(a => a.AssetType)
        //               //  .Where(a => a.InterCompanyId == subCategory.Category.InterCompanyId && a.Value == 2500 && a.IsDeleted == false).Single();

        //               accountancy = _context.Set<Model.Accountancy>()

        //                 .Include(a => a.Account)
        //                 
        //                 .Include(a => a.AssetCategory)
        //                 .Include(a => a.AssetType)
        //                 .Where(a => a.SubCategoryId == subCategory.Id && a.Value == 2500 && a.IsDeleted == false).Single();
        //           }

        //           //dictionaryItem = _context.Set<Model.DictionaryItem>().Where(a => a.Name == subCategory.Name).FirstOrDefault();

        //           if (dictionaryItem == null)
        //           {
        //               dictionaryItem = new Model.DictionaryItem()
        //               {
        //                   Code = "NEW",
        //                   Name = subCategory.Name,
        //                   IsDeleted = false,
        //                   //AssetCategoryId = accountancy.AssetCategoryId,
        //                   DictionaryTypeId = 1
        //               };

        //               _context.Add(dictionaryItem);
        //           }

        //           document = new Model.Document
        //           {
        //               Approved = true,
        //               DocumentTypeId = documentType != null ? documentType.Id : 1,
        //               DocNo1 = string.Empty,
        //               DocNo2 = string.Empty,
        //               DocumentDate = DateTime.Now,
        //               CreationDate = DateTime.Now,
        //               CostCenterId = costCenter != null ? costCenter.Id : (int?)null,
        //               RegisterDate = DateTime.Now,
        //               Details = string.Empty,
        //               ParentDocumentId = inventory.DocumentId
        //           };


        //           partner = _context.Set<Model.Partner>().Where(a => a.Id == stock.PartnerId).FirstOrDefault();

        //           document.Partner = partner;

        //           _context.Add(document);

        //           int? value = null;

        //           asset.InvNo = costCenter.Company.Code + "OPT0000000000" + entityType.Name;
        //           asset.Name = assetDto.Name;
        //           asset.PurchaseDate = DateTime.Now;
        //           asset.SerialNumber = assetDto.SerialNumber;
        //           asset.ERPCode = costCenter.Company.Code + "OPT0000000000" + entityType.Name;
        //           asset.Document = document;
        //           asset.Validated = true;
        //           asset.SAPCode = costCenter.Company.Code + "OPT0000000000" + entityType.Name;
        //           asset.AssetStateId = assetState.Id;
        //           //asset.AssetTypeId = accountancy.AssetTypeId;
        //           asset.CostCenterId = costCenter.Id;
        //           //asset.AssetCategoryId = accountancy.AssetCategoryId;
        //           asset.EmployeeId = employee.Id;
        //           asset.RoomId = costCenter.RoomId;
        //           asset.ValueInv = stock.Value;
        //           asset.ValueRem = stock.Value;
        //           asset.InvStateId = invState.Id;
        //           asset.Quantity = 1;
        //           asset.DepartmentId = costCenter.Division.DepartmentId;
        //           asset.Custody = false;
        //           //asset.UomId = assetDto.UomId;
        //           asset.CompanyId = costCenter.CompanyId;
        //           asset.Validated = true;
        //           
        //           asset.BudgetManager = budgetManager;
        //           //asset.AssetNatureId = assetDto.AssetNatureId;
        //           //asset.SubTypeId = assetDto.SubTypeId;
        //           //asset.InsuranceCategoryId = assetDto.InsuranceCategoryId;
        //           //asset.BrandId = assetDto.BrandId;
        //           //asset.ModelId = assetDto.ModelId;
        //           //asset.InterCompanyId = assetDto.InterCompanyId;
        //           //asset.ProjectId = order.ProjectId;
        //           //asset.InvoiceDate = assetDto.InvoiceDate;
        //           //asset.PODate = assetDto.PODate;
        //           //asset.ReceptionDate = assetDto.ReceptionDate;
        //           //asset.RemovalDate = assetDto.RemovalDate;
        //           asset.IsTemp = false;
        //           //asset.DimensionId = assetDto.DimensionId;
        //           asset.AdministrationId = costCenter.AdministrationId;
        //           asset.DictionaryItem = dictionaryItem;
        //           asset.IsAccepted = true;
        //           asset.IsReconcile = false;
        //           //asset.AccountId = accountancy.AccountId;
        //           //asset.OrderId = order.Id;
        //           //asset.BudgetId = order.BudgetId;
        //           asset.DivisionId = costCenter.DivisionId;
        //           //asset.ProjectTypeId = assetDto.ProjectTypeId;
        //           // asset.AgreementNo = assetDto.PlateNo;
        //          // asset.Name = subCategory.Name;
        //           asset.StockId = assetDto.StockId;

        //           assetAC = new Model.AssetAC
        //           {
        //               AssetClassTypeId = assetClassType.Id,
        //               Asset = asset,
        //               AssetClassId = assetClass.Id,
        //               AssetClassIdIn = assetClass.Id
        //           };


        //           _context.Set<Model.AssetAC>().Add(assetAC);

        //           var monthSum = 0;


        //           assetDep = new Model.AssetDep
        //           {
        //               AccSystem = accSystem,
        //               Asset = asset,
        //               DepPeriod = (int)monthSum,
        //               DepPeriodIn = (int)monthSum,
        //               DepPeriodMonth = (int)monthSum,
        //               DepPeriodMonthIn = 0,
        //               DepPeriodRem = (int)monthSum,
        //               DepPeriodRemIn = (int)monthSum,
        //               UsageStartDate = documentDate,
        //ValueDep = stock.Value,
        //ValueDepIn = stock.Value,
        //ValueDepPU = stock.Value,
        //ValueDepPUIn = stock.Value,
        //ValueDepYTD = stock.Value,
        //ValueDepYTDIn = stock.Value,
        //ValueInv = stock.Value,
        //ValueInvIn = stock.Value,
        //ValueRem = stock.Value,
        //ValueRemIn = stock.Value
        //           };

        //           _context.Set<Model.AssetDep>().Add(assetDep);


        //           assetInv = new Model.AssetInv
        //           {
        //               Asset = asset,
        //               AllowLabel = true,
        //               Barcode = entityType.Code + entityType.Name,
        //               InvName = asset.Name,
        //               InvNoOld = string.Empty,
        //               InvStateId = invState.Id
        //           };

        //           _context.Set<Model.AssetInv>().Add(assetInv);


        //           accMonth = _context.Set<Model.AccMonth>().Where(a => a.IsActive == true).FirstOrDefault();

        //           assetDepMD = new Model.AssetDepMD
        //           {
        //               AccMonthId = accMonth.Id,
        //               AccSystem = accSystem,
        //               Asset = asset,
        //               DepPeriod = (int)monthSum,
        //               DepPeriodMonth = (int)monthSum,
        //               DepPeriodRem = 0,
        //ValueDep = stock.Value,
        //ValueDepPU = stock.Value,
        //ValueDepYTD = stock.Value,
        //ValueInv = stock.Value,
        //ValueRem = stock.Value
        //           };

        //           _context.Set<Model.AssetDepMD>().Add(assetDepMD);


        //           assetAdmMD = new Model.AssetAdmMD
        //           {
        //               AccMonthId = accMonth.Id,
        //               Asset = asset,
        //               DepartmentId = null
        //           };

        //           assetAdmMD.AssetStateId = assetState.Id;
        //           //assetAdmMD.AssetTypeId = accountancy.AssetTypeId;
        //           assetAdmMD.CostCenterId = costCenter.Id;
        //           assetAdmMD.EmployeeId = employee.Id;
        //           assetAdmMD.RoomId = costCenter.RoomId;
        //           assetAdmMD.DepartmentId = costCenter.Division.DepartmentId;
        //           //assetAdmMD.AssetCategoryId = accountancy.AssetCategoryId;
        //           assetAdmMD.AssetClass = assetClass;
        //           
        //           assetAdmMD.AdministrationId = costCenter.AdministrationId;

        //           //assetAdmMD.AssetNatureId = assetDto.AssetNatureId;
        //           assetAdmMD.BudgetManager = budgetManager;
        //           //assetAdmMD.SubTypeId = assetDto.SubTypeId;
        //           //assetAdmMD.InsuranceCategoryId = assetDto.InsuranceCategoryId;
        //           //assetAdmMD.ModelId = assetDto.ModelId;
        //           //assetAdmMD.BrandId = assetDto.BrandId;
        //           //
        //           //assetAdmMD.ProjectId = order.ProjectId;

        //           assetAdmMD.AdmCenterId = costCenter.AdmCenterId;
        //           assetAdmMD.RegionId = costCenter.RegionId;
        //           assetAdmMD.DivisionId = costCenter.DivisionId;
        //           // assetAdmMD.ProjectTypeId = order.Budget.ProjectTypeId;


        //           _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);

        //           entityType.Name = StringsADD(entityType.Name, "1");
        //           _context.Update(entityType);

        //           if (inventory != null)
        //           {
        //               inventoryAsset = new Model.InventoryAsset
        //               {
        //                   QInitial = 1,
        //                   QFinal = 0,
        //                   InventoryId = inventory.Id,
        //                   Asset = asset,
        //                   EmployeeIdInitial = employee.Id,
        //                   RoomIdInitial = costCenter.RoomId,
        //                   SerialNumber = assetDto.SerialNumber,
        //                   StateIdInitial = invState.Id,
        //                   CostCenterInitial = costCenter,
        //                   AdministrationIdInitial = costCenter.AdministrationId
        //               };

        //               _context.Add(inventoryAsset);

        //               assetOp = new Model.AssetOp()
        //               {
        //                   Asset = asset,
        //                   Document = document,
        //                   RoomIdInitial = costCenter.RoomId,
        //                   RoomIdFinal = costCenter.RoomId,
        //                   EmployeeIdInitial = employee.Id,
        //                   EmployeeIdFinal = employee.Id,

        //                   //AssetCategoryIdInitial = accountancy.AssetCategoryId,
        //                   //AssetCategoryIdFinal = accountancy.AssetCategoryId,
        //                   InvStateIdInitial = invState.Id,
        //                   InvStateIdFinal = invState.Id,
        //                   AdministrationIdInitial = costCenter.AdministrationId,
        //                   AdministrationIdFinal = costCenter.AdministrationId,
        //                   AccSystem = accSystem,
        //                   DocumentId = document.Id
        //               };

        //               assetOp.AssetStateIdInitial = assetState.Id;
        //               assetOp.AssetStateIdFinal = assetState.Id;
        //               assetOp.CostCenterInitial = costCenter;
        //               assetOp.CostCenterFinal = costCenter;
        //               assetOp.DepartmentIdInitial = null;
        //               assetOp.DepartmentIdFinal = null;
        //               assetOp.InvName = assetDto.Name;
        //               //assetOp.AssetTypeIdInitial = accountancy.AssetTypeId; 
        //               //assetOp.AssetTypeIdFinal = accountancy.AssetTypeId;
        //               _context.Add(assetOp);


        //               //orderOp = new Model.OrderOp()
        //               //{
        //               //    AccMonthId = inventory.AccMonthId,
        //               //    AccSystemId = null,
        //               //    //
        //               //    //
        //               //    //AdministrationIdInitial = order.AdministrationId,
        //               //    //AdministrationIdFinal = order.AdministrationId,
        //               //    //OrderId = order.Id,
        //               //    BudgetManagerIdInitial = null,
        //               //    BudgetManagerIdFinal = null,
        //               //    //BudgetStateId = order.AppStateId,
        //               //    //CompanyIdInitial = order.CompanyId,
        //               //    //CompanyIdFinal = order.CompanyId,
        //               //    //CostCenterIdInitial = order.CostCenterId,
        //               //    //CostCenterIdFinal = order.CostCenterId,
        //               //    CreatedAt = DateTime.Now,
        //               //    //CreatedBy = order.UserId,
        //               //    Document = document,
        //               //    DstConfAt = DateTime.Now,
        //               //    //DstConfBy = order.UserId,
        //               //    //EmployeeIdInitial = order.EmployeeId,
        //               //    //EmployeeIdFinal = order.EmployeeId,
        //               //    //InfoIni = order.Info,
        //               //    //InfoFin = order.Info,
        //               //    //InterCompanyIdInitial = order.InterCompanyId,
        //               //    //InterCompanyIdFinal = order.InterCompanyId,
        //               //    IsAccepted = false,
        //               //    IsDeleted = false,
        //               //    ModifiedAt = DateTime.Now,
        //               //    //ModifiedBy = order.UserId,
        //               //    //PartnerIdInitial = order.PartnerId,
        //               //    //PartnerIdFinal = order.PartnerId,
        //               //    //ProjectIdInitial = order.ProjectId,
        //               //    //ProjectIdFinal = order.ProjectId,
        //               //    //QuantityIni = order.Quantity,
        //               //    //QuantityFin = order.QuantityRem,
        //               //    //SubTypeIdInitial = order.SubTypeId,
        //               //    //SubTypeIdFinal = order.SubTypeId,
        //               //    Validated = true,
        //               //    //ValueFin1 = order.ValueFin,
        //               //    //ValueIni1 = order.ValueIni,
        //               //    //ValueFin2 = order.ValueFin,
        //               //    //ValueIni2 = order.ValueIni,
        //               //    Guid = Guid.NewGuid(),
        //               //    //BudgetIdInitial = order.BudgetId,
        //               //    //BudgetIdFinal = order.BudgetId,
        //               //    //OfferIdInitial = order.OfferId,
        //               //    //OfferIdFinal = order.OfferId,
        //               //    //UomId = order.UomId
        //               //};

        //               //_context.Add(orderOp);


        //               //budgetOp = new Model.BudgetOp()
        //               //{
        //               //    // AccMonthId = order.Budget.AccMonthId,
        //               //    AccSystemId = null,
        //               //    //
        //               //    //
        //               //    //AdministrationIdInitial = costCenter.AdministrationId,
        //               //    //AdministrationIdFinal = costCenter.AdministrationId,
        //               //    //BudgetId = order.Budget.Id,
        //               //    BudgetManagerIdInitial = null,
        //               //    BudgetManagerIdFinal = null,
        //               //    //BudgetStateId = order.Budget.AppStateId,
        //               //    //CompanyIdInitial = order.Budget.CompanyId,
        //               //    //CompanyIdFinal = order.Budget.CompanyId,
        //               //    //CostCenterIdInitial = order.Budget.CostCenterId,
        //               //    //CostCenterIdFinal = order.Budget.CostCenterId,
        //               //    CreatedAt = DateTime.Now,
        //               //    //CreatedBy = order.Budget.UserId,
        //               //    Document = document,
        //               //    DstConfAt = DateTime.Now,
        //               //    //DstConfBy = order.Budget.UserId,
        //               //    //EmployeeIdInitial = order.Budget.EmployeeId,
        //               //    //EmployeeIdFinal = order.Budget.EmployeeId,
        //               //    //InfoIni = order.Budget.Info,
        //               //    //InfoFin = order.Budget.Info,
        //               //    //InterCompanyIdInitial = order.Budget.InterCompanyId,
        //               //    //InterCompanyIdFinal = order.Budget.InterCompanyId,
        //               //    IsAccepted = false,
        //               //    IsDeleted = false,
        //               //    ModifiedAt = DateTime.Now,
        //               //    //ModifiedBy = order.Budget.UserId,
        //               //    //PartnerIdInitial = order.Budget.PartnerId,
        //               //    //PartnerIdFinal = order.Budget.PartnerId,
        //               //    //ProjectIdInitial = order.Budget.ProjectId,
        //               //    //ProjectIdFinal = order.Budget.ProjectId,
        //               //    //QuantityIni = order.Budget.Quantity,
        //               //    //QuantityFin = order.Budget.QuantityRem,
        //               //    //SubTypeIdInitial = order.Budget.SubTypeId,
        //               //    //SubTypeIdFinal = order.Budget.SubTypeId,
        //               //    Validated = true,
        //               //    //ValueFin1 = order.Budget.ValueFin,
        //               //    //ValueIni1 = order.Budget.ValueIni,
        //               //    //ValueFin2 = order.Budget.ValueFin,
        //               //    //ValueIni2 = order.Budget.ValueIni,
        //               //    //AdmCenterIdInitial = costCenter.AdmCenterId,
        //               //    //AdmCenterIdFinal = costCenter.AdmCenterId,
        //               //    Guid = Guid.NewGuid()
        //               //};

        //               //_context.Add(budgetOp);


        //               //offerOp = new Model.OfferOp()
        //               //{
        //               //    // AccMonthId = order.Offer.AccMonthId,
        //               //    AccSystemId = null,
        //               //    //AccountIdInitial = order.Offer.AccountId,
        //               //    //AccountIdFinal = order.Offer.AccountId,
        //               //    //AdministrationIdInitial = order.Offer.AdministrationId,
        //               //    //AdministrationIdFinal = order.Offer.AdministrationId,
        //               //    //OfferId = order.Offer.Id,
        //               //    BudgetManagerIdInitial = null,
        //               //    BudgetManagerIdFinal = null,
        //               //    BudgetStateId = 1,
        //               //    //CompanyIdInitial = order.Offer.CompanyId,
        //               //    //CompanyIdFinal = order.Offer.CompanyId,
        //               //    //CostCenterIdInitial = order.Offer.CostCenterId,
        //               //    //CostCenterIdFinal = order.Offer.CostCenterId,
        //               //    CreatedAt = DateTime.Now,
        //               //    // CreatedBy = order.Offer.UserId,
        //               //    Document = document,
        //               //    DstConfAt = DateTime.Now,
        //               //    //DstConfBy = order.Offer.UserId,
        //               //    //EmployeeIdInitial = order.Offer.EmployeeId,
        //               //    //EmployeeIdFinal = order.Offer.EmployeeId,
        //               //    //InfoIni = order.Offer.Info,
        //               //    //InfoFin = order.Offer.Info,
        //               //    //InterCompanyIdInitial = order.Offer.InterCompanyId,
        //               //    //InterCompanyIdFinal = order.Offer.InterCompanyId,
        //               //    IsAccepted = false,
        //               //    IsDeleted = false,
        //               //    ModifiedAt = DateTime.Now,
        //               //    //ModifiedBy = order.Offer.UserId,
        //               //    //PartnerIdInitial = order.Offer.PartnerId,
        //               //    //PartnerIdFinal = order.Offer.PartnerId,
        //               //    //ProjectIdInitial = order.Offer.ProjectId,
        //               //    //ProjectIdFinal = order.Offer.ProjectId,
        //               //    //QuantityIni = order.Offer.Quantity,
        //               //    //QuantityFin = order.Offer.QuantityRem,
        //               //    //SubTypeIdInitial = order.Offer.SubTypeId,
        //               //    //SubTypeIdFinal = order.Offer.SubTypeId,
        //               //    Validated = true,
        //               //    //ValueFin1 = order.Offer.ValueFin,
        //               //    //ValueIni1 = order.Offer.ValueIni,
        //               //    //ValueFin2 = order.Offer.ValueFin,
        //               //    //ValueIni2 = order.Offer.ValueIni,
        //               //    Guid = Guid.NewGuid()
        //               //};

        //               //_context.Add(offerOp);

        //               var lastInventoryDoc = "Lipsa PV";
        //               // var lastInventoryDate = inventory.End.Value.ToString("yyyyMMdd");
        //               var lastInventoryDate = DateTime.Now.ToString("yyyyMMdd");
        //               var committee = _context.Committees.Where(a => a.IsDeleted == false && a.CostCenterId == assetDto.CostCenterId).FirstOrDefault();

        //               if (committee != null)
        //               {
        //                   lastInventoryDoc = committee.Document1;
        //               }

        //               sap.Add(new TransferInStockInput()
        //               {
        //                   //Gl_Account = "0021330000",

        //                   Doc_Date = lastInventoryDate,
        //                   Pstng_Date = lastInventoryDate,
        //                   Material = stock.Material.Code,
        //                   Plant = costCenter.Storage.Plant.Code,
        //                   Storage_Location = costCenter.Storage.Code,
        //                   Quantity = 1,
        //                   Uom = stock.UM,
        //                   Batch = stock.Code,
        //                   //Gl_Account = accountancy.ExpAccount.Name,
        //                   Item_Text = "",
        //                   Asset = asset.InvNo,
        //                   SubNumber = asset.SubNo.ToString()
        //               });
        //           }


        //           _context.SaveChanges();
        //       }



        //       createAsset = new List<Dto.TransferInStockInput>();

        //       for (int i = 0; i < sap.Count; i++)
        //       {
        //           createAsset.Add(sap[i]);
        //       }

        //       return asset.Id;
        //   }
        public Model.CreateAssetSAPResult AddAssetStock(AddStockAsset assetDto)
        {
            Model.Asset asset = null;
            Model.AssetDep assetDep = null;
            Model.AssetDepMD assetDepMD = null;
            Model.AssetInv assetInv = null;
            Model.AssetAC assetAC = null;
            Model.AssetAdmMD assetAdmMD = null;
            Model.AccMonth accMonth = null;
            Model.Document document = null;
            Model.AssetOp assetOp = null;
            Model.OrderOp orderOp = null;
            Model.OfferOp offerOp = null;
            Model.BudgetOp budgetOp = null;
            Model.Inventory inventory = null;
            Model.InventoryAsset inventoryAsset = null;
            DateTime? documentDate = null;
            // Model.Administration administration = null;
            Model.AccSystem accSystem = null;
            Model.AssetClass assetClass = null;
            // Model.AssetCategory assetCategory = null;
            Model.DictionaryItem dictionaryItem = null;
            //Model.SubCategory subCategory = null;
            Model.AssetClassType assetClassType = null;
            Model.Partner partner = null;
            Model.CostCenter costCenter = null;
            // Model.Company company = null;
            // Model.Room room = null;
            // Model.AdmCenter admCenter = null;
            Model.AssetState assetState = null;
            // Model.AssetType assetType = null;
            Model.InvState invState = null;
            Model.Employee employee = null;
            // Model.Material material = null;
            Model.DocumentType documentType = null;
            // Model.Order order = null;
            // Model.OfferMaterial offerMaterial = null;
            Model.Stock stock = null;
           //Model.Accountancy accountancy = null;
            Model.BudgetManager budgetManager = null;
            Model.CreateAssetSAP createAssetSAP = null;
            Model.TransferInStockSAP transferInStockSAP = null;
            Model.EntityType entityType = null;

            string accSystemDefault = "RON";
            string assetClassTypeDefault = "-";

            documentType = _context.Set<Model.DocumentType>().AsNoTracking().Where(d => d.Code == "PURCHASE").FirstOrDefault();

            inventory = _context.Set<Model.Inventory>().AsNoTracking().Where(i => i.Active == true).Single();
            invState = _context.Set<Model.InvState>().Where(a => a.Code == "F").Single();
            assetState = _context.Set<Model.AssetState>().Where(a => a.Code == "STOCK_IT").Single();
            assetClassType = _context.Set<Model.AssetClassType>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();
            assetClass = _context.Set<Model.AssetClass>().Where(a => (a.Code == "")).FirstOrDefault();
            accSystem = _context.Set<Model.AccSystem>().Where(a => (a.Code == accSystemDefault)).FirstOrDefault();
            budgetManager = _context.Set<Model.BudgetManager>().Where(a => (a.Code == "2023")).FirstOrDefault();

            employee = _context.Set<Model.Employee>().Where(a => a.InternalCode == "VIRTUAL").Single();

            costCenter = _context.Set<Model.CostCenter>()
                    .Include(c => c.Company)
                    .Include(c => c.Room)
                    .Include(c => c.AdmCenter)
                    .Include(c => c.Region)
                    .Include(c => c.Administration)
                    .Include(c => c.Division)
                        .ThenInclude(d => d.Department)
                    .Where(a => a.Code == "10RO700310").Single();

            //costCenter = _context.Set<Model.CostCenter>()
            //        .Include(c => c.Company)
            //        .Include(c => c.Room)
            //        .Include(c => c.AdmCenter)
            //        .Include(c => c.Region)
            //        .Include(c => c.Administration)
            //        .Include(c => c.Division)
            //            .ThenInclude(d => d.Department)
            //        .Include(a => a.Storage)
            //            .ThenInclude(p => p.Plant)
            //        .Where(a => a.Code == "10RO010100").Single();

            int quantity = 1;

            for (int j = 0; j < quantity; j++)
            {
                entityType = _context.Set<Model.EntityType>().Where(c => c.UploadFolder == "NEWASSET").FirstOrDefault();

                asset = new Model.Asset()
                {
                    Document = document
                };
                _context.Add(asset);

                stock = _context.Set<Model.Stock>().Include(c => c.Company).Include(m => m.Material).Where(a => a.Id == assetDto.StockId).Single();

                //subCategory = _context.Set<Model.SubCategory>()
                //    .Include(c => c.Category)
                //    .Where(a => a.Id == assetDto.SubCategoryId).Single();



                //if (stock.Value > 2500)
                //{
                //    accountancy = _context.Set<Model.Accountancy>()

                //      .Include(a => a.Account)
                //      
                //      .Include(a => a.AssetCategory)
                //      .Include(a => a.AssetType)
                //      .Where(a => a.SubCategoryId == assetDto.SubCategoryId && a.Value > 2500 && a.IsDeleted == false).SingleOrDefault();

                //    if (accountancy == null) return new Model.CreateAssetSAPResult { Success = false, ErrorMessage = $"Lipsa mapare cont GL pentru subCategoria: {subCategory.Code + " - " + subCategory.Name}!" };
                //}
                //else
                //{
                //    accountancy = _context.Set<Model.Accountancy>()

                //     .Include(a => a.Account)
                //     
                //     .Include(a => a.AssetCategory)
                //     .Include(a => a.AssetType)
                //     .Where(a => a.SubCategoryId == assetDto.SubCategoryId && a.Value == 2500 && a.IsDeleted == false).SingleOrDefault();

                //    if (accountancy == null) return new Model.CreateAssetSAPResult { Success = false, ErrorMessage = $"Lipsa mapare cont GL pentru subCategoria: {subCategory.Code + " - " + subCategory.Name}!" };
                //}

                //dictionaryItem = _context.Set<Model.DictionaryItem>().Where(a => a.Name == subCategory.Name).FirstOrDefault();

                //if (dictionaryItem == null)
                //{
                //    dictionaryItem = new Model.DictionaryItem()
                //    {
                //        Code = "NEW",
                //        Name = subCategory.Name,
                //        IsDeleted = false,
                //        //AssetCategoryId = accountancy.AssetCategoryId,
                //        DictionaryTypeId = 1
                //    };

                //    _context.Add(dictionaryItem);
                //}

                document = new Model.Document
                {
                    Approved = true,
                    DocumentTypeId = documentType != null ? documentType.Id : 1,
                    DocNo1 = stock.Invoice != null ? stock.Invoice : string.Empty,
                    DocNo2 = string.Empty,
                    DocumentDate = DateTime.Now,
                    CreationDate = DateTime.Now,
                    CostCenterId = costCenter != null ? costCenter.Id : (int?)null,
                    RegisterDate = DateTime.Now,
                    Details = string.Empty,
                    ParentDocumentId = inventory.DocumentId
                };


                partner = _context.Set<Model.Partner>().Where(a => a.Id == stock.PartnerId).FirstOrDefault();

                document.Partner = partner;

                _context.Add(document);

                int? value = null;

                asset.InvNo = costCenter.Company.Code + "OPT0000000000" + entityType.Name;
                asset.Name = assetDto.Name;
                asset.PurchaseDate = DateTime.Now;
                asset.SerialNumber = assetDto.SerialNumber;
                asset.ERPCode = costCenter.Company.Code + "OPT0000000000" + entityType.Name;
                asset.Document = document;
                asset.Validated = true;
                asset.SAPCode = costCenter.Company.Code + "OPT0000000000" + entityType.Name;
                asset.AssetStateId = assetState.Id;
                //asset.AssetTypeId = accountancy.AssetTypeId;
                asset.CostCenterId = costCenter.Id;
                asset.DepartmentId = costCenter.Division.DepartmentId;
                asset.DivisionId = costCenter.DivisionId;
                //asset.AssetCategoryId = accountancy.AssetCategoryId;
                asset.EmployeeId = employee.Id;
                asset.RoomId = costCenter.RoomId;
                asset.ValueInv = stock.Value;
                asset.ValueRem = stock.Value;
                asset.InvStateId = invState.Id;
                asset.Quantity = 1;
                asset.DepartmentId = costCenter.Division.DepartmentId;
                asset.Custody = false;
                //asset.UomId = assetDto.UomId;
                asset.CompanyId = costCenter.CompanyId;
                asset.Validated = true;
                
                asset.BudgetManager = budgetManager;
                //asset.AssetNatureId = assetDto.AssetNatureId;
                //asset.SubTypeId = assetDto.SubTypeId;
                //asset.InsuranceCategoryId = assetDto.InsuranceCategoryId;
                //asset.BrandId = assetDto.BrandId;
                //asset.ModelId = assetDto.ModelId;
                //asset.InterCompanyId = assetDto.InterCompanyId;
                //asset.ProjectId = order.ProjectId;
                //asset.InvoiceDate = assetDto.InvoiceDate;
                //asset.PODate = assetDto.PODate;
                //asset.ReceptionDate = assetDto.ReceptionDate;
                //asset.RemovalDate = assetDto.RemovalDate;
                asset.IsTemp = false;
                //asset.DimensionId = assetDto.DimensionId;
                asset.AdministrationId = costCenter.AdministrationId;
                asset.DictionaryItem = dictionaryItem;
                asset.IsAccepted = true;
                asset.IsReconcile = false;
                //asset.AccountId = accountancy.AccountId;
                //asset.OrderId = order.Id;
                //asset.BudgetId = order.BudgetId;
                asset.DivisionId = costCenter.DivisionId;
                //asset.ProjectTypeId = assetDto.ProjectTypeId;
                // asset.AgreementNo = assetDto.PlateNo;
               // asset.Name = subCategory.Name;
                asset.StockId = assetDto.StockId;
                asset.MaterialId = stock.MaterialId;
                //asset.SubCategoryId = subCategory.Id;
                asset.CostCenterEmpId = employee != null ? employee.CostCenterId : null;
                //asset.ExpAccountId = accountancy.ExpAccountId;

                assetAC = new Model.AssetAC
                {
                    AssetClassTypeId = assetClassType.Id,
                    Asset = asset,
                    AssetClassId = assetClass.Id,
                    AssetClassIdIn = assetClass.Id
                };


                _context.Set<Model.AssetAC>().Add(assetAC);

                var monthSum = 0;


                assetDep = new Model.AssetDep
                {
                    AccSystem = accSystem,
                    Asset = asset,
                    DepPeriod = (int)monthSum,
                    DepPeriodIn = (int)monthSum,
                    DepPeriodMonth = (int)monthSum,
                    DepPeriodMonthIn = 0,
                    DepPeriodRem = (int)monthSum,
                    DepPeriodRemIn = (int)monthSum,
                    UsageStartDate = documentDate,
                    ValueDep = stock.Value,
                    ValueDepIn = stock.Value,
                    ValueDepPU = stock.Value,
                    ValueDepPUIn = stock.Value,
                    ValueDepYTD = stock.Value,
                    ValueDepYTDIn = stock.Value,
                    ValueInv = stock.Value,
                    ValueInvIn = stock.Value,
                    ValueRem = stock.Value,
                    ValueRemIn = stock.Value
                };

                _context.Set<Model.AssetDep>().Add(assetDep);


                assetInv = new Model.AssetInv
                {
                    Asset = asset,
                    AllowLabel = true,
                    Barcode = entityType.Code + entityType.Name,
                    InvName = asset.Name,
                    InvNoOld = string.Empty,
                    InvStateId = invState.Id
                };

                _context.Set<Model.AssetInv>().Add(assetInv);


                accMonth = _context.Set<Model.AccMonth>().Where(a => a.IsActive == true).FirstOrDefault();

                assetDepMD = new Model.AssetDepMD
                {
                    AccMonthId = accMonth.Id,
                    AccSystem = accSystem,
                    Asset = asset,
                    UsefulLife = (int)monthSum,
                    TotLifeInpPeriods = (int)monthSum,
                    RemLifeInPeriods = 0,
                    AccumulDep = stock.Value,
                    BkValFYStart = stock.Value,
                    DepForYear = stock.Value,
                    CurrentAPC = stock.Value,
                    PosCap = stock.Value
                };

                _context.Set<Model.AssetDepMD>().Add(assetDepMD);


                assetAdmMD = new Model.AssetAdmMD
                {
                    AccMonthId = accMonth.Id,
                    Asset = asset,
                    DepartmentId = null
                };

                assetAdmMD.AssetStateId = assetState.Id;
                //assetAdmMD.AssetTypeId = accountancy.AssetTypeId;
                assetAdmMD.CostCenterId = costCenter.Id;
                assetAdmMD.DepartmentId = costCenter.Division.DepartmentId;
                assetAdmMD.DivisionId = costCenter.DivisionId;
                assetAdmMD.EmployeeId = employee.Id;
                assetAdmMD.RoomId = costCenter.RoomId;
                assetAdmMD.DepartmentId = costCenter.Division.DepartmentId;
                //assetAdmMD.AssetCategoryId = accountancy.AssetCategoryId;
                assetAdmMD.AssetClass = assetClass;
                
                assetAdmMD.AdministrationId = costCenter.AdministrationId;

                //assetAdmMD.AssetNatureId = assetDto.AssetNatureId;
                assetAdmMD.BudgetManager = budgetManager;
                //assetAdmMD.SubTypeId = assetDto.SubTypeId;
                //assetAdmMD.InsuranceCategoryId = assetDto.InsuranceCategoryId;
                //assetAdmMD.ModelId = assetDto.ModelId;
                //assetAdmMD.BrandId = assetDto.BrandId;
                //
                //assetAdmMD.ProjectId = order.ProjectId;

                assetAdmMD.AdmCenterId = costCenter.AdmCenterId;
                assetAdmMD.RegionId = costCenter.RegionId;
                // assetAdmMD.ProjectTypeId = order.Budget.ProjectTypeId;
                //assetAdmMD.SubCategoryId = subCategory.Id;


                _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);

                entityType.Name = StringsADD(entityType.Name, "1");
                _context.Update(entityType);

                if (inventory != null)
                {
                    inventoryAsset = new Model.InventoryAsset
                    {
                        QInitial = 1,
                        QFinal = 0,
                        InventoryId = inventory.Id,
                        Asset = asset,
                        EmployeeIdInitial = employee.Id,
                        RoomIdInitial = costCenter.RoomId,
                        SerialNumber = assetDto.SerialNumber,
                        StateIdInitial = invState.Id,
                        CostCenterInitial = costCenter,
                        AdministrationIdInitial = costCenter.AdministrationId
                    };

                    _context.Add(inventoryAsset);

                    assetOp = new Model.AssetOp()
                    {
                        Asset = asset,
                        Document = document,
                        RoomIdInitial = costCenter.RoomId,
                        RoomIdFinal = costCenter.RoomId,
                        EmployeeIdInitial = employee.Id,
                        EmployeeIdFinal = employee.Id,

                        //AssetCategoryIdInitial = accountancy.AssetCategoryId,
                        //AssetCategoryIdFinal = accountancy.AssetCategoryId,
                        InvStateIdInitial = invState.Id,
                        InvStateIdFinal = invState.Id,
                        AdministrationIdInitial = costCenter.AdministrationId,
                        AdministrationIdFinal = costCenter.AdministrationId,
                        AccSystem = accSystem,
                        DocumentId = document.Id
                    };

                    assetOp.AssetStateIdInitial = assetState.Id;
                    assetOp.AssetStateIdFinal = assetState.Id;
                    assetOp.CostCenterInitial = costCenter;
                    assetOp.CostCenterFinal = costCenter;
                    assetOp.DepartmentIdInitial = null;
                    assetOp.DepartmentIdFinal = null;
                    assetOp.InvName = assetDto.Name;
                    //assetOp.AssetTypeIdInitial = accountancy.AssetTypeId; 
                    //assetOp.AssetTypeIdFinal = accountancy.AssetTypeId;
                    _context.Add(assetOp);


                    //orderOp = new Model.OrderOp()
                    //{
                    //    AccMonthId = inventory.AccMonthId,
                    //    AccSystemId = null,
                    //    //
                    //    //
                    //    //AdministrationIdInitial = order.AdministrationId,
                    //    //AdministrationIdFinal = order.AdministrationId,
                    //    //OrderId = order.Id,
                    //    BudgetManagerIdInitial = null,
                    //    BudgetManagerIdFinal = null,
                    //    //BudgetStateId = order.AppStateId,
                    //    //CompanyIdInitial = order.CompanyId,
                    //    //CompanyIdFinal = order.CompanyId,
                    //    //CostCenterIdInitial = order.CostCenterId,
                    //    //CostCenterIdFinal = order.CostCenterId,
                    //    CreatedAt = DateTime.Now,
                    //    //CreatedBy = order.UserId,
                    //    Document = document,
                    //    DstConfAt = DateTime.Now,
                    //    //DstConfBy = order.UserId,
                    //    //EmployeeIdInitial = order.EmployeeId,
                    //    //EmployeeIdFinal = order.EmployeeId,
                    //    //InfoIni = order.Info,
                    //    //InfoFin = order.Info,
                    //    //InterCompanyIdInitial = order.InterCompanyId,
                    //    //InterCompanyIdFinal = order.InterCompanyId,
                    //    IsAccepted = false,
                    //    IsDeleted = false,
                    //    ModifiedAt = DateTime.Now,
                    //    //ModifiedBy = order.UserId,
                    //    //PartnerIdInitial = order.PartnerId,
                    //    //PartnerIdFinal = order.PartnerId,
                    //    //ProjectIdInitial = order.ProjectId,
                    //    //ProjectIdFinal = order.ProjectId,
                    //    //QuantityIni = order.Quantity,
                    //    //QuantityFin = order.QuantityRem,
                    //    //SubTypeIdInitial = order.SubTypeId,
                    //    //SubTypeIdFinal = order.SubTypeId,
                    //    Validated = true,
                    //    //ValueFin1 = order.ValueFin,
                    //    //ValueIni1 = order.ValueIni,
                    //    //ValueFin2 = order.ValueFin,
                    //    //ValueIni2 = order.ValueIni,
                    //    Guid = Guid.NewGuid(),
                    //    //BudgetIdInitial = order.BudgetId,
                    //    //BudgetIdFinal = order.BudgetId,
                    //    //OfferIdInitial = order.OfferId,
                    //    //OfferIdFinal = order.OfferId,
                    //    //UomId = order.UomId
                    //};

                    //_context.Add(orderOp);


                    //budgetOp = new Model.BudgetOp()
                    //{
                    //    // AccMonthId = order.Budget.AccMonthId,
                    //    AccSystemId = null,
                    //    //
                    //    //
                    //    //AdministrationIdInitial = costCenter.AdministrationId,
                    //    //AdministrationIdFinal = costCenter.AdministrationId,
                    //    //BudgetId = order.Budget.Id,
                    //    BudgetManagerIdInitial = null,
                    //    BudgetManagerIdFinal = null,
                    //    //BudgetStateId = order.Budget.AppStateId,
                    //    //CompanyIdInitial = order.Budget.CompanyId,
                    //    //CompanyIdFinal = order.Budget.CompanyId,
                    //    //CostCenterIdInitial = order.Budget.CostCenterId,
                    //    //CostCenterIdFinal = order.Budget.CostCenterId,
                    //    CreatedAt = DateTime.Now,
                    //    //CreatedBy = order.Budget.UserId,
                    //    Document = document,
                    //    DstConfAt = DateTime.Now,
                    //    //DstConfBy = order.Budget.UserId,
                    //    //EmployeeIdInitial = order.Budget.EmployeeId,
                    //    //EmployeeIdFinal = order.Budget.EmployeeId,
                    //    //InfoIni = order.Budget.Info,
                    //    //InfoFin = order.Budget.Info,
                    //    //InterCompanyIdInitial = order.Budget.InterCompanyId,
                    //    //InterCompanyIdFinal = order.Budget.InterCompanyId,
                    //    IsAccepted = false,
                    //    IsDeleted = false,
                    //    ModifiedAt = DateTime.Now,
                    //    //ModifiedBy = order.Budget.UserId,
                    //    //PartnerIdInitial = order.Budget.PartnerId,
                    //    //PartnerIdFinal = order.Budget.PartnerId,
                    //    //ProjectIdInitial = order.Budget.ProjectId,
                    //    //ProjectIdFinal = order.Budget.ProjectId,
                    //    //QuantityIni = order.Budget.Quantity,
                    //    //QuantityFin = order.Budget.QuantityRem,
                    //    //SubTypeIdInitial = order.Budget.SubTypeId,
                    //    //SubTypeIdFinal = order.Budget.SubTypeId,
                    //    Validated = true,
                    //    //ValueFin1 = order.Budget.ValueFin,
                    //    //ValueIni1 = order.Budget.ValueIni,
                    //    //ValueFin2 = order.Budget.ValueFin,
                    //    //ValueIni2 = order.Budget.ValueIni,
                    //    //AdmCenterIdInitial = costCenter.AdmCenterId,
                    //    //AdmCenterIdFinal = costCenter.AdmCenterId,
                    //    Guid = Guid.NewGuid()
                    //};

                    //_context.Add(budgetOp);


                    //offerOp = new Model.OfferOp()
                    //{
                    //    // AccMonthId = order.Offer.AccMonthId,
                    //    AccSystemId = null,
                    //    //AccountIdInitial = order.Offer.AccountId,
                    //    //AccountIdFinal = order.Offer.AccountId,
                    //    //AdministrationIdInitial = order.Offer.AdministrationId,
                    //    //AdministrationIdFinal = order.Offer.AdministrationId,
                    //    //OfferId = order.Offer.Id,
                    //    BudgetManagerIdInitial = null,
                    //    BudgetManagerIdFinal = null,
                    //    BudgetStateId = 1,
                    //    //CompanyIdInitial = order.Offer.CompanyId,
                    //    //CompanyIdFinal = order.Offer.CompanyId,
                    //    //CostCenterIdInitial = order.Offer.CostCenterId,
                    //    //CostCenterIdFinal = order.Offer.CostCenterId,
                    //    CreatedAt = DateTime.Now,
                    //    // CreatedBy = order.Offer.UserId,
                    //    Document = document,
                    //    DstConfAt = DateTime.Now,
                    //    //DstConfBy = order.Offer.UserId,
                    //    //EmployeeIdInitial = order.Offer.EmployeeId,
                    //    //EmployeeIdFinal = order.Offer.EmployeeId,
                    //    //InfoIni = order.Offer.Info,
                    //    //InfoFin = order.Offer.Info,
                    //    //InterCompanyIdInitial = order.Offer.InterCompanyId,
                    //    //InterCompanyIdFinal = order.Offer.InterCompanyId,
                    //    IsAccepted = false,
                    //    IsDeleted = false,
                    //    ModifiedAt = DateTime.Now,
                    //    //ModifiedBy = order.Offer.UserId,
                    //    //PartnerIdInitial = order.Offer.PartnerId,
                    //    //PartnerIdFinal = order.Offer.PartnerId,
                    //    //ProjectIdInitial = order.Offer.ProjectId,
                    //    //ProjectIdFinal = order.Offer.ProjectId,
                    //    //QuantityIni = order.Offer.Quantity,
                    //    //QuantityFin = order.Offer.QuantityRem,
                    //    //SubTypeIdInitial = order.Offer.SubTypeId,
                    //    //SubTypeIdFinal = order.Offer.SubTypeId,
                    //    Validated = true,
                    //    //ValueFin1 = order.Offer.ValueFin,
                    //    //ValueIni1 = order.Offer.ValueIni,
                    //    //ValueFin2 = order.Offer.ValueFin,
                    //    //ValueIni2 = order.Offer.ValueIni,
                    //    Guid = Guid.NewGuid()
                    //};

                    //_context.Add(offerOp);

                    //var lastInventoryDoc = "";
                    //var lastInventoryDate = inventory.End.Value.ToString("yyyyMMdd");
                    var lastInventoryDate = DateTime.Now.ToString("yyyyMMdd");
                    //var committee = _context.Committees.Where(a => a.IsDeleted == false && a.CostCenterId == assetDto.CostCenterId).FirstOrDefault();

                    //if (committee != null)
                    //{
                    //    lastInventoryDoc = committee.Document1;
                    //}

                    var names = SplitToLines(stock.Material.Name, 50);
                    var countNames = names.Count();
                    var guid = Guid.NewGuid();

                    createAssetSAP = new Model.CreateAssetSAP();

                    createAssetSAP.XSUBNO = "";
                    createAssetSAP.COMPANYCODE = costCenter.Company.Code;
                    createAssetSAP.ASSET = asset.InvNo;
                    createAssetSAP.SUBNUMBER = "0000";
                    //createAssetSAP.ASSETCLASS = accountancy.ExpAccount.Name;
                    createAssetSAP.POSTCAP = "";
                    createAssetSAP.DESCRIPT = countNames > 0 ? names.ElementAt(0) : "";
                    createAssetSAP.DESCRIPT2 = countNames > 1 ? names.ElementAt(1) : "";
                    createAssetSAP.INVENT_NO = asset.InvNo;
                    createAssetSAP.SERIAL_NO = assetDto.SerialNumber == null || assetDto.SerialNumber == "" ? "" : assetDto.SerialNumber;
                    createAssetSAP.QUANTITY = 0;
                    createAssetSAP.BASE_UOM = "ST";
                    createAssetSAP.LAST_INVENTORY_DATE = "00000000";
                    createAssetSAP.LAST_INVENTORY_DOCNO = "";
                    //createAssetSAP.CAP_DATE = assetDto.CapitalizationDate != null ? assetDto.CapitalizationDate.ToString("yyyyMMdd") : "00000000";
                    createAssetSAP.CAP_DATE = "00000000";
                    createAssetSAP.COSTCENTER = employee != null && employee.CostCenter != null ? employee.CostCenter.Code : costCenter.Code;
                    createAssetSAP.RESP_CCTR = costCenter.Code;
                    createAssetSAP.INTERN_ORD = "";
                    createAssetSAP.PLANT = stock.Plant;
                    createAssetSAP.LOCATION = "";
                    createAssetSAP.ROOM = "";
                    createAssetSAP.PERSON_NO = employee != null ? employee.InternalCode : "";
                    createAssetSAP.PLATE_NO = "";
                    //createAssetSAP.ZZCLAS = accountancy.AssetCategory.Code;
                    createAssetSAP.IN_CONSERVATION = "";
                    createAssetSAP.PROP_IND = "1";
                    createAssetSAP.OPTIMA_ASSET_NO = asset.InvNo;
                    createAssetSAP.OPTIMA_ASSET_PARENT_NO = "";
                    createAssetSAP.TESTRUN = "";
                    createAssetSAP.VENDOR_NO = partner.RegistryNumber;
                    createAssetSAP.Asset = asset;
                    createAssetSAP.NotSync = true;
                    createAssetSAP.SyncErrorCount = 0;
                    createAssetSAP.BudgetManagerId = budgetManager.Id;
                    createAssetSAP.AccMonthId = inventory.AccMonthId.Value;
                    createAssetSAP.CreatedBy = _context.UserId;
                    createAssetSAP.ModifiedBy = _context.UserId;
                    createAssetSAP.Guid = guid;
                    createAssetSAP.FromStock = true;
                    createAssetSAP.INVOICE = stock.Invoice;
                    asset.NotSync = true;
                    asset.Name = countNames > 0 ? names.ElementAt(0) : "";

                    _context.Add(createAssetSAP);

                    transferInStockSAP = new Model.TransferInStockSAP()
                    {
                        Doc_Date = lastInventoryDate,
                        Pstng_Date = lastInventoryDate,
                        Material = stock.Material.Code,
                        Plant = stock.Plant,
                        Storage_Location = stock.Storage_Location,
                        Quantity = 1,
                        Uom = stock.UM,
                        Batch = stock.Code,
                        //Gl_Account = accountancy.ExpAccount.Name,
                        Item_Text = stock.Name,
                        Asset = asset.InvNo,
                        SubNumber = asset.SubNo,
                        AssetStock = asset,
                        NotSync = true,
                        SyncErrorCount = 0,
                        BudgetManagerId = budgetManager.Id,
                        AccMonthId = inventory.AccMonthId.Value,
                        CreatedBy = _context.UserId,
                        ModifiedBy = _context.UserId,
                        Guid = guid,
                        CreateAssetSAP = createAssetSAP,
                        Ref_Doc_No = "MFX IT",
                        Header_Txt = "Transfer din stoc MFX in asset",
                        Storno = "",
                        Storno_Doc = "",
                        Storno_Year = "0000",
                        Storno_Date = "00000000",
                        Storno_User = ""
                    };

                    _context.Add(transferInStockSAP);

                    //sap.Add(new TransferInStockInput()
                    //{
                    //    //Gl_Account = "0021330000",

                    //    Doc_Date = lastInventoryDate,
                    //    Pstng_Date = lastInventoryDate,
                    //    Material = stock.Material.Code,
                    //    Plant = costCenter.Storage.Plant.Code,
                    //    Storage_Location = costCenter.Storage.Code,
                    //    Quantity = 1,
                    //    Uom = stock.UM,
                    //    Batch = stock.Code,
                    //    //Gl_Account = accountancy.ExpAccount.Name,
                    //    Item_Text = "",
                    //    Asset = asset.InvNo,
                    //    SubNumber = asset.SubNo.ToString()
                    //});
                }


                _context.SaveChanges();
            }



            //createAsset = new List<Dto.TransferInStockInput>();

            //for (int i = 0; i < sap.Count; i++)
            //{
            //    createAsset.Add(sap[i]);
            //}

            return new Model.CreateAssetSAPResult { Success = true, ErrorMessage = "OK" };
        }
        //     public int TransferAsset(SaveAssetTransfer assetDto, out List<Dto.TransferAssetSAP> createAsset)
        //     {
        //         Model.Asset fromAsset = null;
        //         Model.Asset toAsset = null;
        //         //Model.AssetDep fromAssetDep = null;
        //         //Model.AssetDep toAssetDep = null;
        //         //Model.AssetDepMD fromAssetDepMD = null;
        //         //Model.AssetDepMD toAssetDepMD = null;
        //         Model.Inventory inventory = null;
        //         Model.BudgetManager budgetManager = null;
        //         Model.Uom uom = null;
        //         Model.TransferAssetSAP transferAssetSAP = null;

        //         List<Dto.TransferAssetSAP> sap = new List<Dto.TransferAssetSAP>();

        //inventory = _context.Set<Model.Inventory>().Include(a => a.AccMonth).AsNoTracking().Where(i => i.Active == true).Single();
        //         budgetManager = _context.Set<Model.BudgetManager>().AsNoTracking().Where(a => (a.Code == "2022")).FirstOrDefault();
        //         uom = _context.Set<Model.Uom>().AsNoTracking().Where(u => u.Id == assetDto.UomId).Single();
        //fromAsset = _context.Set<Model.Asset>().Include(a => a.Company).Where(c => c.Id == assetDto.FromAssetId).AsNoTracking().Single();
        //toAsset = _context.Set<Model.Asset>().Where(c => c.Id == assetDto.ToAssetId).AsNoTracking().Single();

        ////         fromAsset.ModifiedAt = DateTime.Now;
        ////         toAsset.ModifiedAt = DateTime.Now;

        ////         if(assetDto.Quantity > 0)
        ////{
        ////             fromAsset.Quantity -= (float)assetDto.Quantity;
        ////             toAsset.Quantity += (float)assetDto.Quantity;
        ////         }
        ////         else if (assetDto.Amount > 0) {
        ////             fromAsset.ValueInv -= assetDto.Amount;
        ////             fromAsset.ValueRem -= assetDto.Amount;

        ////             toAsset.ValueInv += assetDto.Amount;
        ////             toAsset.ValueRem += assetDto.Amount;

        ////             fromAssetDep = _context.Set<Model.AssetDep>().Where(a => a.AssetId == assetDto.FromAssetId).FirstOrDefault();
        ////             toAssetDep = _context.Set<Model.AssetDep>().Where(a => a.AssetId == assetDto.ToAssetId).FirstOrDefault();

        ////             fromAssetDep.ValueInv -= assetDto.Amount;
        ////             fromAssetDep.ValueInvIn -= assetDto.Amount;
        ////             fromAssetDep.ValueRem -= assetDto.Amount;
        ////             fromAssetDep.ValueRemIn -= assetDto.Amount;

        ////             _context.Set<Model.AssetDep>().Update(fromAssetDep);

        ////             toAssetDep.ValueInv += assetDto.Amount;
        ////             toAssetDep.ValueInvIn += assetDto.Amount;
        ////             toAssetDep.ValueRem += assetDto.Amount;
        ////             toAssetDep.ValueRemIn += assetDto.Amount;

        ////             _context.Set<Model.AssetDep>().Update(toAssetDep);

        ////             fromAssetDepMD = _context.Set<Model.AssetDepMD>().Where(a => a.AssetId == assetDto.FromAssetId && a.AccMonthId == inventory.AccMonthId).FirstOrDefault();
        ////             toAssetDepMD = _context.Set<Model.AssetDepMD>().Where(a => a.AssetId == assetDto.ToAssetId && a.AccMonthId == inventory.AccMonthId).FirstOrDefault();

        ////             fromAssetDepMD.ValueInv -= assetDto.Amount;
        ////             fromAssetDepMD.ValueRem -= assetDto.Amount;
        ////             fromAssetDepMD.ValueInvIn -= assetDto.Amount;
        ////             fromAssetDepMD.ValueRemIn -= assetDto.Amount;

        ////             _context.Set<Model.AssetDepMD>().Update(fromAssetDepMD);

        ////             toAssetDepMD.ValueInv += assetDto.Amount;
        ////             toAssetDepMD.ValueRem += assetDto.Amount;
        ////             toAssetDepMD.ValueInvIn += assetDto.Amount;
        ////             toAssetDepMD.ValueRemIn += assetDto.Amount;

        ////             _context.Set<Model.AssetDepMD>().Update(toAssetDepMD);
        ////}


        //var lastInventoryDoc = "Lipsa PV";
        //         var lastInventoryDate = DateTime.Now.ToString("yyyyMMdd");
        //         var committee = _context.Committees.Where(a => a.IsDeleted == false && a.CostCenterId == fromAsset.CostCenterId).FirstOrDefault();

        //         if (committee != null)
        //         {
        //             lastInventoryDoc = committee.Document1;
        //         }

        //         transferAssetSAP = new Model.TransferAssetSAP()
        //         {
        //             FROM_ASSET = fromAsset.InvNo,
        //             FROM_SUBNUMBER = "0000",
        //             COMPANYCODE = fromAsset.Company.Code,
        //             DOC_DATE = lastInventoryDate,
        //             PSTNG_DATE = lastInventoryDate,
        //             ASVAL_DATE = lastInventoryDate,
        //             ITEM_TEXT = assetDto.ItemText,
        //             TO_ASSET = toAsset.InvNo,
        //             TO_SUBNUMBER = "0000",
        //             FIS_PERIOD = "00",
        //             DOC_TYPE = "",
        //             REF_DOC_NO = assetDto.RefDocNo,
        //             COMPL_TRANSFER = assetDto.CompleteTransfer ? "X" : "",
        //             AMOUNT = assetDto.Amount,
        //             CURRENCY = uom.Code,
        //             PERCENT = assetDto.Percent,
        //             QUANTITY = assetDto.Quantity,
        //             BASE_UOM = "",
        //             PRIOR_YEAR_ACQUISITIONS = assetDto.PriorYearAcquisitions ? "X" : "",
        //             CURRENT_YEAR_ACQUISITIONS = assetDto.CurrentYearAcquisitions ? "X" : "",
        //             FromAsset = fromAsset,
        //             ToAsset = toAsset,
        //             NotSync = true,
        //             SyncErrorCount = 0,
        //             BudgetManagerId = budgetManager.Id,
        //             AccMonthId = inventory.AccMonthId.Value,
        //             CreatedBy = _context.UserId,
        //             ModifiedBy = _context.UserId,
        //         };

        //         sap.Add(new Dto.TransferAssetSAP()
        //         {
        //             FROM_ASSET = fromAsset.InvNo,
        //             FROM_SUBNUMBER = "0000",
        //             COMPANYCODE = fromAsset.Company.Code,
        //             DOC_DATE = lastInventoryDate,
        //             PSTNG_DATE = lastInventoryDate,
        //             ASVAL_DATE = lastInventoryDate,
        //             ITEM_TEXT = assetDto.ItemText,
        //             TO_ASSET = toAsset.InvNo,
        //             TO_SUBNUMBER = "0000",
        //             FIS_PERIOD = "00",
        //             DOC_TYPE = "",
        //             REF_DOC_NO = assetDto.RefDocNo,
        //             COMPL_TRANSFER = assetDto.CompleteTransfer ? "X" : "",
        //             AMOUNT = assetDto.Amount,
        //             CURRENCY = uom.Code,
        //             PERCENT = assetDto.Percent,
        //             QUANTITY = assetDto.Quantity,
        //             BASE_UOM = "",
        //             PRIOR_YEAR_ACQUISITIONS = assetDto.PriorYearAcquisitions ? "X" : "",
        //             CURRENT_YEAR_ACQUISITIONS = assetDto.CurrentYearAcquisitions ? "X" : ""
        //         });

        //         // _context.SaveChanges();

        //         createAsset = new List<Dto.TransferAssetSAP>();

        //         for (int i = 0; i < sap.Count; i++)
        //         {
        //             createAsset.Add(sap[i]);
        //         }

        //         return fromAsset.Id;
        //     }
        public async Task<UpdateAssetSAPResult> UpdateAcquisition(AssetAcquisition assetDto)
        {
            Model.Asset asset = null;
            Model.AssetDep assetDep = null;
            Model.AssetDepMD assetDepMD = null;
            Model.AssetInv assetInv = null;
            Model.AssetAC assetAC = null;
            Model.AssetAdmMD assetAdmMD = null;
            Model.AccMonth accMonth = null;
            Model.Document document = null;
            Model.AssetOp assetOp = null;
            Model.OrderOp orderOp = null;
            Model.OfferOp offerOp = null;
            Model.BudgetOp budgetOp = null;
            Model.Inventory inventory = null;
            Model.InventoryAsset inventoryAsset = null;
            Model.Administration administration = null;
            Model.AccSystem accSystem = null;
            Model.AssetClass assetClass = null;
            Model.AssetCategory assetCategory = null;
            Model.AssetClassType assetClassType = null;
            Model.Partner partner = null;
            Model.CostCenter costCenter = null;
            Model.Room room = null;
            Model.AssetState assetState = null;
            Model.AssetType assetType = null;
            Model.InvState invState = null;
            Model.Employee employee = null;
            Model.AdmCenter admCenter = null;
            Model.DocumentType documentType = null;
            Model.Order order = null;
            Model.Rate rate = null;
            Model.Material material = null;

            bool validation = false;
            DateTime? documentDate = null;
            string accSystemDefault = "RON";
            string assetClassTypeDefault = "-";
            string assetClassDefault = "NSP";
            string assetStateDefault = "F";
            bool isMultiple = false;
            var invoiceDate = string.Empty;

            inventory = _context.Set<Model.Inventory>().Where(i => i.Active == true).Single();

            asset = _context.Set<Model.Asset>()
                .Include(a => a.Document).ThenInclude(a => a.Partner)
                .Where(a => a.Id == assetDto.Id).Single();

            costCenter = _context.Set<Model.CostCenter>()
                .Include(c => c.Division)
                .Include(c => c.Division.Department)
                .Where(c => c.Id == assetDto.CostCenterId).SingleOrDefault();

            material = await _context.Set<Model.Material>().Where(a => a.Id == assetDto.MaterialId).FirstOrDefaultAsync();

            asset.Document.DocNo1 = assetDto.DocNo1;
            if (inventory != null)
            {
                accMonth = _context.Set<Model.AccMonth>().Where(a => a.Id == inventory.AccMonthId).Single();
            }
            if (assetDto.InvoiceDate != DateTime.MinValue)
            {
                invoiceDate = assetDto.InvoiceDate.Value.AddDays(-1).ToString("yyyy-MM-dd").Substring(0, 10);

                rate = await _context.Set<Model.Rate>()
                        .Include(u => u.Uom)
                        .AsNoTracking()
                        .Where(i => i.Value == assetDto.RateValue && i.UomId == assetDto.UomId && i.Code == invoiceDate && i.IsDeleted == false)
                        .FirstOrDefaultAsync();

                if (rate == null)
                {
                    rate = new Model.Rate()
                    {
                        AccMonthId = inventory.AccMonthId.Value,
                        Code = invoiceDate,
                        CompanyId = null,
                        CreatedAt = DateTime.Now,
                        CreatedBy = _context.UserId,
                        ModifiedAt = DateTime.Now,
                        ModifiedBy = _context.UserId,
                        Name = invoiceDate,
                        UomId = assetDto.UomId,
                        Value = assetDto.RateValue,
                        IsLast = false,
                        Multiplier = 1
                    };

                    _context.Add(rate);
                    _context.SaveChanges();
                }
            }
            else
            {
                return new UpdateAssetSAPResult { Success = false, ErrorMessage = "Va rugam selectati o data de factura!", EntityId = 0 };
            }


            assetInv = _context.Set<Model.AssetInv>().Where(a => a.AssetId == assetDto.Id).Single();

            asset.ERPCode = assetDto.ERPCode;
            asset.CompanyId = costCenter.CompanyId;
            asset.Name = assetDto.Name;
            //asset.PurchaseDate = documentDate;
            asset.SerialNumber = assetDto.SerialNumber;
            asset.InvNo = assetDto.InvNo;
            asset.SubNo = assetDto.SubNo;
            asset.AssetTypeId = assetDto.AssetTypeId;
            //asset.AssetStateId = assetState.Id;
            asset.CostCenterId = assetDto.CostCenterId;
            asset.SAPCode = assetDto.SAPCode;
            asset.HeaderText = assetDto.HeaderText;

            asset.DivisionId = costCenter.Division.Id;
            asset.DepartmentId = costCenter.Division.Department.Id;
            asset.EmployeeId = assetDto.EmployeeId;
            asset.RoomId = assetDto.RoomId;
            asset.ValueInv = assetDto.ValueInvRon * assetDto.RateValue;
            asset.ValueInvRon = assetDto.ValueInvRon;

            asset.NetAmount = assetDto.ValueInvRon * assetDto.RateValue;
            asset.NetAmountRon = assetDto.ValueInvRon;
            asset.Document.DocumentDate = (System.DateTime)assetDto.AssetValueDate;

            asset.ValueRem = assetDto.ValueInvRon * assetDto.RateValue;
            asset.ValueRemRon = assetDto.ValueInvRon;
            // asset.InvStateId = assetDto.InvStateId;
            asset.Quantity = assetDto.Quantity;
            // asset.DimensionId = assetDto.DimensionId;
            asset.DictionaryItemId = assetDto.DictionaryItemId;
            // asset.CompanyId = assetDto.CompanyId;
            // asset.AdministrationId = assetDto.AdministrationId;
            asset.ERPCode = assetDto.ERPCode;
            //asset.InvNo = assetDto.InvNo; // OTP
            //asset.AssetStateId = assetState.Id;
            //asset.CompanyId = 1;
            //asset.Custody = false;
            //asset.UomId = 3;
            asset.BudgetManagerId = assetDto.BudgetManagerId;
            asset.AssetNatureId = assetDto.AssetNatureId;
            asset.SubTypeId = assetDto.SubTypeId;
            asset.InsuranceCategoryId = assetDto.InsuranceCategoryId;
            asset.ModelId = asset.ModelId;
            asset.BrandId = asset.BrandId;
            asset.ProjectId = assetDto.ProjectId;
            asset.AssetCategoryId = assetDto.AssetCategoryId;
            //asset.AccountId = assetDto.AccountId;

            Model.Asset assetTest = null;
            assetTest = _context.Set<Model.Asset>().Include(a => a.Document).Where(a => a.Id == assetDto.Id).Single();
            DateTime? datedif = assetDto.InvoiceDate?.Date;
            if (datedif != assetTest.InvoiceDate?.Date)
            {
                assetDto.InvoiceDate = assetDto.InvoiceDate.Value.AddDays(1);
            }

            asset.InvoiceDate = assetDto.InvoiceDate.ToString() != "1/1/0001 12:00:00 AM" ? assetDto.InvoiceDate : null;
            // asset.PODate = assetDto.PODate.ToString() != "1/1/0001 12:00:00 AM" ? assetDto.PODate : null;
            // asset.ReceptionDate = assetDto.ReceptionDate.ToString() != "1/1/0001 12:00:00 AM" ? assetDto.ReceptionDate : null;
            asset.RemovalDate = assetDto.RemovalDate.ToString() != "1/1/0001 12:00:00 AM" ? assetDto.RemovalDate : null;

            asset.ModifiedAt = DateTime.Now;
            asset.PurchaseDate = assetDto.InvoiceDate.ToString() != "1/1/0001 12:00:00 AM" ? assetDto.InvoiceDate : null;
            // asset.IsAccepted = assetDto.IsAccepted;
            asset.OrderId = assetDto.OrderId;
            // asset.BudgetId = assetDto.BudgetId;

            // asset.ProjectTypeId = assetDto.ProjectTypeId;
            asset.RateId = rate.Id;
            
            asset.AssetCategoryId = assetDto.AssetCategoryId;
            asset.Document.DocNo1 = assetDto.DocNo1;
            asset.Document.PartnerId = assetDto.PartnerId;
            _context.Set<Model.Asset>().Update(asset);

            //assetInv.Producer = assetDto.ProducerInv;
            //assetInv.Model = assetDto.ModelInv;
            //assetInv.Info = assetDto.Info;

            _context.Set<Model.AssetInv>().Update(assetInv);


            inventoryAsset = _context.Set<Model.InventoryAsset>().Where(a => a.AssetId == assetDto.Id && a.InventoryId == inventory.Id).Single();

            // inventoryAsset.StateIdInitial = assetDto.InvStateId;
            inventoryAsset.EmployeeIdInitial = assetDto.EmployeeId;
            inventoryAsset.CostCenterIdInitial = assetDto.CostCenterId;
            inventoryAsset.RoomIdInitial = assetDto.RoomId;
            inventoryAsset.SerialNumber = assetDto.SerialNumber;
            // inventoryAsset.AdministrationIdInitial = assetDto.AdministrationId;


            _context.Set<Model.InventoryAsset>().Update(inventoryAsset);


            assetDep = _context.Set<Model.AssetDep>().Where(a => a.AssetId == assetDto.Id).Single();

            //assetDep.ValueDep = assetDto.ValueDep;
            //assetDep.ValueDepIn = 0;
            //assetDep.ValueDepPU = assetDto.ValueDepPU;
            //assetDep.ValueDepPUIn = 0;
            //assetDep.ValueDepYTD = assetDto.ValueDepPU;
            //assetDep.ValueDepYTDIn = 0;
            //assetDep.ValueInv = assetDto.ValueInv;
            //assetDep.ValueRem = assetDto.ValueDep;
            //assetDep.ValueRemIn = 0;
            assetDep.DepPeriodMonth = assetDto.DepPeriodMonth;

            _context.Set<Model.AssetDep>().Update(assetDep);


            assetDepMD = _context.Set<Model.AssetDepMD>().Where(a => a.AssetId == assetDto.Id && (a.AccMonthId == inventory.AccMonthId || a.AccMonthId == 44)).Single();

            //assetDepMD.AccumulDep = assetDto.ValueDep;
            //assetDepMD.BkValFYStart = assetDto.ValueDepPU;
            //assetDepMD.DepForYear = assetDto.ValueDep;
            //assetDepMD.CurrentAPC = assetDto.ValueInv;
            //assetDepMD.PosCap = assetDto.ValueRem;
            //assetDepMD.TotLifeInpPeriods = assetDto.DepPeriodMonth;

            _context.Set<Model.AssetDepMD>().Update(assetDepMD);

            assetAdmMD = _context.Set<Model.AssetAdmMD>().Where(a => a.AssetId == assetDto.Id && (a.AccMonthId == accMonth.Id || a.AccMonthId == 44)).Single();

            //assetAdmMD.AssetStateId = assetState.Id;
            assetAdmMD.EmployeeId = assetDto.EmployeeId;
            assetAdmMD.CostCenterId = assetDto.CostCenterId;
            assetAdmMD.DepartmentId = costCenter.Division.DepartmentId;
            assetAdmMD.DivisionId = costCenter.DivisionId;
            assetAdmMD.RoomId = assetDto.RoomId;
            assetAdmMD.AssetTypeId = assetDto.AssetTypeId;
            assetAdmMD.AssetNatureId = assetDto.AssetNatureId;
            assetAdmMD.BudgetManagerId = assetDto.BudgetManagerId;
            assetAdmMD.SubTypeId = assetDto.SubTypeId;
            assetAdmMD.InsuranceCategoryId = assetDto.InsuranceCategoryId;
            //assetAdmMD.ModelId = assetDto.ModelId;
            //assetAdmMD.BrandId = assetDto.BrandId;
            assetAdmMD.ProjectId = assetDto.ProjectId;
            // assetAdmMD.AdministrationId = assetDto.AdministrationId;
            assetAdmMD.AdmCenterId = assetDto.AdmCenterId;
            assetAdmMD.RegionId = assetDto.RegionId;
            //assetAdmMD.ProjectTypeId = assetDto.ProjectTypeId;

            
            assetAdmMD.AssetCategoryId = assetDto.AssetCategoryId;

            _context.Set<Model.AssetAdmMD>().Update(assetAdmMD);

            //document = _context.Set<Model.Document>().Find(asset.DocumentId);

            if ((!asset.Validated) && (assetDto.Validated)) validation = true;


            _context.SaveChanges();

            return new Model.UpdateAssetSAPResult { Success = true, ErrorMessage = $"Numarul de inventar {asset.InvNo}/{asset.SubNo} a fost actualizat cu succes!" };
        }
        public async Task<UpdateAssetSAPResult> UpdatePreAcquisition(AssetPreAcquisition assetDto)
        {
            Model.Asset asset = null;
            Model.AssetDep assetDep = null;
            Model.AssetDepMD assetDepMD = null;
            Model.AssetInv assetInv = null;
            Model.AssetAC assetAC = null;
            Model.AssetAdmMD assetAdmMD = null;
            Model.AccMonth accMonth = null;
            Model.Document document = null;
            Model.AssetOp assetOp = null;
            Model.OrderOp orderOp = null;
            Model.OfferOp offerOp = null;
            Model.BudgetOp budgetOp = null;
            Model.Inventory inventory = null;
            Model.InventoryAsset inventoryAsset = null;
            bool validation = false;
            DateTime? documentDate = null;
            Model.Administration administration = null;
            Model.AccSystem accSystem = null;
            Model.AssetClass assetClass = null;
            Model.AssetCategory assetCategory = null;
            Model.AssetClassType assetClassType = null;
            Model.Partner partner = null;
            Model.CostCenter costCenter = null;
            Model.Room room = null;
            Model.AssetState assetState = null;
            Model.AssetType assetType = null;
            Model.InvState invState = null;
            Model.Employee employee = null;
            Model.AdmCenter admCenter = null;
            Model.DocumentType documentType = null;
            Model.Order order = null;
            Model.Rate rate = null;
            //Model.SubCategory subCategory = null;


            string accSystemDefault = "RON";
            string assetClassTypeDefault = "-";
            string assetClassDefault = "NSP";
            string assetStateDefault = "F";
            bool isMultiple = false;
            var invoiceDate = string.Empty;



            inventory = _context.Set<Model.Inventory>().Where(i => i.Active == true).Single();
            asset = _context.Set<Model.Asset>().Include(a => a.Document).Where(a => a.Id == assetDto.Id).Single();
            //subCategory = _context.Set<Model.SubCategory>().Where(a => a.Id == assetDto.SubCategoryId).FirstOrDefault();
            costCenter = _context.Set<Model.CostCenter>()
                .Include(c => c.Division)
                .Include(c => c.Division.Department)
                .Where(c => c.Id == assetDto.CostCenterId).Single();

            if (inventory != null)
            {
                accMonth = _context.Set<Model.AccMonth>().Where(a => a.Id == inventory.AccMonthId).Single();
            }

            if (assetDto.InvoiceDate != null && assetDto.InvoiceDate != DateTime.MinValue)
            {
                invoiceDate = assetDto.InvoiceDate.Value.AddDays(-1).ToString("yyyy-MM-dd").Substring(0, 10);

                rate = await _context.Set<Model.Rate>()
                        .Include(u => u.Uom)
                        .AsNoTracking()
                        .Where(i => i.Value == assetDto.RateValue && i.UomId == assetDto.UomId && i.Code == invoiceDate && i.IsDeleted == false)
                        .FirstOrDefaultAsync();

                if (rate == null)
                {
                    rate = new Model.Rate()
                    {
                        AccMonthId = inventory.AccMonthId.Value,
                        Code = invoiceDate,
                        CompanyId = null,
                        CreatedAt = DateTime.Now,
                        CreatedBy = _context.UserId,
                        ModifiedAt = DateTime.Now,
                        ModifiedBy = _context.UserId,
                        Name = invoiceDate,
                        UomId = assetDto.UomId,
                        Value = assetDto.RateValue,
                        IsLast = false,
                        Multiplier = 1
                    };

                    _context.Add(rate);
                    _context.SaveChanges();
                }
            }
            else
            {
                return new UpdateAssetSAPResult { Success = false, ErrorMessage = "Va rugam selectati o data de factura!", EntityId = 0 };
            }


            assetInv = _context.Set<Model.AssetInv>().Where(a => a.AssetId == assetDto.Id).Single();

            asset.ERPCode = assetDto.ERPCode;
            // asset.CompanyId = assetDto.CompanyId;
            asset.Name = assetDto.Name;
            //asset.PurchaseDate = documentDate;
            asset.SerialNumber = assetDto.SerialNumber;
            asset.InvNo = assetDto.InvNo;
            asset.AssetTypeId = assetDto.AssetTypeId;
            //asset.AssetStateId = assetState.Id;
            asset.CostCenterId = assetDto.CostCenterId;

            costCenter = _context.Set<Model.CostCenter>().Include(c => c.Division).Where(c => c.Id == asset.CostCenterId).SingleOrDefault();

            asset.DepartmentId = costCenter.Division.Department.Id;
            asset.EmployeeId = assetDto.EmployeeId;
            asset.RoomId = assetDto.RoomId;
            asset.ValueInv = assetDto.ValueInvRon * assetDto.RateValue;
            asset.ValueInvRon = assetDto.ValueInvRon;

            asset.NetAmount = assetDto.ValueInvRon * assetDto.RateValue;
            asset.NetAmountRon = assetDto.ValueInvRon;


            asset.ValueRem = assetDto.ValueInvRon * assetDto.RateValue;
            asset.ValueRemRon = assetDto.ValueInvRon;
            // asset.InvStateId = assetDto.InvStateId;
            asset.Quantity = assetDto.Quantity;

            // asset.DimensionId = assetDto.DimensionId;
            asset.DictionaryItemId = assetDto.DictionaryItemId;
            // asset.CompanyId = assetDto.CompanyId;
            // asset.AdministrationId = assetDto.AdministrationId;
            asset.ERPCode = assetDto.ERPCode;
            //asset.InvNo = assetDto.InvNo; // OTP
            //asset.AssetStateId = assetState.Id;
            //asset.CompanyId = 1;
            //asset.Custody = false;
            //asset.UomId = 3;
            asset.BudgetManagerId = assetDto.BudgetManagerId;
            asset.AssetNatureId = assetDto.AssetNatureId;
            asset.SubTypeId = assetDto.SubTypeId;
            asset.InsuranceCategoryId = assetDto.InsuranceCategoryId;
            asset.ModelId = asset.ModelId;
            asset.BrandId = asset.BrandId;

            asset.ProjectId = assetDto.ProjectId;

            Model.Asset assetTest = null;
            assetTest = _context.Set<Model.Asset>().Include(a => a.Document).Where(a => a.Id == assetDto.Id).Single();
            DateTime? datedif = assetDto.InvoiceDate?.Date;
            if (datedif != assetTest.InvoiceDate?.Date)
            {
                assetDto.InvoiceDate = assetDto.InvoiceDate.Value.AddDays(1);
            }

            asset.InvoiceDate = assetDto.InvoiceDate.ToString() != "1/1/0001 12:00:00 AM" ? assetDto.InvoiceDate : null;
            // asset.PODate = assetDto.PODate.ToString() != "1/1/0001 12:00:00 AM" ? assetDto.PODate : null;
            // asset.ReceptionDate = assetDto.ReceptionDate.ToString() != "1/1/0001 12:00:00 AM" ? assetDto.ReceptionDate : null;
            asset.RemovalDate = assetDto.RemovalDate.ToString() != "1/1/0001 12:00:00 AM" ? assetDto.RemovalDate : null;

            asset.ModifiedAt = DateTime.Now;
            asset.PurchaseDate = assetDto.InvoiceDate.ToString() != "1/1/0001 12:00:00 AM" ? assetDto.InvoiceDate : null;
            // asset.IsAccepted = assetDto.IsAccepted;
            asset.OrderId = assetDto.OrderId;
            // asset.BudgetId = assetDto.BudgetId;

            asset.DivisionId = costCenter.Division.Id;
            // asset.ProjectTypeId = assetDto.ProjectTypeId;
            asset.RateId = rate.Id;
            
            asset.AssetCategoryId = assetDto.AssetCategoryId;
            //asset.SubCategoryId = assetDto.SubCategoryId;
            asset.TaxId = assetDto.TaxId;
            asset.HeaderText = assetDto.HeaderText;

            //if (subCategory != null)
            //{
            //   // asset.Name = subCategory.Name;
            //}

            _context.Set<Model.Asset>().Update(asset);

            //assetInv.Producer = assetDto.ProducerInv;
            //assetInv.Model = assetDto.ModelInv;
            //assetInv.Info = assetDto.Info;

            _context.Set<Model.AssetInv>().Update(assetInv);


            inventoryAsset = _context.Set<Model.InventoryAsset>().Where(a => a.AssetId == assetDto.Id && a.InventoryId == inventory.Id).Single();

            // inventoryAsset.StateIdInitial = assetDto.InvStateId;
            inventoryAsset.EmployeeIdInitial = assetDto.EmployeeId;
            inventoryAsset.CostCenterIdInitial = assetDto.CostCenterId;
            inventoryAsset.RoomIdInitial = assetDto.RoomId;
            inventoryAsset.SerialNumber = assetDto.SerialNumber;
            // inventoryAsset.AdministrationIdInitial = assetDto.AdministrationId;


            _context.Set<Model.InventoryAsset>().Update(inventoryAsset);


            assetDep = _context.Set<Model.AssetDep>().Where(a => a.AssetId == assetDto.Id).Single();

            //assetDep.ValueDep = assetDto.ValueDep;
            //assetDep.ValueDepIn = 0;
            //assetDep.ValueDepPU = assetDto.ValueDepPU;
            //assetDep.ValueDepPUIn = 0;
            //assetDep.ValueDepYTD = assetDto.ValueDepPU;
            //assetDep.ValueDepYTDIn = 0;
            //assetDep.ValueInv = assetDto.ValueInv;
            //assetDep.ValueRem = assetDto.ValueDep;
            //assetDep.ValueRemIn = 0;
            assetDep.DepPeriodMonth = assetDto.DepPeriodMonth;

            _context.Set<Model.AssetDep>().Update(assetDep);


            assetDepMD = _context.Set<Model.AssetDepMD>().Where(a => a.AssetId == assetDto.Id && (a.AccMonthId == inventory.AccMonthId || a.AccMonthId == 44)).Single();

            //assetDepMD.AccumulDep = assetDto.ValueDep;
            //assetDepMD.BkValFYStart = assetDto.ValueDepPU;
            //assetDepMD.DepForYear = assetDto.ValueDep;
            //assetDepMD.CurrentAPC = assetDto.ValueInv;
            //assetDepMD.PosCap = assetDto.ValueRem;
            //assetDepMD.TotLifeInpPeriods = assetDto.DepPeriodMonth;

            _context.Set<Model.AssetDepMD>().Update(assetDepMD);


            assetAdmMD = _context.Set<Model.AssetAdmMD>().Where(a => a.AssetId == assetDto.Id && (a.AccMonthId == accMonth.Id || a.AccMonthId == 44)).Single();

            //assetAdmMD.AssetStateId = assetState.Id;
            assetAdmMD.EmployeeId = assetDto.EmployeeId;
            assetAdmMD.CostCenterId = assetDto.CostCenterId;
            assetAdmMD.DepartmentId = costCenter.Division.DepartmentId;
            assetAdmMD.DivisionId = costCenter.DivisionId;
            assetAdmMD.RoomId = assetDto.RoomId;
            assetAdmMD.AssetTypeId = assetDto.AssetTypeId;
            assetAdmMD.AssetNatureId = assetDto.AssetNatureId;
            assetAdmMD.BudgetManagerId = assetDto.BudgetManagerId;
            assetAdmMD.SubTypeId = assetDto.SubTypeId;
            assetAdmMD.InsuranceCategoryId = assetDto.InsuranceCategoryId;
            //assetAdmMD.ModelId = assetDto.ModelId;
            //assetAdmMD.BrandId = assetDto.BrandId;
            
            assetAdmMD.ProjectId = assetDto.ProjectId;
            // assetAdmMD.AdministrationId = assetDto.AdministrationId;
            assetAdmMD.AdmCenterId = assetDto.AdmCenterId;
            assetAdmMD.RegionId = assetDto.RegionId;
            //assetAdmMD.ProjectTypeId = assetDto.ProjectTypeId;

            
            assetAdmMD.AssetCategoryId = assetDto.AssetCategoryId;
            //assetAdmMD.SubCategoryId = assetDto.SubCategoryId;

            _context.Set<Model.AssetAdmMD>().Update(assetAdmMD);

            //document = _context.Set<Model.Document>().Find(asset.DocumentId);

            if ((!asset.Validated) && (assetDto.Validated)) validation = true;


            _context.SaveChanges();

            return new Model.UpdateAssetSAPResult { Success = true, ErrorMessage = $"Numarul de inventar {asset.InvNo}/{asset.SubNo} a fost actualizat cu succes!" };
        }
        public async Task<UpdateAssetSAPResult> UpdateParentNumber(AssetPreAcquisition assetDto)
        {
            Model.Asset asset = null;
           
            asset = _context.Set<Model.Asset>().Include(a => a.Document).Where(a => a.Id == assetDto.Id).Single();
            asset.ParentAssetId = assetDto.AssetParentId;

            _context.Set<Model.Asset>().Update(asset);
            _context.SaveChanges();

            return new Model.UpdateAssetSAPResult { Success = true, ErrorMessage = $"Numarul de inventar {asset.InvNo}/{asset.SubNo} a fost actualizat cu succes!" };
        }
        public async Task<UpdateAssetSAPResult> UpdateAssetChange(AssetEditChange assetDto)
        {
            Model.Asset asset = null;
            Model.AssetDep assetDep = null;
            Model.AssetDepMD assetDepMD = null;
            Model.AssetInv assetInv = null;
            Model.AssetAdmMD assetAdmMD = null;
            Model.Document document = null;
            Model.AssetOp operation = null;
            Model.Inventory inventory = null;
            Model.InventoryAsset inventoryAsset = null;
            Model.CostCenter costCenter = null;
            Model.Employee employee = null;
            Model.DocumentType documentType = null;
            Model.AppState appState = null;
            Model.Partner partner = null;
            Model.AssetChangeSAP assetChangeSAP = null;
            
            Model.AssetCategory assetCategory = null;
            Model.BudgetForecast budgetForecast = null;
            Model.Order order = null;
            Model.RequestBudgetForecastMaterial requestBudgetForecastMaterial = null;
            Model.RequestBFMaterialCostCenter requestBFMaterialCost = null;
            Model.OfferMaterial offerMaterial = null;
            Model.OrderMaterial orderMaterial = null;

            inventory = await _context.Set<Model.Inventory>().AsNoTracking().Where(i => i.Active == true).FirstOrDefaultAsync();
            if (inventory == null) return new Model.UpdateAssetSAPResult { Success = false, ErrorMessage = "Nu exista niciun inventar activ!", EntityId = 0 };

            asset = await _context.Set<Model.Asset>()
                .Include(a => a.BudgetBase)
                    .ThenInclude(b => b.Project)
                .Include(a => a.AssetCategory)
                .Include(a => a.Company)
                .Include(a => a.Stock)
                .Include(a => a.Document).ThenInclude(p => p.Partner)
                .Include(e => e.Employee)
                 .ThenInclude(c => c.CostCenter)
                .Where(a => a.Id == assetDto.Id).FirstOrDefaultAsync();
            if (asset == null) return new Model.UpdateAssetSAPResult { Success = false, ErrorMessage = $"Asset - ul nu a fost gasit!!", EntityId = 0 };

            assetInv = await _context.Set<Model.AssetInv>().Where(a => a.AssetId == assetDto.Id).FirstOrDefaultAsync();
            if (assetInv == null) return new Model.UpdateAssetSAPResult { Success = false, ErrorMessage = $"Asset Inv - ul nu a fost gasit!!", EntityId = 0 };

            costCenter = await _context.Set<Model.CostCenter>().Include(d => d.Division).Where(a => a.Id == assetDto.CostCenterId).FirstOrDefaultAsync();
            if (costCenter == null) return new Model.UpdateAssetSAPResult { Success = false, ErrorMessage = $"Centr - ul de cost nu a fost gasit!!", EntityId = 0 };

            employee = await _context.Set<Model.Employee>().Include(d => d.CostCenter).ThenInclude(d => d.Division).Where(a => a.Id == assetDto.EmployeeId && !a.IsDeleted).FirstOrDefaultAsync();
            //if (employee == null) return new Model.UpdateAssetSAPResult { Success = false, ErrorMessage = $"Angajat - ul nu a fost gasit!!", EntityId = 0 };

            assetCategory = await _context.Set<Model.AssetCategory>().Where(a => a.Id == assetDto.AssetCategoryId).FirstOrDefaultAsync();
            if (assetCategory == null) return new Model.UpdateAssetSAPResult { Success = false, ErrorMessage = $"Categoria nu a fost gasita!!", EntityId = 0 };

            partner = await _context.Set<Model.Partner>().Where(a => a.Id == assetDto.PartnerId).FirstOrDefaultAsync();
            if (partner == null) return new Model.UpdateAssetSAPResult { Success = false, ErrorMessage = $"Furnizor - ul nu a fost gasit!!", EntityId = 0 };

            documentType = await _context.Set<Model.DocumentType>().AsNoTracking().Where(a => a.Code == "ASSET_CHANGE").FirstOrDefaultAsync();
            if (documentType == null) return new Model.UpdateAssetSAPResult { Success = false, ErrorMessage = $"Document Type - ul  nu a fost gasit!!", EntityId = 0 };

            appState = await _context.Set<Model.AppState>().Where(a => a.Code == "ASSET_CHANGE").FirstOrDefaultAsync();
            if (appState == null) return new Model.UpdateAssetSAPResult { Success = false, ErrorMessage = $"Starea nu a fost gasita!!", EntityId = 0 };

            inventoryAsset = await _context.Set<Model.InventoryAsset>().Where(a => a.AssetId == assetDto.Id && a.InventoryId == inventory.Id).FirstOrDefaultAsync();
            if (inventoryAsset == null) return new Model.UpdateAssetSAPResult { Success = false, ErrorMessage = $"Numarul de inventar nu a fost gasit!!", EntityId = 0 };

            if (inventoryAsset.CostCenterIdFinal != null)
            {
                inventoryAsset.EmployeeIdFinal = employee != null ? employee.Id : 11186;
                inventoryAsset.CostCenterIdFinal = costCenter.Id;
                inventoryAsset.SerialNumber = assetDto.SerialNumber;
                inventoryAsset.QFinal = assetDto.Quantity;
            }
            else
            {
                inventoryAsset.EmployeeIdInitial = employee != null ? employee.Id : 11186;
                inventoryAsset.CostCenterIdInitial = costCenter.Id;
                inventoryAsset.SNInitial = assetDto.SerialNumber;
                inventoryAsset.QInitial = assetDto.Quantity;
            }


            _context.Set<Model.InventoryAsset>().Update(inventoryAsset);


            assetDep = await _context.Set<Model.AssetDep>().Where(a => a.AssetId == assetDto.Id).FirstOrDefaultAsync();
            if (assetDep == null) return new Model.UpdateAssetSAPResult { Success = false, ErrorMessage = $"Numar - ul de inventar nu a fost gasit!!", EntityId = 0 };

            assetDep.ValueInv = assetDto.ValueInv;
            _context.Set<Model.AssetDep>().Update(assetDep);


            assetDepMD = await _context.Set<Model.AssetDepMD>().Where(a => a.AssetId == assetDto.Id && (a.AccMonthId == inventory.AccMonthId)).FirstOrDefaultAsync();
            if (assetDepMD == null) return new Model.UpdateAssetSAPResult { Success = false, ErrorMessage = $"Asset DepMD -ul nu a fost gasit!!", EntityId = 0 };

            assetDepMD.CurrentAPC = assetDto.ValueInv;

            _context.Set<Model.AssetDepMD>().Update(assetDepMD);


            assetAdmMD = await _context.Set<Model.AssetAdmMD>().Where(a => a.AssetId == assetDto.Id && (a.AccMonthId == inventory.AccMonthId)).FirstOrDefaultAsync();
            if (assetAdmMD == null) return new Model.UpdateAssetSAPResult { Success = false, ErrorMessage = $"Asset AdmMD -ul nu a fost gasit!!", EntityId = 0 };


            assetAdmMD.EmployeeId = employee != null ? employee.Id : 11186;
            assetAdmMD.CostCenterId = costCenter.Id;
            assetAdmMD.DepartmentId = costCenter.Division.DepartmentId;
            assetAdmMD.RoomId = costCenter.RoomId;
            assetAdmMD.AdmCenterId = costCenter.AdmCenterId;
            assetAdmMD.RegionId = costCenter.RegionId;
            assetAdmMD.DivisionId = costCenter.DivisionId;
            
            assetAdmMD.AssetCategoryId = assetCategory.Id;

            _context.Set<Model.AssetAdmMD>().Update(assetAdmMD);

            // BUGET //

            budgetForecast = await _context.Set<Model.BudgetForecast>().Include(b => b.BudgetBase).ThenInclude(p => p.Project).Where(a => a.Id == assetDto.BudgetForecastId).FirstOrDefaultAsync();

            order = await _context.Set<Model.Order>().Where(a => a.Id == asset.OrderId).FirstOrDefaultAsync();

            if (order != null && budgetForecast != null)
            {
                order.BudgetForecastId = budgetForecast.Id;
                order.BudgetBaseId = budgetForecast.BudgetBaseId;
            }




            //requestBFMaterialCost = await _context.Set<Model.RequestBFMaterialCostCenter>().Where(a => a.Id == asset.ReqBFMCostCenterId).FirstOrDefaultAsync();

            //         requestBudgetForecastMaterial = await _context.Set<Model.RequestBudgetForecastMaterial>().Where(a => a.Id == asset.ReqBFMaterialId).FirstOrDefaultAsync();


            //         if(requestBudgetForecastMaterial != null && budgetForecast != null)
            //{
            //             requestBudgetForecastMaterial.bu = budgetForecast.Id;

            //         }

            //offerMaterial = await _context.Set<Model.OfferMaterial>().Where(a => a.Id == asset.OfferMaterialId).FirstOrDefaultAsync();

            //orderMaterial = await _context.Set<Model.OrderMaterial>().Where(a => a.Id == asset.OrderMaterialId).FirstOrDefaultAsync();

            if (asset != null && budgetForecast != null)
            {
                asset.BudgetForecastId = budgetForecast.Id;
                asset.BudgetBaseId = budgetForecast.BudgetBaseId;
            }



            // BUGET //



            var names = SplitToLines(assetDto.Name, 50);
            var countNames = names.Count();


            assetChangeSAP = new Model.AssetChangeSAP()
            {
                COMPANYCODE = asset.Company.Code,
                ASSET = asset.InvNo,
                SUBNUMBER = asset.SubNo,
                
                POSTCAP = "",
                DESCRIPT = countNames > 0 ? names.ElementAt(0) : "",
                DESCRIPT2 = countNames > 1 ? names.ElementAt(1) : "",
                INVENT_NO = asset.ERPCode ?? string.Empty,
                SERIAL_NO = assetDto.SerialNumber ?? string.Empty,
                QUANTITY = (int)assetDto.Quantity,
                BASE_UOM = "ST",
                LAST_INVENTORY_DATE = "00000000",
                LAST_INVENTORY_DOCNO = "",
                CAP_DATE = "00000000",
                COSTCENTER = costCenter.Code,
                RESP_CCTR = employee != null && employee.CostCenter != null ? employee.CostCenter.Code : "",
                INTERN_ORD = "",
                PLANT = "RO02",
                LOCATION = "",
                ROOM = "",
                PERSON_NO = employee != null ? employee.InternalCode : string.Empty,
                PLATE_NO = asset.AgreementNo ?? string.Empty,
                ZZCLAS = assetCategory != null ? assetCategory.Code : string.Empty,
                IN_CONSERVATION = "",
                PROP_IND = "1",
                OPTIMA_ASSET_NO = "",
                OPTIMA_ASSET_PARENT_NO = "",
                VENDOR_NO = partner.RegistryNumber ?? string.Empty,
                FROM_DATE = "00000000",
                AccMonthId = inventory.AccMonthId.Value,
                AssetId = asset.Id,
                BudgetManagerId = asset.BudgetManagerId.Value,
                NotSync = true,
                CreatedAt = DateTime.Now,
                CreatedBy = _context.UserId,
                ModifiedAt = DateTime.Now,
                ModifiedBy = _context.UserId,
                INVOICE = asset.Stock != null && asset.Stock.Invoice != null ? asset.Stock.Invoice : (asset.Document.DocNo1 != null ? asset.Document.DocNo1 : ""),
                DOC_YEAR = "00000000",
                MAT_DOC = "",
                WBS_ELEMENT = budgetForecast != null && budgetForecast.BudgetBase != null && budgetForecast.BudgetBase.Project != null ? budgetForecast.BudgetBase.Project.Code : ""
            };


            _context.Add(assetChangeSAP);


            document = new Model.Document();

            document.DocumentTypeId = documentType.Id;
            document.DocNo1 = string.Empty;
            document.DocNo2 = string.Empty;
            document.DocumentDate = DateTime.Now;
            document.Approved = true;
            document.Exported = false;
            document.CreationDate = DateTime.Now;
            document.CreatedAt = DateTime.Now;
            document.RegisterDate = DateTime.Now;
            document.ValidationDate = DateTime.Now;
            document.PartnerId = partner.Id;

            string docNo1 = "-";
            document.DocNo1 = docNo1;
            int documentNumber = 0;

            _context.Set<Model.Document>().Add(document);

            operation = new Model.AssetOp
            {
                AssetOpStateId = appState.Id,
                InvStateIdInitial = asset.InvStateId,
                InvStateIdFinal = asset.InvStateId,
                AssetStateIdInitial = asset.AssetStateId,
                AssetStateIdFinal = asset.AssetStateId
            };

            operation.AccSystemId = 3;
            operation.AdministrationIdInitial = asset.AdministrationId;
            operation.AdministrationIdFinal = asset.AdministrationId;
            operation.AssetCategoryIdInitial = asset.AssetCategoryId;
            operation.AssetCategoryIdFinal = assetCategory.Id;
            operation.AssetId = asset.Id;
            operation.CostCenterIdInitial = asset.CostCenterId;
            operation.CostCenterIdFinal = costCenter.Id;
            operation.CreatedAt = DateTime.Now;
            operation.CreatedBy = _context.UserId;
            operation.DepartmentIdInitial = asset.DepartmentId;
            operation.DepartmentIdFinal = asset.DepartmentId;
            operation.DocumentId = document.Id;
            operation.EmployeeIdInitial = asset.EmployeeId;
            operation.EmployeeIdFinal = employee != null ? employee.Id : 11186;
            operation.IsDeleted = false;
            operation.ModifiedAt = DateTime.Now;
            operation.ModifiedBy = _context.UserId;
            operation.RoomIdInitial = asset.RoomId;
            operation.RoomIdFinal = asset.RoomId;
            operation.SrcConfAt = DateTime.Now;
            operation.SrcConfBy = _context.UserId;
            operation.AllowLabel = asset.AllowLabel != null ? (bool)asset.AllowLabel : false;
            operation.AssetTypeIdInitial = asset.AssetTypeId;
            operation.AssetTypeIdFinal = asset.AssetTypeId;
            operation.InvName = asset.Name;
            operation.Quantity = asset.Quantity;
            operation.SerialNumber = asset.SerialNumber;
            operation.AssetNatureIdInitial = asset.AssetNatureId;
            operation.AssetNatureIdFinal = asset.AssetNatureId;
            operation.BudgetManagerIdInitial = asset.BudgetManagerId;
            operation.BudgetManagerIdFinal = asset.BudgetManagerId;
            operation.DimensionIdInitial = asset.DimensionId;
            operation.DimensionIdFinal = asset.DimensionId;
            operation.ProjectIdInitial = asset.ProjectId;
            operation.ProjectIdFinal = asset.ProjectId;
            operation.IsMinus = false;
            operation.IsPlus = false;
            operation.CompanyId = asset.CompanyId;
            operation.InsuranceCategoryId = asset.InsuranceCategoryId;
            
            operation.UomId = asset.UomId;
            operation.TaxId = asset.TaxId;
            operation.ValueAdd = documentNumber;


            _context.Add(operation);


            asset.Name = assetDto.Name;
            asset.SerialNumber = assetDto.SerialNumber;
            asset.CostCenterId = assetDto.CostCenterId;

            costCenter = _context.Set<Model.CostCenter>().Include(c => c.Division).Where(c => c.Id == asset.CostCenterId).SingleOrDefault();

            asset.DepartmentId = costCenter.Division.DepartmentId;
            asset.EmployeeId = employee != null ? employee.Id : 11186;
            asset.RoomId = costCenter.RoomId;
            asset.ValueInv = assetDto.ValueInv;
            asset.Quantity = assetDto.Quantity;
            asset.ModifiedAt = DateTime.Now;
            
            asset.DivisionId = costCenter.DivisionId;
            asset.Quantity = assetDto.Quantity;
            asset.Document.PartnerId = partner.Id;
            asset.Document.DocNo1 = assetDto.DocNo1;
            asset.AssetCategoryId = assetCategory.Id;
            _context.Set<Model.Asset>().Update(asset);


            _context.SaveChanges();

            return new Model.UpdateAssetSAPResult { Success = true, ErrorMessage = $"Numarul de inventar {asset.InvNo}/{asset.SubNo} a fost actualizat cu succes!" };
        }
        public AssetResult DeleteOrderItem(int assetId)
        {
            Model.Asset asset = null;

            asset = _context.Set<Model.Asset>().Include(a => a.Order).Where(a => a.Id == assetId).SingleOrDefault();

            if (asset == null)
            {
                return new Model.AssetResult { Success = true, ErrorMessage = $"Echipamentul selectat nu a fost gasit!" };
            }
            else
            {
                asset.IsDeleted = true;
                asset.ModifiedBy = _context.UserId;
                asset.ModifiedAt = DateTime.Now;
                _context.Update(asset);
                _context.SaveChanges();

                return new Model.AssetResult { Success = true, ErrorMessage = $"Numarul de inventar {asset.InvNo} a fost sters din comanda {asset.Order.Code}!" };
            }
        }
        public CreateAssetSAPResult UpdateAssetInvPlus(UpdateAssetInvPlus assetDto)
        {
            Model.Asset asset = null;
            Model.AssetDep assetDep = null;
            Model.AssetDepMD assetDepMD = null;
            Model.AssetInv assetInv = null;
            Model.AssetAC assetAC = null;
            Model.AssetAdmMD assetAdmMD = null;
            Model.AccMonth accMonth = null;
            Model.Document document = null;
            Model.AssetOp assetOp = null;
            Model.OrderOp orderOp = null;
            Model.OfferOp offerOp = null;
            Model.BudgetOp budgetOp = null;
            Model.Inventory inventory = null;
            Model.InventoryAsset inventoryAsset = null;
            bool validation = false;
            DateTime? documentDate = null;
            Model.Administration administration = null;
            Model.AccSystem accSystem = null;
            Model.AssetClass assetClass = null;
            Model.AssetCategory assetCategory = null;
            Model.AssetClassType assetClassType = null;
            Model.Partner partner = null;
            Model.CostCenter costCenter = null;
            Model.Room room = null;
            Model.AssetState assetState = null;
            Model.AssetType assetType = null;
            Model.InvState invState = null;
            Model.Employee employee = null;
            Model.AdmCenter admCenter = null;
            Model.DocumentType documentType = null;
           //Model.Accountancy accountancy = null;
            //Model.SubCategory subCategory = null;
            Model.BudgetManager budgetManager = null;
            Model.Request request = null;

            string accSystemDefault = "RON";
            string assetClassTypeDefault = "-";
            string assetClassDefault = "NSP";
            string assetStateDefault = "F";
            bool isMultiple = false;


            inventory = _context.Set<Model.Inventory>().Where(i => i.Active == true).Single();
            budgetManager = _context.Set<Model.BudgetManager>().AsNoTracking().Where(a => (a.Code == "2022")).FirstOrDefault();
            asset = _context.Set<Model.Asset>().Include(a => a.Document).Where(a => a.Id == assetDto.Id).Single();
            costCenter = _context.Set<Model.CostCenter>().Include(d => d.Division).Where(a => a.Id == assetDto.CostCenterId).SingleOrDefault();
            //subCategory = _context.Set<Model.SubCategory>().Where(a => a.Id == assetDto.SubCategoryId).SingleOrDefault();
            request = _context.Set<Model.Request>().Where(a => a.Id == assetDto.RequestId).SingleOrDefault();
            employee = _context.Set<Model.Employee>().Where(a => a.Id == assetDto.EmployeeId).SingleOrDefault();

            if (inventory != null)
            {
                accMonth = _context.Set<Model.AccMonth>().Where(a => a.Id == inventory.AccMonthId).Single();
            }

            assetInv = _context.Set<Model.AssetInv>().Where(a => a.AssetId == assetDto.Id).Single();
            assetAdmMD = _context.Set<Model.AssetAdmMD>().Where(a => a.AssetId == assetDto.Id && a.AccMonthId == accMonth.Id).Single();


            //if (assetDto.ValueInv > 2500)
            //{
            //    accountancy = _context.Set<Model.Accountancy>()

            //      .Include(a => a.Account)
            //      
            //      .Include(a => a.AssetCategory)
            //      .Include(a => a.AssetType)
            //      .Where(a => a.SubCategoryId == assetDto.SubCategoryId && a.Value > 2500 && a.IsDeleted == false).SingleOrDefault();

            //    if (accountancy == null) return new Model.CreateAssetSAPResult { Success = false, ErrorMessage = $"Lipsa mapare cont GL pentru subCategoria: {subCategory.Code + " - " + subCategory.Name}!" };
            //}
            //else
            //{
            //    accountancy = _context.Set<Model.Accountancy>()

            //     .Include(a => a.Account)
            //     
            //     .Include(a => a.AssetCategory)
            //     .Include(a => a.AssetType)
            //     .Where(a => a.SubCategoryId == assetDto.SubCategoryId && a.Value == 2500 && a.IsDeleted == false).SingleOrDefault();

            //    if (accountancy == null) return new Model.CreateAssetSAPResult { Success = false, ErrorMessage = $"Lipsa mapare cont GL pentru subCategoria: {subCategory.Code + " - " + subCategory.Name}!" };
            //}

            
            asset.CompanyId = assetDto.CompanyId;
            asset.UomId = assetDto.UomId;
            asset.TaxId = assetDto.TaxId;
            asset.RateId = assetDto.RateId;
            asset.HeaderText = assetDto.HeaderText;
            asset.AssetCategoryId = assetDto.AssetCategoryId;
            asset.Document.PartnerId = assetDto.PartnerId;
            asset.Document.DocNo1 = assetDto.DocNo1;
            //asset.AssetTypeId = accountancy.AssetTypeId;
            // asset.ERPCode = assetDto.ERPCode;
            // asset.Name = assetDto.Name;
            asset.SerialNumber = assetDto.SerialNumber;
            // asset.InvNo = assetDto.InvNo;
            // asset.AssetTypeId = assetDto.AssetTypeId;
            //asset.AssetStateId = assetState.Id;
            asset.CostCenterId = assetDto.CostCenterId;

            costCenter = _context.Set<Model.CostCenter>().Include(c => c.Division).Where(c => c.Id == asset.CostCenterId).SingleOrDefault();

            asset.DepartmentId = costCenter.Division.DepartmentId;
            asset.EmployeeId = assetDto.EmployeeId;
            asset.CostCenterEmpId = employee != null && employee.CostCenterId != null ? employee.CostCenterId : assetDto.CostCenterId;
            asset.RoomId = assetDto.RoomId;
            asset.ValueInv = assetDto.ValueInv;
            asset.ValueRem = assetDto.ValueDep;
            // asset.InvStateId = assetDto.InvStateId;
            // asset.Quantity = assetDto.Quantity;
            // asset.InterCompanyId = assetDto.InterCompanyId;
            // asset.DimensionId = assetDto.DimensionId;
            //asset.DictionaryItemId = assetDto.DictionaryItemId;
            // asset.CompanyId = assetDto.CompanyId;
            asset.AdministrationId = costCenter.AdministrationId;
            // asset.ERPCode = assetDto.ERPCode;
            //asset.InvNo = assetDto.InvNo; // OTP
            //asset.AssetStateId = assetState.Id;
            //asset.CompanyId = 1;
            //asset.Custody = false;
            
            asset.BudgetManagerId = assetDto.BudgetManagerId;
            //asset.AssetNatureId = assetDto.AssetNatureId;
            //asset.SubTypeId = assetDto.SubTypeId;
            //asset.InsuranceCategoryId = assetDto.InsuranceCategoryId;
            //asset.ModelId = asset.ModelId;
            //asset.BrandId = asset.BrandId;
            //asset.InterCompanyId = assetDto.InterCompanyId;
            asset.ProjectId = assetDto.ProjectId;
            asset.InvoiceDate = assetDto.InvoiceDate.ToString() != "1/1/0001 12:00:00 AM" ? assetDto.InvoiceDate : null;
            // asset.PODate = assetDto.PODate.ToString() != "1/1/0001 12:00:00 AM" ? assetDto.PODate : null;
            // asset.ReceptionDate = assetDto.ReceptionDate.ToString() != "1/1/0001 12:00:00 AM" ? assetDto.ReceptionDate : null;
            asset.RemovalDate = assetDto.RemovalDate.ToString() != "1/1/0001 12:00:00 AM" ? assetDto.RemovalDate : null;
            //asset.AssetCategoryId = accountancy.AssetCategoryId;
            asset.ModifiedAt = DateTime.Now;
            asset.PurchaseDate = assetDto.InvoiceDate.ToString() != "1/1/0001 12:00:00 AM" ? assetDto.InvoiceDate : null;
            // asset.IsAccepted = assetDto.IsAccepted;
            asset.OrderId = assetDto.OrderId;
            // asset.BudgetId = assetDto.BudgetId;

            asset.DivisionId = costCenter.DivisionId;
            // asset.ProjectTypeId = assetDto.ProjectTypeId;
            //asset.SubCategoryId = assetDto.SubCategoryId;
            //asset.AccountId = accountancy.AccountId;
            asset.BudgetManagerId = budgetManager.Id;
            asset.RequestId = assetDto.RequestId;
            _context.Set<Model.Asset>().Update(asset);

            //assetInv.Producer = assetDto.ProducerInv;
            //assetInv.Model = assetDto.ModelInv;
            //assetInv.Info = assetDto.Info;

            _context.Set<Model.AssetInv>().Update(assetInv);


            inventoryAsset = _context.Set<Model.InventoryAsset>().Where(a => a.AssetId == assetDto.Id && a.InventoryId == inventory.Id).Single();

            if (inventoryAsset.CostCenterIdFinal != null)
            {
                // inventoryAsset.StateIdInitial = assetDto.InvStateId;
                inventoryAsset.EmployeeIdFinal = assetDto.EmployeeId;
                inventoryAsset.CostCenterIdFinal = assetDto.CostCenterId;
                inventoryAsset.RoomIdFinal = assetDto.RoomId;
                inventoryAsset.SerialNumber = assetDto.SerialNumber;
                inventoryAsset.AdministrationIdFinal = costCenter.AdministrationId;
            }
            else
            {
                // inventoryAsset.StateIdInitial = assetDto.InvStateId;
                inventoryAsset.EmployeeIdInitial = assetDto.EmployeeId;
                inventoryAsset.CostCenterIdInitial = assetDto.CostCenterId;
                inventoryAsset.RoomIdInitial = assetDto.RoomId;
                inventoryAsset.SNInitial = assetDto.SerialNumber;
                inventoryAsset.AdministrationIdInitial = costCenter.AdministrationId;
            }

            _context.Set<Model.InventoryAsset>().Update(inventoryAsset);


            assetDep = _context.Set<Model.AssetDep>().Where(a => a.AssetId == assetDto.Id).Single();

            assetDep.ValueDep = assetDto.ValueDep;
            assetDep.ValueDepIn = 0;
            assetDep.ValueDepPU = assetDto.ValueDepPU;
            assetDep.ValueDepPUIn = 0;
            assetDep.ValueDepYTD = assetDto.ValueDepPU;
            assetDep.ValueDepYTDIn = 0;
            assetDep.ValueInv = assetDto.ValueInv;
            assetDep.ValueRem = assetDto.ValueDep;
            assetDep.ValueRemIn = 0;
            assetDep.DepPeriodMonth = assetDto.DepPeriodMonth;

            _context.Set<Model.AssetDep>().Update(assetDep);


            assetDepMD = _context.Set<Model.AssetDepMD>().Where(a => a.AssetId == assetDto.Id && a.AccMonthId == inventory.AccMonthId).Single();

            assetDepMD.AccumulDep = assetDto.ValueDep;
            assetDepMD.BkValFYStart = assetDto.ValueDepPU;
            assetDepMD.DepForYear = assetDto.ValueDep;
            assetDepMD.CurrentAPC = assetDto.ValueInv;
            assetDepMD.PosCap = assetDto.ValueRem;
            assetDepMD.TotLifeInpPeriods = assetDto.DepPeriodMonth;

            _context.Set<Model.AssetDepMD>().Update(assetDepMD);


            assetAdmMD = _context.Set<Model.AssetAdmMD>().Where(a => a.AssetId == assetDto.Id && a.AccMonthId == accMonth.Id).Single();

            
            //assetAdmMD.AssetStateId = assetState.Id;
            assetAdmMD.EmployeeId = assetDto.EmployeeId;
            assetAdmMD.CostCenterId = assetDto.CostCenterId;
            assetAdmMD.DepartmentId = costCenter.Division.DepartmentId;
            assetAdmMD.RoomId = assetDto.RoomId;
            //assetAdmMD.AssetNatureId = assetDto.AssetNatureId;
            //assetAdmMD.SubTypeId = assetDto.SubTypeId;
            //assetAdmMD.InsuranceCategoryId = assetDto.InsuranceCategoryId;
            //assetAdmMD.ModelId = assetDto.ModelId;
            //assetAdmMD.BrandId = assetDto.BrandId;
            //
            assetAdmMD.ProjectId = assetDto.ProjectId;
            assetAdmMD.AdministrationId = costCenter.AdministrationId;
            assetAdmMD.AdmCenterId = costCenter.AdmCenterId;
            assetAdmMD.RegionId = costCenter.RegionId;
            assetAdmMD.DivisionId = costCenter.DivisionId;
            //assetAdmMD.ProjectTypeId = assetDto.ProjectTypeId;
            //assetAdmMD.SubCategoryId = assetDto.SubCategoryId;
            //assetAdmMD.AssetCategoryId = accountancy.AssetCategoryId;
            //assetAdmMD.AssetTypeId = accountancy.AssetTypeId;
            
            //assetAdmMD.AccountId = accountancy.AccountId;
            assetAdmMD.BudgetManagerId = budgetManager.Id;
            assetAdmMD.RequestId = assetDto.RequestId;
            _context.Set<Model.AssetAdmMD>().Update(assetAdmMD);

            //document = _context.Set<Model.Document>().Find(asset.DocumentId);

            _context.SaveChanges();

            return new Model.CreateAssetSAPResult { Success = true, ErrorMessage = $"Datele au fost modificate cu success!" };
        }
        public int CloneAsset(AssetClone assetDto)
        {
            Model.Asset asset = null;
            Model.Asset oldAsset = null;
            Model.AssetDep assetDep = null;
            Model.AssetDepMD assetDepMD = null;
            Model.AssetInv assetInv = null;
            Model.AssetAC assetAC = null;
            Model.AssetAdmMD assetAdmMD = null;
            Model.AssetDep assetDepOld = null;
            Model.AssetDepMD assetDepMDOld = null;
            Model.AssetInv assetInvOld = null;
            Model.AssetAdmMD assetAdmMDOld = null;
            Model.Document document = null;
            Model.Inventory inventory = null;
            Model.InventoryAsset inventoryAsset = null;
            Model.InventoryAsset inventoryAssetOld = null;
            Model.AccSystem accSystem = null;
            Model.AssetClass assetClass = null;
            Model.AssetClassType assetClassType = null;
            Model.DocumentType documentType = null;
            Model.EntityType entityType = null;


            string accSystemDefault = "RON";
            string assetClassTypeDefault = "-";

            documentType = _context.Set<Model.DocumentType>().Where(d => d.Id == 1).FirstOrDefault();
            inventory = _context.Set<Model.Inventory>().Where(i => i.Active == true).Single();

            oldAsset = _context.Set<Model.Asset>().Include(d => d.Document).Include(c => c.CostCenter).ThenInclude(c => c.Company).Where(a => a.Id == assetDto.Id).Single();


            inventory = _context.Set<Model.Inventory>().Where(i => i.Active == true).Single();

            entityType = _context.Set<Model.EntityType>().Where(c => c.UploadFolder == "NEWASSET").FirstOrDefault();

            asset = new Model.Asset();

            asset.AdministrationId = oldAsset.AdministrationId;
            asset.AssetCategoryId = oldAsset.AssetCategoryId;
            asset.AssetStateId = oldAsset.AssetStateId;
            asset.AssetTypeId = oldAsset.AssetTypeId;
            asset.CompanyId = oldAsset.CompanyId;
            asset.CostCenterId = oldAsset.CostCenterId;

            Model.CostCenter costCenter = _context.Set<Model.CostCenter>().Include(c => c.Division).Where(c => c.Id == asset.CostCenterId).SingleOrDefault();

            asset.DepartmentId = oldAsset.DepartmentId;
            asset.DivisionId = oldAsset.DivisionId;
            asset.CreatedAt = DateTime.Now;
            asset.CreatedBy = _context.UserId;
            asset.Custody = oldAsset.Custody;
            asset.DepartmentId = oldAsset.DepartmentId;
            asset.ERPCode = oldAsset.CostCenter.Company.Code + "OPT0000000000" + entityType.Name;
            asset.EmployeeId = oldAsset.EmployeeId;
            asset.InvNo = oldAsset.CostCenter.Company.Code + "OPT0000000000" + entityType.Name;
            asset.InvStateId = oldAsset.InvStateId;
            asset.IsDeleted = true;
            asset.ModifiedAt = DateTime.Now;
            asset.ModifiedBy = _context.UserId;
            asset.Name = oldAsset.Name;
            asset.ParentAssetId = oldAsset.Id;
            asset.PurchaseDate = oldAsset.PurchaseDate;
            asset.Quantity = oldAsset.Quantity;
            asset.RoomId = oldAsset.RoomId;
            asset.SerialNumber = oldAsset.SerialNumber;
            asset.UomId = oldAsset.UomId;
            asset.Validated = true;
            asset.ValueInv = oldAsset.ValueInv;
            asset.ValueRem = oldAsset.ValueRem;
            //asset.OutDate = null;
            //asset.QuantityOut = 0;
            //asset.ValueInvOut= 0;
            
            asset.BudgetManagerId = oldAsset.BudgetManagerId;
            asset.AssetNatureId = oldAsset.AssetNatureId;
            //asset.AccountId = oldAsset.AccountId;
            
            asset.TempReco = oldAsset.TempReco;
            asset.TempName = oldAsset.TempName;
            asset.SAPCode = oldAsset.CostCenter.Company.Code + "OPT0000000000" + entityType.Name;
            asset.IsInTransfer = false;
            asset.SubTypeId = oldAsset.SubTypeId;
            asset.InsuranceCategoryId = oldAsset.InsuranceCategoryId;
            asset.BrandId = oldAsset.BrandId;
            asset.ModelId = oldAsset.ModelId;
            asset.ProjectId = oldAsset.ProjectId;
            asset.InvoiceDate = oldAsset.InvoiceDate;
            asset.PODate = oldAsset.PODate;
            asset.ReceptionDate = oldAsset.ReceptionDate;
            asset.RemovalDate = oldAsset.RemovalDate;
            asset.IsTemp = oldAsset.IsTemp;
            asset.ImageCount = 0;
            asset.DimensionId = oldAsset.DimensionId;
            asset.IsPrinted = false;
            asset.PrintDate = null;
            asset.IsDuplicate = false;
            asset.IsAccepted = false;
            asset.DictionaryItemId = oldAsset.DictionaryItemId;
            asset.IsReconcile = oldAsset.IsReconcile;
            asset.AppStateId = oldAsset.AppStateId;
            asset.Info = string.Empty;
            asset.InfoMinus = null;
            asset.InfoPlus = null;
            asset.IsMinus = false;
            asset.IsPlus = false;
            asset.CreatedUser = null;
            asset.NIRDate = null;
            asset.NIRNumber = 0;
            asset.PIFDate = oldAsset.PIFDate;
            asset.BudgetId = oldAsset.BudgetId;
            asset.OrderId = oldAsset.OrderId;
            asset.AllowLabel = oldAsset.AllowLabel;
            asset.AgreementNo = oldAsset.AgreementNo;
            asset.DivisionId = oldAsset.DivisionId;
            asset.Manufacturer = oldAsset.Manufacturer;
            asset.MaterialId = oldAsset.MaterialId;
            asset.SubNo = "0000";
            asset.ProjectTypeId = oldAsset.ProjectTypeId;
            asset.StockId = oldAsset.StockId;
            asset.ContractId = oldAsset.ContractId;
            asset.NetAmount = oldAsset.NetAmount;
            asset.RateId = oldAsset.RateId;
            asset.TaxAmount = oldAsset.TaxAmount;
            asset.HeaderText = oldAsset.HeaderText;
            asset.TaxId = oldAsset.TaxId;
            asset.TotalAmount = oldAsset.TotalAmount;
            asset.OfferMaterialId = oldAsset.OfferMaterialId;
            asset.OrderMaterialId = oldAsset.OrderMaterialId;
            asset.ReceptionPrice = oldAsset.ReceptionPrice;
            asset.BudgetBaseId = oldAsset.BudgetBaseId;
            asset.AssetRecoStateId = oldAsset.AssetRecoStateId;
            asset.TempSerialNumber = oldAsset.TempSerialNumber;
            asset.CostCenterEmpId = oldAsset.CostCenterEmpId;
            asset.NotSync = false;
            //asset.SubCategoryId = oldAsset.SubCategoryId;
            asset.RequestId = oldAsset.RequestId;
            asset.DepPeriod = oldAsset.DepPeriod;
            asset.NetAmountRon = oldAsset.NetAmountRon;
            asset.TaxAmountRon = oldAsset.TaxAmountRon;
            asset.TotalAmountRon = oldAsset.TotalAmountRon;
            asset.ValueInvRon = oldAsset.ValueInvRon;
            asset.ValueRemRon = oldAsset.ValueRemRon;
            asset.EmployeeTransferId = oldAsset.EmployeeTransferId;
            asset.Guid = Guid.NewGuid();
            asset.IsLocked = false;
            asset.IsClone = true;
            asset.IsSAPClone = false;

            _context.Add(asset);

            document = new Model.Document();
            document.Approved = true;
            document.DocumentTypeId = documentType != null ? documentType.Id : 1;
            document.DocNo1 = oldAsset.Document.DocNo1;
            document.DocNo2 = oldAsset.Document.DocNo1;
            document.DocumentDate = DateTime.Now;
            document.CreationDate = DateTime.Now;
            document.CostCenterId = (int?)null;
            document.RegisterDate = DateTime.Now;
            document.PartnerId = oldAsset.Document.PartnerId;
            document.Details = string.Empty;
            document.ParentDocumentId = inventory.DocumentId;

            asset.Document = document;
            _context.Add(document);


            assetClassType = _context.Set<Model.AssetClassType>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();
            assetClass = _context.Set<Model.AssetClass>().Where(a => (a.Id == 22)).FirstOrDefault();
            accSystem = _context.Set<Model.AccSystem>().Where(a => (a.Code == accSystemDefault)).FirstOrDefault();

            assetDepOld = _context.Set<Model.AssetDep>().Where(a => a.AssetId == oldAsset.Id).Single();
            assetInvOld = _context.Set<Model.AssetInv>().Where(a => a.AssetId == oldAsset.Id).Single();
            assetDepMDOld = _context.Set<Model.AssetDepMD>().Where(a => a.AssetId == oldAsset.Id && a.AccMonthId == inventory.AccMonthId).Single();
            assetAdmMDOld = _context.Set<Model.AssetAdmMD>().Where(a => a.AssetId == oldAsset.Id && a.AccMonthId == inventory.AccMonthId).Single();
            inventoryAssetOld = _context.Set<Model.InventoryAsset>().Where(a => a.AssetId == oldAsset.Id && a.InventoryId == inventory.Id).Single();

            int? value = null;

            assetAC = new Model.AssetAC
            {
                AssetClassTypeId = assetClassType.Id,
                Asset = asset,
                AssetClassId = assetClass.Id,
                AssetClassIdIn = assetClass.Id
            };


            _context.Set<Model.AssetAC>().Add(assetAC);


            assetDep = new Model.AssetDep();

            assetDep.AccSystemId = assetDepOld.AccSystemId;
            assetDep.Asset = asset;
            assetDep.DepPeriod = assetDepOld.DepPeriod;
            assetDep.DepPeriodIn = assetDepOld.DepPeriodIn;
            assetDep.DepPeriodMonth = assetDepOld.DepPeriodMonth;
            assetDep.DepPeriodMonthIn = assetDepOld.DepPeriodMonthIn;
            assetDep.DepPeriodRem = assetDepOld.DepPeriodRem;
            assetDep.DepPeriodRemIn = assetDepOld.DepPeriodRemIn;
            assetDep.DirectExpense = assetDepOld.DirectExpense;
            assetDep.UsageEndDate = assetDepOld.UsageEndDate;
            assetDep.UsageStartDate = assetDepOld.UsageStartDate;
            assetDep.ValueDep = assetDepOld.ValueDep;
            assetDep.ValueDepIn = assetDepOld.ValueDepIn;
            assetDep.ValueDepPU = assetDepOld.ValueDepPU;
            assetDep.ValueDepPUIn = assetDepOld.ValueDepPUIn;
            assetDep.ValueDepYTD = assetDepOld.ValueDepYTD;
            assetDep.ValueDepYTDIn = assetDepOld.ValueDepYTDIn;
            assetDep.ValueInv = assetDepOld.ValueInv;
            assetDep.ValueInvIn = assetDepOld.ValueInvIn;
            assetDep.ValueRem = assetDepOld.ValueRem;
            assetDep.ValueRemIn = assetDepOld.ValueRemIn;
            assetDep.ValueRet = assetDepOld.ValueRet;
            assetDep.ValueRetIn = assetDepOld.ValueRetIn;
            assetDep.ValueTr = assetDepOld.ValueTr;
            assetDep.ValueTrIn = assetDepOld.ValueTrIn;

            _context.Set<Model.AssetDep>().Add(assetDep);


            assetInv = new Model.AssetInv();

            assetInv.Asset = asset;
            assetInv.AllowLabel = assetInvOld.AllowLabel;
            assetInv.Barcode = string.Empty;
            assetInv.Info = string.Empty;
            assetInv.InvName = string.Empty;
            assetInv.Model = string.Empty;
            assetInv.Producer = string.Empty;
            assetInv.InvStateId = assetInvOld.InvStateId;

            _context.Set<Model.AssetInv>().Add(assetInv);

            assetDepMD = new Model.AssetDepMD();

            assetDepMD.AccMonthId = inventory.AccMonthId.Value;
            assetDepMD.AccSystemId = assetDepMDOld.AccSystemId;
            assetDepMD.Asset = asset;
            assetDepMD.UsefulLife = assetDepMDOld.UsefulLife;
            assetDepMD.TotLifeInpPeriods = assetDepMDOld.TotLifeInpPeriods;
            assetDepMD.AccumulDep = assetDepMDOld.AccumulDep;
            assetDepMD.BkValFYStart = assetDepMDOld.BkValFYStart;
            assetDepMD.DepForYear = assetDepMDOld.DepForYear;
            assetDepMD.CurrentAPC = assetDepMDOld.CurrentAPC;
            assetDepMD.PosCap = assetDepMDOld.PosCap;
            assetDepMD.ExpLifeInPeriods = assetDepMDOld.ExpLifeInPeriods;
            assetDepMD.DepFYStart = assetDepMDOld.DepFYStart;
            assetDepMD.Acquisition = assetDepMDOld.Acquisition;
            assetDepMD.APCFYStart = assetDepMDOld.APCFYStart;
            assetDepMD.DepPostCap = assetDepMDOld.DepPostCap;
            assetDepMD.DepRetirement = assetDepMDOld.DepRetirement;
            assetDepMD.Retirement = assetDepMDOld.Retirement;
            assetDepMD.DepTransfer = assetDepMDOld.DepTransfer;
            assetDepMD.Transfer = assetDepMDOld.Transfer;
            assetDepMD.InvestSupport = assetDepMDOld.InvestSupport;
            assetDepMD.WriteUps = assetDepMDOld.WriteUps;

            _context.Set<Model.AssetDepMD>().Add(assetDepMD);


            assetAdmMD = new Model.AssetAdmMD();

            assetAdmMD.AccMonthId = inventory.AccMonthId.Value;
            assetAdmMD.Asset = asset;
            assetAdmMD.AdministrationId = assetAdmMDOld.AdministrationId;
            assetAdmMD.AssetCategoryId = assetAdmMDOld.AssetCategoryId;
            assetAdmMD.AssetStateId = assetAdmMDOld.AssetStateId;
            assetAdmMD.AssetTypeId = assetAdmMDOld.AssetTypeId;
            assetAdmMD.CostCenterId = assetAdmMDOld.CostCenterId;
            assetAdmMD.DepartmentId = assetAdmMDOld.DepartmentId;
            assetAdmMD.EmployeeId = assetAdmMDOld.EmployeeId;
            assetAdmMD.RoomId = assetAdmMDOld.RoomId;
            assetAdmMD.AssetClassId = assetAdmMDOld.AssetClassId;
            
            assetAdmMD.AssetNatureId = assetAdmMDOld.AssetNatureId;
            assetAdmMD.BudgetManagerId = assetAdmMDOld.BudgetManagerId;
            
            assetAdmMD.SubTypeId = assetAdmMDOld.SubTypeId;
            assetAdmMD.InsuranceCategoryId = assetAdmMDOld.InsuranceCategoryId;
            assetAdmMD.BrandId = assetAdmMDOld.BrandId;
            assetAdmMD.ModelId = assetAdmMDOld.ModelId;
            assetAdmMD.ProjectId = assetAdmMDOld.ProjectId;
            assetAdmMD.DivisionId = assetAdmMDOld.DivisionId;
            assetAdmMD.AdmCenterId = assetAdmMDOld.AdmCenterId;
            assetAdmMD.RegionId = assetAdmMDOld.RegionId;
            assetAdmMD.ProjectTypeId = assetAdmMDOld.ProjectTypeId;
            //assetAdmMD.SubCategoryId = assetAdmMDOld.SubCategoryId;
            assetAdmMD.RequestId = assetAdmMDOld.RequestId;

            _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);

            entityType.Name = StringsADD(entityType.Name, "1");

            _context.Update(entityType);

            inventoryAsset = new Model.InventoryAsset();

            inventoryAsset.InventoryId = inventory.Id;
            inventoryAsset.Asset = asset;
            inventoryAsset.CostCenterIdFinal = inventoryAssetOld.CostCenterIdFinal;
            inventoryAsset.CostCenterIdInitial = inventoryAssetOld.CostCenterIdInitial;
            inventoryAsset.DetailStateId = inventoryAssetOld.DetailStateId;
            inventoryAsset.EmployeeIdFinal = inventoryAssetOld.EmployeeIdFinal;
            inventoryAsset.EmployeeIdInitial = inventoryAssetOld.EmployeeIdInitial;
            inventoryAsset.Model = inventoryAssetOld.Model;
            inventoryAsset.Producer = inventoryAssetOld.Producer;
            inventoryAsset.QFinal = inventoryAssetOld.QFinal;
            inventoryAsset.QInitial = inventoryAssetOld.QInitial;
            inventoryAsset.RoomIdFinal = inventoryAssetOld.RoomIdFinal;
            inventoryAsset.RoomIdInitial = inventoryAssetOld.RoomIdInitial;
            inventoryAsset.SerialNumber = inventoryAssetOld.SerialNumber;
            inventoryAsset.StateIdFinal = inventoryAssetOld.StateIdFinal;
            inventoryAsset.StateIdInitial = inventoryAssetOld.StateIdInitial;
            inventoryAsset.Info = inventoryAssetOld.Info;
            inventoryAsset.ModifiedAt = DateTime.Now;
            inventoryAsset.ModifiedBy = _context.UserId;
            inventoryAsset.AdministrationIdFinal = inventoryAssetOld.AdministrationIdFinal;
            inventoryAsset.AdministrationIdInitial = inventoryAssetOld.AdministrationIdInitial;
            inventoryAsset.Info2019 = inventoryAssetOld.Info2019;
            inventoryAsset.DimensionIdFinal = inventoryAssetOld.DimensionIdFinal;
            inventoryAsset.UomIdFinal = inventoryAssetOld.UomIdFinal;
            inventoryAsset.AssetRecoStateId = inventoryAssetOld.AssetRecoStateId;
            inventoryAsset.InfoMinus = inventoryAssetOld.InfoMinus;
            inventoryAsset.InfoPlus = inventoryAssetOld.InfoPlus;
            inventoryAsset.IsMinus = inventoryAssetOld.IsMinus;
            inventoryAsset.IsPlus = inventoryAssetOld.IsPlus;
            inventoryAsset.ImageCount = 0;
            inventoryAsset.IsReconcile = inventoryAssetOld.IsReconcile;
            inventoryAsset.IsTemp = inventoryAssetOld.IsTemp;
            inventoryAsset.TempName = inventoryAssetOld.TempName;
            inventoryAsset.TempReco = inventoryAssetOld.TempReco;
            inventoryAsset.AllowLabelInitial = inventoryAssetOld.AllowLabelInitial;
            inventoryAsset.SNInitial = inventoryAssetOld.SNInitial;
            inventoryAsset.TempRecoSerialNumber = inventoryAssetOld.TempRecoSerialNumber;

            _context.Add(inventoryAsset);

            _context.SaveChanges();

            return asset.Id;
        }
        public int CreateOrUpdateAsset(AssetSave assetDto)
        {
            Model.Asset asset = null;
            Model.AssetDep assetDep = null;
            Model.AssetDepMD assetDepMD = null;
            Model.AssetInv assetInv = null;
            Model.AssetAC assetAC = null;
            Model.AssetAdmMD assetAdmMD = null;
            Model.AccMonth accMonth = null;
            Model.Document document = null;
            Model.AssetOp assetOp = null;
            Model.OrderOp orderOp = null;
            Model.OfferOp offerOp = null;
            Model.BudgetOp budgetOp = null;
            Model.Inventory inventory = null;
            Model.InventoryAsset inventoryAsset = null;
            bool validation = false;
            DateTime? documentDate = null;
            Model.Administration administration = null;
            Model.AccSystem accSystem = null;
            Model.AssetClass assetClass = null;
            Model.AssetCategory assetCategory = null;
            Model.AssetClassType assetClassType = null;
            Model.Partner partner = null;
            Model.CostCenter costCenter = null;
            Model.Room room = null;
            Model.AssetState assetState = null;
            Model.AssetType assetType = null;
            Model.InvState invState = null;
            Model.Employee employee = null;
            Model.AdmCenter admCenter = null;
            Model.DocumentType documentType = null;
            Model.Order order = null;


            string accSystemDefault = "RON";
            string assetClassTypeDefault = "-";
            string assetClassDefault = "NSP";
            string assetStateDefault = "F";
            bool isMultiple = false;


            documentDate = ((assetDto.DocumentDate != null && assetDto.DocumentDate.HasValue) && (assetDto.DocumentDate.Value.Year > 1900)) ? assetDto.DocumentDate : null;

            bool hasDocument = true;

            if ((((assetDto.DocNo1 != null && assetDto.DocNo1.Length > 0)) || ((assetDto.DocNo2 != null && assetDto.DocNo2.Length > 0)))
                && (assetDto.DocumentTypeId.HasValue) && (documentDate != null)) hasDocument = true;

            if (assetDto.DocumentTypeId > 0)
            {
                documentType = _context.Set<Model.DocumentType>().Where(d => d.Id == assetDto.DocumentTypeId).FirstOrDefault();
            }

            inventory = _context.Set<Model.Inventory>().Where(i => i.Active == true).Single();


            if (assetDto.Id > 0)
            {
                asset = _context.Set<Model.Asset>().Include(a => a.Document).Where(a => a.Id == assetDto.Id).Single();


                //inventory = _context.Set<Model.Inventory>().Where(i => assetDto.DocumentDate >= i.Start && assetDto.DocumentDate <= i.End).Single();

                if (inventory != null)
                {
                    accMonth = _context.Set<Model.AccMonth>().Where(a => a.Id == inventory.AccMonthId).Single();
                }

                invState = _context.Set<Model.InvState>().Where(a => a.Id == assetDto.InvStateId).Single();
                //assetState = _context.Set<Model.AssetState>().Where(a => a.Code == invState.Code).Single();
                assetInv = _context.Set<Model.AssetInv>().Where(a => a.AssetId == assetDto.Id).Single();
                //assetType = _context.Set<Model.AssetType>().Where(a => a.Id == 2).Single();
                assetAdmMD = _context.Set<Model.AssetAdmMD>().Where(a => a.AssetId == assetDto.Id && a.AccMonthId == accMonth.Id).Single();

                if (hasDocument)
                {
                    if (asset.Document != null)
                    {
                        document = asset.Document;
                        document.DocNo1 = assetDto.DocNo1;
                        document.DocNo2 = assetDto.DocNo2 ?? string.Empty;
                        document.CreationDate = assetDto.PartnerDate != null ? assetDto.PartnerDate : DateTime.Now;
                        document.PartnerId = assetDto.PartnerId != null && assetDto.PartnerId > 0 ? assetDto.PartnerId : 52;
                        document.Details = assetDto.Details;
                        document.DocumentTypeId = documentType != null ? documentType.Id : 1;

                        _context.Set<Model.Document>().Update(document);
                    }
                }
                else
                {
                    if (asset.Document != null) _context.Remove(asset.Document);
                }

                asset.ERPCode = assetDto.ERPCode;
                asset.CompanyId = assetDto.CompanyId;
                asset.Name = assetDto.Name;
                //asset.PurchaseDate = documentDate;
                asset.SerialNumber = assetDto.SerialNumber;
                asset.InvNo = assetDto.InvNo;
                asset.AssetTypeId = assetDto.AssetTypeId;
                //asset.AssetStateId = assetState.Id;
                asset.CostCenterId = assetDto.CostCenterId;

                costCenter = _context.Set<Model.CostCenter>().Include(c => c.Division).Where(c => c.Id == asset.CostCenterId).SingleOrDefault();

                asset.DepartmentId = costCenter.Division.DepartmentId;
                asset.DivisionId = costCenter.DivisionId;
                asset.EmployeeId = assetDto.EmployeeId;
                asset.RoomId = assetDto.RoomId;
                asset.ValueInv = assetDto.ValueInv;
                asset.ValueRem = assetDto.ValueDep;
                asset.InvStateId = assetDto.InvStateId;
                asset.Quantity = assetDto.Quantity;
    
                asset.DimensionId = assetDto.DimensionId;
                asset.DictionaryItemId = assetDto.DictionaryItemId;
                asset.CompanyId = assetDto.CompanyId;
                asset.AdministrationId = assetDto.AdministrationId;
                asset.ERPCode = assetDto.ERPCode;
                //asset.InvNo = assetDto.InvNo; // OTP
                //asset.AssetStateId = assetState.Id;
                //asset.CompanyId = 1;
                //asset.Custody = false;
                //asset.UomId = 3;
                asset.BudgetManagerId = assetDto.BudgetManagerId;
                asset.AssetNatureId = assetDto.AssetNatureId;
                asset.SubTypeId = assetDto.SubTypeId;
                asset.InsuranceCategoryId = assetDto.InsuranceCategoryId;
                asset.ModelId = asset.ModelId;
                asset.BrandId = asset.BrandId;
    
                asset.ProjectId = assetDto.ProjectId;
                asset.InvoiceDate = assetDto.InvoiceDate.ToString() != "1/1/0001 12:00:00 AM" ? assetDto.InvoiceDate : null;
                asset.PODate = assetDto.PODate.ToString() != "1/1/0001 12:00:00 AM" ? assetDto.PODate : null;
                asset.ReceptionDate = assetDto.ReceptionDate.ToString() != "1/1/0001 12:00:00 AM" ? assetDto.ReceptionDate : null;
                asset.RemovalDate = assetDto.RemovalDate.ToString() != "1/1/0001 12:00:00 AM" ? assetDto.RemovalDate : null;
                //asset.AssetCategoryId = assetDto.AssetCategoryId;
                asset.ModifiedAt = DateTime.Now;
                asset.PurchaseDate = assetDto.InvoiceDate.ToString() != "1/1/0001 12:00:00 AM" ? assetDto.InvoiceDate : null;
                asset.IsAccepted = assetDto.IsAccepted;
                asset.OrderId = assetDto.OrderId;
                asset.BudgetId = assetDto.BudgetId;

                asset.DivisionId = assetDto.DivisionId;
                asset.ProjectTypeId = assetDto.ProjectTypeId;

                _context.Set<Model.Asset>().Update(asset);

                assetInv.Producer = assetDto.ProducerInv;
                assetInv.Model = assetDto.ModelInv;
                assetInv.Info = assetDto.Info;

                _context.Set<Model.AssetInv>().Update(assetInv);


                inventoryAsset = _context.Set<Model.InventoryAsset>().Where(a => a.AssetId == assetDto.Id && a.InventoryId == inventory.Id).Single();

                inventoryAsset.StateIdInitial = assetDto.InvStateId;
                inventoryAsset.EmployeeIdInitial = assetDto.EmployeeId;
                inventoryAsset.CostCenterIdInitial = assetDto.CostCenterId;
                inventoryAsset.RoomIdInitial = assetDto.RoomId;
                inventoryAsset.SerialNumber = assetDto.SerialNumber;
                inventoryAsset.AdministrationIdInitial = assetDto.AdministrationId;


                _context.Set<Model.InventoryAsset>().Update(inventoryAsset);


                //assetOp = _context.Set<Model.AssetOp>().Where(a => a.AssetId == asset.Id).OrderByDescending(a => a.AssetId).Take(1).SingleOrDefault();

                ////assetOp.AssetStateIdInitial = assetState.Id;
                //assetOp.InvStateIdInitial = assetDto.InvStateId;
                ////assetOp.AssetStateIdFinal = assetOp.AssetStateIdFinal != null ? assetState.Id : assetOp.AssetStateIdFinal;
                //assetOp.InvStateIdFinal = assetDto.InvStateId;
                //assetOp.EmployeeIdInitial = assetDto.EmployeeId;
                //assetOp.CostCenterIdInitial = assetDto.CostCenterId;
                //assetOp.RoomIdInitial = assetDto.RoomId;
                //assetOp.AdministrationIdInitial = assetDto.AdministrationId;
                //assetOp.AdministrationIdFinal = assetDto.AdministrationId;
                ////assetOp.DepartmentIdInitial = 0;
                ////assetOp.DepartmentIdFinal = 0;
                //assetOp.InvName = assetDto.Name;
                //assetOp.AssetCategoryIdInitial = assetDto.AssetCategoryId;
                //assetOp.AssetCategoryIdFinal = assetDto.AssetCategoryId;


                //_context.Set<Model.AssetOp>().Update(assetOp);


                assetDep = _context.Set<Model.AssetDep>().Where(a => a.AssetId == assetDto.Id).Single();

                assetDep.ValueDep = assetDto.ValueDep;
                assetDep.ValueDepIn = 0;
                assetDep.ValueDepPU = assetDto.ValueDepPU;
                assetDep.ValueDepPUIn = 0;
                assetDep.ValueDepYTD = assetDto.ValueDepPU;
                assetDep.ValueDepYTDIn = 0;
                assetDep.ValueInv = assetDto.ValueInv;
                assetDep.ValueRem = assetDto.ValueDep;
                assetDep.ValueRemIn = 0;
                assetDep.DepPeriodMonth = assetDto.DepPeriodMonth;

                _context.Set<Model.AssetDep>().Update(assetDep);


                assetDepMD = _context.Set<Model.AssetDepMD>().Where(a => a.AssetId == assetDto.Id && a.AccMonthId == inventory.AccMonthId).Single();

                assetDepMD.AccumulDep = assetDto.ValueDep;
                assetDepMD.BkValFYStart = assetDto.ValueDepPU;
                assetDepMD.DepForYear = assetDto.ValueDep;
                assetDepMD.CurrentAPC = assetDto.ValueInv;
                assetDepMD.PosCap = assetDto.ValueRem;
                assetDepMD.TotLifeInpPeriods = assetDto.DepPeriodMonth;

                _context.Set<Model.AssetDepMD>().Update(assetDepMD);


                assetAdmMD = _context.Set<Model.AssetAdmMD>().Where(a => a.AssetId == assetDto.Id && a.AccMonthId == accMonth.Id).Single();

                //assetAdmMD.AssetStateId = assetState.Id;
                assetAdmMD.EmployeeId = assetDto.EmployeeId;
                assetAdmMD.CostCenterId = assetDto.CostCenterId;
                assetAdmMD.DepartmentId = costCenter.Division.DepartmentId;
                assetAdmMD.DivisionId = costCenter.DivisionId;
                assetAdmMD.RoomId = assetDto.RoomId;
                assetAdmMD.AssetTypeId = assetDto.AssetTypeId;
                assetAdmMD.AssetNatureId = assetDto.AssetNatureId;
                assetAdmMD.BudgetManagerId = assetDto.BudgetManagerId;
                assetAdmMD.SubTypeId = assetDto.SubTypeId;
                assetAdmMD.InsuranceCategoryId = assetDto.InsuranceCategoryId;
                assetAdmMD.ModelId = assetDto.ModelId;
                assetAdmMD.BrandId = assetDto.BrandId;
                
                assetAdmMD.ProjectId = assetDto.ProjectId;
                assetAdmMD.AdministrationId = assetDto.AdministrationId;
                assetAdmMD.AdmCenterId = assetDto.AdmCenterId;
                assetAdmMD.RegionId = assetDto.RegionId;
                assetAdmMD.ProjectTypeId = assetDto.ProjectTypeId;

                //assetAdmMD.AssetCategoryId = assetDto.AssetCategoryId;

                _context.Set<Model.AssetAdmMD>().Update(assetAdmMD);

                //document = _context.Set<Model.Document>().Find(asset.DocumentId);

                if ((!asset.Validated) && (assetDto.Validated)) validation = true;

            }
            else
            {
                isMultiple = true;
                Model.EntityType entityType = null;
                inventory = _context.Set<Model.Inventory>().Where(i => i.Active == true).Single();

                decimal valueIni = assetDto.ValueInv;
                int quantity = (int)assetDto.Quantity;

                for (int j = 0; j < assetDto.Quantity; j++)
                {

                    assetDto.ValueInv = valueIni / quantity;

                    order = _context.Set<Model.Order>().Include(b => b.Budget).Include(b => b.Offer).Where(c => c.Id == assetDto.OrderId).SingleOrDefault();


                    order.QuantityRem = order.QuantityRem > 0 ? order.QuantityRem - 1 : order.Quantity;
                    order.ValueFin = order.ValueFin > 0 ? order.ValueFin - assetDto.ValueInv : order.ValueFin;

                    entityType = _context.Set<Model.EntityType>().Where(c => c.UploadFolder == "NEWASSET").FirstOrDefault();

                    asset = new Model.Asset()
                    {
                        Document = document
                    };
                    _context.Add(asset);

                    room = _context.Set<Model.Room>().Where(a => (a.Id == assetDto.RoomId)).FirstOrDefault();


                    if (assetDto.InvStateId != null)
                    {
                        invState = _context.Set<Model.InvState>().Where(a => a.Id == assetDto.InvStateId).Single();
                    }
                    else
                    {
                        invState = _context.Set<Model.InvState>().Where(a => a.Id == 1).Single();
                    }


                    if (assetDto.AssetTypeId != null)
                    {
                        assetType = _context.Set<Model.AssetType>().Where(a => a.Id == assetDto.AssetTypeId).Single();
                    }
                    else
                    {
                        assetType = _context.Set<Model.AssetType>().Where(a => a.Id == 1).Single();
                    }

                    if (assetDto.CostCenterId != null)
                    {
                        costCenter = _context.Set<Model.CostCenter>().Where(a => a.Id == assetDto.CostCenterId).Single();
                    }
                    else
                    {
                        costCenter = _context.Set<Model.CostCenter>().Where(a => a.Id == 1).Single();
                    }

                    if (assetDto.AssetCategoryId != null)
                    {
                        assetCategory = _context.Set<Model.AssetCategory>().Where(a => a.Id == assetDto.AssetCategoryId).Single();
                    }
                    else
                    {
                        assetCategory = _context.Set<Model.AssetCategory>().Where(a => a.Id == 1).Single();
                    }

                    assetState = _context.Set<Model.AssetState>().Where(a => a.Code == assetStateDefault).Single();
                    document = new Model.Document();
                    document.Approved = true;
                    document.DocumentTypeId = documentType != null ? documentType.Id : 1;
                    document.DocNo1 = assetDto.DocNo1 ?? string.Empty;
                    document.DocNo2 = assetDto.DocNo2 ?? string.Empty;
                    document.DocumentDate = documentDate != null ? documentDate.Value : DateTime.Now;
                    document.CreationDate = assetDto.PartnerDate != null ? assetDto.PartnerDate.Value : DateTime.Now;
                    document.CostCenterId = costCenter != null ? costCenter.Id : (int?)null;
                    document.RegisterDate = documentDate != null ? documentDate.Value : DateTime.Now;
                    document.PartnerId = assetDto.PartnerId != null && assetDto.PartnerId > 0 ? assetDto.PartnerId : 1;
                    document.Details = assetDto.Details;
                    document.ParentDocumentId = inventory.DocumentId;


                    if (assetDto.Validated) validation = true;


                    assetClassType = _context.Set<Model.AssetClassType>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();
                    assetClass = _context.Set<Model.AssetClass>().Where(a => (a.Id == 22)).FirstOrDefault();
                    accSystem = _context.Set<Model.AccSystem>().Where(a => (a.Code == accSystemDefault)).FirstOrDefault();
                    partner = _context.Set<Model.Partner>().Where(a => a.Id == assetDto.PartnerId).FirstOrDefault();
                    document.Partner = partner;
                    _context.Add(document);

                    int? value = null;

                    asset.InvNo = entityType.Code + entityType.Name;
                    asset.Name = assetDto.Name;
                    asset.PurchaseDate = DateTime.Now;
                    asset.SerialNumber = assetDto.SerialNumber;
                    asset.ERPCode = assetDto.ERPCode;
                    asset.Document = document;
                    asset.Validated = assetDto.Validated;
                    asset.SAPCode = assetDto.ERPCode;
                    asset.AssetStateId = assetState.Id;
                    asset.AssetTypeId = assetDto.AssetTypeId;
                    asset.CostCenterId = assetDto.CostCenterId;
                    asset.DepartmentId = costCenter.Division.DepartmentId;
                    asset.DivisionId = costCenter.DivisionId;
                    asset.AssetCategoryId = assetDto.AssetCategoryId;
                    asset.EmployeeId = assetDto.EmployeeId;
                    asset.RoomId = assetDto.RoomId;
                    asset.ValueInv = assetDto.ValueInv;
                    asset.ValueRem = assetDto.ValueRem;
                    asset.InvStateId = assetDto.InvStateId;
                    asset.Quantity = 1;
                    asset.Custody = false;
                    asset.UomId = assetDto.UomId;
                    asset.CompanyId = assetDto.CompanyId;
                    asset.Validated = true;
                    
                    asset.BudgetManagerId = assetDto.BudgetManagerId;
                    asset.AssetNatureId = assetDto.AssetNatureId;
                    asset.SubTypeId = assetDto.SubTypeId;
                    asset.InsuranceCategoryId = assetDto.InsuranceCategoryId;
                    asset.BrandId = assetDto.BrandId;
                    asset.ModelId = assetDto.ModelId;
        
                    asset.ProjectId = assetDto.ProjectId;
                    asset.InvoiceDate = assetDto.InvoiceDate;
                    asset.PODate = assetDto.PODate;
                    asset.ReceptionDate = assetDto.ReceptionDate;
                    asset.RemovalDate = assetDto.RemovalDate;
                    asset.IsTemp = false;
                    asset.DimensionId = assetDto.DimensionId;
                    asset.AdministrationId = assetDto.AdministrationId;
                    asset.DictionaryItemId = assetDto.DictionaryItemId;
                    asset.IsAccepted = true;
                    asset.IsReconcile = false;
                    //asset.AccountId = assetDto.AccountId;
                    asset.OrderId = assetDto.OrderId;
                    asset.BudgetId = order.BudgetId;
                    asset.ProjectTypeId = assetDto.ProjectTypeId;

                    assetAC = new Model.AssetAC
                    {
                        AssetClassTypeId = assetClassType.Id,
                        Asset = asset,
                        AssetClassId = assetClass.Id,
                        AssetClassIdIn = assetClass.Id
                    };


                    _context.Set<Model.AssetAC>().Add(assetAC);

                    var monthSum = assetDto.DepPeriodMonth;


                    assetDep = new Model.AssetDep
                    {
                        AccSystem = accSystem,
                        Asset = asset,
                        DepPeriod = (int)monthSum,
                        DepPeriodIn = (int)monthSum,
                        DepPeriodMonth = (int)monthSum,
                        DepPeriodMonthIn = 0,
                        DepPeriodRem = (int)monthSum,
                        DepPeriodRemIn = (int)monthSum,
                        UsageStartDate = documentDate,
                        ValueDep = assetDto.ValueDep,
                        ValueDepIn = assetDto.ValueDep,
                        ValueDepPU = assetDto.ValueDepPU,
                        ValueDepPUIn = assetDto.ValueDepPU,
                        ValueDepYTD = assetDto.ValueDep,
                        ValueDepYTDIn = assetDto.ValueDep,
                        ValueInv = assetDto.ValueInv,
                        ValueInvIn = assetDto.ValueInv,
                        ValueRem = assetDto.ValueDep,
                        ValueRemIn = assetDto.ValueDep
                    };

                    _context.Set<Model.AssetDep>().Add(assetDep);


                    assetInv = new Model.AssetInv
                    {
                        Asset = asset,
                        AllowLabel = true,
                        Barcode = entityType.Code + entityType.Name,
                        Info = assetDto.Info,
                        InvName = asset.Name,
                        InvNoOld = string.Empty,
                        Model = assetDto.ModelInv,
                        Producer = assetDto.ProducerInv,
                        InvStateId = invState.Id
                    };

                    _context.Set<Model.AssetInv>().Add(assetInv);


                    accMonth = _context.Set<Model.AccMonth>().Where(a => a.IsActive == true).FirstOrDefault();

                    assetDepMD = new Model.AssetDepMD
                    {
                        AccMonth = accMonth,
                        AccSystem = accSystem,
                        Asset = asset,
                        UsefulLife = (int)monthSum,
                        TotLifeInpPeriods = (int)monthSum,
                        RemLifeInPeriods = 0,
                        AccumulDep = assetDto.ValueDep,
                        BkValFYStart = assetDto.ValueDepPU,
                        DepForYear = assetDto.ValueDep,
                        CurrentAPC = assetDto.ValueInv,
                        PosCap = assetDto.ValueDep
                    };

                    _context.Set<Model.AssetDepMD>().Add(assetDepMD);


                    assetAdmMD = new Model.AssetAdmMD
                    {
                        AccMonth = accMonth,
                        Asset = asset,
                        Administration = administration,
                        DepartmentId = null
                    };

                    assetAdmMD.AssetStateId = assetState.Id;
                    assetAdmMD.AssetTypeId = assetType.Id;
                    assetAdmMD.CostCenterId = assetDto.CostCenterId;
                    assetAdmMD.EmployeeId = assetDto.EmployeeId;
                    assetAdmMD.RoomId = assetDto.RoomId;
                    assetAdmMD.DepartmentId = costCenter.Division.DepartmentId;
                    assetAdmMD.DivisionId = costCenter.DivisionId; assetAdmMD.AssetCategoryId = assetDto.AssetCategoryId;
                    assetAdmMD.AssetClass = assetClass;
                    
                    assetAdmMD.AdministrationId = assetDto.AdministrationId;

                    assetAdmMD.AssetNatureId = assetDto.AssetNatureId;
                    assetAdmMD.BudgetManagerId = assetDto.BudgetManagerId;
                    assetAdmMD.SubTypeId = assetDto.SubTypeId;
                    assetAdmMD.InsuranceCategoryId = assetDto.InsuranceCategoryId;
                    assetAdmMD.ModelId = assetDto.ModelId;
                    assetAdmMD.BrandId = assetDto.BrandId;
                    
                    assetAdmMD.ProjectId = assetDto.ProjectId;

                    assetAdmMD.AdmCenterId = assetDto.AdmCenterId;
                    assetAdmMD.RegionId = assetDto.RegionId;
                    assetAdmMD.ProjectTypeId = assetDto.ProjectTypeId;


                    _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);

                    entityType.Name = StringsADD(entityType.Name, "1");
                    _context.Update(entityType);

                    if (validation)
                    {



                        if (inventory != null)
                        {
                            inventoryAsset = new Model.InventoryAsset
                            {
                                QInitial = 1,
                                QFinal = 0,
                                Inventory = inventory,
                                Asset = asset,
                                EmployeeIdInitial = assetDto.EmployeeId,
                                RoomIdInitial = assetDto.RoomId,
                                SerialNumber = assetDto.SerialNumber,
                                StateIdInitial = assetDto.InvStateId,
                                Model = assetDto.Model,
                                CostCenterInitial = costCenter,
                                AdministrationIdInitial = assetDto.AdministrationId
                            };

                            _context.Add(inventoryAsset);

                            assetOp = new Model.AssetOp()
                            {
                                Asset = asset,
                                Document = document,
                                RoomIdInitial = assetDto.RoomId,
                                RoomIdFinal = assetDto.RoomId,
                                EmployeeIdInitial = assetDto.EmployeeId,
                                EmployeeIdFinal = assetDto.EmployeeId,

                                AssetCategoryIdInitial = assetCategory.Id,
                                AssetCategoryIdFinal = assetCategory.Id,
                                InvStateIdInitial = assetDto.InvStateId,
                                InvStateIdFinal = assetDto.InvStateId,
                                AdministrationInitial = administration,
                                AdministrationFinal = administration,
                                AccSystem = accSystem,
                                DocumentId = document.Id
                            };

                            assetOp.AssetStateIdInitial = assetState.Id;
                            assetOp.AssetStateIdFinal = assetState.Id;
                            assetOp.CostCenterInitial = costCenter;
                            assetOp.CostCenterFinal = costCenter;
                            assetOp.DepartmentIdInitial = null;
                            assetOp.DepartmentIdFinal = null;
                            assetOp.InvName = assetDto.Name;
                            assetOp.AssetTypeIdInitial = assetType != null ? assetType.Id : value;
                            assetOp.AssetTypeIdFinal = assetType != null ? assetType.Id : value;
                            assetOp.AdministrationIdInitial = assetDto.AdministrationId;
                            assetOp.AdministrationIdFinal = assetDto.AdministrationId;
                            _context.Add(assetOp);


                            orderOp = new Model.OrderOp()
                            {
                                AccMonthId = inventory.AccMonthId,
                                AccSystemId = null,
                                AdministrationIdInitial = order.AdministrationId,
                                AdministrationIdFinal = order.AdministrationId,
                                OrderId = order.Id,
                                BudgetManagerIdInitial = null,
                                BudgetManagerIdFinal = null,
                                BudgetStateId = order.AppStateId,
                                CompanyIdInitial = order.CompanyId,
                                CompanyIdFinal = order.CompanyId,
                                CostCenterIdInitial = order.CostCenterId,
                                CostCenterIdFinal = order.CostCenterId,
                                CreatedAt = DateTime.Now,
                                CreatedBy = order.UserId,
                                Document = document,
                                DstConfAt = DateTime.Now,
                                DstConfBy = order.UserId,
                                EmployeeIdInitial = order.EmployeeId,
                                EmployeeIdFinal = order.EmployeeId,
                                InfoIni = order.Info,
                                InfoFin = order.Info,
                                IsAccepted = false,
                                IsDeleted = false,
                                ModifiedAt = DateTime.Now,
                                ModifiedBy = order.UserId,
                                PartnerIdInitial = order.PartnerId,
                                PartnerIdFinal = order.PartnerId,
                                ProjectIdInitial = order.ProjectId,
                                ProjectIdFinal = order.ProjectId,
                                QuantityIni = order.Quantity,
                                QuantityFin = order.QuantityRem,
                                SubTypeIdInitial = order.SubTypeId,
                                SubTypeIdFinal = order.SubTypeId,
                                Validated = true,
                                ValueFin1 = order.ValueFin,
                                ValueIni1 = order.ValueIni,
                                ValueFin2 = order.ValueFin,
                                ValueIni2 = order.ValueIni,
                                Guid = Guid.NewGuid(),
                                BudgetIdInitial = order.BudgetId,
                                BudgetIdFinal = order.BudgetId,
                                OfferIdInitial = order.OfferId,
                                OfferIdFinal = order.OfferId,
                                UomId = order.UomId
                            };

                            _context.Add(orderOp);


                            budgetOp = new Model.BudgetOp()
                            {
                                AccMonthId = order.Budget.AccMonthId,
                                AccSystemId = null,
                                AdministrationIdInitial = order.Budget.AdministrationId,
                                AdministrationIdFinal = order.Budget.AdministrationId,
                                BudgetId = order.Budget.Id,
                                BudgetManagerIdInitial = null,
                                BudgetManagerIdFinal = null,
                                BudgetStateId = order.Budget.AppStateId,
                                CompanyIdInitial = order.Budget.CompanyId,
                                CompanyIdFinal = order.Budget.CompanyId,
                                CostCenterIdInitial = order.Budget.CostCenterId,
                                CostCenterIdFinal = order.Budget.CostCenterId,
                                CreatedAt = DateTime.Now,
                                CreatedBy = order.Budget.UserId,
                                Document = document,
                                DstConfAt = DateTime.Now,
                                DstConfBy = order.Budget.UserId,
                                EmployeeIdInitial = order.Budget.EmployeeId,
                                EmployeeIdFinal = order.Budget.EmployeeId,
                                InfoIni = order.Budget.Info,
                                InfoFin = order.Budget.Info,
                                IsAccepted = false,
                                IsDeleted = false,
                                ModifiedAt = DateTime.Now,
                                ModifiedBy = order.Budget.UserId,
                                PartnerIdInitial = order.Budget.PartnerId,
                                PartnerIdFinal = order.Budget.PartnerId,
                                ProjectIdInitial = order.Budget.ProjectId,
                                ProjectIdFinal = order.Budget.ProjectId,
                                QuantityIni = order.Budget.Quantity,
                                QuantityFin = order.Budget.QuantityRem,
                                SubTypeIdInitial = order.Budget.SubTypeId,
                                SubTypeIdFinal = order.Budget.SubTypeId,
                                Validated = true,
                                ValueFin1 = order.Budget.ValueFin,
                                ValueIni1 = order.Budget.ValueIni,
                                ValueFin2 = order.Budget.ValueFin,
                                ValueIni2 = order.Budget.ValueIni,
                                Guid = Guid.NewGuid()
                            };

                            _context.Add(budgetOp);


                            offerOp = new Model.OfferOp()
                            {
                                AccMonthId = order.Offer.AccMonthId,
                                AccSystemId = null,
                                AdministrationIdInitial = order.Offer.AdministrationId,
                                AdministrationIdFinal = order.Offer.AdministrationId,
                                OfferId = order.Offer.Id,
                                BudgetManagerIdInitial = null,
                                BudgetManagerIdFinal = null,
                                BudgetStateId = 1,
                                CompanyIdInitial = order.Offer.CompanyId,
                                CompanyIdFinal = order.Offer.CompanyId,
                                CostCenterIdInitial = order.Offer.CostCenterId,
                                CostCenterIdFinal = order.Offer.CostCenterId,
                                CreatedAt = DateTime.Now,
                                CreatedBy = order.Offer.UserId,
                                Document = document,
                                DstConfAt = DateTime.Now,
                                DstConfBy = order.Offer.UserId,
                                EmployeeIdInitial = order.Offer.EmployeeId,
                                EmployeeIdFinal = order.Offer.EmployeeId,
                                InfoIni = order.Offer.Info,
                                InfoFin = order.Offer.Info,
                                IsAccepted = false,
                                IsDeleted = false,
                                ModifiedAt = DateTime.Now,
                                ModifiedBy = order.Offer.UserId,
                                PartnerIdInitial = order.Offer.PartnerId,
                                PartnerIdFinal = order.Offer.PartnerId,
                                ProjectIdInitial = order.Offer.ProjectId,
                                ProjectIdFinal = order.Offer.ProjectId,
                                QuantityIni = order.Offer.Quantity,
                                QuantityFin = order.Offer.QuantityRem,
                                SubTypeIdInitial = order.Offer.SubTypeId,
                                SubTypeIdFinal = order.Offer.SubTypeId,
                                Validated = true,
                                ValueFin1 = order.Offer.ValueFin,
                                ValueIni1 = order.Offer.ValueIni,
                                ValueFin2 = order.Offer.ValueFin,
                                ValueIni2 = order.Offer.ValueIni,
                                Guid = Guid.NewGuid()
                            };

                            _context.Add(offerOp);
                        }
                    }



                }

            }

            _context.SaveChanges();

            return asset.Id;
        }

        public int UpdateAssetSapValidation(AssetSapValidationSave assetSapValidation)
        {
            Model.Asset asset = null;

            if (assetSapValidation.Id > 0)
            {
                asset = _context.Set<Model.Asset>().Where(a => a.Id == assetSapValidation.Id).Single();
                asset.InSapValidation = assetSapValidation.InSapValidation;
            }
            
            _context.Set<Model.Asset>().Update(asset);
            _context.SaveChanges();

            return asset.Id;
        }

        public int DeleteAssetOp(int assetId, int inventoryId)
        {

            var assetOp = _context.Set<Model.AssetOp>().Where(a => a.AssetId == assetId).OrderByDescending(o => o.Id).Take(2).ToList();
            var assetInv = _context.Set<Model.InventoryAsset>().Where(a => a.AssetId == assetId).Where(a => a.InventoryId == inventoryId).OrderByDescending(o => o.AssetId).LastOrDefault();

            if (assetInv != null)
            {
                assetInv.CostCenterIdFinal = null;
                assetInv.EmployeeIdFinal = null;
                assetInv.RoomIdFinal = null;
                assetInv.QFinal = 0;
                assetInv.StateIdFinal = null;

                _context.Update(assetInv);
            }

            if (assetOp.Count > 1)
            {
                if (assetOp[0] != null)
                {
                    if (assetOp.Count > 1)
                    {
                        if (assetInv.RoomIdFinal != null)
                        {
                            assetInv.CostCenterIdFinal = assetOp[1].CostCenterIdFinal;
                            assetInv.EmployeeIdFinal = assetOp[1].EmployeeIdFinal;
                            assetInv.RoomIdFinal = assetOp[1].RoomIdFinal;
                            assetInv.QFinal = 0;
                        }

                    }

                    _context.Remove(assetOp[0]);

                }
            }




            _context.SaveChanges();

            return assetId;
        }

        public int AssetImportV1(AssetImportV1 assetImport)
        {
            Model.Asset asset = null;
            Model.AssetCategory assetCategory = null;
            Model.CostCenter costCenter = null;
            Model.Location location = null;
            Model.Document document = null;
            Model.InventoryAsset inventoryAsset = null;
            Model.AssetOp assetOp = null;
            Model.Inventory inventory = null;
            Model.Partner partner = null;
            Model.Region region = null;
            Model.AssetState assetState = null;
            Model.InvState invState = null;
            Model.AssetType assetType = null;
            Model.AccSystem accSystem = null;
            Model.Administration administration = null;
            Model.AssetClass assetClass = null;
            Model.AssetClassType assetClassType = null;
            Model.AssetAC assetAc = null;
            Model.AssetDep assetDep = null;
            Model.AssetDepMD assetDepMD = null;
            Model.AccMonth accMonth = null;
            Model.AssetAdmMD assetAdmMD = null;
            Model.AssetInv assetInv = null;

            string assetTypeCode = "ASSET";
            string codeDefault = "_NSP";
            string documentTypeCode = "PURCHASE";
            string locationCode = string.Empty;
            string locationName = string.Empty;
            string roomCode = string.Empty;
            string roomName = string.Empty;
            string costCenterCode = string.Empty;
            string costCenterName = string.Empty;
            string invNo = string.Empty;
            string disposition = string.Empty;
            string assetClassTypeDefault = "RAS";
            string assetClassDefault = "RAS";



            assetClassType = _context.Set<Model.AssetClassType>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();

            if (assetClassType == null)
            {
                assetClassType = new Model.AssetClassType();
                assetClassType.Code = assetClassTypeDefault;
                assetClassType.Name = assetClassTypeDefault;
                assetClassType.IsDeleted = false;
                _context.Set<Model.AssetClassType>().Add(assetClassType);
            }

            assetClass = _context.Set<Model.AssetClass>().Where(a => (a.Code == assetClassTypeDefault.Trim())).FirstOrDefault();

            if (assetClass == null)
            {
                assetClass = new Model.AssetClass();
                assetClass.Code = assetClassTypeDefault.Trim();
                assetClass.Name = assetClassTypeDefault.Trim();
                assetClass.IsDeleted = false;
                assetClass.AssetClassType = assetClassType;
                _context.Set<Model.AssetClass>().Add(assetClass);
            }

            accSystem = _context.Set<Model.AccSystem>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();

            if (accSystem == null)
            {
                accSystem = new Model.AccSystem();
                accSystem.AssetClassType = assetClassType;
                accSystem.Code = assetClassTypeDefault;
                accSystem.Name = assetClassTypeDefault;
                accSystem.IsDeleted = false;
                _context.Set<Model.AccSystem>().Add(accSystem);
            }

            administration = _context.Set<Model.Administration>().Where(a => (a.Code == assetClassDefault.Trim())).FirstOrDefault();

            if (administration == null)
            {
                administration = new Model.Administration();
                administration.Code = assetClassDefault.Trim();
                administration.Name = assetClassDefault.Trim();
                administration.IsDeleted = false;

                _context.Set<Model.Administration>().Add(administration);
            }

            assetType = _context.Set<Model.AssetType>().Where(a => a.Code == assetImport.AssetType.Trim()).SingleOrDefault();

            if (assetType == null)
            {
                assetType = new Model.AssetType();
                assetType.Code = assetImport.AssetType.Trim();
                assetType.Name = assetImport.AssetType.Trim();
                assetType.IsDeleted = false;
                _context.Set<Model.AssetType>().Add(assetType);
            }
            var documentType = _context.Set<Model.DocumentType>().Where(d => d.Code == documentTypeCode).Single();

            var employee = _context.Set<Model.Employee>().Where(e => e.InternalCode == codeDefault).SingleOrDefault();
            if (employee == null)
            {
                employee = new Model.Employee();
                employee.InternalCode = codeDefault;
                employee.FirstName = codeDefault;
                employee.LastName = codeDefault;
                employee.IsDeleted = false;
                _context.Set<Model.Employee>().Add(employee);
            }

            assetCategory = _context.Set<Model.AssetCategory>().Where(a => a.Code == assetImport.AssetCategoryCode.Trim()).FirstOrDefault();
            if (assetCategory == null)
            {
                assetCategory = new Model.AssetCategory();
                assetCategory.Code = assetImport.AssetCategoryCode;
                assetCategory.Name = assetImport.AssetCategoryName;
                assetCategory.IsDeleted = false;
                _context.Set<Model.AssetCategory>().Add(assetCategory);
            }

            costCenterCode = assetImport.CostCenterCode.Trim();
            costCenterName = costCenterCode;
            costCenter = _context.Set<Model.CostCenter>().Where(a => a.Code == costCenterCode).FirstOrDefault();
            if (costCenter == null)
            {
                costCenter = new Model.CostCenter();
                costCenter.Code = costCenterCode;
                costCenter.Name = costCenterName;
                costCenter.IsDeleted = false;
                _context.Set<Model.CostCenter>().Add(costCenter);
            }
            region = _context.Set<Model.Region>().OrderBy(r => r.Id).FirstOrDefault();
            if (region == null)
            {
                region = new Model.Region();
                region.Code = codeDefault;
                region.Name = codeDefault;
                region.IsDeleted = false;
                _context.Set<Model.Region>().Add(region);
            }

            locationCode = assetImport.LocationCode.Trim();
            if (locationCode.Length < 4)
            {
                locationCode = "0" + locationCode;
            }
            locationName = locationCode;
            //location = _context.Set<Model.Location>().Where(a => (a.Code == locationCode) && (a.CostCenterId == costCenter.Id)).FirstOrDefault();
            //if (location == null)
            //{
            //    location = new Model.Location();
            //    location.Code = locationCode;
            //    location.CostCenter = costCenter;
            //    location.Name = locationName;
            //    location.IsDeleted = false;
            //    location.RegionId = region.Id;
            //    _context.Set<Model.Location>().Add(location);
            //}

            roomCode = costCenterCode;
            roomName = costCenterName;
            var room = _context.Set<Model.Room>().Where(r => ((r.Code == roomCode) && (r.LocationId == location.Id))).SingleOrDefault();
            if (room == null)
            {
                room = new Model.Room();
                room.Code = roomCode;
                room.Name = roomName;
                room.Location = location;
                room.IsDeleted = false;
                _context.Set<Model.Room>().Add(room);
            }

            partner = _context.Set<Model.Partner>().Where(a => a.FiscalCode == assetImport.FiscalCode.Trim()).FirstOrDefault();
            if (partner == null)
            {
                partner = new Model.Partner();
                partner.Name = assetImport.PartnerName;
                partner.FiscalCode = assetImport.FiscalCode;
                partner.RegistryNumber = string.Empty;
                partner.IsDeleted = false;

                _context.Set<Model.Partner>().Add(partner);
            }


            for (int i = 0; i < assetImport.Quantity; i++)
            {
                var invNoNew1 = 0;
                invNoNew1 = int.Parse(assetImport.InvNo2) + i;

                string initialDate = assetImport.PurchaseDate.ToString();
                string[] strDate = initialDate.Split('/');

                int month = int.Parse(strDate[0]);
                int day = int.Parse(strDate[1]);
                int year = int.Parse(strDate[2].Substring(0, 4));

                DateTime acquisitionDate = new DateTime(year, month, day);

                //DateTime acquisitionDate = new DateTime(1899, 12, 30).Add(new TimeSpan(Convert.ToInt32(assetImport.PurchaseDate), 0, 0, 0));
                invNo = string.Format("{0}{1}/{2}", assetImport.InvNo1.Trim(), assetImport.InvNo2.Trim(), assetImport.InvNo3.Trim());
                if (i != 0)
                {
                    invNo = string.Format("{0}{1}/{2}", assetImport.InvNo1.Trim(), invNoNew1.ToString().Trim(), assetImport.InvNo3.Trim());
                }
                asset = _context.Set<Model.Asset>().Where(a => a.InvNo == invNo.Trim()).SingleOrDefault();





                if (asset == null) //nu exista in bd, asset nou
                {


                    document = new Model.Document();
                    document.Approved = true;
                    document.DocumentType = documentType;
                    document.DocNo1 = assetImport.DocNo1 ?? string.Empty;
                    document.DocNo2 = assetImport.FiscalCode;
                    document.DocumentDate = acquisitionDate;
                    document.RegisterDate = acquisitionDate;
                    document.Partner = partner;

                    _context.Add(document);

                    var invNoNew = 0;
                    invNoNew = int.Parse(assetImport.InvNo2) + i;



                    asset = new Model.Asset()
                    {

                        InvNo = assetImport.InvNo1.Trim() + invNoNew.ToString().Trim() + "/" + assetImport.InvNo3.Trim(),
                        Document = document,
                        Employee = employee,
                        Room = room,
                        AssetType = assetType,
                        PurchaseDate = acquisitionDate,
                        Quantity = 1,
                        Validated = true,
                        InvStateId = 1,
                        Administration = administration,
                        IsTemp = false

                    };

                    if (i == 0)
                    {
                        asset.InvNo = invNo;
                    }

                    bool assetStateBoolUpdate = (assetImport.AssetState != null && assetImport.AssetState.Length > 0) ? true : false;


                    if (assetStateBoolUpdate)
                    {
                        assetState = _context.Set<Model.AssetState>().Where(a => a.Code == "SALE").FirstOrDefault();
                        asset.AssetStateId = assetState.Id;
                        invState = _context.Set<Model.InvState>().Where(a => a.Code == "SALE").FirstOrDefault();
                        asset.InvStateId = invState.Id;
                    }

                    _context.Add(asset);

                    assetOp = new Model.AssetOp()
                    {
                        Asset = asset,
                        Document = document,
                        RoomInitial = room,
                        RoomFinal = room,
                        EmployeeInitial = employee,
                        EmployeeFinal = employee,
                        CostCenterInitial = costCenter,
                        CostCenterFinal = costCenter,
                        AssetCategoryInitial = assetCategory,
                        AssetCategoryFinal = assetCategory,
                        InvStateIdInitial = 1,
                        InvStateIdFinal = 1,
                        AdministrationInitial = administration,
                        AdministrationFinal = administration,
                        AccSystem = accSystem
                    };

                    if (assetStateBoolUpdate)
                    {

                        invState = _context.Set<Model.InvState>().Where(a => a.Code == "SALE").FirstOrDefault();
                        assetOp.InvStateIdInitial = invState.Id;
                        assetOp.InvStateIdFinal = invState.Id;
                        assetState = _context.Set<Model.AssetState>().Where(a => a.Code == "SALE").FirstOrDefault();
                        assetOp.AssetStateIdInitial = assetState.Id;
                        assetOp.AssetStateIdFinal = assetState.Id;
                    }

                    _context.Add(assetOp);

                    inventory = _context.Set<Model.Inventory>().OrderByDescending(j => j.Id).FirstOrDefault();

                    if (inventory != null)
                    {
                        inventoryAsset = new Model.InventoryAsset()
                        {
                            Asset = asset,
                            Inventory = inventory,
                            QInitial = 1,
                            QFinal = 0,
                            EmployeeInitial = employee,
                            RoomInitial = room,
                            CostCenterInitial = costCenter,
                            StateIdInitial = 1
                        };

                        if (assetStateBoolUpdate)
                        {

                            invState = _context.Set<Model.InvState>().Where(a => a.Code == "SALE").FirstOrDefault();
                            inventoryAsset.StateIdInitial = invState.Id;

                        }


                        _context.Add(inventoryAsset);
                    }

                    assetAc = new Model.AssetAC
                    {
                        AssetClassType = assetClassType,
                        Asset = asset,
                        AssetClass = assetClass,
                        AssetClassIn = assetClass
                    };


                    _context.Set<Model.AssetAC>().Add(assetAc);

                    var monthSum = 0;


                    assetDep = new Model.AssetDep
                    {
                        AccSystem = accSystem,
                        Asset = asset,
                        DepPeriod = (int)monthSum,
                        DepPeriodIn = (int)monthSum,
                        DepPeriodMonth = 1,
                        DepPeriodMonthIn = 0,
                        DepPeriodRem = (int)monthSum,
                        DepPeriodRemIn = (int)monthSum,
                        UsageStartDate = DateTime.Now,
                        ValueDep = assetImport.ValueInv,
                        ValueDepIn = 0,
                        ValueDepPU = assetImport.ValueInv,
                        ValueDepPUIn = 0,
                        ValueDepYTD = assetImport.ValueInv,
                        ValueDepYTDIn = 0,
                        ValueInv = assetImport.ValueInv,
                        ValueInvIn = assetImport.ValueInv,
                        ValueRem = assetImport.ValueRem,
                        ValueRemIn = assetImport.ValueRem
                    };

                    _context.Set<Model.AssetDep>().Add(assetDep);


                    assetInv = new Model.AssetInv
                    {
                        Asset = asset,
                        AllowLabel = true,
                        Barcode = asset.InvNo,
                        Info = String.Empty,
                        InvName = asset.Name,
                        InvNoOld = String.Empty,
                        Model = String.Empty,
                        Producer = String.Empty
                    };

                    _context.Set<Model.AssetInv>().Add(assetInv);

                    accMonth = _context.Set<Model.AccMonth>().Where(a => a.IsActive == true).FirstOrDefault();

                    assetDepMD = new Model.AssetDepMD
                    {
                        AccMonth = accMonth,
                        AccSystem = accSystem,
                        Asset = asset,
                        UsefulLife = (int)monthSum,
                        TotLifeInpPeriods = 1,
                        RemLifeInPeriods = 1,
                        AccumulDep = assetImport.ValueInv,
                        BkValFYStart = assetImport.ValueInv,
                        DepForYear = assetImport.ValueInv,
                        CurrentAPC = assetImport.ValueInv,
                        PosCap = assetImport.ValueRem
                    };

                    _context.Set<Model.AssetDepMD>().Add(assetDepMD);

                    assetAdmMD = new Model.AssetAdmMD
                    {
                        AccMonth = accMonth,
                        Asset = asset,
                        Administration = administration,
                        AssetCategory = assetCategory,
                        AssetState = assetState,
                        AssetType = assetType,
                        CostCenter = costCenter,
                        DepartmentId = null,
                        Employee = employee,
                        Room = room
                    };

                    _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);

                    //hasChanges = true;

                }
                //else
                //{
                //    assetCategoryPrev = _context.Set<Model.AssetCategory>().SingleOrDefault(a => a.Id == asset.AssetCategoryId);
                //    if (assetImport.AssetCategory.Trim() != assetCategoryPrev.Name.Trim()) hasChanges = true;
                //    assetOpPrev = _context.Set<Model.AssetOp>().Where(a => a.AssetId == asset.Id).OrderByDescending(a => a.AssetId).Take(1).SingleOrDefault();
                //    costCenterPrev = _context.Set<Model.CostCenter>().Where(a => a.Id == asset.CostCenterId).SingleOrDefault();
                //    if (assetImport.CostCenter.Trim() != costCenterPrev.Name.Trim()) hasChanges = true;
                //    hasChanges = asset.CostCenter.Name != assetImport.CostCenter  || asset.AssetCategory.Name != assetImport.AssetCategory  || asset.ValueInv != assetImport.ValueInv;
                //}

                asset.Name = Encoding.ASCII.GetString(Encoding.ASCII.GetBytes(assetImport.AssetName));
                asset.CostCenter = costCenter;
                asset.AssetCategory = assetCategory;
                asset.ValueInv = assetImport.ValueInv;
                asset.ValueRem = assetImport.ValueRem;
                asset.PurchaseDate = acquisitionDate;
                asset.SerialNumber = assetImport.SerialNumber != null ? assetImport.SerialNumber.Trim() : string.Empty;
                asset.AssetType = assetType;
                //asset.Room = room;
                bool assetStateBool = (assetImport.AssetState != null && assetImport.AssetState.Length > 0) ? true : false;


                if (assetStateBool)
                {
                    assetState = _context.Set<Model.AssetState>().Where(a => a.Code == "SALE").FirstOrDefault();
                    asset.AssetStateId = assetState.Id;
                    invState = _context.Set<Model.InvState>().Where(a => a.Code == "SALE").FirstOrDefault();
                    asset.InvStateId = invState.Id;
                }



                assetDep = _context.Set<Model.AssetDep>().Where(a => a.AssetId == asset.Id).FirstOrDefault();

                if (assetDep != null)
                {
                    assetDep.DepPeriodIn = 1;
                    assetDep.DepPeriodMonth = 1;
                    assetDep.DepPeriodMonthIn = 0;
                    assetDep.DepPeriodRem = 1;
                    assetDep.DepPeriodRemIn = 1;
                    assetDep.UsageStartDate = assetImport.PurchaseDate;
                    assetDep.ValueDep = assetImport.ValueRem;
                    assetDep.ValueDepIn = 0;
                    assetDep.ValueDepPU = assetImport.ValueInv;
                    assetDep.ValueDepPUIn = 0;
                    assetDep.ValueDepYTD = assetImport.ValueInv;
                    assetDep.ValueDepYTDIn = 0;
                    assetDep.ValueInv = assetImport.ValueInv;
                    assetDep.ValueInvIn = assetImport.ValueInv;
                    assetDep.ValueRem = assetImport.ValueRem;
                    assetDep.ValueRemIn = assetImport.ValueRem;

                    _context.Set<Model.AssetDep>().Update(assetDep);

                    accMonth = _context.Set<Model.AccMonth>().Where(a => a.IsActive == true).FirstOrDefault();
                    assetDepMD = _context.Set<Model.AssetDepMD>().Where(a => a.AssetId == asset.Id && a.AccMonthId == accMonth.Id).FirstOrDefault();

                    if (assetDepMD == null)
                    {
                        assetDepMD = new Model.AssetDepMD
                        {
                            AccMonth = accMonth,
                            AccSystem = accSystem,
                            Asset = asset,
                            UsefulLife = 1,
                            TotLifeInpPeriods = 1,
                            RemLifeInPeriods = 1,
                            AccumulDep = assetImport.ValueInv,
                            BkValFYStart = assetImport.ValueInv,
                            DepForYear = assetImport.ValueInv,
                            CurrentAPC = assetImport.ValueInv,
                            PosCap = assetImport.ValueRem
                        };

                        _context.Set<Model.AssetDepMD>().Add(assetDepMD);
                    }


                    assetAdmMD = _context.Set<Model.AssetAdmMD>().Where(a => a.AssetId == asset.Id && a.AccMonthId == accMonth.Id).FirstOrDefault();

                    if (assetAdmMD == null)
                    {
                        assetAdmMD = new Model.AssetAdmMD
                        {
                            AccMonth = accMonth,
                            Asset = asset,
                            Administration = administration,
                            AssetCategory = assetCategory,
                            AssetState = assetState,
                            AssetType = assetType,
                            CostCenter = costCenter,
                            DepartmentId = null,
                            Employee = employee,
                            Room = room
                        };

                        _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);
                    }


                }


                //if (hasChanges)
                //{
                //    asset.Name = assetImport.AssetName ?? "";
                //    asset.PurchaseDate = new DateTime(1899, 12, 30).Add(new TimeSpan(Convert.ToInt32(assetImport.PurchaseDate), 0, 0, 0));
                //    asset.SerialNumber = assetImport.SN;
                //    asset.ERPCode = "";
                //    asset.Quantity = assetImport.Quantity;
                //    asset.Validated = true;
                //    asset.ValueInv = assetImport.ValueInv;
                //    asset.CostCenter = costCenter;
                //    asset.AssetCategory = assetCategory;

                //    document = new Model.Document();
                //    document.Approved = true;
                //    document.DocumentTypeId = 1;
                //    document.DocNo1 = assetImport.DocNo1 ?? string.Empty;
                //    document.DocNo2 = assetImport.DocNo1 ?? string.Empty;
                //    document.DocumentDate = new DateTime(1899, 12, 30).Add(new TimeSpan(Convert.ToInt32(assetImport.PurchaseDate), 0, 0, 0));
                //    document.RegisterDate = new DateTime(1899, 12, 30).Add(new TimeSpan(Convert.ToInt32(assetImport.PurchaseDate), 0, 0, 0));

                //    document.Partner = partner;

                //    _context.Add(document);


                //    assetOp = new Model.AssetOp()
                //    {
                //        Asset = asset,
                //        Document = document,
                //        EmployeeFinal = employee,
                //        RoomFinal = room,
                //        InvStateIdInitial = 1,
                //        InvStateIdFinal = 1,
                //        EmployeeIdInitial = 625,
                //        EmployeeIdFinal = 625,
                //        RoomIdInitial = 51,
                //        RoomIdFinal = 51
                //    };

                //    if (assetOpPrev != null)
                //    {

                //        if (assetOpPrev.Asset.CostCenterId != null)
                //        {
                //            assetOp.CostCenterIdInitial = assetOpPrev.Asset.CostCenterId;
                //        }
                //        else
                //        {
                //            assetOp.CostCenterIdInitial = costCenter.Id;
                //        }
                //        //assetOp.CostCenterIdInitial = assetOpPrev.Asset.CostCenterId;
                //        assetOp.CostCenterIdFinal = costCenter.Id;

                //        if (assetOpPrev.Asset.AssetCategoryId != null)
                //        {
                //            assetOp.AssetCategoryIdInitial = assetOpPrev.Asset.AssetCategoryId;
                //        }
                //        else
                //        {
                //            assetOp.AssetCategoryIdInitial = assetCategory.Id;
                //        }


                //        //assetOp.AssetCategoryIdInitial = assetOpPrev.Asset.AssetCategoryId;
                //        assetOp.AssetCategoryIdFinal = assetCategory.Id;

                //        _context.Add(assetOp);

                //    }

                //    _context.SaveChanges();
                //}

                _context.SaveChanges();
            }

            return asset.Id;

        }

        public int AssetImportV4(AssetImportV4 assetImport)
        {
            Model.Asset asset = null;
            Model.AssetCategory assetCategory = null;
            Model.CostCenter costCenter = null;
            Model.Location location = null;
            Model.Document document = null;
            Model.InventoryAsset inventoryAsset = null;
            Model.AssetOp assetOp = null;
            Model.Inventory inventory = null;
            Model.Partner partner = null;
            Model.Region region = null;

            string assetTypeCode = "ASSET";
            string codeDefault = "_NSP";
            string documentTypeCode = "PURCHASE";
            string assetCategoryCode = "_NSP";
            string partnerFiscalCode = "_NSP";
            string locationCode = string.Empty;
            string locationName = string.Empty;
            string roomCode = string.Empty;
            string roomName = string.Empty;
            string costCenterCode = string.Empty;
            string costCenterName = string.Empty;
            string invNo = string.Empty;
            string nameDefault = "_Nespecificat";

            var assetType = _context.Set<Model.AssetType>().Where(a => a.Code == assetTypeCode).Single();
            var documentType = _context.Set<Model.DocumentType>().Where(d => d.Code == documentTypeCode).Single();

            var employee = _context.Set<Model.Employee>().Where(e => e.InternalCode == assetImport.EmployeeFullName).SingleOrDefault();
            if (employee == null)
            {
                string firstName = string.Empty;
                string lastName = string.Empty;

                string employeeFullName = assetImport.EmployeeFullName != null && assetImport.EmployeeFullName.Trim().Length > 0
                    ? assetImport.EmployeeFullName.Trim() : nameDefault;

                int spaceIndex = employeeFullName.IndexOf(" ");
                if (spaceIndex >= 0)
                {
                    firstName = employeeFullName.Substring(0, spaceIndex);
                    lastName = employeeFullName.Substring(spaceIndex + 1);
                }
                else
                {
                    firstName = employeeFullName;
                }

                employee = new Model.Employee();
                employee.InternalCode = assetImport.EmployeeFullName;
                employee.FirstName = firstName;
                employee.LastName = lastName;
                employee.IsDeleted = false;
                _context.Set<Model.Employee>().Add(employee);
            }


            assetCategory = _context.Set<Model.AssetCategory>().Where(a => a.Code == assetCategoryCode.Trim()).FirstOrDefault();
            if (assetCategory == null)
            {
                assetCategory = new Model.AssetCategory();
                assetCategory.Code = assetCategoryCode;
                assetCategory.Name = assetCategoryCode;
                assetCategory.IsDeleted = false;
                _context.Set<Model.AssetCategory>().Add(assetCategory);
            }

            costCenterCode = assetImport.LocationName.Trim();
            costCenterName = costCenterCode;
            costCenter = _context.Set<Model.CostCenter>().Where(a => a.Code == costCenterCode).FirstOrDefault();
            if (costCenter == null)
            {
                costCenter = new Model.CostCenter();
                costCenter.Code = costCenterCode;
                costCenter.Name = costCenterName;
                costCenter.IsDeleted = false;
                _context.Set<Model.CostCenter>().Add(costCenter);
            }
            region = _context.Set<Model.Region>().OrderBy(r => r.Id).FirstOrDefault();
            if (region == null)
            {
                region = new Model.Region();
                region.Code = codeDefault;
                region.Name = codeDefault;
                region.IsDeleted = false;
                _context.Set<Model.Region>().Add(region);
            }

            locationCode = assetImport.LocationName.Trim();
            locationName = locationCode;
            //location = _context.Set<Model.Location>().Where(a => (a.Code == locationCode) && (a.CostCenterId == costCenter.Id)).FirstOrDefault();
            //if (location == null)
            //{
            //    location = new Model.Location();
            //    location.Code = locationCode;
            //    location.CostCenter = costCenter;
            //    location.Name = locationName;
            //    location.IsDeleted = false;
            //    location.RegionId = region.Id;
            //    _context.Set<Model.Location>().Add(location);
            //}

            roomCode = costCenterCode;
            roomName = costCenterName;
            var room = _context.Set<Model.Room>().Where(r => ((r.Code == roomCode) && (r.LocationId == location.Id))).SingleOrDefault();
            if (room == null)
            {
                room = new Model.Room();
                room.Code = roomCode;
                room.Name = roomName;
                room.Location = location;
                room.IsDeleted = false;
                _context.Set<Model.Room>().Add(room);
            }

            partner = _context.Set<Model.Partner>().Where(a => a.FiscalCode == partnerFiscalCode.Trim()).FirstOrDefault();
            if (partner == null)
            {
                partner = new Model.Partner();
                partner.Name = partnerFiscalCode;
                partner.FiscalCode = partnerFiscalCode;
                partner.RegistryNumber = string.Empty;
                partner.IsDeleted = false;

                _context.Set<Model.Partner>().Add(partner);
            }


            invNo = assetImport.InvNo.Trim();
            asset = _context.Set<Model.Asset>().Where(a => a.InvNo == invNo).SingleOrDefault();


            if (asset == null) //nu exista in bd, asset nou
            {
                document = new Model.Document();
                document.Approved = true;
                document.DocumentType = documentType;
                document.DocNo1 = string.Empty;
                document.DocNo2 = string.Empty;
                document.DocumentDate = DateTime.Now;
                document.RegisterDate = DateTime.Now;
                document.Partner = partner;

                _context.Add(document);

                asset = new Model.Asset()
                {
                    InvNo = invNo,
                    Document = document,
                    Employee = employee,
                    Room = room,
                    AssetTypeId = assetType.Id,
                    PurchaseDate = DateTime.Now,
                    Quantity = assetImport.Quantity,
                    Validated = true
                };

                _context.Add(asset);

                assetOp = new Model.AssetOp()
                {
                    Asset = asset,
                    Document = document,
                    RoomInitial = room,
                    RoomFinal = room,
                    EmployeeInitial = employee,
                    EmployeeFinal = employee,
                    CostCenterInitial = costCenter,
                    CostCenterFinal = costCenter,
                    AssetCategoryIdInitial = null,
                    AssetCategoryFinal = assetCategory
                };

                _context.Add(assetOp);

                inventory = _context.Set<Model.Inventory>().OrderByDescending(i => i.Id).FirstOrDefault();

                if (inventory != null)
                {
                    inventoryAsset = new Model.InventoryAsset()
                    {
                        Asset = asset,
                        Inventory = inventory,
                        QInitial = assetImport.Quantity,
                        QFinal = assetImport.Quantity,
                        EmployeeInitial = employee,
                        RoomInitial = room,
                        CostCenterInitial = costCenter
                    };

                    _context.Add(inventoryAsset);
                }

                //hasChanges = true;
            }
            //else
            //{
            //    assetCategoryPrev = _context.Set<Model.AssetCategory>().SingleOrDefault(a => a.Id == asset.AssetCategoryId);
            //    if (assetImport.AssetCategory.Trim() != assetCategoryPrev.Name.Trim()) hasChanges = true;
            //    assetOpPrev = _context.Set<Model.AssetOp>().Where(a => a.AssetId == asset.Id).OrderByDescending(a => a.AssetId).Take(1).SingleOrDefault();
            //    costCenterPrev = _context.Set<Model.CostCenter>().Where(a => a.Id == asset.CostCenterId).SingleOrDefault();
            //    if (assetImport.CostCenter.Trim() != costCenterPrev.Name.Trim()) hasChanges = true;
            //    hasChanges = asset.CostCenter.Name != assetImport.CostCenter  || asset.AssetCategory.Name != assetImport.AssetCategory  || asset.ValueInv != assetImport.ValueInv;
            //}

            asset.Name = Encoding.ASCII.GetString(Encoding.ASCII.GetBytes(assetImport.AssetName));
            asset.CostCenter = costCenter;
            asset.AssetCategory = assetCategory;
            asset.ValueInv = 0;
            asset.PurchaseDate = DateTime.Now;
            asset.SerialNumber = assetImport.SerialNumber != null ? assetImport.SerialNumber.Trim() : string.Empty;

            //if (hasChanges)
            //{
            //    asset.Name = assetImport.AssetName ?? "";
            //    asset.PurchaseDate = new DateTime(1899, 12, 30).Add(new TimeSpan(Convert.ToInt32(assetImport.PurchaseDate), 0, 0, 0));
            //    asset.SerialNumber = assetImport.SN;
            //    asset.ERPCode = "";
            //    asset.Quantity = assetImport.Quantity;
            //    asset.Validated = true;
            //    asset.ValueInv = assetImport.ValueInv;
            //    asset.CostCenter = costCenter;
            //    asset.AssetCategory = assetCategory;

            //    document = new Model.Document();
            //    document.Approved = true;
            //    document.DocumentTypeId = 1;
            //    document.DocNo1 = assetImport.DocNo1 ?? string.Empty;
            //    document.DocNo2 = assetImport.DocNo1 ?? string.Empty;
            //    document.DocumentDate = new DateTime(1899, 12, 30).Add(new TimeSpan(Convert.ToInt32(assetImport.PurchaseDate), 0, 0, 0));
            //    document.RegisterDate = new DateTime(1899, 12, 30).Add(new TimeSpan(Convert.ToInt32(assetImport.PurchaseDate), 0, 0, 0));

            //    document.Partner = partner;

            //    _context.Add(document);


            //    assetOp = new Model.AssetOp()
            //    {
            //        Asset = asset,
            //        Document = document,
            //        EmployeeFinal = employee,
            //        RoomFinal = room,
            //        InvStateIdInitial = 1,
            //        InvStateIdFinal = 1,
            //        EmployeeIdInitial = 625,
            //        EmployeeIdFinal = 625,
            //        RoomIdInitial = 51,
            //        RoomIdFinal = 51
            //    };

            //    if (assetOpPrev != null)
            //    {

            //        if (assetOpPrev.Asset.CostCenterId != null)
            //        {
            //            assetOp.CostCenterIdInitial = assetOpPrev.Asset.CostCenterId;
            //        }
            //        else
            //        {
            //            assetOp.CostCenterIdInitial = costCenter.Id;
            //        }
            //        //assetOp.CostCenterIdInitial = assetOpPrev.Asset.CostCenterId;
            //        assetOp.CostCenterIdFinal = costCenter.Id;

            //        if (assetOpPrev.Asset.AssetCategoryId != null)
            //        {
            //            assetOp.AssetCategoryIdInitial = assetOpPrev.Asset.AssetCategoryId;
            //        }
            //        else
            //        {
            //            assetOp.AssetCategoryIdInitial = assetCategory.Id;
            //        }


            //        //assetOp.AssetCategoryIdInitial = assetOpPrev.Asset.AssetCategoryId;
            //        assetOp.AssetCategoryIdFinal = assetCategory.Id;

            //        _context.Add(assetOp);

            //    }

            //    _context.SaveChanges();
            //}

            _context.SaveChanges();
            return asset.Id;
        }

        public int AssetImportV5(AssetImportV5 assetImport)
        {
            Model.Asset asset = null;
            Model.AssetCategory assetCategory = null;
            Model.CostCenter costCenter = null;
            Model.Location location = null;
            Model.Document document = null;
            Model.InventoryAsset inventoryAsset = null;
            Model.AssetOp assetOp = null;
            Model.Inventory inventory = null;
            Model.Partner partner = null;
            Model.Region region = null;
            Model.InvState invState = null;
            Model.AdmCenter admCenter = null;

            string assetTypeCode = "ASSET";
            string codeDefault = "_NSP";
            string documentTypeCode = "PURCHASE";
            string assetCategoryCode = "_NSP";
            string partnerFiscalCode = "_NSP";
            string locationCode = string.Empty;
            string locationName = string.Empty;
            string roomCode = string.Empty;
            string roomName = string.Empty;
            string costCenterCode = string.Empty;
            string costCenterName = string.Empty;
            string invNo = string.Empty;
            string nameDefault = "_Nespecificat";

            var assetType = _context.Set<Model.AssetType>().Where(a => a.Code == assetTypeCode).Single();
            var documentType = _context.Set<Model.DocumentType>().Where(d => d.Code == documentTypeCode).Single();




            assetCategory = _context.Set<Model.AssetCategory>().Where(a => a.Code == assetImport.AssetCategory.Trim()).FirstOrDefault();
            if (assetCategory == null)
            {
                assetCategory = new Model.AssetCategory();
                assetCategory.Code = assetImport.AssetCategory.Trim();
                assetCategory.Name = assetImport.AssetCategory.Trim();
                assetCategory.IsDeleted = false;
                _context.Set<Model.AssetCategory>().Add(assetCategory);
            }

            invState = _context.Set<Model.InvState>().Where(a => a.Name == assetImport.AssetState.Trim()).FirstOrDefault();
            if (invState == null)
            {
                invState = new Model.InvState();
                invState.Code = assetImport.AssetState.Trim();
                invState.Name = assetImport.AssetState.Trim();
                invState.IsDeleted = false;
                _context.Set<Model.InvState>().Add(invState);
            }

            costCenterCode = assetImport.CostCenterName.Trim();
            costCenterName = costCenterCode;
            costCenter = _context.Set<Model.CostCenter>().Where(a => a.Code == costCenterCode).FirstOrDefault();
            if (costCenter == null)
            {
                costCenter = new Model.CostCenter();
                costCenter.Code = costCenterCode;
                costCenter.Name = costCenterName;
                costCenter.IsDeleted = false;
                _context.Set<Model.CostCenter>().Add(costCenter);
            }

            var employee = _context.Set<Model.Employee>().Where(e => e.InternalCode == assetImport.EmployeeFullName).SingleOrDefault();
            if (employee == null)
            {
                string firstName = string.Empty;
                string lastName = string.Empty;

                string employeeFullName = assetImport.EmployeeFullName != null && assetImport.EmployeeFullName.Trim().Length > 0
                    ? assetImport.EmployeeFullName.Trim() : nameDefault;

                int spaceIndex = employeeFullName.IndexOf(" ");
                if (spaceIndex >= 0)
                {
                    firstName = employeeFullName.Substring(0, spaceIndex);
                    lastName = employeeFullName.Substring(spaceIndex + 1);
                }
                else
                {
                    firstName = employeeFullName;
                }

                employee = new Model.Employee();
                employee.InternalCode = assetImport.EmployeeFullName;
                employee.CostCenter = costCenter;
                employee.FirstName = firstName;
                employee.LastName = lastName;
                employee.IsDeleted = false;
                _context.Set<Model.Employee>().Add(employee);
            }

            region = _context.Set<Model.Region>().Where(a => a.Code == assetImport.RegionName.Trim()).FirstOrDefault();
            if (region == null)
            {
                region = new Model.Region();
                region.Code = assetImport.RegionName.Trim();
                region.Name = assetImport.RegionName.Trim();
                region.IsDeleted = false;
                _context.Set<Model.Region>().Add(region);
            }

            admCenter = _context.Set<Model.AdmCenter>().Where(a => a.Code == assetImport.RegionName.Trim()).FirstOrDefault();
            if (admCenter == null)
            {
                admCenter = new Model.AdmCenter();
                admCenter.Code = assetImport.RegionName.Trim();
                admCenter.Name = assetImport.RegionName.Trim();
                admCenter.IsDeleted = false;
                _context.Set<Model.AdmCenter>().Add(admCenter);
            }

            locationCode = assetImport.LocationName.Trim();
            locationName = locationCode;
            //location = _context.Set<Model.Location>().Where(a => (a.Code == locationCode) && (a.CostCenterId == costCenter.Id)).FirstOrDefault();
            //if (location == null)
            //{
            //    location = new Model.Location();
            //    location.Code = locationCode;
            //    location.CostCenter = costCenter;
            //    location.Name = locationName;
            //    location.IsDeleted = false;
            //    location.RegionId = region.Id;
            //    _context.Set<Model.Location>().Add(location);
            //}

            roomCode = costCenterCode;
            roomName = costCenterName;
            var room = _context.Set<Model.Room>().Where(r => ((r.Code == roomCode) && (r.LocationId == location.Id))).SingleOrDefault();
            if (room == null)
            {
                room = new Model.Room();
                room.Code = roomCode;
                room.Name = roomName;
                room.Location = location;
                room.IsDeleted = false;
                _context.Set<Model.Room>().Add(room);
            }

            partner = _context.Set<Model.Partner>().Where(a => a.FiscalCode == partnerFiscalCode.Trim()).FirstOrDefault();
            if (partner == null)
            {
                partner = new Model.Partner();
                partner.Name = partnerFiscalCode;
                partner.FiscalCode = partnerFiscalCode;
                partner.RegistryNumber = string.Empty;
                partner.IsDeleted = false;

                _context.Set<Model.Partner>().Add(partner);
            }


            invNo = assetImport.InvNo.Trim();
            asset = _context.Set<Model.Asset>().Where(a => a.InvNo == invNo).SingleOrDefault();


            if (asset == null) //nu exista in bd, asset nou
            {
                document = new Model.Document();
                document.Approved = true;
                document.DocumentType = documentType;
                document.DocNo1 = string.Empty;
                document.DocNo2 = string.Empty;
                document.DocumentDate = DateTime.Now;
                document.RegisterDate = DateTime.Now;
                document.Partner = partner;

                _context.Add(document);

                asset = new Model.Asset()
                {
                    InvNo = invNo,
                    Document = document,
                    Employee = employee,
                    Room = room,
                    AssetTypeId = assetType.Id,
                    PurchaseDate = DateTime.Now,
                    Quantity = 1,
                    Validated = true,
                    InvState = invState
                };

                _context.Add(asset);

                assetOp = new Model.AssetOp()
                {
                    Asset = asset,
                    Document = document,
                    RoomInitial = room,
                    RoomFinal = room,
                    EmployeeInitial = employee,
                    EmployeeFinal = employee,
                    CostCenterInitial = costCenter,
                    CostCenterFinal = costCenter,
                    AssetCategoryIdInitial = null,
                    AssetCategoryFinal = assetCategory
                };

                _context.Add(assetOp);

                inventory = _context.Set<Model.Inventory>().OrderByDescending(i => i.Id).FirstOrDefault();

                if (inventory != null)
                {
                    inventoryAsset = new Model.InventoryAsset()
                    {
                        Asset = asset,
                        Inventory = inventory,
                        QInitial = 1,
                        QFinal = 1,
                        EmployeeInitial = employee,
                        RoomInitial = room,
                        CostCenterInitial = costCenter
                    };

                    _context.Add(inventoryAsset);
                }

                //hasChanges = true;
            }
            //else
            //{
            //    assetCategoryPrev = _context.Set<Model.AssetCategory>().SingleOrDefault(a => a.Id == asset.AssetCategoryId);
            //    if (assetImport.AssetCategory.Trim() != assetCategoryPrev.Name.Trim()) hasChanges = true;
            //    assetOpPrev = _context.Set<Model.AssetOp>().Where(a => a.AssetId == asset.Id).OrderByDescending(a => a.AssetId).Take(1).SingleOrDefault();
            //    costCenterPrev = _context.Set<Model.CostCenter>().Where(a => a.Id == asset.CostCenterId).SingleOrDefault();
            //    if (assetImport.CostCenter.Trim() != costCenterPrev.Name.Trim()) hasChanges = true;
            //    hasChanges = asset.CostCenter.Name != assetImport.CostCenter  || asset.AssetCategory.Name != assetImport.AssetCategory  || asset.ValueInv != assetImport.ValueInv;
            //}

            asset.Name = Encoding.ASCII.GetString(Encoding.ASCII.GetBytes(assetImport.AssetName));
            asset.CostCenter = costCenter;
            asset.AssetCategory = assetCategory;
            asset.ValueInv = 0;
            asset.PurchaseDate = DateTime.Now;
            asset.SerialNumber = assetImport.SerialNumber != null ? assetImport.SerialNumber.Trim() : string.Empty;

            //if (hasChanges)
            //{
            //    asset.Name = assetImport.AssetName ?? "";
            //    asset.PurchaseDate = new DateTime(1899, 12, 30).Add(new TimeSpan(Convert.ToInt32(assetImport.PurchaseDate), 0, 0, 0));
            //    asset.SerialNumber = assetImport.SN;
            //    asset.ERPCode = "";
            //    asset.Quantity = assetImport.Quantity;
            //    asset.Validated = true;
            //    asset.ValueInv = assetImport.ValueInv;
            //    asset.CostCenter = costCenter;
            //    asset.AssetCategory = assetCategory;

            //    document = new Model.Document();
            //    document.Approved = true;
            //    document.DocumentTypeId = 1;
            //    document.DocNo1 = assetImport.DocNo1 ?? string.Empty;
            //    document.DocNo2 = assetImport.DocNo1 ?? string.Empty;
            //    document.DocumentDate = new DateTime(1899, 12, 30).Add(new TimeSpan(Convert.ToInt32(assetImport.PurchaseDate), 0, 0, 0));
            //    document.RegisterDate = new DateTime(1899, 12, 30).Add(new TimeSpan(Convert.ToInt32(assetImport.PurchaseDate), 0, 0, 0));

            //    document.Partner = partner;

            //    _context.Add(document);


            //    assetOp = new Model.AssetOp()
            //    {
            //        Asset = asset,
            //        Document = document,
            //        EmployeeFinal = employee,
            //        RoomFinal = room,
            //        InvStateIdInitial = 1,
            //        InvStateIdFinal = 1,
            //        EmployeeIdInitial = 625,
            //        EmployeeIdFinal = 625,
            //        RoomIdInitial = 51,
            //        RoomIdFinal = 51
            //    };

            //    if (assetOpPrev != null)
            //    {

            //        if (assetOpPrev.Asset.CostCenterId != null)
            //        {
            //            assetOp.CostCenterIdInitial = assetOpPrev.Asset.CostCenterId;
            //        }
            //        else
            //        {
            //            assetOp.CostCenterIdInitial = costCenter.Id;
            //        }
            //        //assetOp.CostCenterIdInitial = assetOpPrev.Asset.CostCenterId;
            //        assetOp.CostCenterIdFinal = costCenter.Id;

            //        if (assetOpPrev.Asset.AssetCategoryId != null)
            //        {
            //            assetOp.AssetCategoryIdInitial = assetOpPrev.Asset.AssetCategoryId;
            //        }
            //        else
            //        {
            //            assetOp.AssetCategoryIdInitial = assetCategory.Id;
            //        }


            //        //assetOp.AssetCategoryIdInitial = assetOpPrev.Asset.AssetCategoryId;
            //        assetOp.AssetCategoryIdFinal = assetCategory.Id;

            //        _context.Add(assetOp);

            //    }

            //    _context.SaveChanges();
            //}

            _context.SaveChanges();
            return asset.Id;
        }

        //public int AssetImportV1(AssetImportV1 assetImport)
        //{
        //    Model.Asset asset = null;
        //    Model.CostCenter costCenter = null;
        //    Model.Room room = null;
        //    Model.Employee employee = null;
        //    Model.InventoryAsset inventoryAsset = null;
        //    Model.Inventory inventory = null;
        //    Model.Uom uom = null;
        //    Model.Location location = null;
        //    Model.AdmCenter admCenter;
        //    bool saveAsset = false;
        //    bool saveInventoryAsset = false;

        //    string codeDefault = "_NSP";
        //    string nameDefault = "_Nespecificat";

        //    string costCenterCode = assetImport.CostCenterCode != null && assetImport.CostCenterCode.Trim().Length > 0
        //        ? assetImport.CostCenterCode.Trim() : codeDefault;
        //    costCenter = _context.Set<Model.CostCenter>().Where(a => a.Code == costCenterCode).FirstOrDefault();
        //    if (costCenter == null)
        //    {
        //        costCenter = new Model.CostCenter();
        //        costCenter.Code = costCenterCode;
        //        costCenter.Name = costCenterCode;
        //        costCenter.IsDeleted = false;
        //        _context.Set<Model.CostCenter>().Add(costCenter);
        //    }

        //    string admCenterName = assetImport.AdmCenterName != null && assetImport.AdmCenterName.Length > 0
        //        ? assetImport.AdmCenterName : string.Empty;
        //    admCenterName = admCenterName.ToUpper().Replace("SUCURSALA", "").Trim();
        //    if (admCenterName.Length == 0) admCenterName = nameDefault;
        //    admCenter = _context.Set<Model.AdmCenter>().Where(a => a.Name == admCenterName).FirstOrDefault();

        //    string locationName = assetImport.LocationName != null && assetImport.LocationName.Trim().Length > 0
        //        ? assetImport.LocationName.Trim() : nameDefault;
        //    string roomName = assetImport.RoomName != null && assetImport.RoomName.Trim().Length > 0
        //        ? assetImport.RoomName.Trim() : nameDefault;

        //    if (admCenter == null)
        //    {
        //        admCenter = new Model.AdmCenter();
        //        admCenter.Code = string.Empty;
        //        admCenter.Name = admCenterName;
        //        admCenter.IsDeleted = false;
        //        //admCenter.CompanyId = 1;

        //        _context.Set<Model.AdmCenter>().Add(admCenter);
        //    }
        //    else
        //    {
        //        location = _context.Set<Model.Location>().Where(l => l.Name == locationName && l.AdmCenterId == admCenter.Id).FirstOrDefault();
        //    }

        //    if (location == null)
        //    {
        //        location = new Model.Location();
        //        location.Code = "";
        //        location.Name = locationName;
        //        location.IsDeleted = false;
        //        location.AdmCenter = admCenter;
        //        _context.Set<Model.Location>().Add(location);
        //    }
        //    else
        //    {
        //        room = _context.Set<Model.Room>().Where(r => r.LocationId == location.Id && r.Name == roomName).FirstOrDefault();
        //    }

        //    if (room == null)
        //    {
        //        room = new Model.Room();
        //        room.Code = "";
        //        room.Name = roomName;
        //        room.Location = location;
        //        room.IsDeleted = false;
        //        _context.Set<Model.Room>().Add(room);
        //    }

        //    string internalCode = assetImport.InternalCode != null && assetImport.InternalCode.Trim().Length > 0
        //        ? assetImport.InternalCode.Trim() : codeDefault;
        //    employee = _context.Set<Model.Employee>().Where(e => e.InternalCode == internalCode).FirstOrDefault();

        //    if (employee == null)
        //    {
        //        employee = new Model.Employee();

        //        string employeeFullName = assetImport.EmployeeFullName != null && assetImport.EmployeeFullName.Trim().Length > 0
        //            ? assetImport.EmployeeFullName.Trim() : nameDefault;

        //        string firstName = string.Empty;
        //        string lastName = string.Empty;

        //        int spaceIndex = employeeFullName.IndexOf(" ");
        //        if (spaceIndex >= 0)
        //        {
        //            firstName = employeeFullName.Substring(0, spaceIndex);
        //            lastName = employeeFullName.Substring(spaceIndex + 1);
        //        }
        //        else
        //        {
        //            firstName = employeeFullName;
        //        }

        //        employee.InternalCode = internalCode;
        //        employee.FirstName = firstName;
        //        employee.LastName = lastName;
        //        employee.IsDeleted = false;

        //        _context.Set<Model.Employee>().Add(employee);
        //    }

        //    string uomCode = assetImport.Uom != null && assetImport.Uom.Trim().Length > 0
        //        ? assetImport.Uom.Trim() : codeDefault;
        //    uom = _context.Set<Model.Uom>().Where(a => a.Code == uomCode).FirstOrDefault();

        //    if (uom == null)
        //    {
        //        uom = new Model.Uom();
        //        uom.Code = uomCode;
        //        uom.Name = uomCode;
        //        uom.IsDeleted = false;
        //        _context.Set<Model.Uom>().Add(uom);
        //    }

        //    bool custody = ((assetImport.Custody != null) && (assetImport.Custody.Trim().ToUpper() == "IN CUSTODIE")) ? true : false;
        //    string purchaseDate = (assetImport.PurchaseDate.Length == 8) ? assetImport.PurchaseDate : ("0" + assetImport.PurchaseDate);
        //    int day = int.Parse(purchaseDate.Substring(0, 2));
        //    int month = int.Parse(purchaseDate.Substring(2, 2));
        //    int year = int.Parse(purchaseDate.Substring(4, 4));

        //    inventory = _context.Set<Model.Inventory>().Where(i => !i.IsDeleted && i.Active).OrderByDescending(i => i.Id).FirstOrDefault();
        //    asset = _context.Set<Model.Asset>().Where(a => a.InvNo == assetImport.InvNo).SingleOrDefault();

        //    if (asset == null) //nu exista in bd, asset nou
        //    {
        //        asset = new Model.Asset()
        //        {
        //            InvNo = assetImport.InvNo
        //        };

        //        _context.Add(asset);

        //        inventoryAsset = new Model.InventoryAsset()
        //        {
        //            Asset = asset,
        //            Inventory = inventory
        //        };
        //        _context.Add(inventoryAsset);

        //        saveAsset = true;
        //        saveInventoryAsset = true;
        //    }
        //    else
        //    {
        //        saveAsset = (asset.Name != assetImport.Name) || (asset.SerialNumber != assetImport.SerialNumber) || (asset.ValueInv != assetImport.ValueInv)
        //            || (asset.ValueInv - asset.ValueRem != assetImport.ValueDep) || (asset.EmployeeId != employee.Id) || (asset.CostCenterId != costCenter.Id)
        //            || (asset.RoomId != room.Id) || (asset.UomId != uom.Id);

        //        inventoryAsset = _context.Set<Model.InventoryAsset>().Where(a => ((a.InventoryId == inventory.Id) && (a.AssetId == asset.Id))).SingleOrDefault();

        //        if (inventoryAsset == null)
        //        {
        //            inventoryAsset = new Model.InventoryAsset()
        //            {
        //                Asset = asset,
        //                Inventory = inventory
        //            };
        //            _context.Add(inventoryAsset);
        //            saveInventoryAsset = true;
        //        }
        //        else
        //        {
        //            saveInventoryAsset = saveAsset;
        //        }
        //    }

        //    if (saveAsset)
        //    {
        //        asset.Name = assetImport.Name;
        //        asset.PurchaseDate = new DateTime(year, month, day);
        //        asset.CostCenter = costCenter;
        //        asset.Room = room;
        //        asset.Employee = employee;
        //        //AssetTypeId = 2,
        //        asset.ValueInv = assetImport.ValueInv;
        //        asset.ValueRem = assetImport.ValueInv - assetImport.ValueDep;
        //        //AssetCategoryId = 18,
        //        asset.UomId = uom.Id;
        //        //InvStateId = 1,
        //        asset.Quantity = assetImport.Quantity;
        //        asset.Custody = custody;

        //        asset.SerialNumber = assetImport.SerialNumber;
        //        asset.ERPCode = "";
        //        asset.Validated = true;
        //    }

        //    if (saveInventoryAsset)
        //    {
        //        inventoryAsset.QInitial = assetImport.Quantity;
        //        inventoryAsset.QFinal = assetImport.Quantity;
        //        inventoryAsset.EmployeeInitial = employee;
        //        inventoryAsset.EmployeeFinal = null;
        //        inventoryAsset.RoomInitial = room;
        //        inventoryAsset.RoomFinal = null;
        //        //StateIdFinal = 1;
        //        inventoryAsset.SerialNumber = assetImport.SerialNumber;
        //    }

        //    _context.SaveChanges();

        //    return asset.Id;
        //}

        public string AssetImportV6(AssetImportV6 assetImport, out string invNoUpdated)
        {
            Model.Asset asset = null;
            Model.AssetCategory assetCategory = null;
            Model.CostCenter costCenter = null;
            Model.Location location = null;
            Model.Room room = null;
            Model.Document document = null;
            Model.InventoryAsset inventoryAsset = null;
            Model.AssetOp assetOp = null;
            Model.Inventory inventory = null;
            Model.Partner partner = null;
            Model.Region region = null;
            Model.AdmCenter admCenter = null;
            Model.AssetState assetState = null;
            Model.InvState invState = null;
            Model.AssetType assetType = null;
            Model.Uom uom = null;
            Model.AccSystem accSystem = null;
            Model.Administration administration = null;
            Model.AssetClass assetClass = null;
            Model.AssetClassType assetClassType = null;
            Model.AssetAC assetAc = null;
            Model.AssetDep assetDep = null;
            Model.AssetDepMD assetDepMD = null;
            Model.AccMonth accMonth = null;
            Model.AssetAdmMD assetAdmMD = null;
            Model.AssetInv assetInv = null;


            string assetTypeCode = "ASSET";
            string codeDefault = "NSP";
            string nameDefault = "Nespecificat";
            string documentTypeCode = "PURCHASE";
            string locationCode = string.Empty;
            string locationName = string.Empty;
            string roomCode = string.Empty;
            string roomName = string.Empty;
            string costCenterCode = string.Empty;
            string costCenterName = string.Empty;
            string invNo = string.Empty;
            string disposition = string.Empty;
            string assetClassTypeDefault = "RAS";
            string assetClassDefault = "RAS";



            assetClassType = _context.Set<Model.AssetClassType>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();

            if (assetClassType == null)
            {
                assetClassType = new Model.AssetClassType
                {
                    Code = assetClassTypeDefault,
                    Name = assetClassTypeDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AssetClassType>().Add(assetClassType);
            }

            assetClass = _context.Set<Model.AssetClass>().Where(a => (a.Code == assetImport.AssetClass.Trim())).FirstOrDefault();

            if (assetClass == null)
            {
                assetClass = new Model.AssetClass
                {
                    Code = assetImport.AssetClass.Trim(),
                    Name = assetImport.AssetClass.Trim(),
                    IsDeleted = false,
                    AssetClassType = assetClassType
                };
                _context.Set<Model.AssetClass>().Add(assetClass);
            }

            accSystem = _context.Set<Model.AccSystem>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();

            if (accSystem == null)
            {
                accSystem = new Model.AccSystem
                {
                    AssetClassType = assetClassType,
                    Code = assetClassTypeDefault,
                    Name = assetClassTypeDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AccSystem>().Add(accSystem);
            }

            administration = _context.Set<Model.Administration>().Where(a => (a.Code == assetClassDefault.Trim())).FirstOrDefault();

            if (administration == null)
            {
                administration = new Model.Administration
                {
                    Code = assetClassDefault.Trim(),
                    Name = assetClassDefault.Trim(),
                    IsDeleted = false
                };

                _context.Set<Model.Administration>().Add(administration);
            }

            assetType = _context.Set<Model.AssetType>().Where(a => a.Code == assetTypeCode.Trim()).SingleOrDefault();

            if (assetType == null)
            {
                assetType = new Model.AssetType
                {
                    Code = assetTypeCode.Trim(),
                    Name = assetTypeCode.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AssetType>().Add(assetType);
            }
            var documentType = _context.Set<Model.DocumentType>().Where(d => d.Code == documentTypeCode).Single();

            var employee = _context.Set<Model.Employee>().Where(e => e.InternalCode == assetImport.InternalCode).SingleOrDefault();

            if (employee == null)
            {
                employee = new Model.Employee
                {
                    InternalCode = assetImport.InternalCode,
                    FirstName = assetImport.EmployeeName,
                    LastName = assetImport.EmployeeName,
                    IsDeleted = false
                };
                _context.Set<Model.Employee>().Add(employee);
            }

            assetCategory = _context.Set<Model.AssetCategory>().Where(a => a.Code == assetImport.AssetCategory.Trim()).FirstOrDefault();
            if (assetCategory == null)
            {
                assetCategory = new Model.AssetCategory
                {
                    Code = assetImport.AssetCategory,
                    Name = assetImport.AssetCategory,
                    IsDeleted = false
                };
                _context.Set<Model.AssetCategory>().Add(assetCategory);
            }

            uom = _context.Set<Model.Uom>().Where(a => a.Code == assetImport.Uom.Trim()).FirstOrDefault();
            if (uom == null)
            {
                uom = new Model.Uom
                {
                    Code = assetImport.Uom,
                    Name = assetImport.Uom,
                    IsDeleted = false
                };
                _context.Set<Model.Uom>().Add(uom);
            }

            admCenter = _context.Set<Model.AdmCenter>().Where(adm => adm.Name == assetImport.AdmCenter.Trim()).FirstOrDefault();

            if (admCenter == null)
            {
                admCenter = new Model.AdmCenter
                {
                    Code = assetImport.AdmCenter.Trim(),
                    Name = assetImport.AdmCenter.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AdmCenter>().Add(admCenter);
            }

            costCenterCode = assetImport.CostCenter.Trim();
            costCenterName = costCenterCode;
            costCenter = _context.Set<Model.CostCenter>().Where(a => a.Code == costCenterCode && a.AdmCenterId == admCenter.Id).FirstOrDefault();
            if (costCenter == null)
            {
                costCenter = new Model.CostCenter
                {
                    Code = costCenterCode,
                    Name = costCenterName,
                    IsDeleted = false
                };
                _context.Set<Model.CostCenter>().Add(costCenter);
            }

            region = _context.Set<Model.Region>().OrderBy(r => r.Id).FirstOrDefault();

            if (region == null)
            {
                region = new Model.Region
                {
                    Code = codeDefault,
                    Name = codeDefault,
                    IsDeleted = false
                };
                _context.Set<Model.Region>().Add(region);
            }




            location = _context.Set<Model.Location>().Where(a => a.Code == codeDefault).FirstOrDefault();
            if (location == null)
            {
                location = new Model.Location
                {
                    Code = codeDefault,
                    Name = nameDefault,
                    IsDeleted = false
                };
                _context.Set<Model.Location>().Add(location);
            }

            room = _context.Set<Model.Room>().Where(a => a.Code == codeDefault).FirstOrDefault();

            if (room == null)
            {
                room = new Model.Room
                {
                    Code = codeDefault,
                    Name = nameDefault,
                    IsDeleted = false
                };
                _context.Set<Model.Room>().Add(room);
            }

            invState = _context.Set<Model.InvState>().Where(a => a.Name == assetImport.AssetState.Trim()).FirstOrDefault();

            if (invState == null)
            {
                invState = new Model.InvState
                {
                    Code = assetImport.AssetState.Trim(),
                    Name = assetImport.AssetState.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.InvState>().Add(invState);
            }

            assetState = _context.Set<Model.AssetState>().Where(a => a.Name == assetImport.AssetState.Trim()).FirstOrDefault();

            if (assetState == null)
            {
                assetState = new Model.AssetState
                {
                    Code = assetImport.AssetState.Trim(),
                    Name = assetImport.AssetState.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AssetState>().Add(assetState);
            }


            partner = _context.Set<Model.Partner>().Where(a => a.FiscalCode == assetImport.FiscalCode.Trim()).FirstOrDefault();
            if (partner == null)
            {
                partner = new Model.Partner();
                partner.Name = assetImport.SupplierName;
                partner.FiscalCode = assetImport.FiscalCode;
                partner.RegistryNumber = string.Empty;
                partner.IsDeleted = false;

                _context.Set<Model.Partner>().Add(partner);
            }

            asset = _context.Set<Model.Asset>().Where(a => a.InvNo == assetImport.InvNo.Trim()).FirstOrDefault();

            if (asset == null) //nu exista in bd, asset nou
            {


                document = new Model.Document
                {
                    Approved = true,
                    DocumentType = documentType,
                    DocNo1 = string.Empty,
                    DocNo2 = assetImport.FiscalCode,
                    DocumentDate = assetImport.PurchaseDate != null ? assetImport.PurchaseDate.Value : DateTime.Now,
                    RegisterDate = assetImport.PurchaseDate != null ? assetImport.PurchaseDate.Value : DateTime.Now,
                    Partner = partner
                };

                _context.Add(document);


                asset = new Model.Asset()
                {

                    InvNo = assetImport.InvNo.Trim(),
                    Document = document,
                    Employee = employee,
                    Room = room,
                    AssetType = assetType,
                    PurchaseDate = assetImport.PurchaseDate,
                    Quantity = assetImport.Quantity,
                    Validated = true,
                    InvStateId = invState.Id,
                    Administration = administration,
                    AssetStateId = assetState.Id,
                    UomId = uom.Id

                };


                _context.Add(asset);

                assetOp = new Model.AssetOp()
                {
                    Asset = asset,
                    Document = document,
                    RoomInitial = room,
                    RoomFinal = room,
                    EmployeeInitial = employee,
                    EmployeeFinal = employee,
                    CostCenterInitial = costCenter,
                    CostCenterFinal = costCenter,
                    AssetCategoryInitial = assetCategory,
                    AssetCategoryFinal = assetCategory,
                    InvStateIdInitial = invState.Id,
                    InvStateIdFinal = invState.Id,
                    AdministrationInitial = administration,
                    AdministrationFinal = administration,
                    AccSystem = accSystem,
                    AssetStateIdFinal = assetState.Id,
                    AssetStateIdInitial = assetState.Id
                };

                _context.Add(assetOp);

                inventory = _context.Set<Model.Inventory>().OrderByDescending(j => j.Id).FirstOrDefault();

                if (inventory != null)
                {
                    inventoryAsset = new Model.InventoryAsset()
                    {
                        Asset = asset,
                        Inventory = inventory,
                        QInitial = assetImport.Quantity,
                        QFinal = 0,
                        EmployeeInitial = employee,
                        RoomInitial = room,
                        CostCenterInitial = costCenter,
                        StateIdInitial = invState.Id,
                        Model = assetImport.Model,
                        Producer = assetImport.Producer
                    };

                    _context.Add(inventoryAsset);
                }

                assetAc = new Model.AssetAC
                {
                    AssetClassType = assetClassType,
                    Asset = asset,
                    AssetClass = assetClass,
                    AssetClassIn = assetClass
                };


                _context.Set<Model.AssetAC>().Add(assetAc);

                var monthSum = 0;


                assetDep = new Model.AssetDep
                {
                    AccSystem = accSystem,
                    Asset = asset,
                    DepPeriod = (int)monthSum,
                    DepPeriodIn = (int)monthSum,
                    DepPeriodMonth = 1,
                    DepPeriodMonthIn = 0,
                    DepPeriodRem = (int)monthSum,
                    DepPeriodRemIn = (int)monthSum,
                    UsageStartDate = DateTime.Now,
                    ValueDep = assetImport.ValueInv,
                    ValueDepIn = 0,
                    ValueDepPU = assetImport.ValueInv,
                    ValueDepPUIn = 0,
                    ValueDepYTD = assetImport.ValueInv,
                    ValueDepYTDIn = 0,
                    ValueInv = assetImport.ValueInv,
                    ValueInvIn = assetImport.ValueInv,
                    ValueRem = assetImport.ValueRem,
                    ValueRemIn = assetImport.ValueRem
                };

                _context.Set<Model.AssetDep>().Add(assetDep);


                assetInv = new Model.AssetInv
                {
                    Asset = asset,
                    AllowLabel = true,
                    Barcode = asset.InvNo,
                    Info = String.Empty,
                    InvName = asset.Name,
                    InvNoOld = String.Empty,
                    Model = assetImport.Model.Trim() + " " + assetImport.Model1.Trim(),
                    Producer = assetImport.Producer.Trim(),
                    InvStateId = invState.Id
                };

                _context.Set<Model.AssetInv>().Add(assetInv);

                accMonth = _context.Set<Model.AccMonth>().Where(a => a.IsActive == true).FirstOrDefault();

                assetDepMD = new Model.AssetDepMD
                {
                    AccMonth = accMonth,
                    AccSystem = accSystem,
                    Asset = asset,
                    UsefulLife = (int)monthSum,
                    TotLifeInpPeriods = 1,
                    RemLifeInPeriods = 1,
                    AccumulDep = assetImport.ValueInv,
                    BkValFYStart = assetImport.ValueInv,
                    DepForYear = assetImport.ValueInv,
                    CurrentAPC = assetImport.ValueInv,
                    PosCap = assetImport.ValueRem
                };

                _context.Set<Model.AssetDepMD>().Add(assetDepMD);

                assetAdmMD = new Model.AssetAdmMD
                {
                    AccMonth = accMonth,
                    Asset = asset,
                    Administration = administration,
                    AssetCategory = assetCategory,
                    AssetState = assetState,
                    AssetType = assetType,
                    CostCenter = costCenter,
                    DepartmentId = null,
                    Employee = employee,
                    Room = room
                };

                _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);

            }


            asset.Name = Encoding.ASCII.GetString(Encoding.ASCII.GetBytes(assetImport.AssetName));
            asset.CostCenter = costCenter;
            asset.AssetCategory = assetCategory;
            asset.ValueInv = assetImport.ValueInv;
            asset.ValueRem = assetImport.ValueRem;
            asset.PurchaseDate = assetImport.PurchaseDate;
            asset.SerialNumber = assetImport.SerialNumber != null ? assetImport.SerialNumber.Trim() : string.Empty;
            asset.AssetType = assetType;
            asset.Room = room;
            assetImport.AssetState = assetImport.AssetState;
            asset.UomId = uom.Id;
            asset.Quantity = assetImport.Quantity;
            asset.IsDeleted = false;
            asset.Validated = true;
            asset.Employee = employee;
            asset.InvNo = assetImport.InvNo;

            assetDep = _context.Set<Model.AssetDep>().Where(a => a.AssetId == asset.Id).FirstOrDefault();

            if (assetDep != null)
            {
                assetDep.DepPeriodIn = 1;
                assetDep.DepPeriodMonth = 1;
                assetDep.DepPeriodMonthIn = 0;
                assetDep.DepPeriodRem = 1;
                assetDep.DepPeriodRemIn = 1;
                assetDep.UsageStartDate = assetImport.PurchaseDate;
                assetDep.ValueDep = assetImport.ValueRem;
                assetDep.ValueDepIn = 0;
                assetDep.ValueDepPU = assetImport.ValueInv;
                assetDep.ValueDepPUIn = 0;
                assetDep.ValueDepYTD = assetImport.ValueInv;
                assetDep.ValueDepYTDIn = 0;
                assetDep.ValueInv = assetImport.ValueInv;
                assetDep.ValueInvIn = assetImport.ValueInv;
                assetDep.ValueRem = assetImport.ValueRem;
                assetDep.ValueRemIn = assetImport.ValueRem;

                _context.Set<Model.AssetDep>().Update(assetDep);

                accMonth = _context.Set<Model.AccMonth>().Where(a => a.IsActive == true).FirstOrDefault();

                assetDepMD = _context.Set<Model.AssetDepMD>().Where(a => a.AssetId == asset.Id && a.AccMonthId == accMonth.Id).FirstOrDefault();

                if (assetDepMD == null)
                {
                    assetDepMD = new Model.AssetDepMD
                    {
                        AccMonth = accMonth,
                        AccSystem = accSystem,
                        Asset = asset,
                        UsefulLife = 1,
                        TotLifeInpPeriods = 1,
                        RemLifeInPeriods = 1,
                        AccumulDep = assetImport.ValueInv,
                        BkValFYStart = assetImport.ValueInv,
                        DepForYear = assetImport.ValueInv,
                        CurrentAPC = assetImport.ValueInv,
                        PosCap = assetImport.ValueRem
                    };

                    _context.Set<Model.AssetDepMD>().Add(assetDepMD);
                }
                else
                {
                    assetDepMD.AccMonth = accMonth;
                    assetDepMD.AccSystem = accSystem;
                    assetDepMD.Asset = asset;
                    assetDepMD.UsefulLife = 1;
                    assetDepMD.RemLifeInPeriods = 1;
                    assetDepMD.AccumulDep = assetImport.ValueInv;
                    assetDepMD.BkValFYStart = assetImport.ValueInv;
                    assetDepMD.DepForYear = assetImport.ValueInv;
                    assetDepMD.CurrentAPC = assetImport.ValueInv;
                    assetDepMD.PosCap = assetImport.ValueRem;

                }


                assetAdmMD = _context.Set<Model.AssetAdmMD>().Where(a => a.AssetId == asset.Id && a.AccMonthId == accMonth.Id).FirstOrDefault();

                if (assetAdmMD == null)
                {
                    assetAdmMD = new Model.AssetAdmMD
                    {
                        AccMonth = accMonth,
                        Asset = asset,
                        Administration = administration,
                        AssetCategory = assetCategory,
                        AssetState = assetState,
                        AssetType = assetType,
                        CostCenter = costCenter,
                        DepartmentId = null,
                        Employee = employee,
                        Room = room
                    };

                    _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);
                }
                else
                {
                    assetAdmMD.AccMonth = accMonth;
                    assetAdmMD.Asset = asset;
                    assetAdmMD.Administration = administration;
                    assetAdmMD.AssetCategory = assetCategory;
                    assetAdmMD.AssetState = assetState;
                    assetAdmMD.AssetType = assetType;
                    assetAdmMD.CostCenter = costCenter;
                    assetAdmMD.DepartmentId = null;
                    assetAdmMD.Employee = employee;
                    assetAdmMD.Room = room;
                }


            }

            _context.SaveChanges();

            invNoUpdated = asset.InvNo;

            return asset.InvNo;

        }

        public string AssetImportSocGen(AssetImportSocgen assetImport, out string invNoUpdated)
        {
            Model.Asset asset = null;
            Model.AssetCategory assetCategory = null;
            Model.CostCenter costCenter = null;
            Model.Location location = null;
            Model.Room room = null;
            Model.Document document = null;
            Model.InventoryAsset inventoryAsset = null;
            Model.AssetOp assetOp = null;
            Model.Inventory inventory = null;
            Model.Partner partner = null;
            Model.Region region = null;
            Model.AdmCenter admCenter = null;
            Model.AssetState assetState = null;
            Model.InvState invState = null;
            Model.AssetType assetType = null;
            Model.Uom uom = null;
            Model.AccSystem accSystem = null;
            Model.Administration administration = null;
            Model.AssetClass assetClass = null;
            Model.AssetClassType assetClassType = null;
            Model.AssetAC assetAc = null;
            Model.AssetDep assetDep = null;
            Model.AssetDepMD assetDepMD = null;
            Model.AccMonth accMonth = null;
            Model.AssetAdmMD assetAdmMD = null;
            Model.AssetInv assetInv = null;
            Model.MasterType masterType = null;
            Model.Type type = null;
            Model.SubType subType = null;
            
            Model.Model model = null;
            Model.Brand brand = null;
            Model.Department department = null;
            Model.AssetNature assetNature = null;
            Model.BudgetManager budgetManager = null;
            Model.Project project = null;
            Model.Company company = null;
            
            
            
            Model.Employee employeeTeamLeader = null;
            Model.PartnerLocation partnerLocation = null;
            Model.Employee employee = null;
            Model.Dimension dimension = null;

            string assetTypeCode = "ASSET";
            string codeDefault = "NSP";
            string nameDefault = "Nespecificat";
            string documentTypeCode = "PURCHASE";
            string locationCode = string.Empty;
            string locationName = string.Empty;
            string roomCode = string.Empty;
            string roomName = string.Empty;
            string costCenterCode = string.Empty;
            string costCenterName = string.Empty;
            string invNo = string.Empty;
            string disposition = string.Empty;
            string assetClassTypeDefault = "-";
            string assetClassDefault = "-";
            string administrationDefault = "0";
            string assetCategoryDefault = "-";
            string uomDefault = "-";
            string articleDefault = "-";
            string accountDefault = "-";
            string expAccountDefault = "-";
            string partnerLocationDefault = "-";
            var monthSum = assetImport.DepPeriodMonth;
            int? departmentId = null;

            assetClassType = _context.Set<Model.AssetClassType>().Where(a => a.Code == assetClassTypeDefault).FirstOrDefault();

            if (assetClassType == null)
            {
                assetClassType = new Model.AssetClassType
                {
                    Code = assetClassTypeDefault,
                    Name = assetClassTypeDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AssetClassType>().Add(assetClassType);
            }

            assetClass = _context.Set<Model.AssetClass>().Where(a => a.Code == assetClassDefault).FirstOrDefault();

            if (assetClass == null)
            {
                assetClass = new Model.AssetClass
                {
                    Code = assetClassDefault,
                    Name = assetClassDefault,
                    IsDeleted = false,
                    AssetClassType = assetClassType
                };
                _context.Set<Model.AssetClass>().Add(assetClass);
            }

            accSystem = _context.Set<Model.AccSystem>().Where(a => a.Code == assetImport.AccSystem).FirstOrDefault();

            if (accSystem == null)
            {
                accSystem = new Model.AccSystem
                {
                    AssetClassType = assetClassType,
                    Code = assetImport.AccSystem.Trim(),
                    Name = assetImport.AccSystem.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AccSystem>().Add(accSystem);
            }

            administration = _context.Set<Model.Administration>().Where(a => a.Code == administrationDefault).FirstOrDefault();

            if (administration == null)
            {
                administration = new Model.Administration
                {
                    Code = administrationDefault,
                    Name = administrationDefault,
                    IsDeleted = false
                };

                _context.Set<Model.Administration>().Add(administration);
            }

            assetType = _context.Set<Model.AssetType>().Where(a => a.Code == assetImport.AssetType.Trim()).SingleOrDefault();

            if (assetType == null)
            {
                assetType = new Model.AssetType
                {
                    Code = assetImport.AssetType.Trim(),
                    Name = assetImport.AssetType.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AssetType>().Add(assetType);
            }

            company = _context.Set<Model.Company>().Where(a => a.Code == assetImport.Client.Trim()).SingleOrDefault();

            if (company == null)
            {
                company = new Model.Company
                {
                    Code = assetImport.Client.Trim(),
                    Name = assetImport.Client.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Company>().Add(company);
            }

            project = _context.Set<Model.Project>().Where(a => a.Code == assetImport.Project.Trim()).SingleOrDefault();

            if (project == null)
            {
                project = new Model.Project
                {
                    Code = assetImport.Project.Trim(),
                    Name = assetImport.Project.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Project>().Add(project);
            }

            budgetManager = _context.Set<Model.BudgetManager>().Where(a => a.Code == assetImport.BudgetManager.Trim()).SingleOrDefault();

            if (budgetManager == null)
            {
                budgetManager = new Model.BudgetManager
                {
                    Code = assetImport.BudgetManager.Trim(),
                    Name = assetImport.BudgetManager.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.BudgetManager>().Add(budgetManager);
            }

            assetNature = _context.Set<Model.AssetNature>().Where(a => a.Code == assetImport.AssetNature.Trim()).SingleOrDefault();

            if (assetNature == null)
            {
                assetNature = new Model.AssetNature
                {
                    Code = assetImport.AssetNature.Trim(),
                    Name = assetImport.AssetNature.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AssetNature>().Add(assetNature);
            }


            masterType = _context.Set<Model.MasterType>().Where(a => a.Code == assetImport.MasterType.Trim()).SingleOrDefault();

            if (masterType == null)
            {
                masterType = new Model.MasterType
                {
                    Code = assetImport.MasterType.Trim(),
                    Name = assetImport.MasterType.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.MasterType>().Add(masterType);
            }

            type = _context.Set<Model.Type>().Where(a => a.Code == assetImport.Type.Trim() && a.MasterTypeId == masterType.Id).SingleOrDefault();

            if (type == null)
            {
                type = new Model.Type
                {
                    Code = assetImport.Type.Trim(),
                    Name = assetImport.Type.Trim(),
                    MasterType = masterType,
                    IsDeleted = false
                };
                _context.Set<Model.Type>().Add(type);
            }

            subType = _context.Set<Model.SubType>().Where(a => a.Code == assetImport.SubType.Trim() && a.TypeId == type.Id).SingleOrDefault();

            if (subType == null)
            {
                subType = new Model.SubType
                {
                    Code = assetImport.SubType.Trim(),
                    Name = assetImport.SubType.Trim(),
                    Type = type,
                    IsDeleted = false
                };
                _context.Set<Model.SubType>().Add(subType);
            }

            //insuranceCategory = _context.Set<Model.InsuranceCategory>().Where(a => a.Code == assetImport.InsuranceCategory).SingleOrDefault();

            //if (insuranceCategory == null)
            //{
            //    insuranceCategory = new Model.InsuranceCategory
            //    {
            //        Code = assetImport.InsuranceCategory,
            //        Name = assetImport.InsuranceCategory,
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.InsuranceCategory>().Add(insuranceCategory);
            //}

            //model = _context.Set<Model.Model>().Where(a => a.Code == assetImport.Model.Trim()).SingleOrDefault();

            //if (model == null)
            //{
            //    model = new Model.Model
            //    {
            //        Code = assetImport.Model.Trim(),
            //        Name = assetImport.Model.Trim(),
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.Model>().Add(model);
            //}

            //brand = _context.Set<Model.Brand>().Where(a => a.Code == assetImport.Brand.Trim()).SingleOrDefault();

            //if (brand == null)
            //{
            //    brand = new Model.Brand
            //    {
            //        Code = assetImport.Brand.Trim(),
            //        Name = assetImport.Brand.Trim(),
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.Brand>().Add(brand);
            //}

            //department = _context.Set<Model.Department>().Where(a => a.Code == assetImport.Department.Trim()).SingleOrDefault();

            //if (department == null)
            //{
            //    department = new Model.Department
            //    {
            //        Code = assetImport.Department.Trim(),
            //        Name = assetImport.Department.Trim(),
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.Department>().Add(department);
            //}


            var documentType = _context.Set<Model.DocumentType>().Where(d => d.Code == documentTypeCode).Single();


            //var employeeTeamLeaderInternalCode = "-";
            //var employeeTeamLeaderFirstName = "-";
            //var employeeTeamLeaderLastName = "-";

            //string[] employeeTeamLeaderFull = assetImport.EmployeeTeamLeader.Trim().Split('-');


            //if (employeeTeamLeaderFull.Length > 2)
            //{
            //    //string internalCodeTeamLeader = employeeTeamLeaderFull[0];
            //    string internalCodeTeamLeader = employeeTeamLeaderFull[1];
            //    string fullNameTeamLeader = employeeTeamLeaderFull[2];

            //    if (fullNameTeamLeader != "")
            //    {
            //        string[] fullNameTLFull = fullNameTeamLeader.Trim().Split(',');

            //        if(fullNameTLFull.Length > 1)
            //        {
            //            employeeTeamLeaderFirstName = fullNameTLFull[0];
            //            employeeTeamLeaderLastName = fullNameTLFull[1];
            //            employeeTeamLeaderInternalCode = internalCodeTeamLeader;
            //        }
            //        else
            //        {
            //            //employeeTeamLeaderInternalCode = internalCodeTeamLeader;
            //            employeeTeamLeaderFirstName = internalCodeTeamLeader;
            //            employeeTeamLeaderLastName = fullNameTeamLeader;
            //            employeeTeamLeaderInternalCode = internalCodeTeamLeader;
            //        }
            //    }
            //    else
            //    {
            //        employeeTeamLeaderInternalCode = internalCodeTeamLeader;
            //        employeeTeamLeaderFirstName = internalCodeTeamLeader;
            //        employeeTeamLeaderLastName = fullNameTeamLeader;
            //    }
            //}

            //employeeTeamLeader = _context.Set<Model.Employee>().Where(e => e.InternalCode == employeeTeamLeaderInternalCode).FirstOrDefault();

            //if (employeeTeamLeader == null)
            //{
            //    employeeTeamLeader = new Model.Employee
            //    {
            //        InternalCode = employeeTeamLeaderInternalCode,
            //        FirstName = employeeTeamLeaderFirstName,
            //        LastName = employeeTeamLeaderLastName,
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.Employee>().Add(employeeTeamLeader);
            //}


            //var employeeInternalCode = "-";
            //var employeeFirstName = "-";
            //var employeeLastName = "-";

            //string[] employeeFull = assetImport.Employee.Trim().Split('-');


            //if (employeeFull.Length > 2)
            //{
            //    //string internalCodeTeamLeader = employeeTeamLeaderFull[0];
            //    string internalCode = employeeFull[1];
            //    string fullName = employeeFull[2];

            //    if (fullName != "")
            //    {
            //        string[] fullNameFull = fullName.Trim().Split(',');

            //        if (fullNameFull.Length > 1)
            //        {
            //            employeeFirstName = fullNameFull[0];
            //            employeeLastName = fullNameFull[1];
            //            employeeInternalCode = internalCode;
            //        }
            //        else
            //        {
            //            //employeeTeamLeaderInternalCode = internalCodeTeamLeader;
            //            employeeFirstName = internalCode;
            //            employeeLastName = fullName;
            //            employeeInternalCode = internalCode;
            //        }
            //    }
            //    else
            //    {
            //        employeeInternalCode = internalCode;
            //        employeeFirstName = internalCode;
            //        employeeLastName = fullName;
            //    }
            //}

            //var employee = _context.Set<Model.Employee>().Where(e => e.InternalCode == employeeInternalCode).FirstOrDefault();

            //if (employee == null)
            //{
            //    employee = new Model.Employee
            //    {
            //        InternalCode = employeeInternalCode,
            //        FirstName = employeeFirstName,
            //        LastName = employeeLastName,
            //        ERPCode = employeeTeamLeader.InternalCode != "" ? employeeTeamLeader.InternalCode  + "-" + employeeTeamLeaderFirstName + " " + employeeTeamLeaderLastName : "-",
            //        IsDeleted = assetImport.EmployeeStatus == "Active" ? false : true
            //    };
            //    _context.Set<Model.Employee>().Add(employee);
            //}

            uom = _context.Set<Model.Uom>().Where(a => a.Code == assetImport.Uom).FirstOrDefault();

            if (uom == null)
            {
                uom = new Model.Uom
                {
                    Code = assetImport.Uom,
                    Name = assetImport.Uom,
                    IsDeleted = false
                };
                _context.Set<Model.Uom>().Add(uom);
            }


            employee = _context.Set<Model.Employee>().Where(a => a.InternalCode == assetImport.InternalCode).FirstOrDefault();

            if (employee == null)
            {
                employee = new Model.Employee
                {
                    InternalCode = assetImport.InternalCode,
                    FirstName = assetImport.EmployeeFirstName,
                    LastName = assetImport.EmployeeLastName,
                    Department = department,
                    IsDeleted = false
                };
                _context.Set<Model.Employee>().Add(employee);
            }

            if (assetImport.EmployeeStatus.ToUpper() != "ACTIVE")
            {
                employee.IsDeleted = false;
            }


            region = _context.Set<Model.Region>().Where(a => a.Code == assetImport.Region).FirstOrDefault();

            if (region == null)
            {
                region = new Model.Region
                {
                    Code = assetImport.Region,
                    Name = assetImport.Region,
                    IsDeleted = false
                };
                _context.Set<Model.Region>().Add(region);
            }


            location = _context.Set<Model.Location>().Where(a => a.Code == assetImport.Location && a.RegionId == region.Id).FirstOrDefault();

            if (location == null)
            {
                location = new Model.Location
                {
                    Code = assetImport.Location,
                    Name = assetImport.Location,
                    Region = region,
                    IsDeleted = false
                };
                _context.Set<Model.Location>().Add(location);
            }

            room = _context.Set<Model.Room>().Where(a => a.Code == assetImport.Room && a.LocationId == location.Id).FirstOrDefault();

            if (room == null)
            {
                room = new Model.Room
                {
                    Code = assetImport.Room,
                    Name = assetImport.Room,
                    Location = location,
                    IsDeleted = false
                };
                _context.Set<Model.Room>().Add(room);
            }




            assetCategory = _context.Set<Model.AssetCategory>().Where(a => a.Code == assetImport.AssetCategory).FirstOrDefault();
            if (assetCategory == null)
            {
                assetCategory = new Model.AssetCategory
                {
                    Code = assetImport.AssetCategory,
                    Name = assetImport.AssetCategory,
                    IsDeleted = false
                };
                _context.Set<Model.AssetCategory>().Add(assetCategory);
            }

            //uom = _context.Set<Model.Uom>().Where(a => a.Code == uomDefault).FirstOrDefault();
            //if (uom == null)
            //{
            //    uom = new Model.Uom
            //    {
            //        Code = uomDefault,
            //        Name = uomDefault,
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.Uom>().Add(uom);
            //}

            //article = _context.Set<Model.Article>().Where(a => a.Code == articleDefault).FirstOrDefault();

            //if (article == null)
            //{
            //    article = new Model.Article
            //    {
            //        Code = articleDefault,
            //        Name = articleDefault,
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.Article>().Add(article);
            //}

            //expAccount = _context.Set<Model.ExpAccount>().Where(a => a.Code == expAccountDefault).FirstOrDefault();

            //if (expAccount == null)
            //{
            //    expAccount = new Model.ExpAccount
            //    {
            //        Code = expAccountDefault,
            //        Name = expAccountDefault,
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.ExpAccount>().Add(expAccount);
            //}



            //         var position1 = "-";
            //         var position2 = "-";
            //         var position3 = "-";
            //         var position4 = "-";
            //         var position5 = "-";
            //         var admCenterCode = "-";
            //         var regionCode = "-";
            //         var locName = "-";
            //         var rName = "-";    

            //         string[] locationFull = assetImport.Location.Trim().Split('-');


            //         if (locationFull.Length == 5)
            //         {
            //             string pos1 = locationFull[0];
            //             string pos2 = locationFull[1];
            //             string pos3 = locationFull[2];
            //             string pos4 = locationFull[3];
            //             string pos5 = locationFull[4];

            //             position1 = pos1;
            //             position2 = pos2;
            //             position3 = pos3;
            //             position4 = pos4;
            //             position5 = pos5;

            //             if(pos1 == "RO" || pos1 == "RF")
            //             {
            //                 admCenterCode = pos1 + "-" + pos2;
            //                 regionCode = pos1 + "-" + pos2;
            //                 locName = pos3;
            //                 rName = pos4 + "-" + pos5;
            //             }

            //         }

            //else if (locationFull.Length == 1)
            //{
            //	string pos1 = locationFull[0];
            //	//string pos2 = locationFull[1];
            //	//string pos3 = locationFull[2];
            //	//string pos4 = locationFull[3];
            //	//string pos5 = locationFull[4];

            //	position1 = pos1;
            //	//position2 = pos2;
            //	//position3 = pos3;
            //	//position4 = pos4;
            //	//position5 = pos5;

            //	if (pos1 == "RO" || pos1 == "RF")
            //	{
            //		admCenterCode = pos1;
            //		regionCode = pos1 ;
            //		locName = pos1;
            //		rName = pos1;
            //	}
            //	else
            //	{
            //		admCenterCode = pos1;
            //		regionCode = pos1;
            //		locName = pos1;
            //		rName = pos1;
            //	}
            //}

            admCenter = _context.Set<Model.AdmCenter>().Where(adm => adm.Name == assetImport.Region).FirstOrDefault();

            if (admCenter == null)
            {
                admCenter = new Model.AdmCenter
                {
                    Code = assetImport.Region,
                    Name = assetImport.Region,
                    IsDeleted = false
                };
                _context.Set<Model.AdmCenter>().Add(admCenter);
            }

            costCenterCode = assetImport.CostCenter.Trim();
            costCenterName = costCenterCode;

            costCenter = _context.Set<Model.CostCenter>().Where(a => a.Code == assetImport.CostCenter).FirstOrDefault();
            if (costCenter == null)
            {
                costCenter = new Model.CostCenter
                {
                    Code = assetImport.CostCenter,
                    Name = assetImport.CostCenter,
                    IsDeleted = false
                };
                _context.Set<Model.CostCenter>().Add(costCenter);
            }


            dimension = _context.Set<Model.Dimension>().Where(a => a.Length == assetImport.RunChange).FirstOrDefault();
            if (dimension == null)
            {
                dimension = new Model.Dimension
                {
                    Length = assetImport.RunChange,
                    Width = assetImport.RunChange,
                    Height = assetImport.RunChange,
                    IsDeleted = false
                };
                _context.Set<Model.Dimension>().Add(dimension);
            }

            //region = _context.Set<Model.Region>().Where(r => r.Name == regionCode).FirstOrDefault();

            //if (region == null)
            //{
            //    region = new Model.Region
            //    {
            //        Code = regionCode,
            //        Name = regionCode,
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.Region>().Add(region);
            //}




            //location = _context.Set<Model.Location>().Where(a => a.Name == locName && a.RegionId == region.Id).FirstOrDefault();

            //if (location == null)
            //{
            //    location = new Model.Location
            //    {
            //        Code = locName,
            //        Name = locName,
            //        Address = admCenterCode,
            //        Region = region,
            //        AdmCenter = admCenter,
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.Location>().Add(location);
            //}

            //room = _context.Set<Model.Room>().Where(a => a.Name == rName && a.LocationId == location.Id).FirstOrDefault();

            //if (room == null)
            //{
            //    room = new Model.Room
            //    {
            //        Code = rName,
            //        Name = rName,
            //        Location = location,
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.Room>().Add(room);
            //}

            invState = _context.Set<Model.InvState>().Where(a => a.Name == assetImport.InvState.Trim()).FirstOrDefault();

            if (invState == null)
            {
                invState = new Model.InvState
                {
                    Code = assetImport.InvState.Trim(),
                    Name = assetImport.InvState.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.InvState>().Add(invState);
            }

            assetState = _context.Set<Model.AssetState>().Where(a => a.Name == assetImport.AssetState.Trim()).FirstOrDefault();

            if (assetState == null)
            {
                assetState = new Model.AssetState
                {
                    Code = assetImport.InvState.Trim(),
                    Name = assetImport.InvState.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AssetState>().Add(assetState);
            }

            partnerLocation = _context.Set<Model.PartnerLocation>().Where(a => a.Denumire == assetImport.Partner.Trim()).FirstOrDefault();

            if (partnerLocation == null)
            {
                partnerLocation = new Model.PartnerLocation();
                partnerLocation.Denumire = assetImport.Partner.Trim();
                //partnerLocation.FiscalCode = string.Empty;
                //partnerLocation.RegistryNumber = string.Empty;
                partnerLocation.IsDeleted = false;

                _context.Set<Model.PartnerLocation>().Add(partnerLocation);
            }


            partner = _context.Set<Model.Partner>().Where(a => a.Name == assetImport.Partner.Trim()).FirstOrDefault();

            if (partner == null)
            {
                partner = new Model.Partner();
                partner.Name = assetImport.Partner;
                partner.FiscalCode = string.Empty;
                partner.RegistryNumber = string.Empty;
                partner.IsDeleted = false;
                partner.PartnerLocation = partnerLocation;

                _context.Set<Model.Partner>().Add(partner);
            }

            //long lastInvNo = 0;
            //long newInvNo = 0;


            if (assetImport.InvNo.Trim() == "")
            {

                //var lastInvo = _context.Set<Model.Uom>().Where(c => c.Code == "LastInvNo").FirstOrDefault();


                //lastInvNo = Convert.ToInt64(lastInvo.Name.Substring(2));
                //newInvNo = lastInvNo + 1;
                //lastInvo.Name = "TO" + newInvNo.ToString();


                //asset = _context.Set<Model.Asset>().Where(a => a.InvNo == "TO" + newInvNo.ToString() && a.IsDeleted == false).FirstOrDefault();
                asset = _context.Set<Model.Asset>().Where(a => a.ERPCode == "TO" + assetImport.ERPCode && a.IsDeleted == false).FirstOrDefault();
            }
            else
            {
                asset = _context.Set<Model.Asset>().Where(a => a.InvNo == assetImport.InvNo.Trim() && a.IsDeleted == false).FirstOrDefault();
            }

            if (asset == null) //nu exista in bd, asset nou
            {


                document = new Model.Document
                {
                    Approved = true,
                    DocumentType = documentType,
                    DocNo1 = assetImport.InvoiceNumber.Trim(),
                    DocNo2 = assetImport.PONumber.Trim(),
                    DocumentDate = DateTime.Now,
                    RegisterDate = DateTime.Now,
                    Partner = partner,
                    ParentDocumentId = 19088
                };

                _context.Add(document);


                asset = new Model.Asset()
                {
                    Administration = administration,
                    AssetCategory = assetCategory,
                    AssetStateId = assetState.Id,
                    AssetType = assetType,
                    Company = company,
                    CostCenter = costCenter,
                    Custody = false,
                    Department = department,
                    Document = document,
                    ERPCode = assetImport.ERPCode,
                    Employee = employee,
                    //InvNo = "TO" + newInvNo.ToString(),
                    InvStateId = invState.Id,
                    IsDeleted = false,
                    Name = assetImport.Description.Trim(),
                    PurchaseDate = assetImport.InvoiceDate,
                    Quantity = 1,
                    Room = room,
                    SerialNumber = assetImport.SerialNumber.Trim(),
                    UomId = uom.Id,
                    Validated = true,
                    ValueInv = assetImport.ValueInv,
                    ValueRem = assetImport.ValueDep,
                    
                    BudgetManagerId = budgetManager.Id,
                    AssetNatureId = assetNature.Id,
                    
                    
                    SAPCode = assetImport.ERPCode,
                    IsInTransfer = false,
                    SubTypeId = subType.Id,
                    
                    BrandId = brand.Id,
                    ModelId = model.Id,
                    
                    ProjectId = project.Id,
                    InvoiceDate = assetImport.InvoiceDate,
                    PODate = assetImport.PODate,
                    ReceptionDate = assetImport.ReceptionDate,
                    RemovalDate = assetImport.RemovalDate,
                    IsTemp = true

                };


                _context.Add(asset);

                assetOp = new Model.AssetOp()
                {
                    AccSystem = accSystem,
                    AdministrationInitial = administration,
                    AdministrationFinal = administration,
                    AssetCategoryInitial = assetCategory,
                    AssetCategoryFinal = assetCategory,
                    Asset = asset,
                    AssetStateIdFinal = assetState.Id,
                    AssetStateIdInitial = assetState.Id,
                    CostCenterInitial = costCenter,
                    CostCenterFinal = costCenter,
                    DepartmentInitial = department,
                    DepartmentFinal = department,
                    Document = document,
                    EmployeeInitial = employee,
                    EmployeeFinal = employee,
                    InvStateIdInitial = invState.Id,
                    InvStateIdFinal = invState.Id,
                    AssetTypeIdInitial = assetType.Id,
                    AssetTypeIdFinal = assetType.Id,
                    RoomInitial = room,
                    RoomFinal = room
                };

                _context.Add(assetOp);

                inventory = _context.Set<Model.Inventory>().Where(i => i.Active == true).FirstOrDefault();

                if (inventory != null)
                {
                    var inventoryAssetOld = _context.Set<Model.InventoryAsset>().Where(ia => ia.InventoryId == inventory.Id && ia.AssetId == asset.Id).FirstOrDefault();

                    if (inventoryAssetOld == null)
                    {
                        inventoryAsset = new Model.InventoryAsset()
                        {
                            CostCenterInitial = costCenter,
                            EmployeeInitial = employee,
                            Model = string.Empty,
                            Producer = string.Empty,
                            QFinal = 0,
                            QInitial = 1,
                            RoomInitial = room,
                            SerialNumber = string.Empty,
                            StateIdInitial = invState.Id,
                            AdministrationIdInitial = administration.Id,
                            Asset = asset,
                            Inventory = inventory
                        };

                        _context.Add(inventoryAsset);
                    }


                }

                assetAc = new Model.AssetAC
                {
                    AssetClassType = assetClassType,
                    Asset = asset,
                    AssetClass = assetClass,
                    AssetClassIn = assetClass
                };


                _context.Set<Model.AssetAC>().Add(assetAc);




                assetDep = new Model.AssetDep
                {
                    AccSystem = accSystem,
                    Asset = asset,
                    DepPeriod = (int)monthSum,
                    DepPeriodIn = (int)monthSum,
                    DepPeriodMonth = assetImport.DepPeriodMonth,
                    DepPeriodMonthIn = assetImport.DepPeriodMonth,
                    DepPeriodRem = (int)monthSum,
                    DepPeriodRemIn = (int)monthSum,
                    UsageStartDate = DateTime.Now,
                    ValueDep = assetImport.ValueDep,
                    ValueDepIn = 0,
                    ValueDepPU = assetImport.ValueDepPU,
                    ValueDepPUIn = 0,
                    ValueDepYTD = assetImport.ValueInv,
                    ValueDepYTDIn = 0,
                    ValueInv = assetImport.ValueInv,
                    ValueInvIn = 0,
                    ValueRem = assetImport.ValueDep,
                    ValueRemIn = 0
                };

                _context.Set<Model.AssetDep>().Add(assetDep);


                assetInv = new Model.AssetInv
                {
                    Asset = asset,
                    AllowLabel = true,
                    //Barcode = "TO" + newInvNo.ToString(),
                    Info = assetImport.RunChange,
                    InvName = string.Empty,
                    InvNoOld = assetImport.ERPCode,
                    Model = assetImport.Model,
                    Producer = assetImport.Brand,
                    InvStateId = invState.Id
                };

                _context.Set<Model.AssetInv>().Add(assetInv);

                accMonth = _context.Set<Model.AccMonth>().Where(a => a.IsActive == true).FirstOrDefault();

                assetDepMD = new Model.AssetDepMD
                {
                    AccMonth = accMonth,
                    AccSystem = accSystem,
                    Asset = asset,
                    UsefulLife = (int)monthSum,
                    TotLifeInpPeriods = (int)monthSum,
                    RemLifeInPeriods = (int)monthSum,
                    AccumulDep = assetImport.ValueDep,
                    BkValFYStart = assetImport.ValueDepPU,
                    DepForYear = assetImport.ValueDepPU,
                    CurrentAPC = assetImport.ValueInv,
                    PosCap = assetImport.ValueDep
                };

                _context.Set<Model.AssetDepMD>().Add(assetDepMD);

                assetAdmMD = new Model.AssetAdmMD
                {
                    AccMonth = accMonth,
                    Asset = asset,
                    Administration = administration,
                    AssetCategory = assetCategory,
                    AssetState = assetState,
                    AssetType = assetType,
                    CostCenter = costCenter,
                    Department = department,
                    Employee = employee,
                    Room = room,
                    AssetClassId = assetClass.Id,
                    
                    BudgetManagerId = budgetManager.Id,
                    AssetNatureId = assetNature.Id,
                    
                    
                    SubTypeId = subType.Id,
                    
                    BrandId = brand.Id,
                    ModelId = model.Id,
                    ProjectId = project.Id
                };

                _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);

            }
            else
            {

                document = _context.Set<Model.Document>().Where(d => d.Id == asset.DocumentId).FirstOrDefault();

                if (document != null)
                {
                    document.DocNo1 = assetImport.InvoiceNumber;
                    document.DocNo2 = assetImport.PONumber;

                    _context.Set<Model.Document>().Update(document);
                }

                assetInv = _context.Set<Model.AssetInv>().Where(a => a.AssetId == asset.Id).FirstOrDefault();

                if (assetInv == null)
                {
                    assetInv = new Model.AssetInv
                    {
                        Asset = asset,
                        AllowLabel = true,
                        // = "TO" + newInvNo,
                        Info = assetImport.RunChange,
                        InvName = string.Empty,
                        InvNoOld = assetImport.ERPCode,
                        Model = string.Empty,
                        Producer = string.Empty,
                        InvStateId = invState.Id
                    };

                    _context.Set<Model.AssetInv>().Add(assetInv);
                }
                else
                {

                    //assetInv.Barcode = "TO" + newInvNo.ToString();
                    assetInv.InvNoOld = assetImport.ERPCode;
                    //assetInv.Info = assetImport.RunChange;
                    assetInv.Model = assetImport.Model;
                    assetInv.Producer = assetImport.Brand;

                    assetInv.InvStateId = invState.Id;

                    _context.Set<Model.AssetInv>().Update(assetInv);
                }


                assetDep = _context.Set<Model.AssetDep>().Where(a => a.AssetId == asset.Id).FirstOrDefault();

                if (assetDep != null)
                {
                    assetDep.DepPeriodIn = (int)monthSum;
                    assetDep.DepPeriodMonth = assetImport.DepPeriodMonth;
                    assetDep.DepPeriodMonthIn = (int)monthSum;
                    assetDep.DepPeriodRem = (int)monthSum;
                    assetDep.DepPeriodRemIn = (int)monthSum;
                    assetDep.UsageStartDate = null;
                    assetDep.ValueDep = assetImport.ValueDep;
                    assetDep.ValueDepIn = 0;
                    assetDep.ValueDepPU = assetImport.ValueDepPU;
                    assetDep.ValueDepPUIn = 0;
                    assetDep.ValueDepYTD = assetImport.ValueInv;
                    assetDep.ValueDepYTDIn = 0;
                    assetDep.ValueInv = assetImport.ValueInv;
                    assetDep.ValueInvIn = 0;
                    assetDep.ValueRem = assetImport.ValueDep;
                    assetDep.ValueRemIn = 0;

                    _context.Set<Model.AssetDep>().Update(assetDep);

                }
                else
                {
                    assetDep = new Model.AssetDep
                    {
                        AccSystem = accSystem,
                        Asset = asset,
                        DepPeriod = (int)monthSum,
                        DepPeriodIn = (int)monthSum,
                        DepPeriodMonth = assetImport.DepPeriodMonth,
                        DepPeriodMonthIn = 0,
                        DepPeriodRem = (int)monthSum,
                        DepPeriodRemIn = (int)monthSum,
                        UsageStartDate = DateTime.Now,
                        ValueDep = assetImport.ValueDep,
                        ValueDepIn = 0,
                        ValueDepPU = assetImport.ValueDepPU,
                        ValueDepPUIn = 0,
                        ValueDepYTD = assetImport.ValueInv,
                        ValueDepYTDIn = 0,
                        ValueInv = assetImport.ValueInv,
                        ValueInvIn = 0,
                        ValueRem = assetImport.ValueDep,
                        ValueRemIn = 0
                    };

                    _context.Set<Model.AssetDep>().Add(assetDep);
                }

                inventory = _context.Set<Model.Inventory>().Where(i => i.Active == true).FirstOrDefault();

                if (inventory != null)
                {
                    var inventoryAssetOld = _context.Set<Model.InventoryAsset>().Where(ia => ia.InventoryId == inventory.Id && ia.AssetId == asset.Id).FirstOrDefault();

                    if (inventoryAssetOld == null)
                    {
                        inventoryAsset = new Model.InventoryAsset()
                        {
                            CostCenterInitial = costCenter,
                            EmployeeInitial = employee,
                            Model = string.Empty,
                            Producer = string.Empty,
                            QFinal = 0,
                            QInitial = 1,
                            RoomInitial = room,
                            SerialNumber = string.Empty,
                            StateIdInitial = invState.Id,
                            AdministrationIdInitial = administration.Id,
                            Asset = asset,
                            Inventory = inventory
                        };

                        _context.Add(inventoryAsset);
                    }


                }



                accMonth = _context.Set<Model.AccMonth>().Where(a => a.IsActive == true).FirstOrDefault();

                assetDepMD = _context.Set<Model.AssetDepMD>().Where(a => a.AssetId == asset.Id && a.AccMonthId == accMonth.Id).FirstOrDefault();

                if (assetDepMD == null)
                {
                    assetDepMD = new Model.AssetDepMD
                    {
                        AccMonth = accMonth,
                        AccSystem = accSystem,
                        Asset = asset,
                        UsefulLife = (int)monthSum,
                        TotLifeInpPeriods = assetImport.DepPeriodMonth,
                        RemLifeInPeriods = (int)monthSum,
                        AccumulDep = assetImport.ValueDep,
                        BkValFYStart = assetImport.ValueDepPU,
                        DepForYear = assetImport.ValueDepPU,
                        CurrentAPC = assetImport.ValueInv,
                        PosCap = assetImport.ValueDep
                    };

                    _context.Set<Model.AssetDepMD>().Add(assetDepMD);
                }
                else
                {
                    assetDepMD.AccMonth = accMonth;
                    assetDepMD.AccSystem = accSystem;
                    assetDepMD.Asset = asset;
                    assetDepMD.UsefulLife = (int)monthSum;
                    assetDepMD.RemLifeInPeriods = (int)monthSum;
                    assetDepMD.TotLifeInpPeriods = assetImport.DepPeriodMonth;
                    assetDepMD.AccumulDep = assetImport.ValueDep;
                    assetDepMD.BkValFYStart = assetImport.ValueDepPU;
                    assetDepMD.DepForYear = assetImport.ValueInv;
                    assetDepMD.CurrentAPC = assetImport.ValueInv;
                    assetDepMD.PosCap = assetImport.ValueDep;

                }


                assetAdmMD = _context.Set<Model.AssetAdmMD>().Where(a => a.AssetId == asset.Id && a.AccMonthId == accMonth.Id).FirstOrDefault();

                if (assetAdmMD == null)
                {
                    assetAdmMD = new Model.AssetAdmMD
                    {
                        AccMonth = accMonth,
                        Asset = asset,
                        Administration = administration,
                        AssetCategory = assetCategory,
                        AssetState = assetState,
                        AssetType = assetType,
                        CostCenter = costCenter,
                        Department = department,
                        Employee = employee,
                        Room = room,
                        AssetClassId = assetClass.Id,
                        
                        BudgetManagerId = budgetManager.Id,
                        AssetNatureId = assetNature.Id,
                        
                        
                        SubTypeId = subType.Id,
                        
                        BrandId = brand.Id,
                        ModelId = model.Id,
                        
                        ProjectId = project.Id
                    };

                    _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);
                }
                else
                {

                    assetAdmMD.AccMonth = accMonth;
                    assetAdmMD.Asset = asset;
                    assetAdmMD.Administration = administration;
                    assetAdmMD.AssetCategory = assetCategory;
                    assetAdmMD.AssetState = assetState;
                    assetAdmMD.AssetType = assetType;
                    assetAdmMD.CostCenter = costCenter;
                    assetAdmMD.DepartmentId = department != null ? department.Id : departmentId;
                    assetAdmMD.Employee = employee;
                    assetAdmMD.Room = room;
                    assetAdmMD.AssetClass = assetClass;
                    
                    assetAdmMD.BudgetManager = budgetManager;
                    assetAdmMD.AssetNature = assetNature;
                    
                    
                    assetAdmMD.SubType = subType;
                    
                    assetAdmMD.Brand = brand;
                    assetAdmMD.Model = model;
                    
                    assetAdmMD.Project = project;
                }
            }

            asset.Administration = administration;
            asset.AssetCategory = assetCategory;
            asset.AssetState = assetState;
            asset.AssetType = assetType;
            asset.Company = company;
            asset.CostCenter = costCenter;
            asset.DepartmentId = department != null ? department.Id : departmentId;
            asset.ERPCode = assetImport.ERPCode;
            asset.Employee = employee;
            asset.InvNo = assetImport.InvNo;
            asset.InvState = invState;
            asset.Name = Encoding.ASCII.GetString(Encoding.ASCII.GetBytes(assetImport.Description));
            asset.PurchaseDate = assetImport.InvoiceDate;
            asset.Quantity = 1;
            asset.Room = room;
            asset.SerialNumber = assetImport.SerialNumber.Trim();
            asset.UomId = uom.Id;
            asset.Validated = true;
            asset.ValueInv = assetImport.ValueInv;
            asset.ValueRem = assetImport.ValueDep;
            
            asset.BudgetManager = budgetManager;
            asset.AssetNature = assetNature;
            
            
            asset.SAPCode = assetImport.ERPCode;
            asset.SubType = subType;
            
            asset.Brand = brand;
            asset.Model = model;
            
            asset.Project = project;
            asset.InvoiceDate = assetImport.InvoiceDate;
            asset.PODate = assetImport.PODate;
            asset.ReceptionDate = assetImport.ReceptionDate;
            asset.RemovalDate = assetImport.RemovalDate;
            asset.Dimension = dimension;
            _context.SaveChanges();

            //invNoUpdated = "TO" + newInvNo.ToString();
            invNoUpdated = "TO";

            return invNoUpdated;

        }

        public async Task<string> AssetImportEmag(AssetImportEmag assetImport)
        {
            Model.Asset asset = null;
            Model.AssetCategory assetCategory = null;
            Model.CostCenter costCenter = null;
            //Model.Location location = null;
            //Model.Room room = null;
            Model.Document document = null;
            Model.InventoryAsset inventoryAsset = null;
            Model.AssetOp assetOp = null;
            Model.Partner partner = null;
            //Model.Region region = null;
            Model.AdmCenter admCenter = null;
            Model.AssetAC assetAc = null;
            Model.AssetDep assetDep = null;
            Model.AssetDepMD assetDepMD = null;
            Model.AssetAdmMD assetAdmMD = null;
            Model.AssetInv assetInv = null;
            Model.MasterType masterType = null;
            //Model.Type type = null;
            //Model.SubType subType = null;
            // 
            // Model.Model model = null;
            //Model.Brand brand = null;
            // Model.Department department = null;
            //Model.AssetNature assetNature = null;
            // Model.BudgetManager budgetManager = null;
            //Model.Project project = null;
            // Model.InterCompany interCompany = null;
            
            
            
            Model.Employee employeeTeamLeader = null;
            Model.PartnerLocation partnerLocation = null;
            Model.Employee employee = null;
            //Model.Material material = null;
            //Model.Country country = null;
            // Model.Division division = null;
            string assetTypeCode = "ASSET";
            string documentTypeCode = "PURCHASE";
            string locationCode = string.Empty;
            string locationName = string.Empty;
            string roomCode = string.Empty;
            string roomName = string.Empty;
            string costCenterCode = string.Empty;
            string costCenterName = string.Empty;
            string invNo = string.Empty;
            string disposition = string.Empty;
            string administrationDefault = "0";
            string assetCategoryDefault = "-";
            string assetNatureDefault = "-";
            string assetStateDefault = "IN_USE";
            string departmentDefault = "-";
            string interCompanyDefault = "";
            string articleDefault = "-";
            string accountDefault = "-";
            string expAccountDefault = "-";
            string partnerLocationDefault = "-";
            var monthSum = assetImport.RemLifeInPeriods;
            int? departmentId = null;

            admCenter = await _context.Set<Model.AdmCenter>().Where(a => a.Code == assetImport.ProfitCenter.Trim()).FirstOrDefaultAsync();

            if (admCenter == null)
            {
                admCenter = new Model.AdmCenter
                {
                    Code = assetImport.ProfitCenter.Trim(),
                    Name = assetImport.ProfitCenter.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AdmCenter>().Add(admCenter);
            }

            //country = _context.Set<Model.Country>().Where(a => a.Code == assetImport.Country.Trim()).SingleOrDefault();

            //if (country == null)
            //{
            //    country = new Model.Country
            //    {
            //        Code = assetImport.Country.Trim(),
            //        Name = assetImport.Country.Trim(),
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.Country>().Add(country);
            //}

            //material = _context.Set<Model.Material>().Where(a => a.Name == assetImport.Material.Trim()).SingleOrDefault();

            //if (material == null)
            //{
            //    material = new Model.Material
            //    {
            //        Code = assetImport.MaterialCode.Trim(),
            //        Name = assetImport.Material.Trim(),
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.Material>().Add(material);
            //}

            //project = _context.Set<Model.Project>().Where(a => a.Code == assetImport.Project.Trim()).SingleOrDefault();

            //if (project == null)
            //{
            //    project = new Model.Project
            //    {
            //        Code = assetImport.Project.Trim(),
            //        Name = assetImport.Project.Trim(),
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.Project>().Add(project);
            //}

            //budgetManager = _context.Set<Model.BudgetManager>().Where(a => a.Code == assetImport.BudgetManager.Trim()).SingleOrDefault();

            //if (budgetManager == null)
            //{
            //    budgetManager = new Model.BudgetManager
            //    {
            //        Code = assetImport.BudgetManager.Trim(),
            //        Name = assetImport.BudgetManager.Trim(),
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.BudgetManager>().Add(budgetManager);
            //}

            //assetNature = _context.Set<Model.AssetNature>().Where(a => a.Name == assetImport.AssetNature.Trim()).SingleOrDefault();

            //if (assetNature == null)
            //{
            //    assetNature = new Model.AssetNature
            //    {
            //        Code = "-",
            //        Name = assetImport.AssetNature.Trim(),
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.AssetNature>().Add(assetNature);
            //}

            //type = _context.Set<Model.Type>().Where(a => a.Code == assetImport.Type.Trim()).SingleOrDefault();

            //if (type == null)
            //{
            //    type = new Model.Type
            //    {
            //        Code = assetImport.Type.Trim(),
            //        Name = assetImport.Type.Trim(),
            //        MasterType = masterType,
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.Type>().Add(type);
            //}

            //subType = _context.Set<Model.SubType>().Where(a => a.Code == assetImport.SubType.Trim() && a.TypeId == type.Id).SingleOrDefault();

            //if (subType == null)
            //{
            //    subType = new Model.SubType
            //    {
            //        Code = assetImport.SubType.Trim(),
            //        Name = assetImport.SubType.Trim(),
            //        Type = type,
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.SubType>().Add(subType);
            //}

            //insuranceCategory = _context.Set<Model.InsuranceCategory>().Where(a => a.Code == assetImport.InsuranceCategory).SingleOrDefault();

            //if (insuranceCategory == null)
            //{
            //    insuranceCategory = new Model.InsuranceCategory
            //    {
            //        Code = assetImport.InsuranceCategory,
            //        Name = assetImport.InsuranceCategory,
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.InsuranceCategory>().Add(insuranceCategory);
            //}

            //model = _context.Set<Model.Model>().Where(a => a.Code == codeDefault.Trim()).FirstOrDefault();

            //if (model == null)
            //{
            //    model = new Model.Model
            //    {
            //        Code = codeDefault.Trim(),
            //        Name = codeDefault.Trim(),
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.Model>().Add(model);
            //}

            //brand = _context.Set<Model.Brand>().Where(a => a.Code == codeDefault.Trim()).FirstOrDefault();

            //if (brand == null)
            //{
            //    brand = new Model.Brand
            //    {
            //        Code = codeDefault.Trim(),
            //        Name = codeDefault.Trim(),
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.Brand>().Add(brand);
            //}

            //department = _context.Set<Model.Department>().Where(a => a.Code == assetImport.Department.Trim()).SingleOrDefault();

            //if (department == null)
            //{
            //    department = new Model.Department
            //    {
            //        Code = assetImport.Department.Trim(),
            //        Name = assetImport.Department.Trim(),
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.Department>().Add(department);
            //}

            employee = await _context.Set<Model.Employee>().Where(e => e.InternalCode == assetImport.IdentityNumber.Trim() && e.IsDeleted == false).FirstOrDefaultAsync();

            if (employee == null)
            {
                employee = await _context.Set<Model.Employee>().Where(e => e.InternalCode == assetImport.IdentityNumber.Trim() && e.IsDeleted == true).FirstOrDefaultAsync();

                if (employee != null && ((employee.InternalCode == "0") || (employee.InternalCode == "")))
                {
                    employee = null;
                }
                //employee = new Model.Employee
                //{
                //    InternalCode = assetImport.Employee,
                //    FirstName = assetImport.Employee,
                //    LastName = assetImport.Employee,
                //    ERPCode = string.Empty,
                //    IsDeleted = false
                //};
                //_context.Set<Model.Employee>().Add(employee);
            }

            assetCategory = await _context.Set<Model.AssetCategory>().Where(a => a.Code == assetImport.AssetCategory.Trim()).FirstOrDefaultAsync();

            if (assetCategory == null)
            {
                assetCategory = new Model.AssetCategory
                {
                    Code = assetImport.AssetCategory.Trim(),
                    Name = assetImport.AssetCategory.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AssetCategory>().Add(assetCategory);
            }

            //article = await _context.Set<Model.Article>().Where(a => a.Code == assetImport.Article).FirstOrDefaultAsync();

            //if (article == null)
            //{
            //    article = new Model.Article
            //    {
            //        Code = assetImport.Article,
            //        Name = assetImport.Article,
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.Article>().Add(article);
            //}

            //expAccount = await _context.Set<Model.ExpAccount>().Where(a => a.Code == assetImport.ExpAccount).FirstOrDefaultAsync();

            //if (expAccount == null)
            //{
            //    expAccount = new Model.ExpAccount
            //    {
            //        Code = assetImport.ExpAccount,
            //        Name = assetImport.ExpAccount,
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.ExpAccount>().Add(expAccount);
            //}

            //division = _context.Set<Model.Division>().Where(a => a.Code == assetImport.Division).FirstOrDefault();

            //if (division == null)
            //{
            //    division = new Model.Division
            //    {
            //        Code = assetImport.Division,
            //        Name = assetImport.Division,
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.Division>().Add(division);
            //}

            //region = _context.Set<Model.Region>().Where(a => a.Code == assetImport.Region).FirstOrDefault();

            //if (region == null)
            //{
            //    region = new Model.Region
            //    {
            //        Code = assetImport.Region,
            //        Name = assetImport.Region,
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.Region>().Add(region);
            //}


            //         location = _context.Set<Model.Location>().Where(a => a.Name == assetImport.Room).FirstOrDefault();

            //         if (location == null)
            //         {
            //             location = new Model.Location
            //             {
            //                 Code = "-",
            //                 Name = assetImport.Room,
            //                 Address = assetImport.Room,
            //                 Region = region,
            //                 IsDeleted = false
            //             };
            //             _context.Set<Model.Location>().Add(location);
            //         }

            //         room = _context.Set<Model.Room>().Where(a => a.Name == assetImport.Room && a.LocationId == location.Id).FirstOrDefault();

            //         if (room == null)
            //         {
            //             room = new Model.Room
            //             {
            //                 Code = "-",
            //                 Name = assetImport.Room,
            //                 Location = location,
            //                 IsDeleted = false
            //             };
            //             _context.Set<Model.Room>().Add(room);
            //         }


            //         admCenter = _context.Set<Model.AdmCenter>().Where(adm => adm.Name == assetImport.AdmCenter).FirstOrDefault();

            //if (admCenter == null)
            //{
            //	admCenter = new Model.AdmCenter
            //	{
            //		Code = assetImport.AdmCenter,
            //		Name = assetImport.AdmCenter,
            //		IsDeleted = false
            //	};
            //	_context.Set<Model.AdmCenter>().Add(admCenter);
            //}

            costCenterCode = assetImport.CostCenterCode.Trim();
            costCenterName = costCenterCode;

            costCenter = await _context.Set<Model.CostCenter>().Include(d => d.Division).Where(a => a.Code == assetImport.CostCenterCode).FirstOrDefaultAsync();

            if (costCenter == null)
            {
                costCenter = new Model.CostCenter
                {
                    Code = assetImport.CostCenterCode,
                    Name = assetImport.CostCenterName,
                    ERPCode = string.Empty,
                    IsDeleted = false,
                    AdmCenter = admCenter,
                    Region = null
                };
                _context.Set<Model.CostCenter>().Add(costCenter);
            }
            else
            {
                costCenter.AdmCenter = admCenter;
                _context.Set<Model.CostCenter>().Update(costCenter);
            }

            partnerLocation = await _context.Set<Model.PartnerLocation>().Where(a => a.Cui == assetImport.CUI.Trim()).FirstOrDefaultAsync();

            if (partnerLocation == null)
            {
                partnerLocation = new Model.PartnerLocation();
                partnerLocation.Denumire = assetImport.Partner.Trim();
                //partnerLocation.FiscalCode = string.Empty;
                //partnerLocation.RegistryNumber = string.Empty;
                partnerLocation.IsDeleted = false;

                _context.Set<Model.PartnerLocation>().Add(partnerLocation);
            }

            partner = await _context.Set<Model.Partner>().Where(a => a.RegistryNumber == assetImport.CUI.Trim()).FirstOrDefaultAsync();

            if (partner == null)
            {
                partner = new Model.Partner();
                partner.Name = assetImport.Partner;
                partner.FiscalCode = assetImport.CUI;
                partner.RegistryNumber = assetImport.CUI;
                partner.IsDeleted = false;
                partner.PartnerLocation = partnerLocation;

                _context.Set<Model.Partner>().Add(partner);
            }

            if (assetImport.SubNo.Length == 1)
            {
                assetImport.SubNo = "000" + assetImport.SubNo;
            }
            else if (assetImport.SubNo.Length == 2)
            {
                assetImport.SubNo = "00" + assetImport.SubNo;
            }
            else if (assetImport.SubNo.Length == 3)
            {
                assetImport.SubNo = "0" + assetImport.SubNo;
            }

            asset = await _context.Set<Model.Asset>().Where(a => a.InvNo == assetImport.InvNo.Trim() && a.SubNo == assetImport.SubNo && a.IsDeleted == false).FirstOrDefaultAsync();

            if (asset == null) //nu exista in bd, asset nou
            {
                document = new Model.Document
                {
                    Approved = true,
                    DocumentTypeId = assetImport.DocumentTypeId,
                    DocNo1 = string.Empty,
                    DocNo2 = assetImport.ManufacturerNo.Trim(),
                    DocumentDate = DateTime.Now,
                    RegisterDate = DateTime.Now,
                    Partner = partner,
                    ParentDocumentId = assetImport.DocumentId,
                };

                _context.Add(document);

                asset = new Model.Asset()
                {
                    AdministrationId = assetImport.AdministrationId,
                    AssetCategory = assetCategory,
                    AssetStateId = assetImport.AssetStateId,
                    AssetTypeId = assetImport.AssetTypeId,
                    CompanyId = assetImport.CompanyId,
                    CostCenter = costCenter,
                    CreatedAt = DateTime.Now,
                    CreatedBy = null,
                    Custody = false,
                    DepartmentId = costCenter != null && costCenter.Division != null ? costCenter.Division.DepartmentId : null,
                    Document = document,
                    ERPCode = String.Empty,
                    Employee = employee,
                    InvNo = assetImport.InvNo,
                    InvStateId = assetImport.InvStateId,
                    IsDeleted = false,
                    ModifiedAt = DateTime.Now,
                    ModifiedBy = null,
                    Name = Encoding.ASCII.GetString(Encoding.ASCII.GetBytes(assetImport.Description)),
                    ParentAssetId = null,
                    PurchaseDate = assetImport.PIFDate,
                    Quantity = assetImport.Quantity,
                    RoomId = costCenter != null ? costCenter.RoomId : null,
                    SerialNumber = assetImport.SerialNumber.Trim(),
                    UomId = assetImport.UomId,
                    Validated = true,
                    ValueInv = assetImport.DepForYear,
                    ValueRem = assetImport.AccumulDep,
                    //OutDate = assetImport.RemovalDate,
                    //QuantityOut = assetImport.Quantity,
                    //ValueInvOut = assetImport.ValueInv,
                    
                    BudgetManagerId = assetImport.BudgetManagerId,
                    AssetNatureId = null,
                    
                    
                    TempReco = null,
                    TempName = null,
                    SAPCode = String.Empty,
                    IsInTransfer = false,
                    SubTypeId = null,
                    InsuranceCategoryId = null,
                    BrandId = null,
                    ModelId = null,
                    ProjectId = null,
                    InvoiceDate = assetImport.UsageStartDate,
                    RemovalDate = assetImport.RemovalDate,
                    IsTemp = false,
                    ImageCount = 0,
                    DimensionId = assetImport.DimensionId,
                    IsPrinted = false,
                    PrintDate = null,
                    IsDuplicate = false,
                    IsAccepted = false,
                    DictionaryItemId = null,
                    IsReconcile = false,
                    AppStateId = null,
                    InfoMinus = null,
                    InfoPlus = null,
                    IsMinus = false,
                    IsPlus = true,
                    CreatedByUser = null,
                    NIRDate = null,
                    NIRNumber = 0,
                    PIFDate = assetImport.PIFDate,
                    PIFNumber = 0,
                    Budget = null,
                    Order = null,
                    AllowLabel = true,
                    AgreementNo = string.Empty,
                    Manufacturer = assetImport.ManufacturerNo,
                    MaterialId = null,
                    SubNo = assetImport.SubNo,
                    DivisionId = costCenter != null ? costCenter.DivisionId : null,
                    InInventory = true,
                };

                _context.Add(asset);

                assetOp = new Model.AssetOp()
                {
                    AccSystemId = assetImport.AccSystemId,
                    Asset = asset,
                    Document = document,
                    AssetCategoryInitial = assetCategory,
                    AssetCategoryFinal = assetCategory,
                    AssetStateIdFinal = assetImport.AssetStateId,
                    AssetStateIdInitial = assetImport.AssetStateId,
                    InvStateIdInitial = assetImport.InvStateId,
                    InvStateIdFinal = assetImport.InvStateId,
                    CostCenterInitial = costCenter,
                    CostCenterFinal = costCenter,
                    DepartmentIdInitial = costCenter != null && costCenter.Division != null ? costCenter.Division.DepartmentId : null,
                    DepartmentIdFinal = costCenter != null && costCenter.Division != null ? costCenter.Division.DepartmentId : null,
                    RoomIdInitial = costCenter != null ? costCenter.RoomId : null,
                    RoomIdFinal = costCenter != null ? costCenter.RoomId : null,
                    AdministrationIdInitial = assetImport.AdministrationId,
                    AdministrationIdFinal = assetImport.AdministrationId,
                    BudgetManagerIdInitial = assetImport.BudgetManagerId,
                    BudgetManagerIdFinal = assetImport.BudgetManagerId,
                    AssetNatureIdInitial = null,
                    AssetNatureIdFinal = null,
                    EmployeeInitial = employee,
                    EmployeeFinal = employee,
                    InsuranceCategoryId = null,
                    AssetTypeIdInitial = assetImport.AssetTypeId,
                    AssetTypeIdFinal = assetImport.AssetTypeId,
                    ProjectIdInitial = null,
                    ProjectIdFinal = null,
                    Quantity = assetImport.Quantity,
                    SerialNumber = assetImport.SerialNumber,
                    CompanyId = assetImport.CompanyId,
                    UomId = assetImport.UomId
                };

                _context.Add(assetOp);

                var inventoryAssetOld = await _context.Set<Model.InventoryAsset>().Where(ia => ia.InventoryId == assetImport.InventoryId && ia.AssetId == asset.Id).FirstOrDefaultAsync();

                if (inventoryAssetOld == null)
                {
                    inventoryAsset = new Model.InventoryAsset()
                    {
                        CostCenterInitial = costCenter,
                        EmployeeInitial = employee,
                        Model = string.Empty,
                        Producer = string.Empty,
                        QFinal = 0,
                        QInitial = assetImport.Quantity,
                        RoomIdInitial = costCenter != null ? costCenter.RoomId : null,
                        SerialNumber = string.Empty,
                        StateIdInitial = assetImport.InvStateId,
                        AdministrationIdInitial = assetImport.AdministrationId,
                        Asset = asset,
                        InventoryId = assetImport.InventoryId,
                        SNInitial = assetImport.SerialNumber,
                        IsTemp = false,
                        CurrBkValue = assetImport.CurrBkValue,
                        AccumulDep = assetImport.AccumulDep,
                        CurrentAPC = assetImport.CurrentAPC
                    };

                    _context.Add(inventoryAsset);
                }


                assetAc = new Model.AssetAC
                {
                    AssetClassTypeId = assetImport.AssetClassTypeId,
                    Asset = asset,
                    AssetClassId = assetImport.AssetClassId,
                    AssetClassIdIn = assetImport.AssetClassId
                };


                _context.Set<Model.AssetAC>().Add(assetAc);

                assetDep = new Model.AssetDep
                {
                    AccSystemId = assetImport.AccSystemId,
                    Asset = asset,
                    DepPeriod = assetImport.ExpLifeInPeriods,
                    DepPeriodIn = assetImport.UsefulLife,
                    DepPeriodMonth = assetImport.RemLifeInPeriods,
                    DepPeriodMonthIn = assetImport.RemLifeInPeriods,
                    DepPeriodRem = assetImport.TotLifeInPeriods,
                    DepPeriodRemIn = assetImport.TotLifeInPeriods,
                    UsageStartDate = assetImport.UsageStartDate,
                    //UsageEndDate = assetImport.UsageEndDate,
                    ValueDep = assetImport.AccumulDep,
                    ValueDepIn = assetImport.APCFYStart,
                    ValueDepPU = assetImport.BkValFYStart,
                    ValueDepPUIn = assetImport.Acquisition,
                    ValueDepYTD = assetImport.CurrentAPC,
                    ValueDepYTDIn = assetImport.CurrBkValue,
                    ValueInv = assetImport.DepForYear,
                    ValueInvIn = assetImport.DepFYStart,
                    ValueRem = assetImport.PosCap,
                    ValueRemIn = assetImport.DepPostCap,
                    ValueRet = assetImport.DepRetirement,
                    ValueRetIn = assetImport.DepTransfer,
                    ValueTr = assetImport.Retirement,
                    ValueTrIn = assetImport.Transfer
                };

                _context.Set<Model.AssetDep>().Add(assetDep);

                assetInv = new Model.AssetInv
                {
                    Asset = asset,
                    AllowLabel = true,
                    //Barcode = "TO" + newInvNo.ToString(),
                    Info = string.Empty,
                    InvName = string.Empty,
                    InvNoOld = String.Empty,
                    Model = string.Empty,
                    Producer = string.Empty,
                    InvStateId = assetImport.InvStateId
                };

                _context.Set<Model.AssetInv>().Add(assetInv);

                assetDepMD = new Model.AssetDepMD
                {
                    AccMonthId = assetImport.AccMonthId,
                    AccSystemId = assetImport.AccSystemId,
                    Asset = asset,
                    UsefulLife = assetImport.UsefulLife,
                    TotLifeInpPeriods = assetImport.TotLifeInPeriods,
                    ExpLifeInPeriods = assetImport.ExpLifeInPeriods,
                    RemLifeInPeriods = assetImport.RemLifeInPeriods,
                    APCFYStart = assetImport.APCFYStart,
                    DepFYStart = assetImport.DepFYStart,
                    BkValFYStart = assetImport.BkValFYStart,
                    Acquisition = assetImport.Acquisition,
                    DepForYear = assetImport.DepForYear,
                    Retirement = assetImport.Retirement,
                    DepRetirement = assetImport.DepRetirement,
                    CurrBkValue = assetImport.CurrBkValue,
                    Transfer = assetImport.Transfer,
                    DepTransfer = assetImport.DepTransfer,
                    PosCap = assetImport.PosCap,
                    DepPostCap = assetImport.DepPostCap,
                    InvestSupport = assetImport.InvestSupport,
                    WriteUps = assetImport.WriteUps,
                    CurrentAPC = assetImport.CurrentAPC,
                    AccumulDep = assetImport.AccumulDep,
                };

                _context.Set<Model.AssetDepMD>().Add(assetDepMD);

                assetAdmMD = new Model.AssetAdmMD
                {
                    AccMonthId = assetImport.AccMonthId,
                    Asset = asset,
                    AdministrationId = assetImport.AdministrationId,
                    AssetCategory = assetCategory,
                    AssetStateId = assetImport.AssetStateId,
                    AssetTypeId = assetImport.AssetTypeId,
                    CostCenter = costCenter,
                    DepartmentId = costCenter != null && costCenter.Division != null ? costCenter.Division.DepartmentId : null,
                    Employee = employee,
                    RoomId = costCenter != null ? costCenter.RoomId : null,
                    AssetClassId = assetImport.AssetClassId,
                    
                    AssetNatureId = null,
                    BudgetManagerId = assetImport.BudgetManagerId,
                    
                    
                    SubTypeId = null,
                    InsuranceCategoryId = null,
                    BrandId = null,
                    ModelId = null,
                    ProjectId = null,
                    DivisionId = costCenter != null ? costCenter.DivisionId : null,
                    AdmCenterId = admCenter != null ? admCenter.Id : (int?)null
                };

                _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);

                _context.SaveChanges();

            }
            //else
            //{
            //    asset.IsDeleted = false;
            //    asset.AssetStateId = 1;
            //    asset.ModifiedAt = DateTime.Now;
            //    asset.AdministrationId = assetImport.AdministrationId,
            //    asset.AssetCategory = assetCategory;
            //    asset.AssetStateId = assetState.Id;
            //    asset.AssetType = assetType;
            //    asset.Company = company;
            //    asset.CostCenter = costCenter;
            //    asset.DepartmentId = costCenter != null && costCenter.Division != null ? costCenter.Division.DepartmentId : null;
            //    asset.Document = document;
            //    asset.ERPCode = String.Empty;
            //    asset.EmployeeId = null;
            //    asset.InvNo = assetImport.InvNo;
            //    asset.InvStateId = invState.Id;
            //    asset.ModifiedAt = DateTime.Now;
            //    asset.Name = Encoding.ASCII.GetString(Encoding.ASCII.GetBytes(assetImport.Description));
            //    asset.PurchaseDate = assetImport.PIFDate;
            //    asset.Quantity = assetImport.Quantity;
            //    asset.RoomId = costCenter != null ? costCenter.RoomId : null;
            //    asset.SerialNumber = assetImport.SerialNumber.Trim();
            //    asset.UomId = uom.Id;
            //    asset.ValueInv = assetImport.DepForYear;
            //    asset.ValueRem = assetImport.AccumulDep;
            //    asset.ArticleId = article.Id;
            //    asset.BudgetManagerId = inventory.BudgetManagerId;
            //    asset.AssetNatureId = null;
            //    asset.AccountId = account.Id;
            //    
            //    asset.SAPCode = String.Empty;
            //    asset.SubTypeId = null;
            //    asset.InsuranceCategoryId = null;
            //    asset.BrandId = null;
            //    asset.ModelId = null;
            //    asset.InterCompanyId = null;
            //    asset.ProjectId = null;
            //    asset.InvoiceDate = assetImport.UsageStartDate;
            //    asset.RemovalDate = assetImport.RemovalDate;
            //    asset.Dimension = dimension;
            //    asset.PIFDate = assetImport.PIFDate;
            //    asset.AgreementNo = assetImport.AgreementNo;
            //    asset.Manufacturer = assetImport.ManufacturerNo;
            //    asset.MaterialId = null;
            //    asset.SubNo = assetImport.SubNo;
            //    asset.DivisionId = costCenter != null ? costCenter.DivisionId : null;


            //    document = _context.Set<Model.Document>().Where(d => d.Id == asset.DocumentId).FirstOrDefault();

            //    if (document != null)
            //    {
            //        document.DocNo1 = assetImport.AgreementNo;
            //        document.DocNo2 = assetImport.ManufacturerNo;

            //        _context.Set<Model.Document>().Update(document);
            //    }

            //    assetInv = _context.Set<Model.AssetInv>().Where(a => a.AssetId == asset.Id).FirstOrDefault();

            //    if (assetInv == null)
            //    {
            //        assetInv = new Model.AssetInv
            //        {
            //            Asset = asset,
            //            AllowLabel = true,
            //            Info = string.Empty,
            //            InvName = string.Empty,
            //            InvNoOld = String.Empty,
            //            Model = string.Empty,
            //            Producer = string.Empty,
            //            InvStateId = invState.Id
            //        };

            //        _context.Set<Model.AssetInv>().Add(assetInv);
            //    }
            //    else
            //    {

            //        assetInv.InvNoOld = String.Empty;
            //        assetInv.InvStateId = invState.Id;

            //        _context.Set<Model.AssetInv>().Update(assetInv);
            //    }


            //    assetDep = await _context.Set<Model.AssetDep>().Where(a => a.AssetId == asset.Id).FirstOrDefaultAsync();

            //    if (assetDep != null)
            //    {

            //        assetDep.DepPeriod = assetImport.ExpLifeInPeriods;
            //        assetDep.DepPeriodIn = assetImport.UsefulLife;
            //        assetDep.DepPeriodMonth = assetImport.RemLifeInPeriods;
            //        assetDep.DepPeriodMonthIn = assetImport.RemLifeInPeriods;
            //        assetDep.DepPeriodRem = assetImport.TotLifeInPeriods;
            //        assetDep.DepPeriodRemIn = assetImport.TotLifeInPeriods;
            //        assetDep.UsageStartDate = assetImport.UsageStartDate;
            //        UsageEndDate = assetImport.UsageEndDate,
            //        assetDep.ValueDep = assetImport.AccumulDep;
            //        assetDep.ValueDepIn = assetImport.APCFYStart;
            //        assetDep.ValueDepPU = assetImport.BkValFYStart;
            //        assetDep.ValueDepPUIn = assetImport.Acquisition;
            //        assetDep.ValueDepYTD = assetImport.CurrentAPC;
            //        assetDep.ValueDepYTDIn = assetImport.CurrBkValue;
            //        assetDep.ValueInv = assetImport.DepForYear;
            //        assetDep.ValueInvIn = assetImport.DepFYStart;
            //        assetDep.ValueRem = assetImport.PosCap;
            //        assetDep.ValueRemIn = assetImport.DepPostCap;
            //        assetDep.ValueRet = assetImport.DepRetirement;
            //        assetDep.ValueRetIn = assetImport.DepTransfer;
            //        assetDep.ValueTr = assetImport.Retirement;
            //        assetDep.ValueTrIn = assetImport.Transfer;

            //        _context.Set<Model.AssetDep>().Update(assetDep);

            //    }
            //    else
            //    {
            //        assetDep = new Model.AssetDep
            //        {
            //            AccSystemId = assetImport.AccSystemId,
            //            Asset = asset,
            //            DepPeriod = assetImport.ExpLifeInPeriods,
            //            DepPeriodIn = assetImport.UsefulLife,
            //            DepPeriodMonth = assetImport.RemLifeInPeriods,
            //            DepPeriodMonthIn = assetImport.RemLifeInPeriods,
            //            DepPeriodRem = assetImport.TotLifeInPeriods,
            //            DepPeriodRemIn = assetImport.TotLifeInPeriods,
            //            UsageStartDate = assetImport.UsageStartDate,
            //            UsageEndDate = assetImport.UsageEndDate,
            //            ValueDep = assetImport.AccumulDep,
            //            ValueDepIn = assetImport.APCFYStart,
            //            ValueDepPU = assetImport.BkValFYStart,
            //            ValueDepPUIn = assetImport.Acquisition,
            //            ValueDepYTD = assetImport.CurrentAPC,
            //            ValueDepYTDIn = assetImport.CurrBkValue,
            //            ValueInv = assetImport.DepForYear,
            //            ValueInvIn = assetImport.DepFYStart,
            //            ValueRem = assetImport.PosCap,
            //            ValueRemIn = assetImport.DepPostCap,
            //            ValueRet = assetImport.DepRetirement,
            //            ValueRetIn = assetImport.DepTransfer,
            //            ValueTr = assetImport.Retirement,
            //            ValueTrIn = assetImport.Transfer
            //        };

            //        _context.Set<Model.AssetDep>().Add(assetDep);
            //    }

            //    inventoryAsset = await _context.Set<Model.InventoryAsset>().Where(ia => ia.InventoryId == assetImport.InventoryId && ia.AssetId == asset.Id).FirstOrDefaultAsync();

            //    if (inventoryAsset == null)
            //    {
            //        inventoryAsset = new Model.InventoryAsset()
            //        {
            //            CostCenterInitial = costCenter,
            //            EmployeeIdInitial = employee != null ? employee.Id : (int?)null,
            //            Model = string.Empty,
            //            Producer = string.Empty,
            //            QFinal = 0,
            //            QInitial = assetImport.Quantity,
            //            RoomIdInitial = costCenter != null ? costCenter.RoomId : null,
            //            SerialNumber = string.Empty,
            //            StateIdInitial = assetImport.InvStateId,
            //            AdministrationIdInitial = assetImport.AdministrationId,
            //            Asset = asset,
            //            InventoryId = assetImport.InventoryId,
            //            SNInitial = assetImport.SerialNumber,
            //            IsTemp = false,
            //            CurrBkValue = assetImport.CurrBkValue,
            //            AccumulDep = assetImport.AccumulDep,
            //            CurrentAPC = assetImport.CurrentAPC
            //        };

            //        _context.Add(inventoryAsset);
            //    }
            //    else
            //    {
            //        if (inventoryAsset.CostCenterIdFinal == null)
            //        {
            //            inventoryAsset.CostCenterFinal = costCenter;
            //            inventoryAsset.QFinal = inventoryAsset.QInitial;
            //            inventoryAsset.RoomIdFinal = inventoryAsset.RoomIdInitial;
            //            inventoryAsset.SerialNumber = assetImport.SerialNumber;
            //            inventoryAsset.StateIdFinal = inventoryAsset.StateIdInitial;
            //            inventoryAsset.Info2019 = assetImport.ScanUser;
            //            inventoryAsset.ModifiedAt = assetImport.ScanDate;

            //            inventoryAsset.CostCenterInitial = costCenter;

            //            if (employee != null)
            //            {
            //                inventoryAsset.EmployeeIdInitial = employee.Id;
            //            }

            //            inventoryAsset.QInitial = assetImport.Quantity;
            //            inventoryAsset.RoomIdInitial = costCenter != null ? costCenter.RoomId : null;
            //            inventoryAsset.StateIdInitial = assetImport.InvStateId;
            //            inventoryAsset.AdministrationIdInitial = assetImport.AdministrationId;
            //            inventoryAsset.SNInitial = assetImport.SerialNumber;
            //            inventoryAsset.CurrBkValue = assetImport.CurrBkValue;
            //            inventoryAsset.AccumulDep = assetImport.AccumulDep;
            //            inventoryAsset.CurrentAPC = assetImport.CurrentAPC;

            //            _context.Set<Model.InventoryAsset>().Update(inventoryAsset);
            //        }
            //        else
            //        {
            //            inventoryAsset.CurrBkValue = assetImport.CurrBkValue;
            //            inventoryAsset.AccumulDep = assetImport.AccumulDep;
            //            inventoryAsset.CurrentAPC = assetImport.CurrentAPC;

            //            _context.Set<Model.InventoryAsset>().Update(inventoryAsset);
            //        }


            //    }

            //    assetDepMD = await _context.Set<Model.AssetDepMD>().Where(a => a.AssetId == asset.Id && a.AccMonthId == assetImport.AccMonthId).FirstOrDefaultAsync();

            //    if (assetDepMD == null)
            //    {
            //        assetDepMD = new Model.AssetDepMD
            //        {
            //            AccMonthId = assetImport.AccMonthId,
            //            AccSystemId = assetImport.AccSystemId,
            //            Asset = asset,
            //            UsefulLife = assetImport.UsefulLife,
            //            TotLifeInpPeriods = assetImport.TotLifeInPeriods,
            //            ExpLifeInPeriods = assetImport.ExpLifeInPeriods,
            //            RemLifeInPeriods = assetImport.RemLifeInPeriods,
            //            APCFYStart = assetImport.APCFYStart,
            //            DepFYStart = assetImport.DepFYStart,
            //            BkValFYStart = assetImport.BkValFYStart,
            //            Acquisition = assetImport.Acquisition,
            //            DepForYear = assetImport.DepForYear,
            //            Retirement = assetImport.Retirement,
            //            DepRetirement = assetImport.DepRetirement,
            //            CurrBkValue = assetImport.CurrBkValue,
            //            Transfer = assetImport.Transfer,
            //            DepTransfer = assetImport.DepTransfer,
            //            PosCap = assetImport.PosCap,
            //            DepPostCap = assetImport.DepPostCap,
            //            InvestSupport = assetImport.InvestSupport,
            //            WriteUps = assetImport.WriteUps,
            //            CurrentAPC = assetImport.CurrentAPC,
            //            AccumulDep = assetImport.AccumulDep,
            //        };

            //        _context.Set<Model.AssetDepMD>().Add(assetDepMD);
            //    }
            //    else
            //    {

            //        assetDepMD.AccMonthId = assetImport.AccMonthId;
            //        assetDepMD.AccSystemId = assetImport.AccSystemId;
            //        assetDepMD.Asset = asset;
            //        assetDepMD.UsefulLife = assetImport.UsefulLife;
            //        assetDepMD.TotLifeInpPeriods = assetImport.TotLifeInPeriods;
            //        assetDepMD.ExpLifeInPeriods = assetImport.ExpLifeInPeriods;
            //        assetDepMD.RemLifeInPeriods = assetImport.RemLifeInPeriods;
            //        assetDepMD.APCFYStart = assetImport.APCFYStart;
            //        assetDepMD.DepFYStart = assetImport.DepFYStart;
            //        assetDepMD.BkValFYStart = assetImport.BkValFYStart;
            //        assetDepMD.Acquisition = assetImport.Acquisition;
            //        assetDepMD.DepForYear = assetImport.DepForYear;
            //        assetDepMD.Retirement = assetImport.Retirement;
            //        assetDepMD.DepRetirement = assetImport.DepRetirement;
            //        assetDepMD.CurrBkValue = assetImport.CurrBkValue;
            //        assetDepMD.Transfer = assetImport.Transfer;
            //        assetDepMD.DepTransfer = assetImport.DepTransfer;
            //        assetDepMD.PosCap = assetImport.PosCap;
            //        assetDepMD.DepPostCap = assetImport.DepPostCap;
            //        assetDepMD.InvestSupport = assetImport.InvestSupport;
            //        assetDepMD.WriteUps = assetImport.WriteUps;
            //        assetDepMD.CurrentAPC = assetImport.CurrentAPC;
            //        assetDepMD.AccumulDep = assetImport.AccumulDep;

            //        _context.Set<Model.AssetDepMD>().Update(assetDepMD);

            //    }


            //    assetAdmMD = await _context.Set<Model.AssetAdmMD>().Where(a => a.AssetId == asset.Id && a.AccMonthId == assetImport.AccMonthId).FirstOrDefaultAsync();

            //    if (assetAdmMD == null)
            //    {
            //        assetAdmMD = new Model.AssetAdmMD
            //        {
            //            AccMonthId = assetImport.AccMonthId,
            //            Asset = asset,
            //            AdministrationId = assetImport.AdministrationId,
            //            AssetCategory = assetCategory,
            //            AssetStateId = assetImport.AssetStateId,
            //            AssetTypeId = assetImport.AssetTypeId,
            //            CostCenter = costCenter,
            //            DepartmentId = costCenter != null && costCenter.Division != null ? costCenter.Division.DepartmentId : null,
            //            EmployeeId = employee != null ? employee.Id : (int?)null,
            //            RoomId = costCenter != null ? costCenter.RoomId : null,
            //            AssetClassId = assetImport.AssetClassId,
            //            
            //            AssetNatureId = null,
            //            BudgetManagerId = assetImport.BudgetManagerId,
            //            
            //            
            //            SubTypeId = null,
            //            InsuranceCategoryId = null,
            //            BrandId = null,
            //            ModelId = null,
            //            InterCompanyId = null,
            //            ProjectId = null,
            //            DivisionId = costCenter != null ? costCenter.DivisionId : null,
            //            AdmCenterId = admCenter != null ? admCenter.Id : (int?)null
            //        };

            //        if (employee != null)
            //        {
            //            assetAdmMD.EmployeeId = employee.Id;
            //            asset.EmployeeId = employee.Id;
            //        }

            //        _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);
            //    }
            //    else
            //    {

            //        assetAdmMD.AccMonthId = assetImport.AccMonthId;
            //        assetAdmMD.Asset = asset;
            //        assetAdmMD.AdministrationId = assetImport.AdministrationId;
            //        assetAdmMD.AssetCategory = assetCategory;
            //        assetAdmMD.AssetStateId = assetImport.AssetStateId;
            //        assetAdmMD.AssetTypeId = assetImport.AssetTypeId;
            //        assetAdmMD.CostCenter = costCenter;
            //        assetAdmMD.DepartmentId = costCenter != null && costCenter.Division != null ? costCenter.Division.DepartmentId : null;
            //        assetAdmMD.EmployeeId = employee != null ? employee.Id : (int?)null;
            //        assetAdmMD.RoomId = costCenter != null ? costCenter.RoomId : null;
            //        assetAdmMD.AssetClassId = assetImport.AssetClassId;
            //        assetAdmMD.ArticleId = article.Id;
            //        assetAdmMD.AssetNatureId = null;
            //        assetAdmMD.BudgetManagerId = assetImport.BudgetManagerId;
            //        assetAdmMD.AccountId = account.Id;
            //        
            //        assetAdmMD.SubTypeId = null;
            //        assetAdmMD.InsuranceCategoryId = null;
            //        assetAdmMD.BrandId = null;
            //        assetAdmMD.ModelId = null;
            //        assetAdmMD.InterCompanyId = null;
            //        assetAdmMD.ProjectId = null;
            //        assetAdmMD.DivisionId = costCenter != null ? costCenter.DivisionId : null;
            //        assetAdmMD.AdmCenterId = admCenter != null ? admCenter.Id : (int?)null;

            //        if (employee != null)
            //        {
            //            assetAdmMD.EmployeeId = employee.Id;
            //            asset.EmployeeId = employee.Id;
            //        }

            //        _context.Set<Model.AssetAdmMD>().Update(assetAdmMD);
            //    }

            //    asset.ModifiedAt = DateTime.Now;

            //    if (assetImport.RemovalDate != null)
            //    {
            //        asset.InInventory = false;
            //    }

            //    _context.Set<Model.Asset>().Update(asset);

            //    _context.SaveChanges();
            //}

            return asset.InvNo;

        }

        /*
        //public async Task<string> AssetImportEmagUpdate(AssetImportEmag assetImport)
        //{
        //    Model.Asset asset = null;
        //    Model.AssetDepMD assetDepMD = null;

        //    string locationCode = string.Empty;
        //    string locationName = string.Empty;
        //    string roomCode = string.Empty;
        //    string roomName = string.Empty;
        //    string costCenterCode = string.Empty;
        //    string costCenterName = string.Empty;
        //    string invNo = string.Empty;
        //    string disposition = string.Empty;
        //    int accMonthId = 53;
        //    var monthSum = assetImport.RemLifeInPeriods;

        //    if (assetImport.SubNo.Length == 1)
        //    {
        //        assetImport.SubNo = "000" + assetImport.SubNo;
        //    }
        //    else if (assetImport.SubNo.Length == 2)
        //    {
        //        assetImport.SubNo = "00" + assetImport.SubNo;
        //    }
        //    else if (assetImport.SubNo.Length == 3)
        //    {
        //        assetImport.SubNo = "0" + assetImport.SubNo;
        //    }

        //    asset = await _context.Set<Model.Asset>()
        //        .Where(a => a.InvNo == assetImport.InvNo.Trim() && a.SubNo == assetImport.SubNo && a.IsDeleted == false)
        //        .FirstOrDefaultAsync();

        //    if (asset != null)
        //    {
        //        assetDepMD = await _context.Set<Model.AssetDepMD>().Where(a => a.AssetId == asset.Id && a.AccMonthId == accMonthId).FirstOrDefaultAsync();

        //        if (assetDepMD == null)
        //        {
        //            //assetDepMD = new Model.AssetDepMD
        //            //{
        //            //    AccMonthId = accMonth.Id,
        //            //    AccSystem = accSystem,
        //            //    Asset = asset,
        //            //    UsefulLife = assetImport.UsefulLife,
        //            //    TotLifeInpPeriods = assetImport.TotLifeInpPeriods,
        //            //    ExpLifeInPeriods = assetImport.ExpLifeInPeriods,
        //            //    RemLifeInPeriods = assetImport.RemLifeInPeriods,
        //            //    APCFYStart = assetImport.APCFYStart,
        //            //    DepFYStart = assetImport.DepFYStart,
        //            //    BkValFYStart = assetImport.BkValFYStart,
        //            //    Acquisition = assetImport.Acquisition,
        //            //    DepForYear = assetImport.DepForYear,
        //            //    Retirement = assetImport.Retirement,
        //            //    DepRetirement = assetImport.DepRetirement,
        //            //    CurrBkValue = assetImport.CurrBkValue,
        //            //    Transfer = assetImport.Transfer,
        //            //    DepTransfer = assetImport.DepTransfer,
        //            //    PosCap = assetImport.PosCap,
        //            //    DepPostCap = assetImport.DepPostCap,
        //            //    InvestSupport = assetImport.InvestSupport,
        //            //    WriteUps = assetImport.WriteUps,
        //            //    CurrentAPC = assetImport.CurrentAPC,
        //            //    AccumulDep = assetImport.AccumulDep,
        //            //};

        //            //_context.Set<Model.AssetDepMD>().Add(assetDepMD);
        //        }
        //        else
        //        {

        //            //assetDepMD.AccMonthId = accMonth.Id;
        //            //assetDepMD.AccSystem = accSystem;
        //            //assetDepMD.Asset = asset;
        //            assetDepMD.UsefulLife = assetImport.UsefulLife;
        //            assetDepMD.TotLifeInpPeriods = assetImport.TotLifeInPeriods;
        //            assetDepMD.ExpLifeInPeriods = assetImport.ExpLifeInPeriods;
        //            assetDepMD.RemLifeInPeriods = assetImport.RemLifeInPeriods;
        //            assetDepMD.APCFYStart = assetImport.APCFYStart;
        //            assetDepMD.DepFYStart = assetImport.DepFYStart;
        //            assetDepMD.BkValFYStart = assetImport.BkValFYStart;
        //            assetDepMD.Acquisition = assetImport.Acquisition;
        //            assetDepMD.DepForYear = assetImport.DepForYear;
        //            assetDepMD.Retirement = assetImport.Retirement;
        //            assetDepMD.DepRetirement = assetImport.DepRetirement;
        //            assetDepMD.CurrBkValue = assetImport.CurrBkValue;
        //            assetDepMD.Transfer = assetImport.Transfer;
        //            assetDepMD.DepTransfer = assetImport.DepTransfer;
        //            assetDepMD.PosCap = assetImport.PosCap;
        //            assetDepMD.DepPostCap = assetImport.DepPostCap;
        //            assetDepMD.InvestSupport = assetImport.InvestSupport;
        //            assetDepMD.WriteUps = assetImport.WriteUps;
        //            assetDepMD.CurrentAPC = assetImport.CurrentAPC;
        //            assetDepMD.AccumulDep = assetImport.AccumulDep;

        //            _context.Set<Model.AssetDepMD>().Update(assetDepMD);

        //            _context.SaveChanges();
        //        }
        //    }

        //    return assetImport.InvNo;

        //}
        */

        public int AssetImportV7(AssetImportV7 assetImport)
        {
            Model.Asset asset = null;
            Model.AssetCategory assetCategory = null;
            Model.CostCenter costCenter = null;
            Model.Location location = null;
            Model.Document document = null;
            Model.InventoryAsset inventoryAsset = null;
            Model.AssetOp assetOp = null;
            Model.Inventory inventory = null;
            Model.Partner partner = null;
            Model.Region region = null;
            Model.InvState invState = null;
            Model.AdmCenter admCenter = null;

            string assetTypeCode = "ASSET";
            string documentTypeCode = "PURCHASE";
            string partnerFiscalCode = "_NSP";
            string locationCode = string.Empty;
            string locationName = string.Empty;
            string roomCode = string.Empty;
            string roomName = string.Empty;
            string costCenterCode = string.Empty;
            string costCenterName = string.Empty;
            string invNo = string.Empty;
            string nameRegionDefault = "Alliantz Tiriac";
            string nameLocationDefault = "_Nespecificat";

            var assetType = _context.Set<Model.AssetType>().Where(a => a.Code == assetTypeCode).Single();
            var documentType = _context.Set<Model.DocumentType>().Where(d => d.Code == documentTypeCode).Single();




            assetCategory = _context.Set<Model.AssetCategory>().Where(a => a.Code == assetImport.AssetCategory.Trim()).FirstOrDefault();
            if (assetCategory == null)
            {
                assetCategory = new Model.AssetCategory();
                assetCategory.Code = assetImport.AssetCategory.Trim();
                assetCategory.Name = assetImport.AssetCategory.Trim();
                assetCategory.IsDeleted = false;
                _context.Set<Model.AssetCategory>().Add(assetCategory);
            }

            invState = _context.Set<Model.InvState>().Where(a => a.Name == assetImport.AssetState.Trim()).FirstOrDefault();
            if (invState == null)
            {
                invState = new Model.InvState();
                invState.Code = assetImport.AssetState.Trim();
                invState.Name = assetImport.AssetState.Trim();
                invState.IsDeleted = false;
                _context.Set<Model.InvState>().Add(invState);
            }

            costCenterCode = assetImport.CostCenter.Trim();
            costCenterName = costCenterCode;
            costCenter = _context.Set<Model.CostCenter>().Where(a => a.Code == costCenterCode).FirstOrDefault();
            if (costCenter == null)
            {
                costCenter = new Model.CostCenter();
                costCenter.Code = costCenterCode;
                costCenter.Name = costCenterName;
                costCenter.IsDeleted = false;
                _context.Set<Model.CostCenter>().Add(costCenter);
            }

            var employee = _context.Set<Model.Employee>().Where(e => e.FirstName == assetImport.Room.Trim()).SingleOrDefault();
            if (employee == null)
            {


                employee = new Model.Employee();
                employee.InternalCode = string.Empty;
                employee.CostCenter = costCenter;
                employee.FirstName = assetImport.Room;
                employee.LastName = string.Empty;
                employee.IsDeleted = false;
                _context.Set<Model.Employee>().Add(employee);
            }

            region = _context.Set<Model.Region>().Where(a => a.Name == nameRegionDefault).FirstOrDefault();
            if (region == null)
            {
                region = new Model.Region();
                region.Code = string.Empty;
                region.Name = nameRegionDefault;
                region.IsDeleted = false;
                _context.Set<Model.Region>().Add(region);
            }

            admCenter = _context.Set<Model.AdmCenter>().Where((a => a.Name == nameRegionDefault)).FirstOrDefault();
            if (admCenter == null)
            {
                admCenter = new Model.AdmCenter();
                admCenter.Code = string.Empty;
                admCenter.Name = nameRegionDefault;
                admCenter.IsDeleted = false;
                _context.Set<Model.AdmCenter>().Add(admCenter);
            }

            location = _context.Set<Model.Location>().Where(a => a.Name == assetImport.Location.Trim()).FirstOrDefault();
            if (location == null)
            {
                location = new Model.Location();
                location.Code = string.Empty;
                //location.CostCenter = costCenter;
                location.Name = assetImport.Location;
                location.IsDeleted = false;
                location.RegionId = region.Id;
                _context.Set<Model.Location>().Add(location);
            }

            var room = _context.Set<Model.Room>().Where(r => ((r.Name == assetImport.CostCenter.Trim() && r.LocationId == location.Id))).SingleOrDefault();
            if (room == null)
            {
                room = new Model.Room();
                room.Code = string.Empty;
                room.Name = assetImport.CostCenter.Trim();
                room.Location = location;
                room.IsDeleted = false;
                //room.CostCenterId = costCenter.Id;
                _context.Set<Model.Room>().Add(room);
            }

            partner = _context.Set<Model.Partner>().Where(a => a.FiscalCode == partnerFiscalCode.Trim()).FirstOrDefault();
            if (partner == null)
            {
                partner = new Model.Partner();
                partner.Name = partnerFiscalCode;
                partner.FiscalCode = partnerFiscalCode;
                partner.RegistryNumber = string.Empty;
                partner.IsDeleted = false;

                _context.Set<Model.Partner>().Add(partner);
            }


            invNo = assetImport.InvNo.Trim();
            asset = _context.Set<Model.Asset>().Where(a => a.InvNo == invNo).SingleOrDefault();


            if (asset == null) //nu exista in bd, asset nou
            {
                document = new Model.Document();
                document.Approved = true;
                document.DocumentType = documentType;
                document.DocNo1 = string.Empty;
                document.DocNo2 = string.Empty;
                document.DocumentDate = DateTime.Now;
                document.RegisterDate = DateTime.Now;
                document.Partner = partner;

                _context.Add(document);

                asset = new Model.Asset()
                {
                    InvNo = invNo,
                    Document = document,
                    Employee = employee,
                    Room = room,
                    AssetTypeId = assetType.Id,
                    PurchaseDate = DateTime.Now,
                    Quantity = 1,
                    Validated = true,
                    InvState = invState
                };

                _context.Add(asset);

                assetOp = new Model.AssetOp()
                {
                    Asset = asset,
                    Document = document,
                    RoomInitial = room,
                    RoomFinal = room,
                    EmployeeInitial = employee,
                    EmployeeFinal = employee,
                    CostCenterInitial = costCenter,
                    CostCenterFinal = costCenter,
                    AssetCategoryIdInitial = null,
                    AssetCategoryFinal = assetCategory
                };

                _context.Add(assetOp);

                inventory = _context.Set<Model.Inventory>().OrderByDescending(i => i.Id).FirstOrDefault();

                if (inventory != null)
                {
                    inventoryAsset = new Model.InventoryAsset()
                    {
                        Asset = asset,
                        Inventory = inventory,
                        QInitial = 1,
                        QFinal = 1,
                        EmployeeInitial = employee,
                        RoomInitial = room,
                        CostCenterInitial = costCenter
                    };

                    _context.Add(inventoryAsset);
                }

                //hasChanges = true;
            }
            //else
            //{
            //    assetCategoryPrev = _context.Set<Model.AssetCategory>().SingleOrDefault(a => a.Id == asset.AssetCategoryId);
            //    if (assetImport.AssetCategory.Trim() != assetCategoryPrev.Name.Trim()) hasChanges = true;
            //    assetOpPrev = _context.Set<Model.AssetOp>().Where(a => a.AssetId == asset.Id).OrderByDescending(a => a.AssetId).Take(1).SingleOrDefault();
            //    costCenterPrev = _context.Set<Model.CostCenter>().Where(a => a.Id == asset.CostCenterId).SingleOrDefault();
            //    if (assetImport.CostCenter.Trim() != costCenterPrev.Name.Trim()) hasChanges = true;
            //    hasChanges = asset.CostCenter.Name != assetImport.CostCenter  || asset.AssetCategory.Name != assetImport.AssetCategory  || asset.ValueInv != assetImport.ValueInv;
            //}

            asset.Name = Encoding.ASCII.GetString(Encoding.ASCII.GetBytes(assetImport.AssetName));
            asset.CostCenter = costCenter;
            asset.AssetCategory = assetCategory;
            asset.ValueInv = 0;
            asset.PurchaseDate = DateTime.Now;
            //asset.SerialNumber = assetImport.SerialNumber != null ? assetImport.SerialNumber.Trim() : string.Empty;

            //if (hasChanges)
            //{
            //    asset.Name = assetImport.AssetName ?? "";
            //    asset.PurchaseDate = new DateTime(1899, 12, 30).Add(new TimeSpan(Convert.ToInt32(assetImport.PurchaseDate), 0, 0, 0));
            //    asset.SerialNumber = assetImport.SN;
            //    asset.ERPCode = "";
            //    asset.Quantity = assetImport.Quantity;
            //    asset.Validated = true;
            //    asset.ValueInv = assetImport.ValueInv;
            //    asset.CostCenter = costCenter;
            //    asset.AssetCategory = assetCategory;

            //    document = new Model.Document();
            //    document.Approved = true;
            //    document.DocumentTypeId = 1;
            //    document.DocNo1 = assetImport.DocNo1 ?? string.Empty;
            //    document.DocNo2 = assetImport.DocNo1 ?? string.Empty;
            //    document.DocumentDate = new DateTime(1899, 12, 30).Add(new TimeSpan(Convert.ToInt32(assetImport.PurchaseDate), 0, 0, 0));
            //    document.RegisterDate = new DateTime(1899, 12, 30).Add(new TimeSpan(Convert.ToInt32(assetImport.PurchaseDate), 0, 0, 0));

            //    document.Partner = partner;

            //    _context.Add(document);


            //    assetOp = new Model.AssetOp()
            //    {
            //        Asset = asset,
            //        Document = document,
            //        EmployeeFinal = employee,
            //        RoomFinal = room,
            //        InvStateIdInitial = 1,
            //        InvStateIdFinal = 1,
            //        EmployeeIdInitial = 625,
            //        EmployeeIdFinal = 625,
            //        RoomIdInitial = 51,
            //        RoomIdFinal = 51
            //    };

            //    if (assetOpPrev != null)
            //    {

            //        if (assetOpPrev.Asset.CostCenterId != null)
            //        {
            //            assetOp.CostCenterIdInitial = assetOpPrev.Asset.CostCenterId;
            //        }
            //        else
            //        {
            //            assetOp.CostCenterIdInitial = costCenter.Id;
            //        }
            //        //assetOp.CostCenterIdInitial = assetOpPrev.Asset.CostCenterId;
            //        assetOp.CostCenterIdFinal = costCenter.Id;

            //        if (assetOpPrev.Asset.AssetCategoryId != null)
            //        {
            //            assetOp.AssetCategoryIdInitial = assetOpPrev.Asset.AssetCategoryId;
            //        }
            //        else
            //        {
            //            assetOp.AssetCategoryIdInitial = assetCategory.Id;
            //        }


            //        //assetOp.AssetCategoryIdInitial = assetOpPrev.Asset.AssetCategoryId;
            //        assetOp.AssetCategoryIdFinal = assetCategory.Id;

            //        _context.Add(assetOp);

            //    }

            //    _context.SaveChanges();
            //}

            _context.SaveChanges();
            return asset.Id;
        }

        public int AssetImportV8(AssetImportV8 assetImport)
        {


            Model.Asset asset = null;
            Model.Asset assetDuplicate = null;
            Model.AssetCategory assetCategory = null;
            Model.CostCenter costCenter = null;
            Model.Location location = null;
            Model.Document document = null;
            Model.InventoryAsset inventoryAsset = null;
            Model.InventoryAsset inventoryAssetPrev = null;
            Model.AssetOp assetOp = null;
            Model.AssetOp assetOpPrev = null;
            Model.Inventory inventory = null;
            Model.Partner partner = null;
            Model.Region region = null;
            Model.AdmCenter admCenter = null;
            Model.Employee employee = null;
            Model.InvState invState = null;
            Model.AssetType assetType = null;
            Model.AssetState assetState = null;
            Model.AssetClass assetClass = null;
            Model.AssetClassType assetClassType = null;
            Model.Room room = null;
            Model.Administration administration = null;
            Model.AssetAC assetAc = null;
            Model.AssetDep assetDep = null;
            Model.AssetDepMD assetDepMD = null;
            Model.AccSystem accSystem = null;
            Model.AccMonth accMonth = null;
            Model.AssetAdmMD assetAdmMD = null;
            Model.AssetInv assetInv = null;





            string codeDefault = "_NSP";
            string documentTypeCode = "PURCHASE";
            string assetClassTypeDefault = "RAS";
            string locationCode = string.Empty;


            string costCenterCode = string.Empty;
            string costCenterName = string.Empty;
            string invNo = string.Empty;
            string disposition = string.Empty;
            string nameDefault = "_Nespecificat";
            string TransactionTypeCode = "CASARE";
            bool isNew = false;


            string assetTypeCode = assetImport.AssetType.Trim();

            assetType = _context.Set<Model.AssetType>().Where(a => (a.Code == assetTypeCode)).FirstOrDefault();

            if (assetType == null)
            {
                assetType = new Model.AssetType
                {
                    Code = assetTypeCode,
                    Name = assetTypeCode,
                    IsDeleted = false
                };
                _context.Set<Model.AssetType>().Add(assetType);
            }

            assetClassType = _context.Set<Model.AssetClassType>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();

            if (assetClassType == null)
            {
                assetClassType = new Model.AssetClassType
                {
                    Code = assetClassTypeDefault,
                    Name = assetClassTypeDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AssetClassType>().Add(assetClassType);
            }

            assetClass = _context.Set<Model.AssetClass>().Where(a => (a.Code == assetImport.AssetClassCode.Trim())).FirstOrDefault();

            if (assetClass == null)
            {
                assetClass = new Model.AssetClass
                {
                    Code = assetImport.AssetClassCode.Trim(),
                    Name = assetImport.AssetClassName.Trim(),
                    IsDeleted = false,
                    AssetClassType = assetClassType
                };
                _context.Set<Model.AssetClass>().Add(assetClass);
            }

            accSystem = _context.Set<Model.AccSystem>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();

            if (accSystem == null)
            {
                accSystem = new Model.AccSystem
                {
                    AssetClassType = assetClassType,
                    Code = assetClassTypeDefault,
                    Name = assetClassTypeDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AccSystem>().Add(accSystem);
            }

            administration = _context.Set<Model.Administration>().Where(a => (a.Code == assetImport.AssetClassCode.Trim())).FirstOrDefault();

            if (administration == null)
            {
                administration = new Model.Administration
                {
                    Code = assetImport.AssetClassCode.Trim(),
                    Name = assetImport.AssetClassName.Trim(),
                    IsDeleted = false
                };

                _context.Set<Model.Administration>().Add(administration);
            }


            string assetStateCode = assetImport.AssetState.Trim();
            assetState = _context.Set<Model.AssetState>().Where(a => (a.Code == assetStateCode)).FirstOrDefault();

            if (assetState == null)
            {
                assetState = new Model.AssetState
                {
                    Code = assetStateCode,
                    Name = assetStateCode,
                    IsDeleted = false
                };
                _context.Set<Model.AssetState>().Add(assetState);
            }
            var documentType = _context.Set<Model.DocumentType>().Where(d => d.Code == documentTypeCode).Single();

            string internalCode = assetImport.InternalCode != null && assetImport.InternalCode.Trim().Length > 0
                ? assetImport.InternalCode.Trim() : codeDefault;
            employee = _context.Set<Model.Employee>().Where(e => e.InternalCode == internalCode).FirstOrDefault();

            if (employee == null)
            {
                employee = new Model.Employee();

                string firstName = assetImport.FirstName != null && assetImport.FirstName.Trim().Length > 0
                    ? assetImport.FirstName.Trim() : nameDefault;
                string lastName = assetImport.LastName != null && assetImport.LastName.Trim().Length > 0
                    ? assetImport.LastName.Trim() : nameDefault;

                employee.InternalCode = internalCode;
                employee.FirstName = firstName;
                employee.LastName = lastName;
                employee.IsDeleted = false;

                _context.Set<Model.Employee>().Add(employee);
            }

            assetCategory = _context.Set<Model.AssetCategory>().Where(a => a.Code == assetImport.AssetCategoryCode.Trim()).FirstOrDefault();
            if (assetCategory == null)
            {
                assetCategory = new Model.AssetCategory
                {
                    Code = assetImport.AssetCategoryCode,
                    Name = assetImport.AssetCategoryName,
                    IsDeleted = false
                };
                _context.Set<Model.AssetCategory>().Add(assetCategory);
            }

            costCenterCode = assetImport.CostCenterCode.Trim();
            costCenterName = assetImport.CostCenterName.Trim();
            costCenter = _context.Set<Model.CostCenter>().Where(a => a.Code == costCenterCode).FirstOrDefault();
            if (costCenter == null)
            {
                costCenter = new Model.CostCenter
                {
                    Code = costCenterCode,
                    Name = costCenterName,
                    IsDeleted = false
                };
                _context.Set<Model.CostCenter>().Add(costCenter);
            }
            region = _context.Set<Model.Region>().Where(r => (r.Code == assetImport.RegionCode.Trim())).FirstOrDefault();
            if (region == null)
            {
                region = new Model.Region
                {
                    Code = assetImport.RegionCode.Trim(),
                    Name = assetImport.RegionName.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Region>().Add(region);
            }

            admCenter = _context.Set<Model.AdmCenter>().Where(r => (r.Code == assetImport.RegionCode.Trim())).FirstOrDefault();
            if (admCenter == null)
            {
                admCenter = new Model.AdmCenter
                {
                    Code = assetImport.RegionCode.Trim(),
                    Name = assetImport.RegionName.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AdmCenter>().Add(admCenter);
            }

            //string locationCode = assetImport.LocationCode != null && assetImport.LocationCode.Trim().Length > 0
            //                ? assetImport.LocationCode.Trim() : codeDefault;
            string locationName = assetImport.LocationName != null && assetImport.LocationName.Trim().Length > 0
                            ? assetImport.LocationName.Trim() : nameDefault;

            //string roomCode = assetImport.RoomCode != null && assetImport.RoomCode.Trim().Length > 0
            //                ? assetImport.RoomCode.Trim() : codeDefault;
            string roomName = assetImport.RoomName != null && assetImport.RoomName.Trim().Length > 0
                            ? assetImport.RoomName.Trim() : nameDefault;
            string roomCode = roomName;

            location = _context.Set<Model.Location>().Where(l => (l.RegionId == region.Id) && (l.Name == locationName)).FirstOrDefault();

            if (location == null)
            {
                location = new Model.Location
                {
                    Code = assetImport.LocationCode.Trim(),
                    Name = assetImport.LocationName.Trim(),
                    IsDeleted = false,
                    Region = region
                };
                _context.Set<Model.Location>().Add(location);
            }
            else
            {
                room = _context.Set<Model.Room>().Where(r => ((r.LocationId == location.Id) && (r.Code == roomCode))).FirstOrDefault();
            }


            if (room == null)
            {
                room = new Model.Room
                {
                    Code = assetImport.RoomName.Trim(),
                    Name = assetImport.RoomName.Trim(),
                    Location = location,
                    IsDeleted = false
                };
                _context.Set<Model.Room>().Add(room);
            }

            partner = _context.Set<Model.Partner>().Where(a => a.FiscalCode == nameDefault).FirstOrDefault();
            if (partner == null)
            {
                partner = new Model.Partner
                {
                    Name = nameDefault,
                    FiscalCode = nameDefault,
                    RegistryNumber = string.Empty,
                    IsDeleted = false
                };

                _context.Set<Model.Partner>().Add(partner);
            }

            inventory = _context.Set<Model.Inventory>().Where(i => !i.IsDeleted && i.Active).OrderByDescending(i => i.Id).FirstOrDefault();

            asset = _context.Set<Model.Asset>().Where(a => a.InvNo == assetImport.InvNo && a.Quantity == assetImport.Quantity && a.ValueInv == assetImport.ValueInv && a.Validated == false).FirstOrDefault();

            if (asset == null) //nu exista in bd, asset nou
            {

                isNew = true;

                //    assetDuplicate = _context.Set<Model.Asset>().Where(a => a.Name == assetImport.Name.Trim() && a.Administration.Name == assetImport.AssetClassCode.Trim() && a.AssetCategory.Code == assetImport.AssetCategoryCode.Trim()
                //                && a.AssetType.Name == assetImport.AssetType.Trim() && a.CostCenter.Name == assetImport.CostCenterName.Trim() && a.Employee.InternalCode == assetImport.InternalCode.Trim() && a.PurchaseDate == assetImport.PurchaseDate
                //                 && a.Quantity == assetImport.Quantity && a.SerialNumber == assetImport.SerialNumber.Trim() && a.Room.Name == assetImport.RoomName.Trim() && a.ValueInv == assetImport.ValueInv && a.ValueRem == (assetImport.ValueDep - assetImport.ValueCassation)).FirstOrDefault();
                //    if (assetDuplicate == null)
                //    {
                document = new Model.Document
                {
                    Approved = true,
                    DocumentType = documentType,
                    DocNo1 = string.Empty,
                    DocNo2 = string.Empty,
                    DocumentDate = assetImport.PurchaseDate,
                    RegisterDate = assetImport.PurchaseDate,
                    Partner = partner
                };

                _context.Add(document);


                asset = new Model.Asset()
                {

                    InvNo = assetImport.InvNo.Trim(),
                    Document = document,
                    Employee = employee,
                    Room = room,
                    AssetTypeId = assetType.Id,
                    PurchaseDate = assetImport.PurchaseDate,
                    Quantity = assetImport.Quantity,
                    Validated = true,
                    InvStateId = 1,
                    Administration = administration



                };

                _context.Add(asset);

                assetOp = new Model.AssetOp()
                {
                    Asset = asset,
                    Document = document,
                    RoomInitial = room,
                    RoomFinal = room,
                    EmployeeInitial = employee,
                    EmployeeFinal = employee,
                    CostCenterInitial = costCenter,
                    CostCenterFinal = costCenter,
                    AssetCategoryFinal = assetCategory,
                    AssetCategoryIdInitial = assetCategory.Id,
                    InvStateIdInitial = 1,
                    InvStateIdFinal = 1,
                    AdministrationInitial = administration,
                    AdministrationFinal = administration,
                    AccSystem = accSystem
                };


                _context.Add(assetOp);

                inventory = _context.Set<Model.Inventory>().OrderByDescending(j => j.Id).FirstOrDefault();

                if (inventory != null)
                {
                    inventoryAsset = new Model.InventoryAsset()
                    {
                        Asset = asset,
                        Inventory = inventory,
                        QInitial = assetImport.Quantity,
                        QFinal = 0,
                        EmployeeInitial = employee,
                        RoomInitial = room,
                        CostCenterInitial = costCenter,
                        StateIdInitial = 1,
                        SerialNumber = assetImport.SerialNumber,
                        StateIdFinal = null

                    };



                    _context.Add(inventoryAsset);


                    assetAc = new Model.AssetAC
                    {
                        AssetClassType = assetClassType,
                        Asset = asset,
                        AssetClass = assetClass,
                        AssetClassIn = assetClass
                    };


                    _context.Set<Model.AssetAC>().Add(assetAc);

                    var monthSum = assetImport.Years > 0 ? assetImport.Years * 12 : assetImport.Months;


                    assetDep = new Model.AssetDep
                    {
                        AccSystem = accSystem,
                        Asset = asset,
                        DepPeriod = (int)monthSum,
                        DepPeriodIn = (int)monthSum,
                        DepPeriodMonth = 1,
                        DepPeriodMonthIn = 0,
                        DepPeriodRem = (int)monthSum,
                        DepPeriodRemIn = (int)monthSum,
                        UsageStartDate = assetImport.PurchaseDate,
                        ValueDep = assetImport.MonthCassationRate,
                        ValueDepIn = 0,
                        ValueDepPU = assetImport.MonthCassationRate,
                        ValueDepPUIn = 0,
                        ValueDepYTD = assetImport.ValueCassation,
                        ValueDepYTDIn = 0,
                        ValueInv = assetImport.ValueDep,
                        ValueInvIn = assetImport.ValueDep,
                        ValueRem = assetImport.ValueDep - assetImport.ValueCassation,
                        ValueRemIn = assetImport.ValueDep - assetImport.ValueCassation
                    };

                    _context.Set<Model.AssetDep>().Add(assetDep);


                    assetInv = new Model.AssetInv
                    {
                        Asset = asset,
                        AllowLabel = true,
                        Barcode = asset.InvNo,
                        Info = String.Empty,
                        InvName = asset.Name,
                        InvNoOld = String.Empty,
                        Model = String.Empty,
                        Producer = String.Empty
                    };

                    _context.Set<Model.AssetInv>().Add(assetInv);


                    accMonth = _context.Set<Model.AccMonth>().Where(a => a.IsActive == true).FirstOrDefault();

                    assetDepMD = new Model.AssetDepMD
                    {
                        AccMonth = accMonth,
                        AccSystem = accSystem,
                        Asset = asset,
                        UsefulLife = (int)monthSum,
                        TotLifeInpPeriods = 1,
                        RemLifeInPeriods = 1,
                        AccumulDep = assetImport.MonthCassationRate,
                        BkValFYStart = assetImport.MonthCassationRate,
                        DepForYear = assetImport.ValueCassation,
                        CurrentAPC = assetImport.ValueDep,
                        PosCap = assetImport.ValueDep - assetImport.ValueCassation
                    };

                    _context.Set<Model.AssetDepMD>().Add(assetDepMD);


                    assetAdmMD = new Model.AssetAdmMD
                    {
                        AccMonth = accMonth,
                        Asset = asset,
                        Administration = administration,
                        AssetCategory = assetCategory,
                        AssetState = assetState,
                        AssetType = assetType,
                        CostCenter = costCenter,
                        DepartmentId = null,
                        Employee = employee,
                        Room = room
                    };

                    _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);
                }
                //}


            }

            asset.Name = Encoding.ASCII.GetString(Encoding.ASCII.GetBytes(assetImport.Name));
            asset.CostCenter = costCenter;
            asset.AssetCategory = assetCategory;
            asset.Room = room;
            asset.Employee = employee;
            asset.AssetType = assetType;
            asset.Administration = administration;
            asset.ValueInv = assetImport.ValueInv;
            asset.ValueRem = assetImport.ValueDep;
            asset.PurchaseDate = assetImport.PurchaseDate;
            asset.SerialNumber = assetImport.SerialNumber != null ? assetImport.SerialNumber.Trim() : string.Empty;
            asset.ERPCode = assetImport.BookRate;
            asset.Validated = true;

            if (!isNew)
            {
                inventory = _context.Set<Model.Inventory>().OrderByDescending(j => j.Id).FirstOrDefault();
                inventoryAsset = _context.Set<Model.InventoryAsset>().Where(a => a.AssetId == asset.Id && a.InventoryId == inventory.Id).FirstOrDefault();

                inventoryAsset.CostCenterIdInitial = costCenter.Id;
                inventoryAsset.EmployeeIdInitial = employee.Id;
                inventoryAsset.QInitial = assetImport.Quantity;
                inventoryAsset.RoomIdInitial = room.Id;
            }



            var monthSumUpdate = assetImport.Years > 0 ? assetImport.Years * 12 : assetImport.Months;

            assetDep = _context.Set<Model.AssetDep>().Where(a => a.AssetId == asset.Id).FirstOrDefault();

            if (assetDep != null)
            {
                assetDep.DepPeriodIn = (int)monthSumUpdate;
                assetDep.DepPeriodMonth = 1;
                assetDep.DepPeriodMonthIn = 0;
                assetDep.DepPeriodRem = (int)monthSumUpdate;
                assetDep.DepPeriodRemIn = (int)monthSumUpdate;
                assetDep.UsageStartDate = assetImport.PurchaseDate;
                assetDep.ValueDep = assetImport.MonthCassationRate;
                assetDep.ValueDepIn = 0;
                assetDep.ValueDepPU = assetImport.ValueInv;
                assetDep.ValueDepPUIn = 0;
                assetDep.ValueDepYTD = assetImport.ValueCassation;
                assetDep.ValueDepYTDIn = 0;
                assetDep.ValueInv = assetImport.ValueDep;
                assetDep.ValueInvIn = assetImport.ValueDep;
                assetDep.ValueRem = assetImport.ValueDep - assetImport.ValueCassation;
                assetDep.ValueRemIn = assetImport.ValueDep - assetImport.ValueCassation;

                _context.Set<Model.AssetDep>().Update(assetDep);

                accMonth = _context.Set<Model.AccMonth>().Where(a => a.IsActive == true).FirstOrDefault();
                assetDepMD = _context.Set<Model.AssetDepMD>().Where(a => a.AssetId == asset.Id && a.AccMonthId == accMonth.Id).FirstOrDefault();

                if (assetDepMD == null)
                {
                    assetDepMD = new Model.AssetDepMD
                    {
                        AccMonth = accMonth,
                        AccSystem = accSystem,
                        Asset = asset,
                        UsefulLife = (int)monthSumUpdate,
                        TotLifeInpPeriods = 1,
                        RemLifeInPeriods = 1,
                        AccumulDep = assetImport.MonthCassationRate,
                        BkValFYStart = assetImport.ValueInv,
                        DepForYear = assetImport.ValueCassation,
                        CurrentAPC = assetImport.ValueDep,
                        PosCap = assetImport.ValueDep - assetImport.ValueCassation
                    };

                    _context.Set<Model.AssetDepMD>().Add(assetDepMD);
                }


                assetAdmMD = _context.Set<Model.AssetAdmMD>().Where(a => a.AssetId == asset.Id && a.AccMonthId == accMonth.Id).FirstOrDefault();

                if (assetAdmMD == null)
                {
                    assetAdmMD = new Model.AssetAdmMD
                    {
                        AccMonth = accMonth,
                        Asset = asset,
                        Administration = administration,
                        AssetCategory = assetCategory,
                        AssetState = assetState,
                        AssetType = assetType,
                        CostCenter = costCenter,
                        DepartmentId = null,
                        Employee = employee,
                        Room = room
                    };

                    _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);
                }


            }

            if (assetImport.TransactionTypeCode == "FULL RETIREMENT")
            {
                invState = _context.Set<Model.InvState>().Where(a => (a.Name == TransactionTypeCode)).FirstOrDefault();
                assetState = _context.Set<Model.AssetState>().Where(a => (a.Name == TransactionTypeCode)).FirstOrDefault();
                assetOpPrev = _context.Set<Model.AssetOp>().Where(a => ((a.AssetId == asset.Id) && (!a.IsDeleted))).OrderByDescending(a => a.Id).Take(1).SingleOrDefault();
                inventoryAssetPrev = _context.Set<Model.InventoryAsset>().Where(a => ((a.AssetId == asset.Id))).OrderByDescending(a => a.AssetId).Take(1).SingleOrDefault();
                assetDep = _context.Set<Model.AssetDep>().Where(a => (a.AssetId == asset.Id)).FirstOrDefault();

                asset.InvState = invState;
                //  asset.ValueRem = asset.ValueRem - assetImport.ValueChange;
                asset.Quantity = asset.ValueRem <= 0 ? asset.Quantity - assetImport.Quantity : asset.Quantity;
                asset.AssetState = assetState;
                assetOpPrev.InvStateFinal = invState;
                assetOpPrev.AssetStateFinal = assetState;
                inventoryAssetPrev.StateFinal = invState;
                //  inventoryAssetPrev.QFinal = asset.ValueRem <= 0 ? inventoryAssetPrev.QFinal - assetImport.QuantityChange : inventoryAssetPrev.QFinal;
                //  assetDep.ValueInvIn= assetDep.ValueInvIn - assetImport.ValueChange;
            }

            _context.SaveChanges();




            return asset.Id;
        }

        public int AssetImportV13(AssetImportV13 assetImport)
        {


            Model.Asset asset = null;
            Model.InventoryAsset inventoryAssetPrev = null;
            Model.Inventory inventory = null;
            Model.InvState invState = null;
            Model.AssetState assetState = null;
            Model.AssetDep assetDep = null;
            Model.AssetDepMD assetDepMD = null;
            Model.AssetDepMD assetDepMDNew = null;
            Model.AccMonth accMonth = null;
            Model.AssetAdmMD assetAdmMD = null;
            Model.AssetAdmMD assetAdmMDNew = null;

            string locationCode = string.Empty;
            string costCenterCode = string.Empty;
            string costCenterName = string.Empty;
            string invNo = string.Empty;
            string disposition = string.Empty;

            string TransactionTypeCode = "CASARE";



            string assetTypeCode = assetImport.AssetType.Trim();
            if (assetImport.InvNo.StartsWith("4"))
            {
                assetImport.InvNo = "EX" + assetImport.InvNo;
            }

            accMonth = _context.Set<Model.AccMonth>().Where(i => i.IsActive == true).Single();
            inventory = _context.Set<Model.Inventory>().Where(i => !i.IsDeleted && i.Active).OrderByDescending(i => i.Id).FirstOrDefault();

            asset = _context.Set<Model.Asset>().Where(a => a.InvNo == assetImport.InvNo).Include(d => d.Document).FirstOrDefault();

            inventoryAssetPrev = _context.Set<Model.InventoryAsset>().Where(a => ((a.AssetId == asset.Id))).OrderByDescending(a => a.AssetId).Take(1).SingleOrDefault();
            assetDep = _context.Set<Model.AssetDep>().Where(a => a.AssetId == asset.Id).FirstOrDefault();
            assetAdmMD = _context.Set<Model.AssetAdmMD>().Where(a => a.AssetId == asset.Id && a.AccMonthId == accMonth.Id).FirstOrDefault();
            assetDepMD = _context.Set<Model.AssetDepMD>().Where(a => a.AssetId == asset.Id && a.AccMonthId == accMonth.Id).FirstOrDefault();

            if (assetImport.TransactionTypeCode.ToUpper() == "FULL RETIREMENT" && assetDepMD != null && assetAdmMD != null && assetDep != null)
            {

                invState = _context.Set<Model.InvState>().Where(a => (a.Name == TransactionTypeCode)).FirstOrDefault();
                assetState = _context.Set<Model.AssetState>().Where(a => (a.Name == TransactionTypeCode)).FirstOrDefault();

                if (assetImport.TransactionType.ToUpper() == "TRANSFER")
                {
                    assetDep.ValueDepYTD = 0;
                    assetDep.ValueInv = 0;
                    assetDep.ValueInvIn = 0;
                    assetDep.ValueRem = 0;

                    assetDepMD.DepForYear = 0;
                    assetDepMD.PosCap = 0;

                    assetAdmMD.AssetStateId = assetState.Id;


                    inventoryAssetPrev.QInitial = 0;

                    asset.InvState = invState;
                    asset.Document.DocumentDate = assetImport.ChangeDate;
                    asset.Document.DocumentTypeId = 6;
                    asset.CreatedBy = assetImport.ChangeDate.ToString("yyyy-MM-dd");
                    asset.Quantity = 0;
                    asset.ValueRem = 0;

                    asset.AssetState = assetState;
                    inventoryAssetPrev.StateFinal = invState;
                }
                else
                {
                    assetDep.ValueDepYTD = assetDep.ValueDepYTD > 0M ? assetDep.ValueDepYTD - assetImport.ValueChange : assetDep.ValueDepYTD;
                    assetDep.ValueInv = assetDep.ValueInv > 0M ? assetDep.ValueInv - assetImport.ValueChange : assetDep.ValueInv;
                    assetDep.ValueInvIn = assetDep.ValueInvIn > 0M ? assetDep.ValueInvIn - assetImport.ValueChange : assetDep.ValueInvIn;
                    assetDep.ValueRem = assetDep.ValueRem > 0M ? assetDep.ValueRem - assetImport.ValueChange : assetDep.ValueRem;

                    assetDepMD.DepForYear = assetDepMD.DepForYear > 0M ? assetDepMD.DepForYear - assetImport.ValueChange : assetDepMD.DepForYear;
                    assetDepMD.PosCap = assetDepMD.PosCap > 0M ? assetDepMD.PosCap - assetImport.ValueChange : assetDepMD.PosCap;

                    assetAdmMD.AssetStateId = assetState.Id;

                    inventoryAssetPrev.QInitial = inventoryAssetPrev.QInitial > 0.00 ? inventoryAssetPrev.QInitial - assetImport.QuantityChange : inventoryAssetPrev.QInitial;

                    asset.InvState = invState;
                    asset.Document.DocumentDate = assetImport.ChangeDate;
                    asset.Document.DocumentTypeId = 6;
                    asset.CreatedBy = assetImport.ChangeDate.ToString("yyyy-MM-dd");
                    asset.Quantity = asset.ValueRem > 0M ? asset.Quantity - assetImport.QuantityChange : asset.Quantity;
                    asset.ValueRem = asset.ValueRem > 0M ? asset.ValueRem - assetImport.ValueChange : asset.ValueRem;

                    asset.AssetState = assetState;
                    inventoryAssetPrev.StateFinal = invState;
                }


            }
            else
            {
                invState = _context.Set<Model.InvState>().Where(a => (a.Name == TransactionTypeCode)).FirstOrDefault();
                assetState = _context.Set<Model.AssetState>().Where(a => (a.Name == TransactionTypeCode)).FirstOrDefault();

                assetAdmMD = _context.Set<Model.AssetAdmMD>().Where(a => a.AssetId == asset.Id && a.AccMonthId == accMonth.Id - 1).FirstOrDefault();


                assetAdmMDNew = new Model.AssetAdmMD
                {
                    AccMonthId = assetAdmMD.AccMonthId + 1,
                    AssetId = assetAdmMD.AssetId,
                    AdministrationId = assetAdmMD.AdministrationId,
                    AssetCategoryId = assetAdmMD.AssetCategoryId,
                    AssetStateId = assetState.Id,
                    AssetTypeId = assetAdmMD.AssetTypeId,
                    CostCenterId = assetAdmMD.CostCenterId,
                    DepartmentId = null,
                    EmployeeId = assetAdmMD.EmployeeId,
                    RoomId = assetAdmMD.RoomId
                };

                _context.Set<Model.AssetAdmMD>().Add(assetAdmMDNew);

                assetDepMD = _context.Set<Model.AssetDepMD>().Where(a => a.AssetId == asset.Id && a.AccMonthId == accMonth.Id - 1).FirstOrDefault();

                assetDepMDNew = new Model.AssetDepMD
                {
                    AccMonthId = assetDepMD.AccMonthId + 1,
                    AccSystemId = assetDepMD.AccSystemId,
                    AssetId = assetDepMD.AssetId,
                    UsefulLife = assetDepMD.UsefulLife,
                    TotLifeInpPeriods = 1,
                    RemLifeInPeriods = 1,
                    AccumulDep = assetDepMD.AccumulDep,
                    BkValFYStart = assetDepMD.BkValFYStart,
                    DepForYear = 0,
                    CurrentAPC = assetDepMD.CurrentAPC,
                    PosCap = 0
                };

                _context.Set<Model.AssetDepMD>().Add(assetDepMDNew);

            }




            assetDep.ValueDepYTD = assetDep.ValueDepYTD > 0M ? assetDep.ValueDepYTD - assetImport.ValueChange : assetDep.ValueDepYTD;
            assetDep.ValueInv = assetDep.ValueInv > 0M ? assetDep.ValueInv - assetImport.ValueChange : assetDep.ValueInv;
            assetDep.ValueInvIn = assetDep.ValueInvIn > 0M ? assetDep.ValueInvIn - assetImport.ValueChange : assetDep.ValueInvIn;
            assetDep.ValueRem = assetDep.ValueRem > 0M ? assetDep.ValueRem - assetImport.ValueChange : assetDep.ValueRem;

            inventoryAssetPrev.QInitial = inventoryAssetPrev.QInitial > 0.00 ? inventoryAssetPrev.QInitial - assetImport.QuantityChange : inventoryAssetPrev.QInitial;

            asset.InvState = invState;
            asset.Document.DocumentDate = assetImport.ChangeDate;
            asset.Document.DocumentTypeId = 6;
            asset.CreatedBy = assetImport.ChangeDate.ToString("yyyy-MM-dd");
            asset.Quantity = asset.ValueRem > 0M ? asset.Quantity - assetImport.QuantityChange : asset.Quantity;
            asset.ValueRem = asset.ValueRem > 0M ? asset.ValueRem - assetImport.ValueChange : asset.ValueRem;

            asset.AssetState = assetState;
            inventoryAssetPrev.StateFinal = invState;

            _context.SaveChanges();

            return asset.Id;
        }

        public int AssetImportV11(AssetImportV11 assetImport)
        {


            Model.Asset asset = null;
            Model.Document document = null;
            Model.InventoryAsset inventoryAssetPrev = null;
            Model.AssetOp assetOp = null;
            Model.AssetOp assetOpPrev = null;
            Model.Partner partner = null;
            Model.InvState invState = null;
            Model.AssetState assetState = null;
            Model.AssetClassType assetClassType = null;
            Model.AssetDep assetDep = null;
            Model.AssetDep assetDepPrev = null;
            Model.AccSystem accSystem = null;
            Model.AssetAdmMD assetAdmMD = null;
            Model.AssetAdmMD assetAdmMDPrev = null;

            string documentTypeCode = "STATE_CHANGE";
            string assetClassTypeDefault = "RAS";
            string locationCode = string.Empty;
            string TransactionTypeCode = "CASSATION";
            string TransactionTypeCodeFull = "FULL RETIREMENT";
            string TransactionTypeCodePartial = "PARTIAL RETIREMENT";




            invState = _context.Set<Model.InvState>().Where(a => (a.Code == TransactionTypeCode)).FirstOrDefault();
            assetState = _context.Set<Model.AssetState>().Where(a => (a.Code == TransactionTypeCode)).FirstOrDefault();
            accSystem = _context.Set<Model.AccSystem>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();



            string assetStateCode = assetImport.TransactionTypeCode.Trim();




            asset = _context.Set<Model.Asset>().Where(a => a.InvNo == assetImport.InvNo && a.Quantity == assetImport.Quantity && a.ValueRem == assetImport.RetiredValue && a.Validated == false).FirstOrDefault();

            if (asset == null && assetStateCode == TransactionTypeCodeFull)
            {

                for (int i = 0; i < assetImport.RetiredQuantity; i++)
                {
                    asset = _context.Set<Model.Asset>().Where(a => a.InvNo == assetImport.InvNo && a.Quantity == 1 && a.ValueInv == assetImport.RetiredValue && a.Validated == false).FirstOrDefault();

                    var documentType = _context.Set<Model.DocumentType>().Where(d => d.Code == documentTypeCode).Single();

                    document = new Model.Document
                    {
                        Approved = true,
                        DocumentType = documentType,
                        DocNo1 = string.Empty,
                        DocNo2 = string.Empty,
                        DocumentDate = assetImport.RetiredDate,
                        RegisterDate = assetImport.RetiredDate,
                        Partner = partner
                    };

                    _context.Add(document);

                    asset.InvStateId = invState.Id;
                    asset.Quantity = asset.ValueRem <= 0 ? asset.Quantity - assetImport.RetiredQuantity : asset.Quantity;
                    asset.AssetStateId = assetState.Id;
                    asset.ValueRem = asset.ValueRem - assetImport.RetiredValue;
                    asset.Validated = true;

                    assetOpPrev = _context.Set<Model.AssetOp>().Where(a => ((a.AssetId == asset.Id) && (!a.IsDeleted))).OrderByDescending(a => a.Id).Take(1).SingleOrDefault();

                    assetOp = new Model.AssetOp()
                    {
                        AssetId = asset.Id,
                        DocumentId = document.Id,
                        RoomIdInitial = assetOpPrev.RoomIdFinal,
                        RoomIdFinal = assetOpPrev.RoomIdFinal,
                        EmployeeIdInitial = assetOpPrev.EmployeeIdFinal,
                        EmployeeIdFinal = assetOpPrev.EmployeeIdFinal,
                        CostCenterIdInitial = assetOpPrev.CostCenterIdFinal,
                        CostCenterIdFinal = assetOpPrev.CostCenterIdFinal,
                        AssetCategoryIdFinal = assetOpPrev.AssetCategoryIdFinal,
                        AssetCategoryIdInitial = assetOpPrev.AssetCategoryIdFinal,
                        InvStateIdInitial = assetOpPrev.InvStateIdFinal,
                        InvStateFinal = invState,
                        AdministrationIdInitial = assetOpPrev.AdministrationIdFinal,
                        AdministrationIdFinal = assetOpPrev.AdministrationIdFinal,
                        AccSystem = accSystem,
                        AssetStateIdInitial = assetOpPrev.AssetStateIdFinal,
                        AssetStateFinal = assetState
                    };


                    _context.Add(assetOp);

                    inventoryAssetPrev = _context.Set<Model.InventoryAsset>().Where(a => ((a.AssetId == asset.Id))).OrderByDescending(a => a.AssetId).Take(1).SingleOrDefault();
                    inventoryAssetPrev.QFinal = inventoryAssetPrev.QFinal >= 0 ? inventoryAssetPrev.QFinal - assetImport.RetiredQuantity : inventoryAssetPrev.QFinal;
                    inventoryAssetPrev.StateFinal = invState;

                    _context.Update(inventoryAssetPrev);



                    assetDepPrev = _context.Set<Model.AssetDep>().Where(a => ((a.AssetId == asset.Id))).OrderByDescending(a => a.AssetId).Take(1).SingleOrDefault();
                    assetDepPrev.ValueRem = 0;


                    _context.Update(assetDepPrev);

                    assetAdmMDPrev = _context.Set<Model.AssetAdmMD>().Where(a => ((a.AssetId == asset.Id))).OrderByDescending(a => a.AssetId).Take(1).SingleOrDefault();
                    assetAdmMDPrev.AssetStateId = assetState.Id;

                    _context.Set<Model.AssetAdmMD>().Update(assetAdmMDPrev);

                    _context.SaveChanges();
                }






            }
            else if (asset == null && assetStateCode == TransactionTypeCodePartial)
            {
                asset = _context.Set<Model.Asset>().Where(a => a.InvNo == assetImport.InvNo && a.Quantity == assetImport.RetiredQuantity && a.Validated == false).FirstOrDefault();

                var documentType = _context.Set<Model.DocumentType>().Where(d => d.Code == documentTypeCode).Single();

                document = new Model.Document
                {
                    Approved = true,
                    DocumentType = documentType,
                    DocNo1 = string.Empty,
                    DocNo2 = string.Empty,
                    DocumentDate = assetImport.RetiredDate,
                    RegisterDate = assetImport.RetiredDate,
                    Partner = partner
                };

                _context.Add(document);

                asset.InvStateId = invState.Id;
                asset.Quantity = asset.ValueRem <= 0 ? asset.Quantity - assetImport.RetiredQuantity : asset.Quantity;
                asset.AssetStateId = assetState.Id;
                asset.ValueRem = asset.ValueRem - assetImport.RetiredValue;
                asset.Validated = true;

                assetOpPrev = _context.Set<Model.AssetOp>().Where(a => ((a.AssetId == asset.Id) && (!a.IsDeleted))).OrderByDescending(a => a.Id).Take(1).SingleOrDefault();

                assetOp = new Model.AssetOp()
                {
                    AssetId = asset.Id,
                    DocumentId = document.Id,
                    RoomIdInitial = assetOpPrev.RoomIdFinal,
                    RoomIdFinal = assetOpPrev.RoomIdFinal,
                    EmployeeIdInitial = assetOpPrev.EmployeeIdFinal,
                    EmployeeIdFinal = assetOpPrev.EmployeeIdFinal,
                    CostCenterIdInitial = assetOpPrev.CostCenterIdFinal,
                    CostCenterIdFinal = assetOpPrev.CostCenterIdFinal,
                    AssetCategoryIdFinal = assetOpPrev.AssetCategoryIdFinal,
                    AssetCategoryIdInitial = assetOpPrev.AssetCategoryIdFinal,
                    InvStateIdInitial = assetOpPrev.InvStateIdFinal,
                    InvStateFinal = invState,
                    AdministrationIdInitial = assetOpPrev.AdministrationIdFinal,
                    AdministrationIdFinal = assetOpPrev.AdministrationIdFinal,
                    AccSystem = accSystem,
                    AssetStateIdInitial = assetOpPrev.AssetStateIdFinal,
                    AssetStateFinal = assetState
                };


                _context.Add(assetOp);

                inventoryAssetPrev = _context.Set<Model.InventoryAsset>().Where(a => ((a.AssetId == asset.Id))).OrderByDescending(a => a.AssetId).Take(1).SingleOrDefault();
                inventoryAssetPrev.QFinal = inventoryAssetPrev.QFinal >= 0 ? inventoryAssetPrev.QFinal - assetImport.RetiredQuantity : inventoryAssetPrev.QFinal;
                inventoryAssetPrev.StateFinal = invState;

                _context.Update(inventoryAssetPrev);



                assetDepPrev = _context.Set<Model.AssetDep>().Where(a => ((a.AssetId == asset.Id))).OrderByDescending(a => a.AssetId).Take(1).SingleOrDefault();
                assetDepPrev.ValueRem = 0;


                _context.Update(assetDepPrev);

                assetAdmMDPrev = _context.Set<Model.AssetAdmMD>().Where(a => ((a.AssetId == asset.Id))).OrderByDescending(a => a.AssetId).Take(1).SingleOrDefault();
                assetAdmMDPrev.AssetStateId = assetState.Id;

                _context.Set<Model.AssetAdmMD>().Update(assetAdmMDPrev);

                _context.SaveChanges();
            }
            else
            {
                var documentType = _context.Set<Model.DocumentType>().Where(d => d.Code == documentTypeCode).Single();

                document = new Model.Document
                {
                    Approved = true,
                    DocumentType = documentType,
                    DocNo1 = string.Empty,
                    DocNo2 = string.Empty,
                    DocumentDate = assetImport.RetiredDate,
                    RegisterDate = assetImport.RetiredDate,
                    Partner = partner
                };

                _context.Add(document);

                asset.InvStateId = invState.Id;
                asset.Quantity = asset.ValueRem <= 0 ? asset.Quantity - assetImport.RetiredQuantity : asset.Quantity;
                asset.AssetStateId = assetState.Id;
                asset.ValueRem = asset.ValueRem - assetImport.RetiredValue;
                asset.Validated = true;

                assetOpPrev = _context.Set<Model.AssetOp>().Where(a => ((a.AssetId == asset.Id) && (!a.IsDeleted))).OrderByDescending(a => a.Id).Take(1).SingleOrDefault();

                assetOp = new Model.AssetOp()
                {
                    AssetId = asset.Id,
                    DocumentId = document.Id,
                    RoomIdInitial = assetOpPrev.RoomIdFinal,
                    RoomIdFinal = assetOpPrev.RoomIdFinal,
                    EmployeeIdInitial = assetOpPrev.EmployeeIdFinal,
                    EmployeeIdFinal = assetOpPrev.EmployeeIdFinal,
                    CostCenterIdInitial = assetOpPrev.CostCenterIdFinal,
                    CostCenterIdFinal = assetOpPrev.CostCenterIdFinal,
                    AssetCategoryIdFinal = assetOpPrev.AssetCategoryIdFinal,
                    AssetCategoryIdInitial = assetOpPrev.AssetCategoryIdFinal,
                    InvStateIdInitial = assetOpPrev.InvStateIdFinal,
                    InvStateFinal = invState,
                    AdministrationIdInitial = assetOpPrev.AdministrationIdFinal,
                    AdministrationIdFinal = assetOpPrev.AdministrationIdFinal,
                    AccSystem = accSystem,
                    AssetStateIdInitial = assetOpPrev.AssetStateIdFinal,
                    AssetStateFinal = assetState
                };


                _context.Add(assetOp);

                inventoryAssetPrev = _context.Set<Model.InventoryAsset>().Where(a => ((a.AssetId == asset.Id))).OrderByDescending(a => a.AssetId).Take(1).SingleOrDefault();
                inventoryAssetPrev.QFinal = inventoryAssetPrev.QFinal >= 0 ? inventoryAssetPrev.QFinal - assetImport.RetiredQuantity : inventoryAssetPrev.QFinal;
                inventoryAssetPrev.StateFinal = invState;

                _context.Update(inventoryAssetPrev);



                assetDepPrev = _context.Set<Model.AssetDep>().Where(a => ((a.AssetId == asset.Id))).OrderByDescending(a => a.AssetId).Take(1).SingleOrDefault();
                assetDepPrev.ValueRem = 0;


                _context.Update(assetDepPrev);

                assetAdmMDPrev = _context.Set<Model.AssetAdmMD>().Where(a => ((a.AssetId == asset.Id))).OrderByDescending(a => a.AssetId).Take(1).SingleOrDefault();
                assetAdmMDPrev.AssetStateId = assetState.Id;

                _context.Set<Model.AssetAdmMD>().Update(assetAdmMDPrev);

                _context.SaveChanges();

            }


            return asset.Id;
        }

        public int AssetImportV9(AssetImportV9 assetImport)
        {


            Model.Asset asset = null;
            Model.Asset assetDuplicate = null;
            Model.AssetCategory assetCategory = null;
            Model.CostCenter costCenterInitial = null;
            Model.CostCenter costCenterFinal = null;
            Model.Location locationInitial = null;
            Model.Location locationFinal = null;
            Model.Document document = null;
            Model.InventoryAsset inventoryAsset = null;
            //  Model.InventoryAsset inventoryAssetPrev = null;
            Model.AssetOp assetOp = null;
            //   Model.AssetOp assetOpPrev = null;
            Model.Inventory inventory = null;
            Model.Partner partner = null;
            Model.Region region = null;
            Model.AdmCenter admCenter = null;
            Model.Employee employeeInitial = null;
            Model.Employee employeeFinal = null;
            //   Model.InvState invState = null;
            Model.AssetType assetType = null;
            Model.AssetState assetStateInitial = null;
            Model.AssetState assetStateFinal = null;
            Model.AssetClass assetClass = null;
            Model.AssetClassType assetClassType = null;
            Model.Room roomInitial = null;
            Model.Room roomFinal = null;
            Model.Administration administration = null;
            Model.AssetAC assetAc = null;
            Model.AssetDep assetDep = null;
            Model.AssetDepMD assetDepMD = null;
            Model.AccSystem accSystem = null;
            Model.AccMonth accMonth = null;
            Model.AssetAdmMD assetAdmMD = null;
            Model.AssetInv assetInv = null;





            string codeDefault = "_NSP";
            string documentTypeCode = "PURCHASE";
            string assetClassTypeDefault = "RAS";
            string locationCode = string.Empty;


            string costCenterCode = string.Empty;
            string costCenterName = string.Empty;
            string invNo = string.Empty;
            string disposition = string.Empty;
            string nameDefault = "_Nespecificat";
            //  string assetStateCode = "FUNC";
            string regionCode = "RR";
            bool isUpdateCostCenterInitial = false;
            bool isUpdateEmployeeInitial = false;
            bool isUpdateLocationInitial = false;
            bool isUpdateRoomInitial = false;
            bool isUpdateCostCenterFinal = false;
            bool isUpdateEmployeeFinal = false;
            bool isUpdateLocationFinal = false;
            bool isUpdateRoomFinal = false;
            bool isUpdateAsset = false;


            assetType = _context.Set<Model.AssetType>().Where(a => (a.Code == codeDefault)).FirstOrDefault();

            if (assetType == null)
            {
                assetType = new Model.AssetType
                {
                    Code = codeDefault,
                    Name = nameDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AssetType>().Add(assetType);
            }

            assetClassType = _context.Set<Model.AssetClassType>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();

            if (assetClassType == null)
            {
                assetClassType = new Model.AssetClassType
                {
                    Code = assetClassTypeDefault,
                    Name = assetClassTypeDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AssetClassType>().Add(assetClassType);
            }

            assetClass = _context.Set<Model.AssetClass>().Where(a => (a.Code == codeDefault)).FirstOrDefault();

            if (assetClass == null)
            {
                assetClass = new Model.AssetClass
                {
                    Code = codeDefault,
                    Name = nameDefault,
                    IsDeleted = false,
                    AssetClassType = assetClassType
                };
                _context.Set<Model.AssetClass>().Add(assetClass);
            }

            accSystem = _context.Set<Model.AccSystem>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();

            if (accSystem == null)
            {
                accSystem = new Model.AccSystem
                {
                    AssetClassType = assetClassType,
                    Code = assetClassTypeDefault,
                    Name = assetClassTypeDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AccSystem>().Add(accSystem);
            }

            administration = _context.Set<Model.Administration>().Where(a => a.Code == codeDefault).FirstOrDefault();

            if (administration == null)
            {
                administration = new Model.Administration
                {
                    Code = codeDefault,
                    Name = nameDefault,
                    IsDeleted = false
                };

                _context.Set<Model.Administration>().Add(administration);
            }


            string assetStateNameInitial = assetImport.AssetStateInitial.Trim();
            assetStateInitial = _context.Set<Model.AssetState>().Where(a => (a.Name == assetStateNameInitial)).FirstOrDefault();

            if (assetStateInitial == null)
            {
                assetStateInitial = new Model.AssetState
                {
                    Code = assetStateNameInitial,
                    Name = assetStateNameInitial,
                    IsDeleted = false
                };
                _context.Set<Model.AssetState>().Add(assetStateInitial);
            }

            var documentType = _context.Set<Model.DocumentType>().Where(d => d.Code == documentTypeCode).Single();

            string internalCodeInitial = assetImport.InternalCodeInitial.Trim() != null && assetImport.InternalCodeInitial.Trim().Length > 0
                 ? assetImport.InternalCodeInitial.Trim() : codeDefault;
            employeeInitial = _context.Set<Model.Employee>().Where(e => e.InternalCode == internalCodeInitial).FirstOrDefault();

            if (employeeInitial == null)
            {
                isUpdateEmployeeInitial = true;
                employeeInitial = new Model.Employee();

                string employeeFullName = assetImport.EmployeeNameInitial != null && assetImport.EmployeeNameInitial.Trim().Length > 0
                    ? assetImport.EmployeeNameInitial.Trim() : nameDefault;

                string firstName = string.Empty;
                string lastName = string.Empty;

                int spaceIndex = employeeFullName.IndexOf(" ");
                if (spaceIndex >= 0)
                {
                    firstName = employeeFullName.Substring(0, spaceIndex);
                    lastName = employeeFullName.Substring(spaceIndex + 1);
                }
                else
                {
                    firstName = employeeFullName;
                }

                employeeInitial.InternalCode = internalCodeInitial;
                employeeInitial.FirstName = firstName;
                employeeInitial.LastName = lastName;
                employeeInitial.IsDeleted = false;

                _context.Set<Model.Employee>().Add(employeeInitial);
            }

            assetCategory = _context.Set<Model.AssetCategory>().Where(a => a.Code == assetImport.AssetCategory.Trim()).FirstOrDefault();
            if (assetCategory == null)
            {
                assetCategory = new Model.AssetCategory
                {
                    Code = assetImport.AssetCategory,
                    Name = assetImport.AssetCategory,
                    IsDeleted = false
                };
                _context.Set<Model.AssetCategory>().Add(assetCategory);
            }

            string costCenterCodeInitial = assetImport.RoomCodeInitial.Trim() != null && assetImport.RoomCodeInitial.Trim().Length > 0 ? assetImport.RoomCodeInitial.Trim() : codeDefault;
            string costCenterNameInitial = assetImport.RoomNameInitial.Trim() != null && assetImport.RoomNameInitial.Trim().Length > 0 ? assetImport.RoomNameInitial.Trim() : nameDefault;
            costCenterInitial = _context.Set<Model.CostCenter>().Where(a => a.Code == costCenterCodeInitial).FirstOrDefault();
            if (costCenterInitial == null)
            {
                isUpdateCostCenterInitial = true;
                costCenterInitial = new Model.CostCenter
                {
                    Code = costCenterCodeInitial,
                    Name = costCenterNameInitial,
                    IsDeleted = false
                };
                _context.Set<Model.CostCenter>().Add(costCenterInitial);
            }
            region = _context.Set<Model.Region>().Where(r => (r.Code == regionCode.Trim())).FirstOrDefault();
            if (region == null)
            {
                region = new Model.Region
                {
                    Code = regionCode.Trim(),
                    Name = regionCode.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Region>().Add(region);
            }

            admCenter = _context.Set<Model.AdmCenter>().Where(r => (r.Code == regionCode.Trim())).FirstOrDefault();
            if (admCenter == null)
            {
                admCenter = new Model.AdmCenter
                {
                    Code = regionCode.Trim(),
                    Name = regionCode.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AdmCenter>().Add(admCenter);
            }

            string locationCodeInitial = assetImport.LocationCodeInitial.Trim() != null && assetImport.LocationCodeInitial.Trim().Length > 0
                            ? assetImport.LocationCodeInitial.Trim() : codeDefault;
            string locationNameInitial = assetImport.LocationNameInitial.Trim() != null && assetImport.LocationNameInitial.Trim().Length > 0
                            ? assetImport.LocationNameInitial.Trim() : nameDefault;

            string roomCodeInitial = assetImport.RoomCodeInitial.Trim() != null && assetImport.RoomCodeInitial.Trim().Length > 0
                            ? assetImport.RoomCodeInitial.Trim() : codeDefault;
            string roomNameInitial = assetImport.RoomNameInitial.Trim() != null && assetImport.RoomNameInitial.Trim().Length > 0
                            ? assetImport.RoomNameInitial.Trim() : nameDefault;


            locationInitial = _context.Set<Model.Location>().Where(l => (l.RegionId == region.Id) && (l.Code == locationCodeInitial)).FirstOrDefault();

            if (locationInitial == null)
            {
                isUpdateLocationInitial = true;
                locationInitial = new Model.Location
                {
                    Code = locationCodeInitial,
                    Name = locationNameInitial,
                    IsDeleted = false,
                    Region = region
                };
                _context.Set<Model.Location>().Add(locationInitial);
            }
            else
            {
                roomInitial = _context.Set<Model.Room>().Where(r => ((r.LocationId == locationInitial.Id) && (r.Code == roomCodeInitial))).FirstOrDefault();
            }


            if (roomInitial == null)
            {
                isUpdateRoomInitial = true;
                roomInitial = new Model.Room
                {
                    Code = roomCodeInitial,
                    Name = roomNameInitial,
                    Location = locationInitial,
                    IsDeleted = false
                };
                _context.Set<Model.Room>().Add(roomInitial);
            }

            partner = _context.Set<Model.Partner>().Where(a => a.FiscalCode == nameDefault).FirstOrDefault();
            if (partner == null)
            {
                partner = new Model.Partner
                {
                    Name = nameDefault,
                    FiscalCode = nameDefault,
                    RegistryNumber = string.Empty,
                    IsDeleted = false
                };

                _context.Set<Model.Partner>().Add(partner);
            }

            inventory = _context.Set<Model.Inventory>().Where(i => !i.IsDeleted && i.Active).OrderByDescending(i => i.Id).FirstOrDefault();

            asset = _context.Set<Model.Asset>().Where(a => a.InvNo == assetImport.InvNo).FirstOrDefault();

            if (asset == null) //nu exista in bd, asset nou
            {
                isUpdateAsset = true;
                string assetStateNameFinal = assetImport.AssetStateFinal.Trim();
                assetStateFinal = _context.Set<Model.AssetState>().Where(a => (a.Name == assetStateNameFinal)).FirstOrDefault();

                if (assetStateFinal == null)
                {
                    assetStateFinal = new Model.AssetState
                    {
                        Code = assetStateNameFinal,
                        Name = assetStateNameFinal,
                        IsDeleted = false
                    };
                    _context.Set<Model.AssetState>().Add(assetStateFinal);
                }

                string internalCodeFinal = assetImport.InternalCodeFinal.Trim() != null && assetImport.InternalCodeFinal.Trim().Length > 0
                 ? assetImport.InternalCodeFinal.Trim() : codeDefault;
                employeeFinal = _context.Set<Model.Employee>().Where(e => e.InternalCode == internalCodeFinal).FirstOrDefault();

                if (employeeFinal == null && (internalCodeInitial != internalCodeFinal))
                {
                    isUpdateEmployeeFinal = true;
                    employeeFinal = new Model.Employee();

                    string employeeFullNameFinal = assetImport.EmployeeNameFinal != null && assetImport.EmployeeNameFinal.Trim().Length > 0
                        ? assetImport.EmployeeNameFinal.Trim() : nameDefault;

                    string firstName = string.Empty;
                    string lastName = string.Empty;

                    int spaceIndex = employeeFullNameFinal.IndexOf(" ");
                    if (spaceIndex >= 0)
                    {
                        firstName = employeeFullNameFinal.Substring(0, spaceIndex);
                        lastName = employeeFullNameFinal.Substring(spaceIndex + 1);
                    }
                    else
                    {
                        firstName = employeeFullNameFinal;
                    }

                    employeeFinal.InternalCode = internalCodeFinal;
                    employeeFinal.FirstName = firstName;
                    employeeFinal.LastName = lastName;
                    employeeFinal.IsDeleted = false;

                    _context.Set<Model.Employee>().Add(employeeFinal);
                }

                string locationCodeFinal = assetImport.LocationCodeFinal.Trim() != null && assetImport.LocationCodeFinal.Trim().Length > 0
                          ? assetImport.LocationCodeFinal.Trim() : codeDefault;
                string locationNameFinal = assetImport.LocationNameFinal.Trim() != null && assetImport.LocationNameFinal.Trim().Length > 0
                                ? assetImport.LocationNameFinal.Trim() : nameDefault;

                string roomCodeFinal = assetImport.RoomCodeFinal.Trim() != null && assetImport.RoomCodeFinal.Trim().Length > 0
                                ? assetImport.RoomCodeFinal.Trim() : codeDefault;
                string roomNameFinal = assetImport.RoomNameFinal.Trim() != null && assetImport.RoomNameFinal.Trim().Length > 0
                                ? assetImport.RoomNameFinal.Trim() : nameDefault;

                locationFinal = _context.Set<Model.Location>().Where(l => (l.RegionId == region.Id) && (l.Code == locationCodeFinal)).FirstOrDefault();

                if (locationFinal == null && (locationCodeFinal != locationCodeInitial))
                {
                    isUpdateLocationFinal = true;
                    locationFinal = new Model.Location
                    {
                        Code = locationCodeFinal,
                        Name = locationNameFinal,
                        IsDeleted = false,
                        Region = region
                    };
                    _context.Set<Model.Location>().Add(locationFinal);
                }
                else
                {
                    if (locationFinal != null)
                    {
                        roomFinal = _context.Set<Model.Room>().Where(r => ((r.LocationId == locationFinal.Id) && (r.Code == roomCodeFinal))).FirstOrDefault();
                    }
                    else
                    {
                        roomFinal = _context.Set<Model.Room>().Where(r => ((r.LocationId == locationInitial.Id) && (r.Code == roomCodeFinal))).FirstOrDefault();
                    }

                }


                if (roomFinal == null && (roomCodeInitial != roomCodeFinal))
                {
                    isUpdateRoomFinal = true;
                    roomFinal = new Model.Room
                    {
                        Code = roomCodeFinal,
                        Name = roomNameFinal,
                        Location = locationFinal,
                        IsDeleted = false
                    };
                    _context.Set<Model.Room>().Add(roomFinal);
                }

                string costCenterCodeFinal = assetImport.RoomCodeFinal.Trim() != null && assetImport.RoomCodeFinal.Trim().Length > 0 ? assetImport.RoomCodeFinal.Trim() : codeDefault;
                string costCenterNameFinal = assetImport.RoomNameFinal.Trim() != null && assetImport.RoomNameFinal.Trim().Length > 0 ? assetImport.RoomNameFinal.Trim() : nameDefault;
                costCenterFinal = _context.Set<Model.CostCenter>().Where(a => a.Code == costCenterCodeFinal).FirstOrDefault();
                if (costCenterFinal == null && (costCenterCodeInitial != costCenterCodeFinal))
                {
                    isUpdateCostCenterFinal = true;
                    costCenterFinal = new Model.CostCenter
                    {
                        Code = costCenterCodeFinal,
                        Name = costCenterNameFinal,
                        IsDeleted = false
                    };
                    _context.Set<Model.CostCenter>().Add(costCenterFinal);
                }

                document = new Model.Document
                {
                    Approved = true,
                    DocumentType = documentType,
                    DocNo1 = assetImport.DocNo,
                    DocNo2 = string.Empty,
                    DocumentDate = assetImport.PurchaseDate,
                    RegisterDate = assetImport.PurchaseDate,
                    Partner = partner
                };

                _context.Add(document);


                asset = new Model.Asset()
                {

                    InvNo = assetImport.InvNo.Trim(),
                    Document = document,
                    Employee = employeeInitial,
                    Room = roomInitial,
                    AssetTypeId = assetType.Id,
                    PurchaseDate = assetImport.PurchaseDate,
                    Quantity = 1,
                    Validated = true,
                    InvStateId = assetStateInitial.Id,
                    Administration = administration,
                    CostCenter = costCenterInitial,
                    AssetState = assetStateInitial


                };

                if (!string.IsNullOrEmpty(assetImport.LocationNameFinal))
                {
                    asset.Employee = employeeFinal != employeeInitial ? employeeFinal : employeeInitial;
                    asset.Room = roomFinal != roomInitial ? roomFinal : roomInitial;
                    asset.CostCenter = costCenterFinal != costCenterInitial ? costCenterFinal : costCenterInitial;
                    asset.InvStateId = assetStateFinal.Id;
                    asset.AssetStateId = assetStateFinal.Id;
                }

                _context.Add(asset);

                assetOp = new Model.AssetOp()
                {
                    Asset = asset,
                    Document = document,
                    RoomInitial = roomInitial,
                    RoomFinal = null,
                    EmployeeInitial = employeeInitial,
                    EmployeeFinal = null,
                    CostCenterInitial = costCenterInitial,
                    CostCenterFinal = null,
                    AssetCategoryFinal = null,
                    AssetCategoryIdInitial = assetCategory.Id,
                    InvStateIdInitial = assetStateInitial.Id,
                    InvStateIdFinal = null,
                    AdministrationInitial = administration,
                    AdministrationFinal = null,
                    AccSystem = accSystem,

                };

                if (!string.IsNullOrEmpty(assetImport.LocationNameFinal))
                {
                    assetOp.EmployeeFinal = employeeFinal != employeeInitial ? employeeFinal : employeeInitial;
                    assetOp.RoomFinal = roomFinal != roomInitial ? roomFinal : roomInitial;
                    assetOp.CostCenterFinal = costCenterFinal != costCenterInitial ? costCenterFinal : costCenterInitial;
                    assetOp.InvStateIdFinal = assetStateFinal.Id;
                    assetOp.AssetStateIdFinal = assetStateFinal.Id;
                    assetOp.AdministrationFinal = administration;
                    assetOp.InvStateIdFinal = assetStateFinal.Id;
                    assetOp.AssetCategoryIdFinal = assetCategory.Id;
                }


                _context.Add(assetOp);

                inventory = _context.Set<Model.Inventory>().OrderByDescending(j => j.Id).FirstOrDefault();

                if (inventory != null)
                {
                    inventoryAsset = new Model.InventoryAsset()
                    {
                        Asset = asset,
                        Inventory = inventory,
                        QInitial = 1,
                        QFinal = 0,
                        EmployeeInitial = employeeInitial,
                        RoomInitial = roomInitial,
                        CostCenterInitial = costCenterInitial,
                        StateIdInitial = assetStateInitial.Id,
                        SerialNumber = assetImport.SerialNumber,
                        StateIdFinal = null

                    };

                    if (!string.IsNullOrEmpty(assetImport.LocationNameFinal))
                    {
                        inventoryAsset.EmployeeFinal = employeeFinal != employeeInitial ? employeeFinal : employeeInitial;
                        inventoryAsset.RoomFinal = roomFinal != roomInitial ? roomFinal : roomInitial;
                        inventoryAsset.CostCenterFinal = costCenterFinal != costCenterInitial ? costCenterFinal : costCenterInitial;
                        inventoryAsset.StateIdFinal = assetStateFinal.Id;
                        inventoryAsset.QFinal = 1;
                    }

                    _context.Add(inventoryAsset);


                    assetAc = new Model.AssetAC
                    {
                        AssetClassType = assetClassType,
                        Asset = asset,
                        AssetClass = assetClass,
                        AssetClassIn = assetClass
                    };


                    _context.Set<Model.AssetAC>().Add(assetAc);

                    var monthSum = assetImport.ValueInv;


                    assetDep = new Model.AssetDep
                    {
                        AccSystem = accSystem,
                        Asset = asset,
                        DepPeriod = (int)monthSum,
                        DepPeriodIn = (int)monthSum,
                        DepPeriodMonth = 1,
                        DepPeriodMonthIn = 0,
                        DepPeriodRem = (int)monthSum,
                        DepPeriodRemIn = (int)monthSum,
                        UsageStartDate = assetImport.PurchaseDate,
                        ValueDep = assetImport.ValueInv,
                        ValueDepIn = 0,
                        ValueDepPU = assetImport.ValueInv,
                        ValueDepPUIn = 0,
                        ValueDepYTD = assetImport.ValueInv,
                        ValueDepYTDIn = 0,
                        ValueInv = assetImport.ValueInv,
                        ValueInvIn = assetImport.ValueInv,
                        ValueRem = assetImport.ValueInv,
                        ValueRemIn = assetImport.ValueInv
                    };

                    _context.Set<Model.AssetDep>().Add(assetDep);


                    assetInv = new Model.AssetInv
                    {
                        Asset = asset,
                        AllowLabel = true,
                        Barcode = asset.InvNo,
                        Info = String.Empty,
                        InvName = asset.Name,
                        InvNoOld = String.Empty,
                        Model = String.Empty,
                        Producer = String.Empty
                    };

                    _context.Set<Model.AssetInv>().Add(assetInv);


                    accMonth = _context.Set<Model.AccMonth>().Where(a => a.IsActive == true).FirstOrDefault();

                    assetDepMD = new Model.AssetDepMD
                    {
                        AccMonth = accMonth,
                        AccSystem = accSystem,
                        Asset = asset,
                        UsefulLife = (int)monthSum,
                        TotLifeInpPeriods = 1,
                        RemLifeInPeriods = 1,
                        AccumulDep = assetImport.ValueInv,
                        BkValFYStart = assetImport.ValueInv,
                        DepForYear = assetImport.ValueInv,
                        CurrentAPC = assetImport.ValueInv,
                        PosCap = assetImport.ValueInv
                    };

                    _context.Set<Model.AssetDepMD>().Add(assetDepMD);


                    assetAdmMD = new Model.AssetAdmMD
                    {
                        AccMonth = accMonth,
                        Asset = asset,
                        Administration = administration,
                        AssetCategory = assetCategory,
                        AssetState = assetStateInitial,
                        AssetType = assetType,
                        CostCenter = costCenterInitial,
                        DepartmentId = null,
                        Employee = employeeInitial,
                        Room = roomInitial
                    };

                    if (!string.IsNullOrEmpty(assetImport.LocationNameFinal))
                    {
                        assetAdmMD.Employee = employeeFinal != employeeInitial ? employeeFinal : employeeInitial;
                        assetAdmMD.Room = roomFinal != roomInitial ? roomFinal : roomInitial;
                        assetAdmMD.CostCenter = costCenterFinal != costCenterInitial ? costCenterFinal : costCenterInitial;
                        assetAdmMD.AssetStateId = assetStateFinal.Id;
                    }

                    _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);
                }

            }




            asset.Name = Encoding.ASCII.GetString(Encoding.ASCII.GetBytes(assetImport.Name));
            asset.CostCenter = costCenterInitial;
            asset.AssetCategory = assetCategory;
            asset.ValueInv = assetImport.ValueInv;
            asset.ValueRem = assetImport.ValueInv;
            asset.PurchaseDate = assetImport.PurchaseDate;
            asset.SerialNumber = assetImport.SerialNumber != null ? assetImport.SerialNumber.Trim() : string.Empty;
            asset.ERPCode = assetImport.ERPCode;
            asset.Validated = true;

            string assetStateNameFinalUpdate = assetImport.AssetStateFinal.Trim();
            assetStateFinal = _context.Set<Model.AssetState>().Where(a => (a.Name == assetStateNameFinalUpdate)).FirstOrDefault();

            if (assetStateFinal == null)
            {
                assetStateFinal = new Model.AssetState
                {
                    Code = assetStateNameFinalUpdate,
                    Name = assetStateNameFinalUpdate,
                    IsDeleted = false
                };
                _context.Set<Model.AssetState>().Add(assetStateFinal);
            }

            string internalCodeFinalUpdate = assetImport.InternalCodeFinal.Trim() != null && assetImport.InternalCodeFinal.Trim().Length > 0
             ? assetImport.InternalCodeFinal.Trim() : codeDefault;
            employeeFinal = _context.Set<Model.Employee>().Where(e => e.InternalCode == internalCodeFinalUpdate).FirstOrDefault();

            if (employeeFinal == null && (internalCodeInitial != internalCodeFinalUpdate))
            {
                if (!isUpdateEmployeeFinal)
                {
                    employeeFinal = new Model.Employee();

                    string employeeFullNameFinal = assetImport.EmployeeNameFinal != null && assetImport.EmployeeNameFinal.Trim().Length > 0
                        ? assetImport.EmployeeNameFinal.Trim() : nameDefault;

                    string firstName = string.Empty;
                    string lastName = string.Empty;

                    int spaceIndex = employeeFullNameFinal.IndexOf(" ");
                    if (spaceIndex >= 0)
                    {
                        firstName = employeeFullNameFinal.Substring(0, spaceIndex);
                        lastName = employeeFullNameFinal.Substring(spaceIndex + 1);
                    }
                    else
                    {
                        firstName = employeeFullNameFinal;
                    }

                    employeeFinal.InternalCode = internalCodeFinalUpdate;
                    employeeFinal.FirstName = firstName;
                    employeeFinal.LastName = lastName;
                    employeeFinal.IsDeleted = false;

                    _context.Set<Model.Employee>().Add(employeeFinal);
                }

            }

            string locationCodeFinalUpdate = assetImport.LocationCodeFinal.Trim() != null && assetImport.LocationCodeFinal.Trim().Length > 0
                      ? assetImport.LocationCodeFinal.Trim() : codeDefault;
            string locationNameFinalUpdate = assetImport.LocationNameFinal.Trim() != null && assetImport.LocationNameFinal.Trim().Length > 0
                            ? assetImport.LocationNameFinal.Trim() : nameDefault;

            string roomCodeFinalUpdate = assetImport.RoomCodeFinal.Trim() != null && assetImport.RoomCodeFinal.Trim().Length > 0
                            ? assetImport.RoomCodeFinal.Trim() : codeDefault;
            string roomNameFinalUpdate = assetImport.RoomNameFinal.Trim() != null && assetImport.RoomNameFinal.Trim().Length > 0
                            ? assetImport.RoomNameFinal.Trim() : nameDefault;

            locationFinal = _context.Set<Model.Location>().Where(l => (l.RegionId == region.Id) && (l.Code == locationCodeFinalUpdate)).FirstOrDefault();

            if (locationFinal == null && (locationCodeFinalUpdate != locationCodeInitial))
            {
                if (!isUpdateLocationFinal)
                {
                    locationFinal = new Model.Location
                    {
                        Code = locationCodeFinalUpdate,
                        Name = locationNameFinalUpdate,
                        IsDeleted = false,
                        Region = region
                    };
                    _context.Set<Model.Location>().Add(locationFinal);
                }

            }
            else
            {
                if (locationFinal != null)
                {
                    roomFinal = _context.Set<Model.Room>().Where(r => ((r.LocationId == locationFinal.Id) && (r.Code == roomCodeFinalUpdate))).FirstOrDefault();
                }
                else
                {
                    roomFinal = _context.Set<Model.Room>().Where(r => ((r.LocationId == locationInitial.Id) && (r.Code == roomCodeFinalUpdate))).FirstOrDefault();
                }

            }


            if (roomFinal == null && (roomCodeInitial != roomCodeFinalUpdate))
            {
                if (!isUpdateRoomFinal)
                {
                    roomFinal = new Model.Room
                    {
                        Code = roomCodeFinalUpdate,
                        Name = roomNameFinalUpdate,
                        Location = locationFinal,
                        IsDeleted = false
                    };
                    _context.Set<Model.Room>().Add(roomFinal);
                }

            }

            string costCenterCodeFinalUpdate = assetImport.RoomCodeFinal.Trim() != null && assetImport.RoomCodeFinal.Trim().Length > 0 ? assetImport.RoomCodeFinal.Trim() : codeDefault;
            string costCenterNameFinalUpdate = assetImport.RoomNameFinal.Trim() != null && assetImport.RoomNameFinal.Trim().Length > 0 ? assetImport.RoomNameFinal.Trim() : nameDefault;
            costCenterFinal = _context.Set<Model.CostCenter>().Where(a => a.Code == costCenterCodeFinalUpdate).FirstOrDefault();
            if (costCenterFinal == null && (costCenterCodeInitial != costCenterCodeFinalUpdate))
            {
                if (!isUpdateCostCenterFinal)
                {
                    costCenterFinal = new Model.CostCenter
                    {
                        Code = costCenterCodeFinalUpdate,
                        Name = costCenterNameFinalUpdate,
                        IsDeleted = false
                    };
                    _context.Set<Model.CostCenter>().Add(costCenterFinal);
                }

            }
            if (!isUpdateAsset)
            {
                document = new Model.Document
                {
                    Approved = true,
                    DocumentType = documentType,
                    DocNo1 = assetImport.DocNo,
                    DocNo2 = string.Empty,
                    DocumentDate = assetImport.PurchaseDate,
                    RegisterDate = assetImport.PurchaseDate,
                    Partner = partner
                };

                _context.Add(document);


                assetOp = new Model.AssetOp()
                {
                    Asset = asset,
                    Document = document,
                    RoomInitial = roomInitial,
                    RoomFinal = null,
                    EmployeeInitial = employeeInitial,
                    EmployeeFinal = null,
                    CostCenterInitial = costCenterInitial,
                    CostCenterFinal = null,
                    AssetCategoryFinal = null,
                    AssetCategoryIdInitial = assetCategory.Id,
                    InvStateIdInitial = assetStateInitial.Id,
                    InvStateIdFinal = null,
                    AdministrationInitial = administration,
                    AdministrationFinal = null,
                    AccSystem = accSystem,

                };

                if (!string.IsNullOrEmpty(assetImport.LocationNameFinal))
                {
                    assetOp.EmployeeFinal = employeeFinal != employeeInitial ? employeeFinal : employeeInitial;
                    assetOp.RoomFinal = roomFinal != roomInitial ? roomFinal : roomInitial;
                    assetOp.CostCenterFinal = costCenterFinal != costCenterInitial ? costCenterFinal : costCenterInitial;
                    assetOp.InvStateIdFinal = assetStateFinal.Id;
                    assetOp.AssetStateIdFinal = assetStateFinal.Id;
                    assetOp.AdministrationFinal = administration;
                    assetOp.InvStateIdFinal = assetStateFinal.Id;
                    assetOp.AssetCategoryIdFinal = assetCategory.Id;
                }


                _context.Add(assetOp);

                inventory = _context.Set<Model.Inventory>().OrderByDescending(j => j.Id).FirstOrDefault();

                if (inventory != null)
                {
                    inventoryAsset = new Model.InventoryAsset()
                    {
                        Asset = asset,
                        Inventory = inventory,
                        QInitial = 1,
                        QFinal = 0,
                        EmployeeInitial = employeeInitial,
                        RoomInitial = roomInitial,
                        CostCenterInitial = costCenterInitial,
                        StateIdInitial = assetStateInitial.Id,
                        SerialNumber = assetImport.SerialNumber,
                        StateIdFinal = null

                    };

                    if (!string.IsNullOrEmpty(assetImport.LocationNameFinal))
                    {
                        inventoryAsset.EmployeeFinal = employeeFinal != employeeInitial ? employeeFinal : employeeInitial;
                        inventoryAsset.RoomFinal = roomFinal != roomInitial ? roomFinal : roomInitial;
                        inventoryAsset.CostCenterFinal = costCenterFinal != costCenterInitial ? costCenterFinal : costCenterInitial;
                        inventoryAsset.StateIdFinal = assetStateFinal.Id;
                        inventoryAsset.QFinal = 1;
                    }

                    _context.Add(inventoryAsset);
                }
            }




            var monthSumUpdate = assetImport.ValueInv;

            assetDep = _context.Set<Model.AssetDep>().Where(a => a.AssetId == asset.Id).FirstOrDefault();

            if (assetDep != null)
            {
                assetDep.DepPeriodIn = (int)monthSumUpdate;
                assetDep.DepPeriodMonth = 1;
                assetDep.DepPeriodMonthIn = 0;
                assetDep.DepPeriodRem = (int)monthSumUpdate;
                assetDep.DepPeriodRemIn = (int)monthSumUpdate;
                assetDep.UsageStartDate = assetImport.PurchaseDate;
                assetDep.ValueDep = assetImport.ValueInv;
                assetDep.ValueDepIn = 0;
                assetDep.ValueDepPU = assetImport.ValueInv;
                assetDep.ValueDepPUIn = 0;
                assetDep.ValueDepYTD = assetImport.ValueInv;
                assetDep.ValueDepYTDIn = 0;
                assetDep.ValueInv = assetImport.ValueInv;
                assetDep.ValueInvIn = assetImport.ValueInv;
                assetDep.ValueRem = assetImport.ValueInv;
                assetDep.ValueRemIn = assetImport.ValueInv;

                _context.Set<Model.AssetDep>().Update(assetDep);

                accMonth = _context.Set<Model.AccMonth>().Where(a => a.IsActive == true).FirstOrDefault();
                assetDepMD = _context.Set<Model.AssetDepMD>().Where(a => a.AssetId == asset.Id && a.AccMonthId == accMonth.Id).FirstOrDefault();

                if (assetDepMD == null)
                {
                    assetDepMD = new Model.AssetDepMD
                    {
                        AccMonth = accMonth,
                        AccSystem = accSystem,
                        Asset = asset,
                        UsefulLife = (int)monthSumUpdate,
                        TotLifeInpPeriods = 1,
                        RemLifeInPeriods = 1,
                        AccumulDep = assetImport.ValueInv,
                        BkValFYStart = assetImport.ValueInv,
                        DepForYear = assetImport.ValueInv,
                        CurrentAPC = assetImport.ValueInv,
                        PosCap = assetImport.ValueInv
                    };

                    _context.Set<Model.AssetDepMD>().Add(assetDepMD);
                }


                assetAdmMD = _context.Set<Model.AssetAdmMD>().Where(a => a.AssetId == asset.Id && a.AccMonthId == accMonth.Id).FirstOrDefault();

                if (assetAdmMD == null)
                {
                    assetAdmMD = new Model.AssetAdmMD
                    {
                        AccMonth = accMonth,
                        Asset = asset,
                        Administration = administration,
                        AssetCategory = assetCategory,
                        AssetState = assetStateInitial,
                        AssetType = assetType,
                        CostCenter = costCenterInitial,
                        DepartmentId = null,
                        Employee = employeeInitial,
                        Room = roomInitial
                    };

                    if (string.IsNullOrEmpty(assetImport.LocationNameFinal))
                    {
                        assetAdmMD.Employee = employeeFinal != employeeInitial ? employeeFinal : employeeInitial;
                        assetAdmMD.Room = roomFinal != roomInitial ? roomFinal : roomInitial;
                        assetAdmMD.CostCenter = costCenterFinal != costCenterInitial ? costCenterFinal : costCenterInitial;
                        assetAdmMD.AssetStateId = assetStateFinal.Id;
                    }

                    _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);
                }


            }



            _context.SaveChanges();




            return asset.Id;
        }

        //public int AssetImportV10(AssetImportV10 assetImport)
        //{


        //    Model.Asset asset = null;
        //    Model.Asset assetDuplicate = null;
        //    Model.AssetCategory assetCategory = null;
        //    Model.CostCenter costCenter = null;
        //    Model.Location location = null;
        //    Model.Location locationInitial = null;
        //    Model.Location locationFinal = null;
        //    Model.Document document = null;
        //    Model.InventoryAsset inventoryAsset = null;
        //    Model.InventoryAsset inventoryAssetPrev = null;
        //    Model.AssetOp assetOp = null;
        //    Model.AssetOp assetOpPrev = null;
        //    Model.Inventory inventory = null;
        //    Model.Partner partner = null;
        //    Model.Region region = null;
        //    Model.AdmCenter admCenter = null;
        //    Model.Employee employee = null;
        //    Model.InvState invState = null;
        //    Model.AssetType assetType = null;
        //    Model.AssetState assetState = null;
        //    Model.AssetClass assetClass = null;
        //    Model.AssetClassType assetClassType = null;
        //    Model.Room room = null;
        //    Model.Room roomInitial = null;
        //    Model.Room roomFinal = null;
        //    Model.Administration administration = null;
        //    Model.AssetAC assetAc = null;
        //    Model.AssetDep assetDep = null;
        //    Model.AssetInv assetInv = null;
        //    Model.AssetNi assetNi = null;
        //    Model.AccSystem accSystem = null;





        //    string codeDefault = "_NSP";
        //    string documentTypeCode = "PURCHASE";
        //    string assetClassTypeDefault = "RAS";
        //    string assetStateDefault = string.Empty;
        //    string locationCode = string.Empty;


        //    string costCenterCode = string.Empty;
        //    string costCenterName = string.Empty;
        //    string invNo = string.Empty;
        //    string disposition = string.Empty;
        //    string nameDefault = "_Nespecificat";
        //    string TransactionTypeCode = "CASARE";

        //    string RegionName = "OTP BANK ROMANIA";


        //    var isParent = assetImport.IsParent.Count();

        //    if (isParent == 0)
        //    {


        //        string assetTypeCode = assetImport.AssetType.Trim();

        //        assetType = _context.Set<Model.AssetType>().Where(a => (a.Code == assetTypeCode)).FirstOrDefault();

        //        if (assetType == null)
        //        {
        //            assetType = new Model.AssetType
        //            {
        //                Code = assetTypeCode,
        //                Name = assetTypeCode,
        //                IsDeleted = false
        //            };
        //            _context.Set<Model.AssetType>().Add(assetType);
        //        }

        //        assetClassType = _context.Set<Model.AssetClassType>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();

        //        if (assetClassType == null)
        //        {
        //            assetClassType = new Model.AssetClassType
        //            {
        //                Code = assetClassTypeDefault,
        //                Name = assetClassTypeDefault,
        //                IsDeleted = false
        //            };
        //            _context.Set<Model.AssetClassType>().Add(assetClassType);
        //        }

        //        assetClass = _context.Set<Model.AssetClass>().Where(a => (a.Code == assetClassTypeDefault.Trim())).FirstOrDefault();

        //        if (assetClass == null)
        //        {
        //            assetClass = new Model.AssetClass
        //            {
        //                Code = assetClassTypeDefault.Trim(),
        //                Name = assetClassTypeDefault.Trim(),
        //                IsDeleted = false,
        //                AssetClassType = assetClassType
        //            };
        //            _context.Set<Model.AssetClass>().Add(assetClass);
        //        }

        //        accSystem = _context.Set<Model.AccSystem>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();

        //        if (accSystem == null)
        //        {
        //            accSystem = new Model.AccSystem
        //            {
        //                AssetClassType = assetClassType,
        //                Code = assetClassTypeDefault,
        //                Name = assetClassTypeDefault,
        //                IsDeleted = false
        //            };
        //            _context.Set<Model.AccSystem>().Add(accSystem);
        //        }

        //        administration = _context.Set<Model.Administration>().Where(a => (a.Code == assetClassTypeDefault.Trim())).FirstOrDefault();

        //        if (administration == null)
        //        {
        //            administration = new Model.Administration
        //            {
        //                Code = assetClassTypeDefault.Trim(),
        //                Name = assetClassTypeDefault.Trim(),
        //                IsDeleted = false
        //            };

        //            _context.Set<Model.Administration>().Add(administration);
        //        }


        //        string assetStateCode = assetStateDefault;
        //        assetState = _context.Set<Model.AssetState>().Where(a => (a.Code == assetStateCode)).FirstOrDefault();

        //        if (assetState == null)
        //        {
        //            assetState = new Model.AssetState
        //            {
        //                Code = assetStateCode,
        //                Name = assetStateCode,
        //                IsDeleted = false
        //            };
        //            _context.Set<Model.AssetState>().Add(assetState);
        //        }
        //        var documentType = _context.Set<Model.DocumentType>().Where(d => d.Code == documentTypeCode).Single();

        //        string internalCode = codeDefault;
        //        employee = _context.Set<Model.Employee>().Where(e => e.InternalCode == internalCode).FirstOrDefault();

        //        if (employee == null)
        //        {
        //            employee = new Model.Employee();

        //            string firstName = nameDefault;
        //            string lastName = nameDefault;

        //            employee.InternalCode = internalCode;
        //            employee.FirstName = firstName;
        //            employee.LastName = lastName;
        //            employee.IsDeleted = false;

        //            _context.Set<Model.Employee>().Add(employee);
        //        }

        //        assetCategory = _context.Set<Model.AssetCategory>().Where(a => a.Code == assetImport.AssetType.Trim()).FirstOrDefault();
        //        if (assetCategory == null)
        //        {
        //            assetCategory = new Model.AssetCategory
        //            {
        //                Code = assetImport.AssetType.Trim(),
        //                Name = assetImport.AssetType.Trim(),
        //                IsDeleted = false
        //            };
        //            _context.Set<Model.AssetCategory>().Add(assetCategory);
        //        }

        //        costCenterCode = assetImport.CostCenterCode.Trim();
        //        costCenterName = assetImport.CostCenterName.Trim();
        //        costCenter = _context.Set<Model.CostCenter>().Where(a => a.Code == costCenterCode).FirstOrDefault();
        //        if (costCenter == null)
        //        {
        //            costCenter = new Model.CostCenter
        //            {
        //                Code = costCenterCode,
        //                Name = costCenterName,
        //                IsDeleted = false
        //            };
        //            _context.Set<Model.CostCenter>().Add(costCenter);
        //        }
        //        region = _context.Set<Model.Region>().Where(r => (r.Code == RegionName.Trim())).FirstOrDefault();
        //        if (region == null)
        //        {
        //            region = new Model.Region
        //            {
        //                Code = RegionName.Trim(),
        //                Name = RegionName.Trim(),
        //                IsDeleted = false
        //            };
        //            _context.Set<Model.Region>().Add(region);
        //        }

        //        admCenter = _context.Set<Model.AdmCenter>().Where(r => (r.Code == RegionName.Trim())).FirstOrDefault();
        //        if (admCenter == null)
        //        {
        //            admCenter = new Model.AdmCenter
        //            {
        //                Code = RegionName.Trim(),
        //                Name = RegionName.Trim(),
        //                IsDeleted = false
        //            };
        //            _context.Set<Model.AdmCenter>().Add(admCenter);
        //        }

        //        //string locationCode = assetImport.LocationCode != null && assetImport.LocationCode.Trim().Length > 0
        //        //                ? assetImport.LocationCode.Trim() : codeDefault;
        //        string locationName = assetImport.LocationNameFinal != null && assetImport.LocationNameFinal.Trim().Length > 0
        //                        ? assetImport.LocationNameFinal.Trim() : nameDefault;

        //        //string roomCode = assetImport.RoomCode != null && assetImport.RoomCode.Trim().Length > 0
        //        //                ? assetImport.RoomCode.Trim() : codeDefault;
        //        string roomName = assetImport.LocationNameFinal != null && assetImport.LocationNameFinal.Trim().Length > 0
        //                       ? assetImport.LocationNameFinal.Trim() : nameDefault;
        //        string roomCode = roomName;



        //        if (assetImport.IsTransfer.ToUpper() == "TRUE")
        //        {
        //            location = _context.Set<Model.Location>().Where(l => (l.RegionId == region.Id) && (l.Code == assetImport.LocationCodeFinal.Trim())).FirstOrDefault();

        //            if (location == null)
        //            {

        //                location = new Model.Location
        //                {
        //                    Code = assetImport.LocationCodeFinal.Trim(),
        //                    Name = assetImport.LocationCodeFinal.Trim(),
        //                    IsDeleted = false,
        //                    Region = region
        //                };


        //                _context.Set<Model.Location>().Add(location);
        //            }
        //            else
        //            {
        //                room = _context.Set<Model.Room>().Where(r => ((r.LocationId == location.Id) && (r.Code == assetImport.LocationCodeFinal.Trim()))).FirstOrDefault();
        //            }


        //            if (room == null)
        //            {
        //                room = new Model.Room
        //                {
        //                    Code = assetImport.LocationCodeFinal.Trim(),
        //                    Name = assetImport.LocationCodeFinal.Trim(),
        //                    Location = location,
        //                    IsDeleted = false
        //                };
        //                _context.Set<Model.Room>().Add(room);
        //            }
        //        }
        //        else
        //        {
        //            location = _context.Set<Model.Location>().Where(l => (l.RegionId == region.Id) && (l.Code == assetImport.LocationCodeInitial.Trim())).FirstOrDefault();


        //            if (location == null)
        //            {

        //                location = new Model.Location
        //                {
        //                    Code = assetImport.LocationCodeInitial.Trim(),
        //                    Name = assetImport.LocationNameInitial.Trim(),
        //                    IsDeleted = false,
        //                    Region = region
        //                };


        //                _context.Set<Model.Location>().Add(location);
        //            }
        //            else
        //            {
        //                room = _context.Set<Model.Room>().Where(r => ((r.LocationId == location.Id) && (r.Code == assetImport.LocationCodeInitial.Trim()))).FirstOrDefault();
        //            }


        //            if (room == null)
        //            {
        //                room = new Model.Room
        //                {
        //                    Code = assetImport.LocationCodeInitial.Trim(),
        //                    Name = assetImport.LocationNameInitial.Trim(),
        //                    Location = location,
        //                    IsDeleted = false
        //                };
        //                _context.Set<Model.Room>().Add(room);
        //            }
        //        }



        //        partner = _context.Set<Model.Partner>().Where(a => a.FiscalCode == nameDefault).FirstOrDefault();
        //        if (partner == null)
        //        {
        //            partner = new Model.Partner
        //            {
        //                Name = nameDefault,
        //                FiscalCode = nameDefault,
        //                RegistryNumber = string.Empty,
        //                IsDeleted = false
        //            };

        //            _context.Set<Model.Partner>().Add(partner);
        //        }

        //        inventory = _context.Set<Model.Inventory>().Where(i => !i.IsDeleted && i.Active).OrderByDescending(i => i.Id).FirstOrDefault();


        //        if (assetImport.InvNo.Substring(0, 1) != "T")
        //        {
        //            asset = _context.Set<Model.Asset>().Where(a => a.InvNo == assetImport.InvNo).FirstOrDefault();



        //            if (asset == null) //nu exista in bd, asset nou
        //            {

        //                //    assetDuplicate = _context.Set<Model.Asset>().Where(a => a.Name == assetImport.Name.Trim() && a.Administration.Name == assetImport.AssetClassCode.Trim() && a.AssetCategory.Code == assetImport.AssetCategoryCode.Trim()
        //                //                && a.AssetType.Name == assetImport.AssetType.Trim() && a.CostCenter.Name == assetImport.CostCenterName.Trim() && a.Employee.InternalCode == assetImport.InternalCode.Trim() && a.PurchaseDate == assetImport.PurchaseDate
        //                //                 && a.Quantity == assetImport.Quantity && a.SerialNumber == assetImport.SerialNumber.Trim() && a.Room.Name == assetImport.RoomName.Trim() && a.ValueInv == assetImport.ValueInv && a.ValueRem == (assetImport.ValueDep - assetImport.ValueCassation)).FirstOrDefault();
        //                //    if (assetDuplicate == null)
        //                //    {
        //                document = new Model.Document
        //                {
        //                    Approved = true,
        //                    DocumentType = documentType,
        //                    DocNo1 = string.Empty,
        //                    DocNo2 = string.Empty,
        //                    DocumentDate = assetImport.PurchaseDate,
        //                    RegisterDate = assetImport.PurchaseDate,
        //                    Partner = partner
        //                };

        //                _context.Add(document);


        //                asset = new Model.Asset()
        //                {
        //                    InvNo = assetImport.InvNo.Trim(),
        //                    Document = document,
        //                    Employee = employee,
        //                    Room = room,
        //                    AssetTypeId = assetType.Id,
        //                    PurchaseDate = assetImport.PurchaseDate,
        //                    Quantity = assetImport.QuantityInitial,
        //                    Validated = true,
        //                    InvStateId = 1,
        //                    Administration = administration
        //                };

        //                if (assetImport.IsTransfer.ToUpper() == "TRUE")
        //                {
        //                    roomFinal = _context.Set<Model.Room>().Where(r => ((r.LocationId == location.Id) && (r.Code == assetImport.LocationCodeFinal.Trim()))).FirstOrDefault();
        //                    asset.Room = roomFinal;
        //                }

        //                    _context.Add(asset);

        //                assetOp = new Model.AssetOp()
        //                {
        //                    Asset = asset,
        //                    Document = document,
        //                    RoomInitial = room,
        //                    RoomFinal = assetImport.QuantityFinal == 1 ? room : null,
        //                    EmployeeInitial = employee,
        //                    EmployeeFinal = assetImport.QuantityFinal == 1 ? employee : null,
        //                    CostCenterInitial = costCenter,
        //                    CostCenterFinal = assetImport.QuantityFinal == 1 ? costCenter : null,
        //                    AssetCategoryFinal = assetImport.QuantityFinal == 1 ? assetCategory : null,
        //                    AssetCategoryIdInitial = assetCategory.Id,
        //                    InvStateIdInitial = null,
        //                    InvStateIdFinal = null,
        //                    AdministrationInitial = administration,
        //                    AdministrationFinal = assetImport.QuantityFinal == 1 ? administration : null,
        //                    AccSystem = accSystem,
        //                    Info = assetImport.Info
        //                };

        //                if (assetImport.IsTransfer.ToUpper() == "TRUE")
        //                {
        //                    roomInitial = _context.Set<Model.Room>().Where(r => ((r.LocationId == location.Id) && (r.Code == assetImport.LocationCodeInitial.Trim()))).FirstOrDefault();
        //                    roomFinal = _context.Set<Model.Room>().Where(r => ((r.LocationId == location.Id) && (r.Code == assetImport.LocationCodeFinal.Trim()))).FirstOrDefault();
        //                    assetOp.RoomFinal = assetImport.QuantityFinal == 1 ? roomFinal : null;
        //                    assetOp.RoomInitial = roomInitial;
        //                }


        //                _context.Add(assetOp);

        //                inventory = _context.Set<Model.Inventory>().OrderByDescending(j => j.Id).FirstOrDefault();

        //                if (inventory != null)
        //                {

        //                    inventoryAsset = new Model.InventoryAsset()
        //                    {
        //                        Asset = asset,
        //                        Inventory = inventory,
        //                        QInitial = assetImport.QuantityInitial,
        //                        QFinal = assetImport.QuantityFinal,
        //                        EmployeeInitial = employee,
        //                        EmployeeFinal = assetImport.QuantityFinal == 1 ? employee : null,
        //                        RoomInitial = room,
        //                        RoomFinal = assetImport.QuantityFinal == 1 ? room : null,
        //                        CostCenterInitial = costCenter,
        //                        CostCenterFinal = assetImport.QuantityFinal == 1 ? costCenter : null,
        //                        StateIdInitial = null,
        //                        StateIdFinal = null,
        //                        SerialNumber = assetImport.SerialNumber,
        //                        Info = assetImport.Info

        //                    };

        //                    if (assetImport.IsTransfer.ToUpper() == "TRUE")
        //                    {
        //                        roomInitial = _context.Set<Model.Room>().Where(r => ((r.LocationId == location.Id) && (r.Code == assetImport.LocationCodeInitial.Trim()))).FirstOrDefault();
        //                        roomFinal = _context.Set<Model.Room>().Where(r => ((r.LocationId == location.Id) && (r.Code == assetImport.LocationCodeFinal.Trim()))).FirstOrDefault();
        //                        inventoryAsset.RoomFinal = assetImport.QuantityFinal == 1 ? roomFinal : null;
        //                        inventoryAsset.RoomInitial = roomInitial;
        //                    }


        //                    _context.Add(inventoryAsset);


        //                    assetAc = new Model.AssetAC
        //                    {
        //                        AssetClassType = assetClassType,
        //                        Asset = asset,
        //                        AssetClass = assetClass,
        //                        AssetClassIn = assetClass
        //                    };


        //                    _context.Set<Model.AssetAC>().Add(assetAc);

        //                    var monthSum = 0;


        //                    assetDep = new Model.AssetDep
        //                    {
        //                        AccSystem = accSystem,
        //                        Asset = asset,
        //                        DepPeriod = (int)monthSum,
        //                        DepPeriodIn = (int)monthSum,
        //                        DepPeriodMonth = 1,
        //                        DepPeriodMonthIn = 0,
        //                        DepPeriodRem = (int)monthSum,
        //                        DepPeriodRemIn = (int)monthSum,
        //                        UsageStartDate = assetImport.PurchaseDate,
        //                        ValueDep = 0,
        //                        ValueDepIn = 0,
        //                        ValueDepPU = 0,
        //                        ValueDepPUIn = 0,
        //                        ValueDepYTD = 0,
        //                        ValueDepYTDIn = 0,
        //                        ValueInv = assetImport.ValueInv,
        //                        ValueInvIn = assetImport.ValueInv,
        //                        ValueRem = assetImport.ValueInv,
        //                        ValueRemIn = assetImport.ValueInv
        //                    };

        //                    _context.Set<Model.AssetDep>().Add(assetDep);



        //                    assetInv = new Model.AssetInv
        //                    {
        //                        Asset = asset,
        //                        AllowLabel = assetImport.allowLabel == "ETICHETABIL" ? true : false,
        //                        Barcode = string.Empty,
        //                        Info = assetImport.Info,
        //                        InvName = assetImport.InvNo,
        //                        InvNoOld = assetImport.InvNoParent,
        //                        Model = string.Empty,
        //                        Producer = string.Empty
        //                    };

        //                    _context.Set<Model.AssetInv>().Add(assetInv);

        //                    var assetNiCode1 = string.Empty;

        //                    if (assetImport.InvNo.Substring(0, 1) == "T")
        //                    {
        //                        var reconcile = assetImport.ReconcileInvNo;
        //                        var assetNiId = string.Empty;

        //                        if (reconcile.Length != 0)
        //                        {

        //                            asset = _context.Set<Model.Asset>().Where(a => a.InvNo == assetImport.ReconcileInvNo).FirstOrDefault();

        //                            if (asset != null)
        //                            {
        //                                assetNiId = asset.Id.ToString();
        //                            }

        //                        }

        //                        assetNi = new Model.AssetNi
        //                        {
        //                            AllowLabel = assetImport.allowLabel == "ETICHETABIL" ? true : false,
        //                            AssetId = int.Parse(assetNiId),
        //                            Code1 = assetImport.InvNo,
        //                            Code2 = string.Empty,
        //                            CompanyId = null,
        //                            CreatedAt = DateTime.Now,
        //                            CreatedBy = string.Empty,
        //                            EmployeeId = null,
        //                            Info = assetImport.Info,
        //                            InvStateId = 1,
        //                            InventoryId = 1,
        //                            IsDeleted = false,
        //                            Model = string.Empty,
        //                            ModifiedAt = DateTime.Now,
        //                            ModifiedBy = string.Empty,
        //                            Name1 = assetImport.Description,
        //                            Name2 = string.Empty,
        //                            Producer = string.Empty,
        //                            Quantity = 1,
        //                            RoomId = room.Id,
        //                            SerialNumber = assetImport.SerialNumber
        //                        };

        //                        if (assetImport.IsTransfer.ToUpper() == "TRUE")
        //                        {

        //                            roomFinal = _context.Set<Model.Room>().Where(r => ((r.LocationId == location.Id) && (r.Code == assetImport.LocationCodeFinal.Trim()))).FirstOrDefault();
        //                            assetNi.Room = roomFinal;
        //                        }
        //                        else
        //                        {
        //                            roomInitial = _context.Set<Model.Room>().Where(r => ((r.LocationId == location.Id) && (r.Code == assetImport.LocationCodeInitial.Trim()))).FirstOrDefault();
        //                            assetNi.Room = roomInitial;
        //                        }

        //                        _context.Set<Model.AssetNi>().Add(assetNi);
        //                    }
        //                }


        //            }
        //            //}

        //            asset.Name = Encoding.ASCII.GetString(Encoding.ASCII.GetBytes(assetImport.Description));
        //            asset.CostCenter = costCenter;
        //            asset.AssetCategory = assetCategory;
        //            asset.ValueInv = assetImport.ValueInv;
        //            asset.ValueRem = assetImport.ValueInv;
        //            asset.PurchaseDate = assetImport.PurchaseDate;
        //            asset.SerialNumber = assetImport.SerialNumber != null ? assetImport.SerialNumber.Trim() : string.Empty;
        //            asset.ERPCode = null;


        //            _context.SaveChanges();

        //            return asset.Id;


        //        }
        //        else
        //        {
        //            assetNi = new Model.AssetNi
        //            {
        //                AllowLabel = assetImport.allowLabel == "ETICHETABIL" ? true : false,
        //                AssetId = null,
        //                Code1 = assetImport.InvNo,
        //                Code2 = string.Empty,
        //                CompanyId = null,
        //                CreatedAt = DateTime.Now,
        //                CreatedBy = string.Empty,
        //                EmployeeId = null,
        //                Info = assetImport.Info,
        //                InvStateId = 1,
        //                InventoryId = 1,
        //                IsDeleted = false,
        //                Model = string.Empty,
        //                ModifiedAt = DateTime.Now,
        //                ModifiedBy = string.Empty,
        //                Name1 = assetImport.Description,
        //                Name2 = string.Empty,
        //                Producer = string.Empty,
        //                Quantity = 1,
        //                RoomId = room.Id,
        //                SerialNumber = assetImport.SerialNumber
        //            };

        //            if (assetImport.IsTransfer.ToUpper() == "TRUE")
        //            {

        //                roomFinal = _context.Set<Model.Room>().Where(r => ((r.LocationId == location.Id) && (r.Code == assetImport.LocationCodeFinal.Trim()))).FirstOrDefault();
        //                assetNi.Room = roomFinal;
        //            }
        //            else
        //            {
        //                roomInitial = _context.Set<Model.Room>().Where(r => ((r.LocationId == location.Id) && (r.Code == assetImport.LocationCodeInitial.Trim()))).FirstOrDefault();
        //                assetNi.Room = roomInitial;
        //            }

        //            _context.Set<Model.AssetNi>().Add(assetNi);

        //            _context.SaveChanges();

        //            return assetNi.Id;
        //        }
        //    }

        //    return 1;

        //}
        public int DeleteAsset(int assetId)
        {
            var inventory = _context.Set<Model.Inventory>().Where(a => a.Active == true).Single();
            var asset = _context.Set<Model.Asset>().Where(a => a.Id == assetId).Single();
            asset.IsDeleted = true;
            asset.Validated = false;


            _context.Update(asset);

            _context.SaveChanges();

            return assetId;
        }

        public int AssetImportV10(AssetImportV10 assetImport)
        {


            Model.Asset asset = null;

            Model.AssetCategory assetCategory = null;
            Model.CostCenter costCenter = null;
            Model.Location location = null;
            Model.Document document = null;
            Model.InventoryAsset inventoryAsset = null;
            Model.AssetOp assetOp = null;
            Model.Inventory inventory = null;
            Model.Partner partner = null;
            Model.Region region = null;
            Model.AdmCenter admCenter = null;
            Model.Employee employee = null;
            Model.AssetType assetType = null;
            Model.AssetState assetState = null;
            Model.AssetClass assetClass = null;
            Model.AssetClassType assetClassType = null;
            Model.Room room = null;
            Model.Administration administration = null;
            Model.AssetAC assetAc = null;
            Model.AssetDep assetDep = null;
            Model.AssetInv assetInv = null;
            Model.AccSystem accSystem = null;
            Model.AccMonth accMonth = null;
            Model.AssetDepMD assetDepMD = null;
            Model.AssetAdmMD assetAdmMD = null;


            string codeDefault = "_NSP";
            string documentTypeCode = "PURCHASE";
            string assetClassTypeDefault = "RAS";
            string assetStateCodeDefault = "FUNCTION";
            string assetStateNameDefault = "In functiune";
            string locationCode = string.Empty;
            string costCenterCode = string.Empty;
            string costCenterName = string.Empty;
            string invNo = string.Empty;
            string disposition = string.Empty;
            string nameDefault = "_Nespecificat";
            string RegionName = "OTP BANK ROMANIA";


            assetType = _context.Set<Model.AssetType>().Where(a => (a.Code == codeDefault.Trim())).FirstOrDefault();

            if (assetType == null)
            {
                assetType = new Model.AssetType
                {
                    Code = codeDefault,
                    Name = nameDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AssetType>().Add(assetType);
            }

            assetClassType = _context.Set<Model.AssetClassType>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();

            if (assetClassType == null)
            {
                assetClassType = new Model.AssetClassType
                {
                    Code = assetClassTypeDefault,
                    Name = assetClassTypeDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AssetClassType>().Add(assetClassType);
            }

            assetClass = _context.Set<Model.AssetClass>().Where(a => (a.Code == assetClassTypeDefault.Trim())).FirstOrDefault();

            if (assetClass == null)
            {
                assetClass = new Model.AssetClass
                {
                    Code = assetClassTypeDefault.Trim(),
                    Name = assetClassTypeDefault.Trim(),
                    IsDeleted = false,
                    AssetClassType = assetClassType
                };
                _context.Set<Model.AssetClass>().Add(assetClass);
            }

            accSystem = _context.Set<Model.AccSystem>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();

            if (accSystem == null)
            {
                accSystem = new Model.AccSystem
                {
                    AssetClassType = assetClassType,
                    Code = assetClassTypeDefault,
                    Name = assetClassTypeDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AccSystem>().Add(accSystem);
            }

            administration = _context.Set<Model.Administration>().Where(a => (a.Code == assetClassTypeDefault.Trim())).FirstOrDefault();

            if (administration == null)
            {
                administration = new Model.Administration
                {
                    Code = assetClassTypeDefault.Trim(),
                    Name = assetClassTypeDefault.Trim(),
                    IsDeleted = false
                };

                _context.Set<Model.Administration>().Add(administration);
            }

            assetState = _context.Set<Model.AssetState>().Where(a => (a.Code == assetStateCodeDefault)).FirstOrDefault();

            if (assetState == null)
            {
                assetState = new Model.AssetState
                {
                    Code = assetStateCodeDefault,
                    Name = assetStateNameDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AssetState>().Add(assetState);
            }
            var documentType = _context.Set<Model.DocumentType>().Where(d => d.Code == documentTypeCode).Single();

            string internalCode = codeDefault;

            employee = _context.Set<Model.Employee>().Where(e => e.InternalCode == internalCode).FirstOrDefault();

            if (employee == null)
            {
                employee = new Model.Employee();

                string firstName = nameDefault;
                string lastName = nameDefault;

                employee.InternalCode = internalCode;
                employee.FirstName = firstName;
                employee.LastName = lastName;
                employee.IsDeleted = false;

                _context.Set<Model.Employee>().Add(employee);
            }

            assetCategory = _context.Set<Model.AssetCategory>().Where(a => a.Code == codeDefault.Trim()).FirstOrDefault();
            if (assetCategory == null)
            {
                assetCategory = new Model.AssetCategory
                {
                    Code = codeDefault,
                    Name = nameDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AssetCategory>().Add(assetCategory);
            }

            costCenterCode = assetImport.CostCenterCode.Trim();
            costCenterName = assetImport.CostCenterName.Trim();
            costCenter = _context.Set<Model.CostCenter>().Where(a => a.Code == costCenterCode).FirstOrDefault();
            if (costCenter == null)
            {
                costCenter = new Model.CostCenter
                {
                    Code = costCenterCode,
                    Name = costCenterName,
                    IsDeleted = false
                };
                _context.Set<Model.CostCenter>().Add(costCenter);
            }
            region = _context.Set<Model.Region>().Where(r => (r.Code == RegionName.Trim())).FirstOrDefault();
            if (region == null)
            {
                region = new Model.Region
                {
                    Code = RegionName.Trim(),
                    Name = RegionName.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Region>().Add(region);
            }

            admCenter = _context.Set<Model.AdmCenter>().Where(r => (r.Code == RegionName.Trim())).FirstOrDefault();
            if (admCenter == null)
            {
                admCenter = new Model.AdmCenter
                {
                    Code = RegionName.Trim(),
                    Name = RegionName.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AdmCenter>().Add(admCenter);
            }


            string locationNameInitial = assetImport.LocationNameInitial != null && assetImport.LocationNameInitial.Trim().Length > 0
                            ? assetImport.LocationNameInitial.Trim() : nameDefault;

            string locationCodeInitial = assetImport.LocationCodeInitial != null && assetImport.LocationCodeInitial.Trim().Length > 0
                        ? assetImport.LocationCodeInitial.Trim() : codeDefault;

            string roomCodeInitial = assetImport.CostCenterCode != null && assetImport.CostCenterCode.Trim().Length > 0
                        ? assetImport.CostCenterCode.Trim() : codeDefault;
            string roomNameInitial = assetImport.CostCenterName != null && assetImport.CostCenterName.Trim().Length > 0
                            ? assetImport.CostCenterName.Trim() : nameDefault;



            location = _context.Set<Model.Location>().Where(l => (l.RegionId == region.Id) && (l.Code == locationCodeInitial)).FirstOrDefault();

            if (location == null)
            {

                location = new Model.Location
                {
                    Code = locationCodeInitial,
                    Name = locationNameInitial,
                    IsDeleted = false,
                    Region = region
                };


                _context.Set<Model.Location>().Add(location);
            }

            room = _context.Set<Model.Room>().Where(r => ((r.LocationId == location.Id) && (r.Code == costCenterCode))).FirstOrDefault();


            if (room == null)
            {
                room = new Model.Room
                {
                    Code = costCenterCode,
                    Name = costCenterName,
                    Location = location,
                    IsDeleted = false
                };
                _context.Set<Model.Room>().Add(room);
            }



            partner = _context.Set<Model.Partner>().Where(a => a.FiscalCode == codeDefault).FirstOrDefault();
            if (partner == null)
            {
                partner = new Model.Partner
                {
                    Name = nameDefault,
                    FiscalCode = codeDefault,
                    RegistryNumber = string.Empty,
                    IsDeleted = false
                };

                _context.Set<Model.Partner>().Add(partner);
            }

            inventory = _context.Set<Model.Inventory>().Where(i => !i.IsDeleted && i.Active).OrderByDescending(i => i.Id).FirstOrDefault();

            asset = _context.Set<Model.Asset>().Where(a => a.InvNo == assetImport.InvNo.Trim()).FirstOrDefault();



            if (asset == null) //nu exista in bd, asset nou
            {
                document = new Model.Document
                {
                    Approved = true,
                    DocumentType = documentType,
                    DocNo1 = assetImport.DocumentName,
                    DocNo2 = string.Empty,
                    DocumentDate = assetImport.PurchaseDate,
                    RegisterDate = assetImport.PurchaseDate,
                    Partner = partner,
                    CreationDate = assetImport.DocumentDate
                };

                _context.Add(document);


                asset = new Model.Asset()
                {
                    InvNo = assetImport.InvNo.Trim(),
                    Document = document,
                    Employee = employee,
                    Room = room,
                    AssetTypeId = assetType.Id,
                    PurchaseDate = assetImport.PurchaseDate,
                    Quantity = assetImport.QuantityInitial,
                    Validated = true,
                    InvStateId = 1,
                    Administration = administration,
                    CostCenter = costCenter,
                    AssetState = assetState

                };


                _context.Add(asset);

                assetOp = new Model.AssetOp()
                {
                    Asset = asset,
                    Document = document,
                    RoomInitial = room,
                    EmployeeInitial = employee,
                    CostCenterInitial = costCenter,
                    AssetCategoryInitial = assetCategory,
                    InvStateIdInitial = 1,
                    InvStateIdFinal = null,
                    AdministrationInitial = administration,
                    AccSystem = accSystem,
                    Info = assetImport.Info,
                    AssetStateInitial = assetState
                };

                _context.Add(assetOp);

                inventory = _context.Set<Model.Inventory>().OrderByDescending(j => j.Id).FirstOrDefault();

                if (inventory != null)
                {

                    inventoryAsset = new Model.InventoryAsset()
                    {
                        Asset = asset,
                        Inventory = inventory,
                        QInitial = assetImport.QuantityInitial,
                        QFinal = assetImport.QuantityFinal,
                        EmployeeInitial = employee,
                        RoomInitial = room,
                        CostCenterInitial = costCenter,
                        StateIdInitial = 1,
                        StateIdFinal = null,
                        SerialNumber = assetImport.SerialNumber,
                        Info = assetImport.Info

                    };

                    _context.Add(inventoryAsset);


                    assetAc = new Model.AssetAC
                    {
                        AssetClassType = assetClassType,
                        Asset = asset,
                        AssetClass = assetClass,
                        AssetClassIn = assetClass
                    };


                    _context.Set<Model.AssetAC>().Add(assetAc);

                    var monthSum = 0;


                    assetDep = new Model.AssetDep
                    {
                        AccSystem = accSystem,
                        Asset = asset,
                        DepPeriod = (int)monthSum,
                        DepPeriodIn = (int)monthSum,
                        DepPeriodMonth = 1,
                        DepPeriodMonthIn = 0,
                        DepPeriodRem = (int)monthSum,
                        DepPeriodRemIn = (int)monthSum,
                        UsageStartDate = assetImport.PurchaseDate,
                        ValueDep = 0,
                        ValueDepIn = 0,
                        ValueDepPU = 0,
                        ValueDepPUIn = 0,
                        ValueDepYTD = 0,
                        ValueDepYTDIn = 0,
                        ValueInv = assetImport.ValueInv,
                        ValueInvIn = assetImport.ValueInv,
                        ValueRem = assetImport.ValueInv,
                        ValueRemIn = assetImport.ValueInv
                    };

                    _context.Set<Model.AssetDep>().Add(assetDep);


                    assetInv = new Model.AssetInv
                    {
                        Asset = asset,
                        AllowLabel = assetImport.allowLabel == "ETICHETABIL" ? true : false,
                        Barcode = string.Empty,
                        Info = assetImport.Info,
                        InvName = assetImport.InvNo,
                        InvNoOld = assetImport.InvNoParent,
                        Model = string.Empty,
                        Producer = string.Empty
                    };

                    _context.Set<Model.AssetInv>().Add(assetInv);

                    accMonth = _context.Set<Model.AccMonth>().Where(a => a.IsActive == true).FirstOrDefault();

                    assetDepMD = new Model.AssetDepMD
                    {
                        AccMonth = accMonth,
                        AccSystem = accSystem,
                        Asset = asset,
                        UsefulLife = (int)monthSum,
                        TotLifeInpPeriods = 1,
                        RemLifeInPeriods = 1,
                        AccumulDep = 0,
                        BkValFYStart = 0,
                        DepForYear = 0,
                        CurrentAPC = 0,
                        PosCap = 0
                    };

                    _context.Set<Model.AssetDepMD>().Add(assetDepMD);

                    assetAdmMD = new Model.AssetAdmMD
                    {
                        AccMonth = accMonth,
                        Asset = asset,
                        Administration = administration,
                        AssetCategory = assetCategory,
                        AssetState = assetState,
                        AssetType = assetType,
                        CostCenter = costCenter,
                        DepartmentId = null,
                        Employee = employee,
                        Room = room,
                        AssetStateId = assetState.Id
                    };

                    _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);

                }


            }

            asset.Name = Encoding.ASCII.GetString(Encoding.ASCII.GetBytes(assetImport.Description));
            asset.CostCenter = costCenter;
            asset.AssetCategory = assetCategory;
            asset.ValueInv = assetImport.ValueInv;
            asset.ValueRem = assetImport.ValueInv;
            asset.PurchaseDate = assetImport.PurchaseDate;
            asset.SerialNumber = assetImport.SerialNumber != null ? assetImport.SerialNumber.Trim() : string.Empty;
            asset.ERPCode = null;


            _context.SaveChanges();

            return asset.Id;

        }

        public int AssetImportV12(AssetImportV12 assetImport)
        {


            Model.Asset asset = null;

            Model.AssetCategory assetCategory = null;
            Model.CostCenter costCenter = null;
            Model.Location location = null;
            Model.Document document = null;
            Model.InventoryAsset inventoryAsset = null;
            Model.AssetOp assetOp = null;
            Model.Inventory inventory = null;
            Model.Partner partner = null;
            Model.Region region = null;
            Model.AdmCenter admCenter = null;
            Model.Employee employee = null;
            Model.AssetType assetType = null;
            Model.AssetState assetState = null;
            Model.AssetClass assetClass = null;
            Model.AssetClassType assetClassType = null;
            Model.Room room = null;
            Model.Administration administration = null;
            Model.Division division = null;
            Model.AssetAC assetAc = null;
            Model.AssetDep assetDep = null;
            Model.AssetInv assetInv = null;
            Model.AccSystem accSystem = null;
            Model.AccMonth accMonth = null;
            Model.AssetDepMD assetDepMD = null;
            Model.AssetAdmMD assetAdmMD = null;
            Model.Uom uom = null;
            Model.InvState invState = null;


            string codeDefault = "_NSP";
            string documentTypeCode = "PURCHASE";
            string assetClassTypeDefault = "RAS";
            string assetStateCodeDefault = "FUNCTION";
            string assetStateNameDefault = "In functiune";
            string locationCode = string.Empty;
            string costCenterCode = string.Empty;
            string costCenterName = string.Empty;
            string invNo = string.Empty;
            string disposition = string.Empty;
            string nameDefault = "_Nespecificat";
            string RegionName = "OTP BANK ROMANIA";


            assetType = _context.Set<Model.AssetType>().Where(a => (a.Code == assetImport.AssetType.Trim())).FirstOrDefault();

            if (assetType == null)
            {
                assetType = new Model.AssetType
                {
                    Code = assetImport.AssetType.Trim(),
                    Name = assetImport.AssetType.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AssetType>().Add(assetType);
            }

            assetClassType = _context.Set<Model.AssetClassType>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();

            if (assetClassType == null)
            {
                assetClassType = new Model.AssetClassType
                {
                    Code = assetClassTypeDefault,
                    Name = assetClassTypeDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AssetClassType>().Add(assetClassType);
            }

            assetClass = _context.Set<Model.AssetClass>().Where(a => (a.Code == assetClassTypeDefault.Trim())).FirstOrDefault();

            if (assetClass == null)
            {
                assetClass = new Model.AssetClass
                {
                    Code = assetClassTypeDefault.Trim(),
                    Name = assetClassTypeDefault.Trim(),
                    IsDeleted = false,
                    AssetClassType = assetClassType
                };
                _context.Set<Model.AssetClass>().Add(assetClass);
            }

            accSystem = _context.Set<Model.AccSystem>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();

            if (accSystem == null)
            {
                accSystem = new Model.AccSystem
                {
                    AssetClassType = assetClassType,
                    Code = assetClassTypeDefault,
                    Name = assetClassTypeDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AccSystem>().Add(accSystem);
            }





            assetState = _context.Set<Model.AssetState>().Where(a => (a.Code == assetImport.AssetState.Trim())).FirstOrDefault();

            if (assetState == null)
            {
                assetState = new Model.AssetState
                {
                    Code = assetImport.AssetState.Trim(),
                    Name = assetImport.AssetState.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AssetState>().Add(assetState);
            }

            invState = _context.Set<Model.InvState>().Where(a => (a.Code == assetImport.AssetState.Trim())).FirstOrDefault();

            if (invState == null)
            {
                invState = new Model.InvState
                {
                    Code = assetImport.AssetState.Trim(),
                    Name = assetImport.AssetState.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.InvState>().Add(invState);
            }
            var documentType = _context.Set<Model.DocumentType>().Where(d => d.Code == documentTypeCode).Single();



            assetCategory = _context.Set<Model.AssetCategory>().Where(a => a.Code == assetImport.AssetCategory.Trim()).FirstOrDefault();
            if (assetCategory == null)
            {
                assetCategory = new Model.AssetCategory
                {
                    Code = assetImport.AssetCategory.Trim(),
                    Name = assetImport.AssetCategory.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AssetCategory>().Add(assetCategory);
            }

            uom = _context.Set<Model.Uom>().Where(a => a.Name == assetImport.Uom.Trim()).FirstOrDefault();
            if (uom == null)
            {
                uom = new Model.Uom
                {
                    Code = assetImport.Uom.Trim(),
                    Name = assetImport.Uom.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Uom>().Add(uom);
            }

            costCenterCode = assetImport.CostCenter.Trim();
            costCenterName = assetImport.CostCenter.Trim();
            costCenter = _context.Set<Model.CostCenter>().Where(a => a.Code == costCenterCode).FirstOrDefault();
            if (costCenter == null)
            {
                costCenter = new Model.CostCenter
                {
                    Code = costCenterCode,
                    Name = costCenterName,
                    IsDeleted = false
                };
                _context.Set<Model.CostCenter>().Add(costCenter);
            }
            region = _context.Set<Model.Region>().Where(r => (r.Code == assetImport.AdministrationCode.Trim() && r.Name == assetImport.AdministrationName.Trim())).FirstOrDefault();
            if (region == null)
            {
                region = new Model.Region
                {
                    Code = assetImport.AdministrationCode.Trim(),
                    Name = assetImport.AdministrationName.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Region>().Add(region);
            }

            admCenter = _context.Set<Model.AdmCenter>().Where(r => (r.Code == assetImport.AdministrationCode.Trim() && r.Name == assetImport.AdministrationName.Trim())).FirstOrDefault();
            if (admCenter == null)
            {
                admCenter = new Model.AdmCenter
                {
                    Code = assetImport.AdministrationCode.Trim(),
                    Name = assetImport.AdministrationName.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AdmCenter>().Add(admCenter);
            }


            string locationNameInitial = assetImport.LocationName != null && assetImport.LocationName.Trim().Length > 0
                            ? assetImport.LocationName.Trim() : nameDefault;

            string locationCodeInitial = assetImport.LocationCode != null && assetImport.LocationCode.Trim().Length > 0
                        ? assetImport.LocationCode.Trim() : codeDefault;

            string roomCodeInitial = assetImport.RoomCode != null && assetImport.RoomCode.Trim().Length > 0
                        ? assetImport.RoomCode.Trim() : codeDefault;




            location = _context.Set<Model.Location>().Where(l => (l.RegionId == region.Id) && (l.Code == locationCodeInitial)).FirstOrDefault();

            if (location == null)
            {

                location = new Model.Location
                {
                    Code = assetImport.LocationCode.Trim(),
                    Name = assetImport.LocationName.Trim(),
                    IsDeleted = false,
                    Region = region
                };


                _context.Set<Model.Location>().Add(location);
            }

            room = _context.Set<Model.Room>().Where(r => ((r.LocationId == location.Id) && (r.Code == assetImport.RoomCode.Trim()))).FirstOrDefault();


            if (room == null)
            {
                room = new Model.Room
                {
                    Code = assetImport.RoomCode.Trim(),
                    Name = assetImport.RoomName.Trim(),
                    Location = location,
                    IsDeleted = false
                };
                _context.Set<Model.Room>().Add(room);
            }

            string internalCode = assetImport.InternalCode.Trim();

            employee = _context.Set<Model.Employee>().Where(e => e.InternalCode == internalCode).FirstOrDefault();

            if (employee == null)
            {
                employee = new Model.Employee();

                string employeeFullName = assetImport.EmployeeFull != null && assetImport.EmployeeFull.Trim().Length > 0
                    ? assetImport.EmployeeFull.Trim() : nameDefault;

                string firstName = string.Empty;
                string lastName = string.Empty;

                int spaceIndex = employeeFullName.IndexOf(",");
                if (spaceIndex >= 0)
                {
                    firstName = employeeFullName.Substring(0, spaceIndex);
                    lastName = employeeFullName.Substring(spaceIndex + 1);
                }
                else
                {
                    firstName = employeeFullName;
                }

                employee.InternalCode = internalCode;
                employee.FirstName = firstName;
                employee.LastName = lastName;
                employee.IsDeleted = false;
                employee.CostCenterId = costCenter.Id;
                // employee.LocationId = location.Id;


                _context.Set<Model.Employee>().Add(employee);
            }

            division = _context.Set<Model.Division>().Where(a => (a.Code == assetImport.RegionCode.Trim() && a.Code == assetImport.RegionName.Trim())).FirstOrDefault();

            if (division == null)
            {
                division = new Model.Division
                {
                    Code = assetImport.RegionCode.Trim(),
                    Name = assetImport.RegionName.Trim(),
                    IsDeleted = false
                };

                _context.Set<Model.Division>().Add(division);
            }

            administration = _context.Set<Model.Administration>().Where(a => (a.Code == assetImport.RegionCode.Trim() && a.Name == assetImport.RegionName.Trim())).FirstOrDefault();

            if (administration == null)
            {
                administration = new Model.Administration
                {
                    Code = assetImport.RegionCode.Trim(),
                    Name = assetImport.RegionName.Trim(),
                    //CostCenter = costCenter,
                    Division = division,
                    IsDeleted = false
                };

                _context.Set<Model.Administration>().Add(administration);
            }



            partner = _context.Set<Model.Partner>().Where(a => a.FiscalCode == codeDefault).FirstOrDefault();
            if (partner == null)
            {
                partner = new Model.Partner
                {
                    Name = nameDefault,
                    FiscalCode = codeDefault,
                    RegistryNumber = string.Empty,
                    IsDeleted = false
                };

                _context.Set<Model.Partner>().Add(partner);
            }

            inventory = _context.Set<Model.Inventory>().Where(i => !i.IsDeleted && i.Active).OrderByDescending(i => i.Id).FirstOrDefault();

            asset = _context.Set<Model.Asset>().Where(a => a.InvNo == assetImport.InvNo.Trim()).FirstOrDefault();



            if (asset == null) //nu exista in bd, asset nou
            {
                document = new Model.Document
                {
                    Approved = true,
                    DocumentType = documentType,
                    DocNo1 = string.Empty,
                    DocNo2 = string.Empty,
                    DocumentDate = assetImport.PifDate,
                    RegisterDate = assetImport.PifDate,
                    Partner = partner,
                    CreationDate = assetImport.PifDate

                };

                _context.Add(document);


                asset = new Model.Asset()
                {
                    InvNo = assetImport.InvNo.Trim(),
                    Document = document,
                    Employee = employee,
                    Room = room,
                    AssetTypeId = assetType.Id,
                    PurchaseDate = assetImport.PifDate,
                    Quantity = (float)assetImport.Quantity,
                    Validated = true,
                    InvStateId = assetState.Id,
                    Administration = administration,
                    CostCenter = costCenter,
                    AssetStateId = assetState.Id,
                    Uom = uom


                };


                _context.Add(asset);

                assetOp = new Model.AssetOp()
                {
                    Asset = asset,
                    Document = document,
                    RoomInitial = room,
                    EmployeeInitial = employee,
                    CostCenterInitial = costCenter,
                    AssetCategoryInitial = assetCategory,
                    InvStateIdInitial = assetState.Id,
                    InvStateIdFinal = null,
                    AdministrationInitial = administration,
                    AccSystem = accSystem,
                    Info = string.Empty,
                    AssetStateInitial = assetState
                };

                _context.Add(assetOp);

                inventory = _context.Set<Model.Inventory>().OrderByDescending(j => j.Id).FirstOrDefault();

                if (inventory != null)
                {

                    inventoryAsset = new Model.InventoryAsset()
                    {
                        Asset = asset,
                        Inventory = inventory,
                        QInitial = (float)assetImport.Quantity,
                        QFinal = 0,
                        EmployeeInitial = employee,
                        RoomInitial = room,
                        CostCenterInitial = costCenter,
                        StateIdInitial = assetState.Id,
                        StateIdFinal = null,
                        SerialNumber = assetImport.SerialNumber,
                        Info = string.Empty,
                        AdministrationInitial = administration

                    };

                    _context.Add(inventoryAsset);


                    assetAc = new Model.AssetAC
                    {
                        AssetClassType = assetClassType,
                        Asset = asset,
                        AssetClass = assetClass,
                        AssetClassIn = assetClass
                    };


                    _context.Set<Model.AssetAC>().Add(assetAc);

                    var monthSum = assetImport.TimeLenght;


                    assetDep = new Model.AssetDep
                    {
                        AccSystem = accSystem,
                        Asset = asset,
                        DepPeriod = (int)monthSum,
                        DepPeriodIn = (int)monthSum,
                        DepPeriodMonth = assetImport.TimeLenght,
                        DepPeriodMonthIn = assetImport.TimeLenght,
                        DepPeriodRem = (int)monthSum,
                        DepPeriodRemIn = (int)monthSum,
                        UsageStartDate = assetImport.PifDate,
                        ValueDep = assetImport.ValueDep,
                        ValueDepIn = assetImport.ValueDep,
                        ValueDepPU = assetImport.ValueDep,
                        ValueDepPUIn = assetImport.ValueDep,
                        ValueDepYTD = assetImport.ValueDep,
                        ValueDepYTDIn = assetImport.ValueDep,
                        ValueInv = assetImport.ValueInv,
                        ValueInvIn = assetImport.ValueInv,
                        ValueRem = assetImport.ValueDep,
                        ValueRemIn = assetImport.ValueDep
                    };

                    _context.Set<Model.AssetDep>().Add(assetDep);


                    assetInv = new Model.AssetInv
                    {
                        Asset = asset,
                        AllowLabel = false,
                        Barcode = assetImport.AllowLabel,
                        Info = string.Empty,
                        InvName = assetImport.InvNo,
                        InvNoOld = assetImport.InvNo,
                        Model = string.Empty,
                        Producer = string.Empty,
                        InvStateId = invState.Id

                    };

                    _context.Set<Model.AssetInv>().Add(assetInv);

                    accMonth = _context.Set<Model.AccMonth>().Where(a => a.IsActive == true).FirstOrDefault();

                    assetDepMD = new Model.AssetDepMD
                    {
                        AccMonth = accMonth,
                        AccSystem = accSystem,
                        Asset = asset,
                        UsefulLife = (int)monthSum,
                        TotLifeInpPeriods = assetImport.TimeLenght,
                        RemLifeInPeriods = assetImport.TimeLenght,
                        AccumulDep = assetImport.ValueDep,
                        BkValFYStart = assetImport.ValueDep,
                        DepForYear = assetImport.ValueDep,
                        CurrentAPC = assetImport.ValueInv,
                        PosCap = assetImport.ValueInv
                    };

                    _context.Set<Model.AssetDepMD>().Add(assetDepMD);

                    assetAdmMD = new Model.AssetAdmMD
                    {
                        AccMonth = accMonth,
                        Asset = asset,
                        Administration = administration,
                        AssetCategory = assetCategory,
                        AssetState = assetState,
                        AssetType = assetType,
                        CostCenter = costCenter,
                        DepartmentId = null,
                        Employee = employee,
                        Room = room,
                        AssetStateId = assetState.Id
                    };

                    _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);

                }


            }

            asset.Name = Encoding.ASCII.GetString(Encoding.ASCII.GetBytes(assetImport.AssetName));
            asset.CostCenter = costCenter;
            asset.AssetCategory = assetCategory;
            asset.ValueInv = assetImport.ValueInv;
            asset.ValueRem = assetImport.ValueDep;
            asset.PurchaseDate = assetImport.PifDate;
            asset.SerialNumber = assetImport.SerialNumber;
            asset.ERPCode = null;


            _context.SaveChanges();

            return asset.Id;


        }

        public int AssetImportStanleyBet(ImportStanleyBet assetImport)
        {


            Model.Asset asset = null;

            Model.AssetCategory assetCategory = null;
            Model.CostCenter costCenter = null;
            Model.Location location = null;
            Model.Document document = null;
            Model.InventoryAsset inventoryAsset = null;
            Model.AssetOp assetOp = null;
            Model.Inventory inventory = null;
            Model.Partner partner = null;
            Model.Region region = null;
            Model.AdmCenter admCenter = null;
            Model.Employee employee = null;
            Model.AssetType assetType = null;
            Model.AssetState assetState = null;
            Model.AssetClass assetClass = null;
            Model.AssetClassType assetClassType = null;
            Model.Room room = null;
            Model.Administration administration = null;
            Model.Division division = null;
            Model.AssetAC assetAc = null;
            Model.AssetDep assetDep = null;
            Model.AssetInv assetInv = null;
            Model.AccSystem accSystem = null;
            Model.AccMonth accMonth = null;
            Model.AssetDepMD assetDepMD = null;
            Model.AssetAdmMD assetAdmMD = null;
            Model.Uom uom = null;
            Model.InvState invState = null;
            Model.DocumentType documentType = null;
            Model.Department department = null;
            Model.Company company = null;



            string codeDefault = "_NSP";
            string documentTypeCode = "PURCHASE";
            string assetClassTypeDefault = "RAS";
            string assetStateCodeDefault = "FUNCTION";
            string assetStateNameDefault = "Standard";
            string locationCode = string.Empty;
            string costCenterCode = string.Empty;
            string costCenterName = string.Empty;
            string invNo = string.Empty;
            string disposition = string.Empty;
            string nameDefault = "_Nespecificat";
            string RegionName = "OTP BANK ROMANIA";


            assetType = _context.Set<Model.AssetType>().Where(a => (a.Code == assetImport.AssetType.Trim())).FirstOrDefault();

            if (assetType == null)
            {
                assetType = new Model.AssetType
                {
                    Code = assetImport.AssetType.Trim(),
                    Name = assetImport.AssetType.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AssetType>().Add(assetType);
            }

            company = _context.Set<Model.Company>().Where(a => (a.Code == assetImport.Company.Trim())).FirstOrDefault();

            if (company == null)
            {
                company = new Model.Company
                {
                    Code = assetImport.Company.Trim(),
                    Name = assetImport.Company.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Company>().Add(company);
            }

            assetClassType = _context.Set<Model.AssetClassType>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();

            if (assetClassType == null)
            {
                assetClassType = new Model.AssetClassType
                {
                    Code = assetClassTypeDefault,
                    Name = assetClassTypeDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AssetClassType>().Add(assetClassType);
            }

            assetClass = _context.Set<Model.AssetClass>().Where(a => (a.Code == assetClassTypeDefault.Trim())).FirstOrDefault();

            if (assetClass == null)
            {
                assetClass = new Model.AssetClass
                {
                    Code = assetClassTypeDefault.Trim(),
                    Name = assetClassTypeDefault.Trim(),
                    IsDeleted = false,
                    AssetClassType = assetClassType
                };
                _context.Set<Model.AssetClass>().Add(assetClass);
            }

            accSystem = _context.Set<Model.AccSystem>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();

            if (accSystem == null)
            {
                accSystem = new Model.AccSystem
                {
                    AssetClassType = assetClassType,
                    Code = assetClassTypeDefault,
                    Name = assetClassTypeDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AccSystem>().Add(accSystem);
            }





            assetState = _context.Set<Model.AssetState>().Where(a => (a.Code == assetStateNameDefault.Trim())).FirstOrDefault();

            if (assetState == null)
            {
                assetState = new Model.AssetState
                {
                    Code = assetStateNameDefault.Trim(),
                    Name = assetStateNameDefault.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AssetState>().Add(assetState);
            }

            invState = _context.Set<Model.InvState>().Where(a => (a.Code == assetStateNameDefault.Trim())).FirstOrDefault();

            if (invState == null)
            {
                invState = new Model.InvState
                {
                    Code = assetStateNameDefault.Trim(),
                    Name = assetStateNameDefault.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.InvState>().Add(invState);
            }
            //var documentType = _context.Set<Model.DocumentType>().Where(d => d.Code == assetImport.DocumentType).Single();

            documentType = _context.Set<Model.DocumentType>().Where(a => a.Name.ToUpper() == assetImport.DocumentType.Trim()).FirstOrDefault();

            if (documentType == null)
            {
                documentType = new Model.DocumentType
                {
                    Code = assetImport.DocumentType.Trim(),
                    CompanyId = null,
                    CreatedAt = DateTime.Now,
                    CreatedBy = string.Empty,
                    IsActive = false,
                    IsDeleted = false,
                    Mask = string.Empty,
                    ModifiedAt = null,
                    ModifiedBy = null,
                    Name = assetImport.DocumentType.Trim(),
                    ParentCode = "ASSET",
                    Prefix = string.Empty,
                    Suffix = string.Empty
                };
                _context.Set<Model.DocumentType>().Add(documentType);
            }

            assetCategory = _context.Set<Model.AssetCategory>().Where(a => a.Code == assetImport.AssetCategory.Trim()).FirstOrDefault();
            if (assetCategory == null)
            {
                assetCategory = new Model.AssetCategory
                {
                    Code = assetImport.AssetCategory.Trim(),
                    Name = assetImport.AssetCategory.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AssetCategory>().Add(assetCategory);
            }

            department = _context.Set<Model.Department>().Where(a => a.Code == assetImport.Department.Trim()).FirstOrDefault();
            if (department == null)
            {
                department = new Model.Department
                {
                    Code = assetImport.Department.Trim(),
                    Name = assetImport.Department.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Department>().Add(department);
            }

            uom = _context.Set<Model.Uom>().Where(a => a.Code == assetImport.UomCode.Trim() && a.Name == assetImport.UomName.Trim()).FirstOrDefault();
            if (uom == null)
            {
                uom = new Model.Uom
                {
                    Code = assetImport.UomCode.Trim(),
                    Name = assetImport.UomName.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Uom>().Add(uom);
            }

            costCenterCode = assetImport.CostCenter.Trim();
            costCenterName = assetImport.CostCenter.Trim();
            costCenter = _context.Set<Model.CostCenter>().Where(a => a.Code == costCenterCode).FirstOrDefault();
            if (costCenter == null)
            {
                costCenter = new Model.CostCenter
                {
                    Code = costCenterCode,
                    Name = costCenterName,
                    IsDeleted = false
                };
                _context.Set<Model.CostCenter>().Add(costCenter);
            }
            //region = _context.Set<Model.Region>().Where(r => (r.Code == assetImport.Region.Trim())).FirstOrDefault();
            //if (region == null)
            //{
            //    region = new Model.Region
            //    {
            //        Code = assetImport.Region.Trim(),
            //        Name = assetImport.Region.Trim(),
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.Region>().Add(region);
            //}

            //admCenter = _context.Set<Model.AdmCenter>().Where(r => (r.Code == assetImport.Region.Trim())).FirstOrDefault();
            //if (admCenter == null)
            //{
            //    admCenter = new Model.AdmCenter
            //    {
            //        Code = assetImport.Region.Trim(),
            //        Name = assetImport.Region.Trim(),
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.AdmCenter>().Add(admCenter);
            //}


            //string locationNameInitial = assetImport.Location != null && assetImport.Location.Trim().Length > 0
            //                ? assetImport.Location.Trim() : nameDefault;

            //string locationCodeInitial = assetImport.Location != null && assetImport.Location.Trim().Length > 0
            //            ? assetImport.Location.Trim() : codeDefault;

            //string roomCodeInitial = assetImport.Room != null && assetImport.Room.Trim().Length > 0
            //            ? assetImport.Room.Trim() : codeDefault;




            //location = _context.Set<Model.Location>().Where(l => (l.RegionId == region.Id) && (l.Code == locationCodeInitial)).FirstOrDefault();

            //if (location == null)
            //{

            //    location = new Model.Location
            //    {
            //        Code = assetImport.Location.Trim(),
            //        Name = assetImport.Location.Trim(),
            //        IsDeleted = false,
            //        Region = region
            //    };


            //    _context.Set<Model.Location>().Add(location);
            //}

            room = _context.Set<Model.Room>().Where(r => r.Code == assetImport.Room.Trim()).FirstOrDefault();


            if (room == null)
            {
                room = new Model.Room
                {
                    Code = assetImport.Room.Trim(),
                    Name = assetImport.Room.Trim(),
                    Location = location,
                    IsDeleted = false
                };
                _context.Set<Model.Room>().Add(room);
            }
            else
            {
                location = _context.Set<Model.Location>().Where(l => (l.Id == room.LocationId)).FirstOrDefault();
                region = _context.Set<Model.Region>().Where(r => (r.Name == assetImport.Region.Trim())).FirstOrDefault();
                admCenter = _context.Set<Model.AdmCenter>().Where(r => (r.Name == assetImport.Location.Trim())).FirstOrDefault();

                if (location == null)
                {

                    location = new Model.Location
                    {
                        Code = assetImport.Location.Trim(),
                        Name = assetImport.Location.Trim(),
                        IsDeleted = false,
                        Region = region,
                        AdmCenter = admCenter
                    };


                    _context.Set<Model.Location>().Add(location);
                }

            }

            string internalCode = assetImport.InternalCode.Trim();

            employee = _context.Set<Model.Employee>().Where(e => e.InternalCode == internalCode).FirstOrDefault();

            if (employee == null)
            {
                employee = new Model.Employee();

                string employeeFullName = assetImport.EmployeeFull != null && assetImport.EmployeeFull.Trim().Length > 0
                    ? assetImport.EmployeeFull.Trim() : nameDefault;

                string firstName = string.Empty;
                string lastName = string.Empty;

                int spaceIndex = employeeFullName.IndexOf(" ");
                if (spaceIndex >= 0)
                {
                    firstName = employeeFullName.Substring(0, spaceIndex);
                    lastName = employeeFullName.Substring(spaceIndex + 1);
                }
                else
                {
                    firstName = employeeFullName;
                }

                employee.InternalCode = internalCode;
                employee.FirstName = firstName;
                employee.LastName = lastName;
                employee.IsDeleted = false;
                //employee.CostCenterId = costCenter.Id;
                //employee.AdmCenterId = admCenter.Id;
                //employee.DivisionId = division.Id;
                // employee.LocationId = location.Id;


                _context.Set<Model.Employee>().Add(employee);
            }

            division = _context.Set<Model.Division>().Where(a => (a.Code == assetImport.Location.Trim())).FirstOrDefault();

            if (division == null)
            {
                division = new Model.Division
                {
                    Code = assetImport.Location.Trim(),
                    Name = assetImport.Location.Trim(),
                    IsDeleted = false
                };

                _context.Set<Model.Division>().Add(division);
            }

            administration = _context.Set<Model.Administration>().Where(a => (a.Code == assetImport.Location.Trim())).FirstOrDefault();

            if (administration == null)
            {
                administration = new Model.Administration
                {
                    Code = assetImport.Location.Trim(),
                    Name = assetImport.Location.Trim(),
                    //CostCenter = costCenter,
                    Division = division,
                    IsDeleted = false
                };

                _context.Set<Model.Administration>().Add(administration);
            }



            partner = _context.Set<Model.Partner>().Where(a => a.Name == assetImport.Supplier.Trim()).FirstOrDefault();
            if (partner == null)
            {
                partner = new Model.Partner
                {
                    Name = assetImport.Supplier.Trim(),
                    FiscalCode = string.Empty,
                    RegistryNumber = string.Empty,
                    IsDeleted = false
                };

                _context.Set<Model.Partner>().Add(partner);
            }

            inventory = _context.Set<Model.Inventory>().Where(i => !i.IsDeleted && i.Active).OrderByDescending(i => i.Id).FirstOrDefault();

            // asset = _context.Set<Model.Asset>().Where(a => a.InvNo == assetImport.InvNo.Trim()).FirstOrDefault();



            if (asset == null) //nu exista in bd, asset nou
            {
                document = new Model.Document
                {
                    Approved = true,
                    DocumentType = documentType,
                    DocNo1 = assetImport.DocumentNrDate.Trim(),
                    DocNo2 = string.Empty,
                    DocumentDate = DateTime.Now,
                    RegisterDate = DateTime.Now,
                    Partner = partner,
                    CreationDate = DateTime.Now

                };

                _context.Add(document);


                asset = new Model.Asset()
                {
                    InvNo = assetImport.InvNo.Trim() != "" ? assetImport.InvNo.Trim() : "-",
                    Document = document,
                    Employee = employee,
                    Room = room,
                    AssetTypeId = assetType.Id,
                    PurchaseDate = null,
                    Quantity = 1,
                    Validated = true,
                    InvStateId = assetState.Id,
                    Administration = administration,
                    CostCenter = costCenter,
                    AssetStateId = assetState.Id,
                    Uom = uom,
                    Department = department,
                    ERPCode = assetImport.ERPCode,
                    Custody = false,
                    Company = company,
                    SAPCode = assetImport.ERPCode


                };


                _context.Add(asset);

                assetOp = new Model.AssetOp()
                {
                    Asset = asset,
                    Document = document,
                    RoomInitial = room,
                    EmployeeInitial = employee,
                    CostCenterInitial = costCenter,
                    AssetCategoryInitial = assetCategory,
                    InvStateIdInitial = assetState.Id,
                    InvStateIdFinal = null,
                    AdministrationInitial = administration,
                    AccSystem = accSystem,
                    Info = assetImport.Info.Trim(),
                    AssetStateInitial = assetState,
                    DepartmentIdInitial = department.Id,
                    AllowLabel = true


                };

                _context.Add(assetOp);

                inventory = _context.Set<Model.Inventory>().OrderByDescending(j => j.Id).FirstOrDefault();

                if (inventory != null)
                {

                    inventoryAsset = new Model.InventoryAsset()
                    {
                        Asset = asset,
                        Inventory = inventory,
                        QInitial = 1,
                        QFinal = 0,
                        EmployeeInitial = employee,
                        RoomInitial = room,
                        CostCenterInitial = costCenter,
                        StateIdInitial = assetState.Id,
                        StateIdFinal = null,
                        SerialNumber = assetImport.SerialNumber,
                        Info = assetImport.Info.Trim(),
                        AdministrationInitial = administration

                    };

                    _context.Add(inventoryAsset);


                    assetAc = new Model.AssetAC
                    {
                        AssetClassType = assetClassType,
                        Asset = asset,
                        AssetClass = assetClass,
                        AssetClassIn = assetClass
                    };


                    _context.Set<Model.AssetAC>().Add(assetAc);

                    var monthSum = 1;


                    assetDep = new Model.AssetDep
                    {
                        AccSystem = accSystem,
                        Asset = asset,
                        DepPeriod = (int)monthSum,
                        DepPeriodIn = (int)monthSum,
                        DepPeriodMonth = 1,
                        DepPeriodMonthIn = 1,
                        DepPeriodRem = 1,
                        DepPeriodRemIn = 1,
                        UsageStartDate = null,
                        ValueDep = assetImport.ValueInv,
                        ValueDepIn = assetImport.ValueInv,
                        ValueDepPU = assetImport.ValueInv,
                        ValueDepPUIn = assetImport.ValueInv,
                        ValueDepYTD = assetImport.ValueInv,
                        ValueDepYTDIn = assetImport.ValueInv,
                        ValueInv = assetImport.ValueInv,
                        ValueInvIn = assetImport.ValueInv,
                        ValueRem = assetImport.ValueInv,
                        ValueRemIn = assetImport.ValueInv
                    };

                    _context.Set<Model.AssetDep>().Add(assetDep);


                    assetInv = new Model.AssetInv
                    {
                        Asset = asset,
                        AllowLabel = true,
                        Barcode = assetImport.InvNo,
                        Info = assetImport.Info.Trim(),
                        InvName = assetImport.AssetName,
                        InvNoOld = assetImport.ERPCode,
                        Model = assetImport.AssetType.Trim(),
                        Producer = assetImport.Producer.Trim(),
                        InvState = invState

                    };

                    _context.Set<Model.AssetInv>().Add(assetInv);

                    accMonth = _context.Set<Model.AccMonth>().Where(a => a.IsActive == true).FirstOrDefault();

                    assetDepMD = new Model.AssetDepMD
                    {
                        AccMonth = accMonth,
                        AccSystem = accSystem,
                        Asset = asset,
                        UsefulLife = 1,
                        TotLifeInpPeriods = 1,
                        RemLifeInPeriods = 1,
                        AccumulDep = 1,
                        BkValFYStart = 1,
                        DepForYear = 1,
                        CurrentAPC = assetImport.ValueInv,
                        PosCap = assetImport.ValueInv
                    };

                    _context.Set<Model.AssetDepMD>().Add(assetDepMD);

                    assetAdmMD = new Model.AssetAdmMD
                    {
                        AccMonth = accMonth,
                        Asset = asset,
                        Administration = administration,
                        AssetCategory = assetCategory,
                        AssetState = assetState,
                        AssetType = assetType,
                        CostCenter = costCenter,
                        Department = department,
                        Employee = employee,
                        Room = room,
                        AssetStateId = assetState.Id
                    };

                    _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);

                }


            }

            asset.Name = Encoding.ASCII.GetString(Encoding.ASCII.GetBytes(assetImport.AssetName));
            asset.CostCenter = costCenter;
            asset.AssetCategory = assetCategory;
            asset.AssetType = assetType;
            asset.ValueInv = assetImport.ValueInv;
            asset.ValueRem = assetImport.ValueInv;
            asset.PurchaseDate = null;
            asset.SerialNumber = assetImport.SerialNumber;
            asset.Company = company;




            _context.SaveChanges();

            return asset.Id;


        }

        public int AssetImportDemo(ImportDemo assetImport)
        {


            Model.Asset asset = null;

            Model.AssetCategory assetCategory = null;
            Model.CostCenter costCenter = null;
            Model.Location location = null;
            Model.LocationType locationType = null;
            Model.Document document = null;
            Model.InventoryAsset inventoryAsset = null;
            Model.AssetOp assetOp = null;
            Model.Inventory inventory = null;
            Model.Partner partner = null;
            Model.Region region = null;
            Model.AdmCenter admCenter = null;
            Model.Employee employee = null;
            Model.AssetType assetType = null;
            Model.AssetState assetState = null;
            Model.AssetClass assetClass = null;
            Model.AssetClassType assetClassType = null;
            Model.Room room = null;
            Model.Administration administration = null;
            Model.Division division = null;
            Model.AssetAC assetAc = null;
            Model.AssetDep assetDep = null;
            Model.AssetInv assetInv = null;
            Model.AccSystem accSystem = null;
            Model.AccMonth accMonth = null;
            Model.AssetDepMD assetDepMD = null;
            Model.AssetAdmMD assetAdmMD = null;
            Model.Uom uom = null;
            Model.InvState invState = null;
            Model.DocumentType documentType = null;
            Model.Department department = null;
            Model.Company company = null;



            string codeDefault = "_NSP";
            string documentTypeCode = "PURCHASE";
            string companyCode = "VANZARI";
            string assetClassTypeDefault = "RAS";
            string assetStateCodeDefault = "FUNCTION";
            string assetStateNameDefault = "Standard";
            string locationCode = string.Empty;
            string costCenterCode = string.Empty;
            string costCenterName = string.Empty;
            string invNo = string.Empty;
            string disposition = string.Empty;
            string nameDefault = "_Nespecificat";
            string RegionName = "PETROM";



            assetType = _context.Set<Model.AssetType>().Where(a => (a.Code == nameDefault.Trim())).FirstOrDefault();

            if (assetType == null)
            {
                assetType = new Model.AssetType
                {
                    Code = nameDefault.Trim(),
                    Name = nameDefault.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AssetType>().Add(assetType);
            }

            company = _context.Set<Model.Company>().Where(a => (a.Code == RegionName.Trim())).FirstOrDefault();

            if (company == null)
            {
                company = new Model.Company
                {
                    Code = RegionName.Trim(),
                    Name = RegionName.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Company>().Add(company);
            }

            assetClassType = _context.Set<Model.AssetClassType>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();

            if (assetClassType == null)
            {
                assetClassType = new Model.AssetClassType
                {
                    Code = assetClassTypeDefault,
                    Name = assetClassTypeDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AssetClassType>().Add(assetClassType);
            }

            assetClass = _context.Set<Model.AssetClass>().Where(a => (a.Code == assetClassTypeDefault.Trim())).FirstOrDefault();

            if (assetClass == null)
            {
                assetClass = new Model.AssetClass
                {
                    Code = assetClassTypeDefault.Trim(),
                    Name = assetClassTypeDefault.Trim(),
                    IsDeleted = false,
                    AssetClassType = assetClassType
                };
                _context.Set<Model.AssetClass>().Add(assetClass);
            }

            accSystem = _context.Set<Model.AccSystem>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();

            if (accSystem == null)
            {
                accSystem = new Model.AccSystem
                {
                    AssetClassType = assetClassType,
                    Code = assetClassTypeDefault,
                    Name = assetClassTypeDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AccSystem>().Add(accSystem);
            }





            assetState = _context.Set<Model.AssetState>().Where(a => (a.Code == assetStateNameDefault.Trim())).FirstOrDefault();

            if (assetState == null)
            {
                assetState = new Model.AssetState
                {
                    Code = assetStateNameDefault.Trim(),
                    Name = assetStateNameDefault.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AssetState>().Add(assetState);
            }

            invState = _context.Set<Model.InvState>().Where(a => (a.Code == assetStateNameDefault.Trim())).FirstOrDefault();

            if (invState == null)
            {
                invState = new Model.InvState
                {
                    Code = assetStateNameDefault.Trim(),
                    Name = assetStateNameDefault.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.InvState>().Add(invState);
            }
            //var documentType = _context.Set<Model.DocumentType>().Where(d => d.Code == assetImport.DocumentType).Single();

            documentType = _context.Set<Model.DocumentType>().Where(a => a.Code.ToUpper() == documentTypeCode.Trim()).FirstOrDefault();

            if (documentType == null)
            {
                documentType = new Model.DocumentType
                {
                    Code = documentTypeCode.Trim(),
                    CompanyId = null,
                    CreatedAt = DateTime.Now,
                    CreatedBy = string.Empty,
                    IsActive = false,
                    IsDeleted = false,
                    Mask = string.Empty,
                    ModifiedAt = null,
                    ModifiedBy = null,
                    Name = documentTypeCode.Trim(),
                    ParentCode = "ASSET",
                    Prefix = string.Empty,
                    Suffix = string.Empty
                };
                _context.Set<Model.DocumentType>().Add(documentType);
            }

            assetCategory = _context.Set<Model.AssetCategory>().Where(a => a.Code == assetImport.AssetCategory.Trim()).FirstOrDefault();
            if (assetCategory == null)
            {
                assetCategory = new Model.AssetCategory
                {
                    Code = assetImport.AssetCategory.Trim(),
                    Name = assetImport.AssetCategory.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AssetCategory>().Add(assetCategory);
            }

            department = _context.Set<Model.Department>().Where(a => a.Code == companyCode.Trim()).FirstOrDefault();
            if (department == null)
            {
                department = new Model.Department
                {
                    Code = companyCode.Trim(),
                    Name = companyCode.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Department>().Add(department);
            }

            uom = _context.Set<Model.Uom>().Where(a => a.Code == assetImport.Uom.Trim() && a.Name == assetImport.Uom.Trim()).FirstOrDefault();
            if (uom == null)
            {
                uom = new Model.Uom
                {
                    Code = assetImport.Uom.Trim(),
                    Name = assetImport.Uom.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Uom>().Add(uom);
            }

            costCenterCode = assetImport.CostCenter.Trim();
            costCenterName = assetImport.CostCenter.Trim();
            costCenter = _context.Set<Model.CostCenter>().Where(a => a.Code == costCenterCode).FirstOrDefault();
            if (costCenter == null)
            {
                costCenter = new Model.CostCenter
                {
                    Code = costCenterCode,
                    Name = costCenterName,
                    IsDeleted = false
                };
                _context.Set<Model.CostCenter>().Add(costCenter);
            }
            //region = _context.Set<Model.Region>().Where(r => (r.Code == assetImport.Region.Trim())).FirstOrDefault();
            //if (region == null)
            //{
            //    region = new Model.Region
            //    {
            //        Code = assetImport.Region.Trim(),
            //        Name = assetImport.Region.Trim(),
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.Region>().Add(region);
            //}

            //admCenter = _context.Set<Model.AdmCenter>().Where(r => (r.Code == assetImport.Region.Trim())).FirstOrDefault();
            //if (admCenter == null)
            //{
            //    admCenter = new Model.AdmCenter
            //    {
            //        Code = assetImport.Region.Trim(),
            //        Name = assetImport.Region.Trim(),
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.AdmCenter>().Add(admCenter);
            //}


            //string locationNameInitial = assetImport.Location != null && assetImport.Location.Trim().Length > 0
            //                ? assetImport.Location.Trim() : nameDefault;

            //string locationCodeInitial = assetImport.Location != null && assetImport.Location.Trim().Length > 0
            //            ? assetImport.Location.Trim() : codeDefault;

            //string roomCodeInitial = assetImport.Room != null && assetImport.Room.Trim().Length > 0
            //            ? assetImport.Room.Trim() : codeDefault;

            region = _context.Set<Model.Region>().Where(r => (r.Code == assetImport.Region.Trim())).FirstOrDefault();
            if (region == null)
            {
                region = new Model.Region
                {
                    Code = assetImport.Region.Trim(),
                    Name = assetImport.Region.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Region>().Add(region);
            }

            admCenter = _context.Set<Model.AdmCenter>().Where(r => (r.Code == assetImport.Region.Trim())).FirstOrDefault();
            if (admCenter == null)
            {
                admCenter = new Model.AdmCenter
                {
                    Code = assetImport.Region.Trim(),
                    Name = assetImport.Region.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AdmCenter>().Add(admCenter);
            }


            locationType = _context.Set<Model.LocationType>().Where(l => l.Code == assetImport.LocationType).FirstOrDefault();

            if (locationType == null)
            {

                locationType = new Model.LocationType
                {
                    Code = assetImport.LocationType.Trim(),
                    Name = assetImport.LocationType.Trim(),
                    IsDeleted = false
                };


                _context.Set<Model.LocationType>().Add(locationType);
            }

            location = _context.Set<Model.Location>().Where(l => l.Code == assetImport.LocationCode && l.RegionId == region.Id).FirstOrDefault();

            if (location == null)
            {

                location = new Model.Location
                {
                    Code = assetImport.LocationCode.Trim(),
                    Name = assetImport.LocationName.Trim(),
                    Region = region,
                    AdmCenter = admCenter,
                    LocationType = locationType,
                    IsDeleted = false,
                    Latitude = assetImport.X,
                    Longitude = assetImport.Y
                };


                _context.Set<Model.Location>().Add(location);
            }

            room = _context.Set<Model.Room>().Where(r => r.Code == assetImport.Room.Trim()).FirstOrDefault();


            if (room == null)
            {
                room = new Model.Room
                {
                    Code = assetImport.Room.Trim(),
                    Name = assetImport.Room.Trim(),
                    Location = location,
                    IsDeleted = false
                };
                _context.Set<Model.Room>().Add(room);
            }


            string internalCode = assetImport.InternalCode.Trim();

            employee = _context.Set<Model.Employee>().Where(e => e.InternalCode == internalCode).FirstOrDefault();

            if (employee == null)
            {
                employee = new Model.Employee();

                string employeeFullName = assetImport.EmployeeFull != null && assetImport.EmployeeFull.Trim().Length > 0
                    ? assetImport.EmployeeFull.Trim() : nameDefault;

                string firstName = string.Empty;
                string lastName = string.Empty;

                int spaceIndex = employeeFullName.IndexOf(" ");
                if (spaceIndex >= 0)
                {
                    firstName = employeeFullName.Substring(0, spaceIndex);
                    lastName = employeeFullName.Substring(spaceIndex + 1);
                }
                else
                {
                    firstName = employeeFullName;
                }

                employee.InternalCode = internalCode;
                employee.FirstName = firstName;
                employee.LastName = lastName;
                employee.IsDeleted = false;
                employee.Department = department;
                //employee.CostCenterId = costCenter.Id;
                //employee.AdmCenterId = admCenter.Id;
                //employee.DivisionId = division.Id;
                // employee.LocationId = location.Id;


                _context.Set<Model.Employee>().Add(employee);
            }

            division = _context.Set<Model.Division>().Where(a => (a.Code == assetImport.Region.Trim())).FirstOrDefault();

            if (division == null)
            {
                division = new Model.Division
                {
                    Code = assetImport.Region.Trim(),
                    Name = assetImport.Region.Trim(),
                    IsDeleted = false
                };

                _context.Set<Model.Division>().Add(division);
            }

            administration = _context.Set<Model.Administration>().Where(a => (a.Code == assetImport.LocationCode.Trim())).FirstOrDefault();

            if (administration == null)
            {
                administration = new Model.Administration
                {
                    Code = assetImport.LocationCode.Trim(),
                    Name = assetImport.LocationName.Trim(),
                    //CostCenter = costCenter,
                    Division = division,
                    IsDeleted = false
                };

                _context.Set<Model.Administration>().Add(administration);
            }



            partner = _context.Set<Model.Partner>().Where(a => a.Name == nameDefault.Trim()).FirstOrDefault();
            if (partner == null)
            {
                partner = new Model.Partner
                {
                    Name = nameDefault.Trim(),
                    FiscalCode = string.Empty,
                    RegistryNumber = string.Empty,
                    IsDeleted = false
                };

                _context.Set<Model.Partner>().Add(partner);
            }

            inventory = _context.Set<Model.Inventory>().Where(i => !i.IsDeleted && i.Active).OrderByDescending(i => i.Id).FirstOrDefault();

            // asset = _context.Set<Model.Asset>().Where(a => a.InvNo == assetImport.InvNo.Trim()).FirstOrDefault();



            if (asset == null) //nu exista in bd, asset nou
            {
                document = new Model.Document
                {
                    Approved = true,
                    DocumentType = documentType,
                    DocNo1 = string.Empty,
                    DocNo2 = string.Empty,
                    DocumentDate = DateTime.Now,
                    RegisterDate = DateTime.Now,
                    Partner = partner,
                    CreationDate = DateTime.Now

                };

                _context.Add(document);


                asset = new Model.Asset()
                {
                    InvNo = assetImport.InvNo.Trim() != "" ? assetImport.InvNo.Trim() : "-",
                    Document = document,
                    Employee = employee,
                    Room = room,
                    AssetTypeId = assetType.Id,
                    PurchaseDate = assetImport.PIF,
                    Quantity = 1,
                    Validated = true,
                    InvStateId = assetState.Id,
                    Administration = administration,
                    CostCenter = costCenter,
                    AssetStateId = assetState.Id,
                    Uom = uom,
                    Department = department,
                    ERPCode = string.Empty,
                    Custody = false,
                    Company = company,
                    SAPCode = string.Empty


                };


                _context.Add(asset);

                assetOp = new Model.AssetOp()
                {
                    Asset = asset,
                    Document = document,
                    RoomInitial = room,
                    EmployeeInitial = employee,
                    CostCenterInitial = costCenter,
                    AssetCategoryInitial = assetCategory,
                    InvStateIdInitial = assetState.Id,
                    InvStateIdFinal = null,
                    AdministrationInitial = administration,
                    AccSystem = accSystem,
                    Info = string.Empty,
                    AssetStateInitial = assetState,
                    DepartmentIdInitial = department.Id,
                    AllowLabel = true


                };

                _context.Add(assetOp);

                inventory = _context.Set<Model.Inventory>().OrderByDescending(j => j.Id).FirstOrDefault();

                if (inventory != null)
                {

                    inventoryAsset = new Model.InventoryAsset()
                    {
                        Asset = asset,
                        Inventory = inventory,
                        QInitial = 1,
                        QFinal = 0,
                        EmployeeInitial = employee,
                        RoomInitial = room,
                        CostCenterInitial = costCenter,
                        StateIdInitial = assetState.Id,
                        StateIdFinal = null,
                        SerialNumber = assetImport.SerialNumber,
                        Info = string.Empty,
                        AdministrationInitial = administration

                    };

                    _context.Add(inventoryAsset);


                    assetAc = new Model.AssetAC
                    {
                        AssetClassType = assetClassType,
                        Asset = asset,
                        AssetClass = assetClass,
                        AssetClassIn = assetClass
                    };


                    _context.Set<Model.AssetAC>().Add(assetAc);

                    var monthSum = 1;


                    assetDep = new Model.AssetDep
                    {
                        AccSystem = accSystem,
                        Asset = asset,
                        DepPeriod = (int)monthSum,
                        DepPeriodIn = (int)monthSum,
                        DepPeriodMonth = 1,
                        DepPeriodMonthIn = 1,
                        DepPeriodRem = 1,
                        DepPeriodRemIn = 1,
                        UsageStartDate = null,
                        ValueDep = assetImport.ValueInv,
                        ValueDepIn = assetImport.ValueInv,
                        ValueDepPU = assetImport.ValueInv,
                        ValueDepPUIn = assetImport.ValueInv,
                        ValueDepYTD = assetImport.ValueInv,
                        ValueDepYTDIn = assetImport.ValueInv,
                        ValueInv = assetImport.ValueInv,
                        ValueInvIn = assetImport.ValueInv,
                        ValueRem = assetImport.ValueInv,
                        ValueRemIn = assetImport.ValueInv
                    };

                    _context.Set<Model.AssetDep>().Add(assetDep);


                    assetInv = new Model.AssetInv
                    {
                        Asset = asset,
                        AllowLabel = true,
                        Barcode = assetImport.InvNo,
                        Info = string.Empty,
                        InvName = assetImport.Description,
                        InvNoOld = string.Empty,
                        Model = string.Empty,
                        Producer = string.Empty,
                        InvState = invState

                    };

                    _context.Set<Model.AssetInv>().Add(assetInv);

                    accMonth = _context.Set<Model.AccMonth>().Where(a => a.IsActive == true).FirstOrDefault();

                    assetDepMD = new Model.AssetDepMD
                    {
                        AccMonth = accMonth,
                        AccSystem = accSystem,
                        Asset = asset,
                        UsefulLife = assetImport.MonthRem,
                        TotLifeInpPeriods = assetImport.MonthRem,
                        RemLifeInPeriods = assetImport.MonthRem,
                        AccumulDep = assetImport.ValueDep,
                        BkValFYStart = assetImport.ValueDep,
                        DepForYear = assetImport.ValueDep,
                        CurrentAPC = assetImport.ValueInv,
                        PosCap = assetImport.ValueRem
                    };

                    _context.Set<Model.AssetDepMD>().Add(assetDepMD);

                    assetAdmMD = new Model.AssetAdmMD
                    {
                        AccMonth = accMonth,
                        Asset = asset,
                        Administration = administration,
                        AssetCategory = assetCategory,
                        AssetState = assetState,
                        AssetType = assetType,
                        CostCenter = costCenter,
                        Department = department,
                        Employee = employee,
                        Room = room,
                        AssetStateId = assetState.Id
                    };

                    _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);

                }


            }

            asset.Name = Encoding.ASCII.GetString(Encoding.ASCII.GetBytes(assetImport.Description));
            asset.CostCenter = costCenter;
            asset.AssetCategory = assetCategory;
            asset.AssetType = assetType;
            asset.ValueInv = assetImport.ValueInv;
            asset.ValueRem = assetImport.ValueRem;
            asset.PurchaseDate = assetImport.PIF;
            asset.SerialNumber = assetImport.SerialNumber;
            asset.Company = company;




            _context.SaveChanges();

            return asset.Id;


        }

        public int AssetImportInvStanleyBet(ImportInvStanleyBet assetImport)
        {

            Model.Asset asset = null;
            Model.AssetCategory assetCategory = null;
            Model.CostCenter costCenter = null;
            Model.Location location = null;
            Model.InventoryAsset inventoryAsset = null;
            Model.AssetOp assetOp = null;
            Model.AssetOp assetOpNew = null;
            Model.Partner partner = null;
            Model.Region region = null;
            Model.AdmCenter admCenter = null;
            Model.Employee employee = null;
            Model.AssetType assetType = null;
            Model.AssetState assetState = null;
            Model.AssetClass assetClass = null;
            Model.AssetClassType assetClassType = null;
            Model.Room room = null;
            Model.Administration administration = null;
            Model.Division division = null;
            Model.AssetInv assetInv = null;
            Model.AccSystem accSystem = null;
            Model.AssetAdmMD assetAdmMD = null;
            Model.Uom uom = null;
            Model.InvState invState = null;
            Model.DocumentType documentType = null;
            Model.Department department = null;
            Model.Company company = null;

            string assetClassTypeDefault = "RAS";
            string assetStateNameDefault = "Standard";
            string locationCode = string.Empty;
            string costCenterCode = string.Empty;
            string costCenterName = string.Empty;
            string invNo = string.Empty;
            string disposition = string.Empty;
            string nameDefault = "_Nespecificat";
            string defaultCompany = "-";
            string defaultDocumentType = "INVENTORY";


            assetType = _context.Set<Model.AssetType>().Where(a => (a.Code == assetImport.AssetType.Trim())).FirstOrDefault();

            if (assetType == null)
            {
                assetType = new Model.AssetType
                {
                    Code = assetImport.AssetType.Trim(),
                    Name = assetImport.AssetType.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AssetType>().Add(assetType);
            }

            company = _context.Set<Model.Company>().Where(a => (a.Code == defaultCompany)).FirstOrDefault();

            if (company == null)
            {
                company = new Model.Company
                {
                    Code = defaultCompany.Trim(),
                    Name = defaultCompany.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Company>().Add(company);
            }

            assetClassType = _context.Set<Model.AssetClassType>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();

            if (assetClassType == null)
            {
                assetClassType = new Model.AssetClassType
                {
                    Code = assetClassTypeDefault,
                    Name = assetClassTypeDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AssetClassType>().Add(assetClassType);
            }

            assetClass = _context.Set<Model.AssetClass>().Where(a => (a.Code == assetClassTypeDefault.Trim())).FirstOrDefault();

            if (assetClass == null)
            {
                assetClass = new Model.AssetClass
                {
                    Code = assetClassTypeDefault.Trim(),
                    Name = assetClassTypeDefault.Trim(),
                    IsDeleted = false,
                    AssetClassType = assetClassType
                };
                _context.Set<Model.AssetClass>().Add(assetClass);
            }

            accSystem = _context.Set<Model.AccSystem>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();

            if (accSystem == null)
            {
                accSystem = new Model.AccSystem
                {
                    AssetClassType = assetClassType,
                    Code = assetClassTypeDefault,
                    Name = assetClassTypeDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AccSystem>().Add(accSystem);
            }


            assetState = _context.Set<Model.AssetState>().Where(a => (a.Code == assetStateNameDefault.Trim())).FirstOrDefault();

            if (assetState == null)
            {
                assetState = new Model.AssetState
                {
                    Code = assetStateNameDefault.Trim(),
                    Name = assetStateNameDefault.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AssetState>().Add(assetState);
            }

            invState = _context.Set<Model.InvState>().Where(a => (a.Code == assetImport.InvState.Trim())).FirstOrDefault();

            if (invState == null)
            {
                invState = new Model.InvState
                {
                    Code = assetImport.InvState.Trim(),
                    Name = assetImport.InvState.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.InvState>().Add(invState);
            }

            documentType = _context.Set<Model.DocumentType>().Where(a => a.Code.ToUpper() == defaultDocumentType.Trim()).FirstOrDefault();

            if (documentType == null)
            {
                documentType = new Model.DocumentType
                {
                    Code = defaultDocumentType.Trim(),
                    CompanyId = null,
                    CreatedAt = DateTime.Now,
                    CreatedBy = string.Empty,
                    IsActive = false,
                    IsDeleted = false,
                    Mask = string.Empty,
                    ModifiedAt = null,
                    ModifiedBy = null,
                    Name = defaultDocumentType.Trim(),
                    ParentCode = "ASSET",
                    Prefix = string.Empty,
                    Suffix = string.Empty
                };
                _context.Set<Model.DocumentType>().Add(documentType);
            }

            assetCategory = _context.Set<Model.AssetCategory>().Where(a => a.Code == assetImport.AssetCategory.Trim()).FirstOrDefault();
            if (assetCategory == null)
            {
                assetCategory = new Model.AssetCategory
                {
                    Code = assetImport.AssetCategory.Trim(),
                    Name = assetImport.AssetCategory.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AssetCategory>().Add(assetCategory);
            }

            department = _context.Set<Model.Department>().Where(a => a.Code == assetImport.Department.Trim()).FirstOrDefault();
            if (department == null)
            {
                department = new Model.Department
                {
                    Code = assetImport.Department.Trim(),
                    Name = assetImport.Department.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Department>().Add(department);
            }

            uom = _context.Set<Model.Uom>().Where(a => a.Code == defaultCompany).FirstOrDefault();
            if (uom == null)
            {
                uom = new Model.Uom
                {
                    Code = defaultCompany.Trim(),
                    Name = defaultCompany.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Uom>().Add(uom);
            }

            costCenterCode = defaultCompany.Trim();
            costCenterName = defaultCompany.Trim();
            costCenter = _context.Set<Model.CostCenter>().Where(a => a.Code == costCenterCode).FirstOrDefault();
            if (costCenter == null)
            {
                costCenter = new Model.CostCenter
                {
                    Code = costCenterCode,
                    Name = costCenterName,
                    IsDeleted = false
                };
                _context.Set<Model.CostCenter>().Add(costCenter);
            }

            room = _context.Set<Model.Room>().Where(r => r.Code == assetImport.Room.Trim()).FirstOrDefault();


            if (room == null)
            {
                room = new Model.Room
                {
                    Code = assetImport.Room.Trim(),
                    Name = assetImport.Room.Trim(),
                    Location = location,
                    IsDeleted = false
                };
                _context.Set<Model.Room>().Add(room);
            }
            else
            {
                location = _context.Set<Model.Location>().Where(l => (l.Id == room.LocationId)).FirstOrDefault();
                region = _context.Set<Model.Region>().Where(r => (r.Name == assetImport.Region.Trim())).FirstOrDefault();
                admCenter = _context.Set<Model.AdmCenter>().Where(r => (r.Name == assetImport.Location.Trim())).FirstOrDefault();

                if (location == null)
                {

                    location = new Model.Location
                    {
                        Code = assetImport.Location.Trim(),
                        Name = assetImport.Location.Trim(),
                        IsDeleted = false,
                        Region = region,
                        AdmCenter = admCenter
                    };


                    _context.Set<Model.Location>().Add(location);
                }

            }

            string internalCode = assetImport.InternalCode.Trim();

            employee = _context.Set<Model.Employee>().Where(e => e.InternalCode == internalCode).FirstOrDefault();

            if (employee == null)
            {
                employee = new Model.Employee();

                string employeeFullName = assetImport.EmployeeFull != null && assetImport.EmployeeFull.Trim().Length > 0
                    ? assetImport.EmployeeFull.Trim() : nameDefault;

                string firstName = string.Empty;
                string lastName = string.Empty;

                int spaceIndex = employeeFullName.IndexOf(" ");
                if (spaceIndex >= 0)
                {
                    firstName = employeeFullName.Substring(0, spaceIndex);
                    lastName = employeeFullName.Substring(spaceIndex + 1);
                }
                else
                {
                    firstName = employeeFullName;
                }

                employee.InternalCode = internalCode;
                employee.FirstName = firstName;
                employee.LastName = lastName;
                employee.IsDeleted = false;

                _context.Set<Model.Employee>().Add(employee);
            }

            division = _context.Set<Model.Division>().Where(a => (a.Code == defaultCompany)).FirstOrDefault();

            if (division == null)
            {
                division = new Model.Division
                {
                    Code = assetImport.Location.Trim(),
                    Name = assetImport.Location.Trim(),
                    IsDeleted = false
                };

                _context.Set<Model.Division>().Add(division);
            }

            administration = _context.Set<Model.Administration>().Where(a => (a.Code == defaultCompany)).FirstOrDefault();

            if (administration == null)
            {
                administration = new Model.Administration
                {
                    Code = assetImport.Location.Trim(),
                    Name = assetImport.Location.Trim(),
                    //CostCenter = costCenter,
                    Division = division,
                    IsDeleted = false
                };

                _context.Set<Model.Administration>().Add(administration);
            }



            partner = _context.Set<Model.Partner>().Where(a => a.Name == defaultCompany.Trim()).FirstOrDefault();
            if (partner == null)
            {
                partner = new Model.Partner
                {
                    Name = defaultCompany.Trim(),
                    FiscalCode = string.Empty,
                    RegistryNumber = string.Empty,
                    IsDeleted = false
                };

                _context.Set<Model.Partner>().Add(partner);
            }

            asset = _context.Set<Model.Asset>().Where(a => a.InvNo == assetImport.InvNo.Trim() && a.Validated == false).FirstOrDefault();

            if (asset != null)
            {
                if (asset.InvNo.StartsWith("0") && asset.Name == "-")
                {
                    asset.Name = asset.Name = Encoding.ASCII.GetString(Encoding.ASCII.GetBytes(assetImport.AssetName));
                    asset.Validated = true;
                    asset.IsDeleted = false;
                    asset.InvStateId = invState.Id;
                    asset.AssetStateId = assetState.Id;
                    asset.CostCenter = costCenter;
                    asset.AssetCategory = assetCategory;
                    asset.AssetType = assetType;
                    asset.Company = company;

                }
                _context.Set<Model.Asset>().Update(asset);


                inventoryAsset = _context.Set<Model.InventoryAsset>().Where(i => i.AssetId == asset.Id).Single();

                if (inventoryAsset != null)
                {
                    inventoryAsset.RoomIdFinal = room.Id;
                    inventoryAsset.EmployeeIdFinal = employee.Id;
                    inventoryAsset.AdministrationIdFinal = administration.Id;
                    inventoryAsset.StateIdFinal = invState.Id;
                    inventoryAsset.Producer = assetType.Name;
                    inventoryAsset.Info = assetImport.Info;
                    inventoryAsset.ModifiedAt = DateTime.Now;
                    inventoryAsset.ModifiedBy = "92E74C4F-A79A-4C83-A7D0-A3202BD2507F";
                    inventoryAsset.CostCenterIdFinal = costCenter.Id;
                    inventoryAsset.QFinal = asset.Quantity;
                }

                _context.Set<Model.InventoryAsset>().Update(inventoryAsset);

                assetAdmMD = _context.Set<Model.AssetAdmMD>().Where(i => i.AssetId == asset.Id).Single();

                if (assetAdmMD != null)
                {
                    assetAdmMD.AssetCategoryId = assetCategory.Id;
                    assetAdmMD.AssetTypeId = assetType.Id;
                    assetAdmMD.AssetStateId = assetState.Id;
                    assetAdmMD.DepartmentId = department.Id;
                    assetAdmMD.AdministrationId = administration.Id;
                    assetAdmMD.EmployeeId = employee.Id;
                    assetAdmMD.RoomId = room.Id;
                }

                _context.Set<Model.AssetAdmMD>().Update(assetAdmMD);

                assetInv = _context.Set<Model.AssetInv>().Where(i => i.AssetId == asset.Id).Single();

                if (assetInv != null)
                {
                    assetInv.Info = assetImport.Info;
                    assetInv.InvName = assetImport.AssetName;
                    assetInv.Producer = assetImport.Producer;
                    assetInv.Model = assetType.Name;
                    assetInv.InvStateId = invState.Id;
                    assetInv.AllowLabel = true;
                }

                _context.Set<Model.AssetInv>().Update(assetInv);

                assetOp = _context.Set<Model.AssetOp>().Where(a => (a.AssetId == asset.Id && !a.IsDeleted)).OrderByDescending(a => a.Id).Take(1).SingleOrDefault();

                if (assetOp != null)
                {
                    assetOpNew = new Model.AssetOp
                    {
                        AccSystemId = 1,
                        AdministrationIdInitial = inventoryAsset.AdministrationIdFinal != null ? inventoryAsset.AdministrationIdFinal : inventoryAsset.AdministrationIdInitial,
                        AdministrationIdFinal = administration.Id,
                        AssetTypeIdInitial = assetOp.AssetTypeIdFinal != null ? assetOp.AssetTypeIdFinal : assetOp.AssetTypeIdInitial,
                        AssetTypeIdFinal = assetType.Id,
                        AssetCategoryIdInitial = assetOp.AssetCategoryIdFinal != null ? assetOp.AssetCategoryIdFinal : assetOp.AssetCategoryIdInitial,
                        AssetCategoryIdFinal = assetCategory.Id,
                        DepartmentIdInitial = assetOp.DepartmentIdFinal != null ? assetOp.DepartmentIdFinal : assetOp.DepartmentIdInitial,
                        DepartmentIdFinal = department.Id,

                        AssetId = assetOp.AssetId,
                        AssetStateIdInitial = inventoryAsset.StateIdFinal != null ? inventoryAsset.StateIdFinal : inventoryAsset.StateIdFinal,
                        AssetStateIdFinal = assetState.Id,
                        CostCenterIdInitial = inventoryAsset.CostCenterIdFinal != null ? inventoryAsset.CostCenterIdFinal : inventoryAsset.CostCenterIdInitial,
                        CostCenterIdFinal = inventoryAsset.CostCenterIdFinal != null ? inventoryAsset.CostCenterIdFinal : inventoryAsset.CostCenterIdInitial,
                        CreatedBy = "",
                        EmployeeIdInitial = inventoryAsset.EmployeeIdFinal != null ? inventoryAsset.EmployeeIdFinal : inventoryAsset.EmployeeIdInitial,
                        EmployeeIdFinal = employee.Id,
                        InvStateIdInitial = inventoryAsset.StateIdFinal != null ? inventoryAsset.StateIdFinal : inventoryAsset.StateIdFinal,
                        InvStateIdFinal = invState.Id,
                        RoomIdInitial = inventoryAsset.RoomIdFinal != null ? inventoryAsset.RoomIdFinal : inventoryAsset.RoomIdInitial,
                        RoomIdFinal = room.Id,
                        Info = assetOp.Info,
                        AssetOpStateId = 3,
                        SrcConfBy = "92E74C4F-A79A-4C83-A7D0-A3202BD2507F",
                        SrcConfAt = DateTime.Now,
                        IsDeleted = assetOp.IsDeleted,
                        InvName = assetImport.AssetName,
                        Model = assetImport.Producer,
                        Producer = assetType.Name,
                        Quantity = asset.Quantity,
                        AllowLabel = true

                    };

                    Model.Document document = new Model.Document();

                    DateTime creationDate = DateTime.Now;
                    DateTime documentDate = new DateTime(creationDate.Year, creationDate.Month, creationDate.Day);

                    document.DocumentType = documentType;
                    document.DocNo1 = string.Empty;
                    document.DocNo2 = string.Empty;
                    document.DocumentDate = documentDate;
                    document.RegisterDate = documentDate;
                    document.Approved = true;
                    document.Exported = false;
                    document.CreationDate = creationDate;
                    document.Details = string.Empty;

                    _context.Set<Model.Document>().Add(document);

                    assetOpNew.Document = document;


                    _context.Set<Model.AssetOp>().Add(assetOpNew);

                }

            }

            _context.SaveChanges();

            if (asset != null)
            {
                return asset.Id;
            }
            else
            {
                return 1;
            }




        }

        public int AssetImportAlliantz(AssetImportAlliantz assetImport)
        {


            Model.Asset asset = null;

            Model.AssetCategory assetCategory = null;
            Model.CostCenter costCenter = null;
            Model.Location location = null;
            Model.Document document = null;
            Model.InventoryAsset inventoryAsset = null;
            Model.AssetOp assetOp = null;
            Model.Inventory inventory = null;
            Model.Partner partner = null;
            Model.Region region = null;
            Model.AdmCenter admCenter = null;
            Model.Employee employee = null;
            Model.AssetType assetType = null;
            Model.AssetState assetState = null;
            Model.AssetClass assetClass = null;
            Model.AssetClassType assetClassType = null;
            Model.Room room = null;
            Model.Administration administration = null;
            Model.Division division = null;
            Model.AssetAC assetAc = null;
            Model.AssetDep assetDep = null;
            Model.AssetInv assetInv = null;
            Model.AccSystem accSystem = null;
            Model.AccMonth accMonth = null;
            Model.AssetDepMD assetDepMD = null;
            Model.AssetAdmMD assetAdmMD = null;
            Model.Uom uom = null;
            Model.InvState invState = null;


            string codeDefault = "_NSP";
            string documentTypeCode = "PURCHASE";
            string assetClassTypeDefault = "RAS";
            string assetStateCodeDefault = "FUNCTION";
            string assetStateNameDefault = "In functiune";
            string locationCode = string.Empty;
            string costCenterCode = string.Empty;
            string costCenterName = string.Empty;
            string invNo = string.Empty;
            string disposition = string.Empty;
            string nameDefault = "_Nespecificat";
            string RegionName = "OTP BANK ROMANIA";


            assetType = _context.Set<Model.AssetType>().Where(a => (a.Code == assetImport.AssetCategory.Trim())).FirstOrDefault();

            if (assetType == null)
            {
                assetType = new Model.AssetType
                {
                    Code = assetImport.AssetCategory.Trim(),
                    Name = assetImport.AssetCategory.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AssetType>().Add(assetType);
            }

            assetClassType = _context.Set<Model.AssetClassType>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();

            if (assetClassType == null)
            {
                assetClassType = new Model.AssetClassType
                {
                    Code = assetClassTypeDefault,
                    Name = assetClassTypeDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AssetClassType>().Add(assetClassType);
            }

            assetClass = _context.Set<Model.AssetClass>().Where(a => (a.Code == assetClassTypeDefault.Trim())).FirstOrDefault();

            if (assetClass == null)
            {
                assetClass = new Model.AssetClass
                {
                    Code = assetClassTypeDefault.Trim(),
                    Name = assetClassTypeDefault.Trim(),
                    IsDeleted = false,
                    AssetClassType = assetClassType
                };
                _context.Set<Model.AssetClass>().Add(assetClass);
            }

            accSystem = _context.Set<Model.AccSystem>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();

            if (accSystem == null)
            {
                accSystem = new Model.AccSystem
                {
                    AssetClassType = assetClassType,
                    Code = assetClassTypeDefault,
                    Name = assetClassTypeDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AccSystem>().Add(accSystem);
            }





            assetState = _context.Set<Model.AssetState>().Where(a => (a.Code == assetImport.AssetState.Trim())).FirstOrDefault();

            if (assetState == null)
            {
                assetState = new Model.AssetState
                {
                    Code = assetImport.AssetState.Trim(),
                    Name = assetImport.AssetState.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AssetState>().Add(assetState);
            }

            invState = _context.Set<Model.InvState>().Where(a => (a.Code == assetImport.AssetState.Trim())).FirstOrDefault();

            if (invState == null)
            {
                invState = new Model.InvState
                {
                    Code = assetImport.AssetState.Trim(),
                    Name = assetImport.AssetState.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.InvState>().Add(invState);
            }
            var documentType = _context.Set<Model.DocumentType>().Where(d => d.Code == documentTypeCode).Single();



            assetCategory = _context.Set<Model.AssetCategory>().Where(a => a.Code == nameDefault).FirstOrDefault();
            if (assetCategory == null)
            {
                assetCategory = new Model.AssetCategory
                {
                    Code = nameDefault,
                    Name = nameDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AssetCategory>().Add(assetCategory);
            }

            uom = _context.Set<Model.Uom>().Where(a => a.Name == nameDefault.Trim()).FirstOrDefault();
            if (uom == null)
            {
                uom = new Model.Uom
                {
                    Code = nameDefault.Trim(),
                    Name = nameDefault.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Uom>().Add(uom);
            }

            costCenterCode = assetImport.CostCenter.Trim();
            costCenterName = assetImport.CostCenter.Trim();
            costCenter = _context.Set<Model.CostCenter>().Where(a => a.Code == costCenterCode).FirstOrDefault();
            if (costCenter == null)
            {
                costCenter = new Model.CostCenter
                {
                    Code = costCenterCode,
                    Name = costCenterName,
                    IsDeleted = false
                };
                _context.Set<Model.CostCenter>().Add(costCenter);
            }
            region = _context.Set<Model.Region>().Where(r => (r.Name == assetImport.Region.Trim())).FirstOrDefault();
            if (region == null)
            {
                region = new Model.Region
                {
                    Code = "RO",
                    Name = assetImport.Region.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Region>().Add(region);
            }

            admCenter = _context.Set<Model.AdmCenter>().Where(r => (r.Name == assetImport.Region.Trim())).FirstOrDefault();
            if (admCenter == null)
            {
                admCenter = new Model.AdmCenter
                {
                    Code = "RO",
                    Name = assetImport.Region.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AdmCenter>().Add(admCenter);
            }


            string locationNameInitial = assetImport.Location != null && assetImport.Location.Trim().Length > 0
                            ? assetImport.Location.Trim() : nameDefault;

            string locationCodeInitial = assetImport.Location != null && assetImport.Location.Trim().Length > 0
                        ? assetImport.Location.Trim() : codeDefault;

            string roomCodeInitial = assetImport.Location != null && assetImport.Location.Trim().Length > 0
                        ? assetImport.Location.Trim() : codeDefault;




            location = _context.Set<Model.Location>().Where(l => (l.RegionId == region.Id) && (l.Name == locationCodeInitial)).FirstOrDefault();

            if (location == null)
            {

                location = new Model.Location
                {
                    Code = assetImport.Location.Trim(),
                    Name = assetImport.Location.Trim(),
                    IsDeleted = false,
                    Region = region
                };


                _context.Set<Model.Location>().Add(location);
            }

            room = _context.Set<Model.Room>().Where(r => ((r.LocationId == location.Id) && (r.Name == assetImport.Room.Trim()))).FirstOrDefault();


            if (room == null)
            {
                room = new Model.Room
                {
                    Code = assetImport.Room.Trim(),
                    Name = assetImport.Room.Trim(),
                    Location = location,
                    IsDeleted = false
                };
                _context.Set<Model.Room>().Add(room);
            }

            string internalCode = assetImport.EmployeeFull.Trim();

            employee = _context.Set<Model.Employee>().Where(e => e.InternalCode == internalCode).FirstOrDefault();

            if (employee == null)
            {
                employee = new Model.Employee();

                string employeeFullName = assetImport.EmployeeFull != null && assetImport.EmployeeFull.Trim().Length > 0
                    ? assetImport.EmployeeFull.Trim() : nameDefault;


                employee.InternalCode = internalCode;
                employee.FirstName = string.Empty;
                employee.LastName = string.Empty;
                employee.IsDeleted = false;
                employee.CostCenterId = null;
                // employee.LocationId = location.Id;


                _context.Set<Model.Employee>().Add(employee);
            }

            division = _context.Set<Model.Division>().Where(a => (a.Name == assetImport.Division.Trim())).FirstOrDefault();

            if (division == null)
            {
                division = new Model.Division
                {
                    Code = assetImport.Division.Trim(),
                    Name = assetImport.Division.Trim(),
                    IsDeleted = false
                };

                _context.Set<Model.Division>().Add(division);
            }

            administration = _context.Set<Model.Administration>().Where(a => (a.Name == assetImport.Administration.Trim() && a.DivisionId == division.Id)).FirstOrDefault();

            if (administration == null)
            {
                administration = new Model.Administration
                {
                    Code = assetImport.Administration.Trim(),
                    Name = assetImport.Administration.Trim(),
                    //CostCenter = null,
                    Division = division,
                    IsDeleted = false
                };

                _context.Set<Model.Administration>().Add(administration);
            }



            partner = _context.Set<Model.Partner>().Where(a => a.FiscalCode == codeDefault).FirstOrDefault();
            if (partner == null)
            {
                partner = new Model.Partner
                {
                    Name = nameDefault,
                    FiscalCode = codeDefault,
                    RegistryNumber = string.Empty,
                    IsDeleted = false
                };

                _context.Set<Model.Partner>().Add(partner);
            }

            inventory = _context.Set<Model.Inventory>().Where(i => !i.IsDeleted && i.Active).OrderByDescending(i => i.Id).FirstOrDefault();

            asset = _context.Set<Model.Asset>().Where(a => a.InvNo == assetImport.InvNo.Trim()).FirstOrDefault();



            if (asset == null) //nu exista in bd, asset nou
            {
                document = new Model.Document
                {
                    Approved = true,
                    DocumentType = documentType,
                    DocNo1 = string.Empty,
                    DocNo2 = string.Empty,
                    DocumentDate = DateTime.Now,
                    RegisterDate = DateTime.Now,
                    Partner = partner,
                    CreationDate = DateTime.Now

                };

                _context.Add(document);


                asset = new Model.Asset()
                {
                    InvNo = assetImport.InvNo.Trim(),
                    Document = document,
                    Employee = employee,
                    Room = room,
                    AssetTypeId = assetType.Id,
                    PurchaseDate = assetImport.PIFDate,
                    Quantity = 1,
                    Validated = true,
                    InvStateId = invState.Id,
                    Administration = administration,
                    CostCenter = costCenter,
                    AssetStateId = assetState.Id,
                    Uom = uom,
                    ERPCode = assetImport.ErpCode


                };


                _context.Add(asset);

                assetOp = new Model.AssetOp()
                {
                    Asset = asset,
                    Document = document,
                    RoomInitial = room,
                    EmployeeInitial = employee,
                    CostCenterInitial = costCenter,
                    AssetCategoryInitial = assetCategory,
                    InvStateIdInitial = invState.Id,
                    InvStateIdFinal = null,
                    AdministrationInitial = administration,
                    AccSystem = accSystem,
                    Info = string.Empty,
                    AssetStateInitial = assetState
                };

                _context.Add(assetOp);

                inventory = _context.Set<Model.Inventory>().OrderByDescending(j => j.Id).FirstOrDefault();

                if (inventory != null)
                {

                    inventoryAsset = new Model.InventoryAsset()
                    {
                        Asset = asset,
                        Inventory = inventory,
                        QInitial = 1,
                        QFinal = 0,
                        EmployeeInitial = employee,
                        RoomInitial = room,
                        CostCenterInitial = costCenter,
                        StateIdInitial = assetState.Id,
                        StateIdFinal = null,
                        SerialNumber = string.Empty,
                        Info = string.Empty,
                        AdministrationInitial = administration

                    };

                    _context.Add(inventoryAsset);


                    assetAc = new Model.AssetAC
                    {
                        AssetClassType = assetClassType,
                        Asset = asset,
                        AssetClass = assetClass,
                        AssetClassIn = assetClass
                    };


                    _context.Set<Model.AssetAC>().Add(assetAc);

                    var monthSum = 1;


                    assetDep = new Model.AssetDep
                    {
                        AccSystem = accSystem,
                        Asset = asset,
                        DepPeriod = (int)monthSum,
                        DepPeriodIn = (int)monthSum,
                        DepPeriodMonth = 1,
                        DepPeriodMonthIn = 1,
                        DepPeriodRem = (int)monthSum,
                        DepPeriodRemIn = (int)monthSum,
                        UsageStartDate = DateTime.Now,
                        ValueDep = assetImport.ValueDep,
                        ValueDepIn = assetImport.ValueDep,
                        ValueDepPU = assetImport.ValueDep,
                        ValueDepPUIn = assetImport.ValueDep,
                        ValueDepYTD = assetImport.ValueDep,
                        ValueDepYTDIn = assetImport.ValueDep,
                        ValueInv = assetImport.ValueInv,
                        ValueInvIn = assetImport.ValueInv,
                        ValueRem = assetImport.ValueDep,
                        ValueRemIn = assetImport.ValueDep
                    };

                    _context.Set<Model.AssetDep>().Add(assetDep);


                    assetInv = new Model.AssetInv
                    {
                        Asset = asset,
                        AllowLabel = false,
                        Barcode = string.Empty,
                        Info = string.Empty,
                        InvName = assetImport.ErpCode,
                        InvNoOld = assetImport.InvNo,
                        Model = string.Empty,
                        Producer = string.Empty,
                        InvStateId = invState.Id

                    };

                    _context.Set<Model.AssetInv>().Add(assetInv);

                    accMonth = _context.Set<Model.AccMonth>().Where(a => a.IsActive == true).FirstOrDefault();

                    assetDepMD = new Model.AssetDepMD
                    {
                        AccMonth = accMonth,
                        AccSystem = accSystem,
                        Asset = asset,
                        UsefulLife = (int)monthSum,
                        TotLifeInpPeriods = 1,
                        RemLifeInPeriods = 1,
                        AccumulDep = assetImport.ValueDep,
                        BkValFYStart = assetImport.ValueDep,
                        DepForYear = assetImport.ValueDep,
                        CurrentAPC = assetImport.ValueInv,
                        PosCap = assetImport.ValueInv
                    };

                    _context.Set<Model.AssetDepMD>().Add(assetDepMD);

                    assetAdmMD = new Model.AssetAdmMD
                    {
                        AccMonth = accMonth,
                        Asset = asset,
                        Administration = administration,
                        AssetCategory = assetCategory,
                        AssetState = assetState,
                        AssetType = assetType,
                        CostCenter = costCenter,
                        DepartmentId = null,
                        Employee = employee,
                        Room = room,
                        AssetStateId = assetState.Id
                    };

                    _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);

                }


            }

            asset.Name = Encoding.ASCII.GetString(Encoding.ASCII.GetBytes(assetImport.AssetName));
            asset.CostCenter = costCenter;
            asset.AssetCategory = assetCategory;
            asset.ValueInv = assetImport.ValueInv;
            asset.ValueRem = assetImport.ValueDep;
            asset.PurchaseDate = assetImport.PIFDate;
            asset.SerialNumber = string.Empty;
            asset.ERPCode = assetImport.ErpCode;


            _context.SaveChanges();

            return asset.Id;


        }

        public int AssetImportV2(AssetImportV2 assetImport)
        {
            Model.Asset asset = null;
            Model.CostCenter costCenter = null;
            Model.Region region = null;
            Model.Room room = null;
            Model.Employee employee = null;
            Model.InventoryAsset inventoryAsset = null;
            Model.Inventory inventory = null;
            Model.Uom uom = null;
            Model.Location location = null;
            Model.AdmCenter admCenter;
            bool saveAsset = false;
            bool saveInventoryAsset = false;

            string codeDefault = "_NSP";
            string nameDefault = "_Nespecificat";

            string admCenterName = assetImport.AdmCenterName != null && assetImport.AdmCenterName.Length > 0
                ? assetImport.AdmCenterName : string.Empty;
            admCenterName = admCenterName.ToUpper().Replace("SUCURSALA", "").Trim();
            if (admCenterName.Length == 0) admCenterName = nameDefault;

            string serialNumber = assetImport.SerialNumber.Replace('=', ' ').Replace('"', ' ');

            string costCenterCode = assetImport.CostCenterCode != null && assetImport.CostCenterCode.Trim().Length > 0
                ? assetImport.CostCenterCode.Trim() : codeDefault;

            //string admCenterCode = costCenterCode.Length > 1 ? costCenterCode.Substring(0, 2) : costCenterCode;

            admCenter = _context.Set<Model.AdmCenter>().Where(a => a.Name == admCenterName).FirstOrDefault();
            if (admCenter == null)
            {
                admCenter = new Model.AdmCenter();
                admCenter.Code = string.Empty;
                admCenter.Name = admCenterName;
                admCenter.IsDeleted = false;

                _context.Set<Model.AdmCenter>().Add(admCenter);
            }

            costCenter = _context.Set<Model.CostCenter>().Where(a => a.Code == costCenterCode).FirstOrDefault();
            if (costCenter == null)
            {
                costCenter = new Model.CostCenter();
                costCenter.Code = costCenterCode;
                costCenter.Name = costCenterCode;
                costCenter.AdmCenter = admCenter;
                costCenter.IsDeleted = false;
                _context.Set<Model.CostCenter>().Add(costCenter);
            }

            string regionCode = string.Empty;

            if (costCenterCode == codeDefault)
            {
                regionCode = codeDefault;
            }
            else
            {
                if (costCenterCode.StartsWith("B_") || costCenterCode.StartsWith("B1") || costCenterCode.StartsWith("B2")
                    || costCenterCode.StartsWith("B3") || costCenterCode.StartsWith("B4") || costCenterCode.StartsWith("B5") || costCenterCode.StartsWith("B6"))
                {
                    regionCode = "B";
                }
                else
                {
                    if (costCenterCode.StartsWith("C_") || costCenterCode.StartsWith("E_"))
                    {
                        regionCode = "C";
                    }
                    else
                    {
                        regionCode = costCenterCode.Length >= 2 ? costCenterCode.Substring(0, 2) : codeDefault;
                    }
                }
            }

            string roomName = assetImport.RoomName != null && assetImport.RoomName.Trim().Length > 0
                            ? assetImport.RoomName.Trim() : nameDefault;
            string roomCode = string.Format("{0}_{1}", costCenterCode, roomName);

            region = _context.Set<Model.Region>().Where(r => (r.Code == regionCode)).FirstOrDefault();
            if (region == null)
            {
                region = new Model.Region();
                region.Code = regionCode;
                region.Name = regionCode;
                region.IsDeleted = false;
                _context.Set<Model.Region>().Add(region);
            }
            else
            {
                room = _context.Set<Model.Room>().Where(r => (r.Name == roomName) && ((r.Code == r.Name) || (r.Code == roomCode))
                    && (r.Location.Region.Code == regionCode)).FirstOrDefault();
            }

            if (room == null)
            {
                string locationCode = string.Format("{0}_{1}", regionCode, "NESP");
                string locationName = locationCode;

                location = _context.Set<Model.Location>().Where(l => ((l.RegionId == region.Id) && (l.Code == locationCode))).FirstOrDefault();

                if (location == null)
                {
                    location = new Model.Location();
                    location.Code = locationCode;
                    location.Name = locationName;
                    location.IsDeleted = false;
                    location.Region = region;
                    _context.Set<Model.Location>().Add(location);
                }

                room = new Model.Room();
                room.Code = roomCode;
                room.Name = roomName;
                room.Location = location;
                room.IsDeleted = false;
                _context.Set<Model.Room>().Add(room);
            }

            string internalCode = assetImport.InternalCode != null && assetImport.InternalCode.Trim().Length > 0
                ? assetImport.InternalCode.Trim() : codeDefault;
            employee = _context.Set<Model.Employee>().Where(e => e.InternalCode == internalCode).FirstOrDefault();

            if (employee == null)
            {
                employee = new Model.Employee();

                string employeeFullName = assetImport.EmployeeFullName != null && assetImport.EmployeeFullName.Trim().Length > 0
                    ? assetImport.EmployeeFullName.Trim() : nameDefault;

                string firstName = string.Empty;
                string lastName = string.Empty;

                int spaceIndex = employeeFullName.IndexOf(" ");
                if (spaceIndex >= 0)
                {
                    firstName = employeeFullName.Substring(0, spaceIndex);
                    lastName = employeeFullName.Substring(spaceIndex + 1);
                }
                else
                {
                    firstName = employeeFullName;
                }

                employee.InternalCode = internalCode;
                employee.FirstName = firstName;
                employee.LastName = lastName;
                employee.IsDeleted = false;

                _context.Set<Model.Employee>().Add(employee);
            }

            string uomCode = assetImport.Uom != null && assetImport.Uom.Trim().Length > 0
                ? assetImport.Uom.Trim() : codeDefault;
            uom = _context.Set<Model.Uom>().Where(a => a.Code == uomCode).FirstOrDefault();

            if (uom == null)
            {
                uom = new Model.Uom();
                uom.Code = uomCode;
                uom.Name = uomCode;
                uom.IsDeleted = false;
                _context.Set<Model.Uom>().Add(uom);
            }

            bool custody = ((assetImport.Custody != null) && (assetImport.Custody.Trim().ToUpper() == "IN CUSTODIE")) ? true : false;
            string purchaseDate = (assetImport.PurchaseDate.Length == 8) ? assetImport.PurchaseDate : ("0" + assetImport.PurchaseDate);
            int day = int.Parse(purchaseDate.Substring(0, 2));
            int month = int.Parse(purchaseDate.Substring(2, 2));
            int year = int.Parse(purchaseDate.Substring(4, 4));

            inventory = _context.Set<Model.Inventory>().Where(i => !i.IsDeleted && i.Active).OrderByDescending(i => i.Id).FirstOrDefault();

            //asset = _context.Set<Model.Asset>().Where(a => a.InvNo == assetImport.InvNo).SingleOrDefault();
            asset = _context.Set<Model.Asset>().Where(a => a.InvNo == assetImport.InvNo).FirstOrDefault();

            if (asset == null) //nu exista in bd, asset nou
            {
                asset = new Model.Asset()
                {
                    InvNo = assetImport.InvNo
                };

                _context.Add(asset);

                inventoryAsset = new Model.InventoryAsset()
                {
                    Asset = asset,
                    Inventory = inventory
                };
                _context.Add(inventoryAsset);

                saveAsset = true;
                saveInventoryAsset = true;
            }
            else
            {
                saveAsset = (asset.Name != assetImport.Name) || (asset.SerialNumber != serialNumber) || (asset.ValueInv != assetImport.ValueInv)
                    || (asset.ValueInv - asset.ValueRem != assetImport.ValueDep) || (asset.EmployeeId != employee.Id) || (asset.CostCenterId != costCenter.Id)
                    || (asset.RoomId != room.Id) || (asset.UomId != uom.Id);

                inventoryAsset = _context.Set<Model.InventoryAsset>().Where(a => ((a.InventoryId == inventory.Id) && (a.AssetId == asset.Id))).SingleOrDefault();

                if (inventoryAsset == null)
                {
                    inventoryAsset = new Model.InventoryAsset()
                    {
                        Asset = asset,
                        Inventory = inventory
                    };
                    _context.Add(inventoryAsset);
                    saveInventoryAsset = true;
                }
                else
                {
                    saveInventoryAsset = saveAsset;
                }
            }

            if (saveAsset)
            {

                asset.Name = assetImport.Name;
                asset.PurchaseDate = new DateTime(year, month, day);
                asset.CostCenter = costCenter;
                asset.Room = room;
                asset.Employee = employee;
                //AssetTypeId = 2,
                asset.ValueInv = assetImport.ValueInv;
                asset.ValueRem = assetImport.ValueInv - assetImport.ValueDep;
                //AssetCategoryId = 18,
                asset.UomId = uom.Id;
                //InvStateId = 1,
                asset.Quantity = assetImport.Quantity;
                asset.Custody = custody;

                asset.SerialNumber = serialNumber;
                asset.ERPCode = "";
                asset.Validated = true;
            }

            if (saveInventoryAsset)
            {
                inventoryAsset.QInitial = assetImport.Quantity;
                inventoryAsset.QFinal = assetImport.Quantity;
                inventoryAsset.EmployeeInitial = employee;
                inventoryAsset.EmployeeFinal = null;
                inventoryAsset.RoomInitial = room;
                inventoryAsset.RoomFinal = null;
                inventoryAsset.CostCenterInitial = costCenter;
                inventoryAsset.CostCenterFinal = null;
                inventoryAsset.SerialNumber = serialNumber;
            }

            _context.SaveChanges();

            return asset.Id;
        }

        public int ImportThales(ImportThales assetImport)
        {
            Model.Asset asset = null;
            Model.AssetCategory assetCategory = null;
            Model.CostCenter costCenter = null;
            Model.Location location = null;
            Model.Room room = null;
            Model.Document document = null;
            Model.InventoryAsset inventoryAsset = null;
            Model.AssetOp assetOp = null;
            Model.Inventory inventory = null;
            Model.Partner partner = null;
            Model.PartnerLocation partnerLocation = null;
            Model.Region region = null;
            Model.AdmCenter admCenter = null;
            Model.AssetState assetState = null;
            Model.AssetNature assetNature = null;
            Model.Brand brand = null;
            Model.Model model = null;
            Model.Company company = null;
            
            Model.InvState invState = null;
            Model.AssetType assetType = null;
            Model.Uom uom = null;
            Model.Department department = null;
            Model.AccSystem accSystem = null;
            Model.Administration administration = null;
            Model.AssetClass assetClass = null;
            Model.AssetClassType assetClassType = null;
            Model.AssetAC assetAc = null;
            Model.AssetDep assetDep = null;
            Model.AssetDepMD assetDepMD = null;
            Model.AccMonth accMonth = null;
            Model.AssetAdmMD assetAdmMD = null;
            Model.AssetInv assetInv = null;


            string assetTypeCode = "ASSET";
            string codeDefault = "NSP";
            string nameDefault = "Nespecificat";
            string documentTypeCode = "PURCHASE";
            string locationCode = string.Empty;
            string locationName = string.Empty;
            string roomCode = string.Empty;
            string roomName = string.Empty;
            string costCenterCode = string.Empty;
            string costCenterName = string.Empty;
            string invNo = string.Empty;
            string disposition = string.Empty;
            string assetClassTypeDefault = "RAS";
            string assetClassDefault = "RAS";



            assetClassType = _context.Set<Model.AssetClassType>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();

            if (assetClassType == null)
            {
                assetClassType = new Model.AssetClassType
                {
                    Code = assetClassTypeDefault,
                    Name = assetClassTypeDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AssetClassType>().Add(assetClassType);
            }

            assetClass = _context.Set<Model.AssetClass>().Where(a => (a.Code == codeDefault.Trim())).FirstOrDefault();

            if (assetClass == null)
            {
                assetClass = new Model.AssetClass
                {
                    Code = codeDefault.Trim(),
                    Name = codeDefault.Trim(),
                    IsDeleted = false,
                    AssetClassType = assetClassType
                };
                _context.Set<Model.AssetClass>().Add(assetClass);
            }

            accSystem = _context.Set<Model.AccSystem>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();

            if (accSystem == null)
            {
                accSystem = new Model.AccSystem
                {
                    AssetClassType = assetClassType,
                    Code = assetClassTypeDefault,
                    Name = assetClassTypeDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AccSystem>().Add(accSystem);
            }

            administration = _context.Set<Model.Administration>().Where(a => (a.Code == assetClassDefault.Trim())).FirstOrDefault();

            if (administration == null)
            {
                administration = new Model.Administration
                {
                    Code = assetClassDefault.Trim(),
                    Name = assetClassDefault.Trim(),
                    IsDeleted = false
                };

                _context.Set<Model.Administration>().Add(administration);
            }

            assetType = _context.Set<Model.AssetType>().Where(a => a.Code == assetTypeCode.Trim()).SingleOrDefault();

            if (assetType == null)
            {
                assetType = new Model.AssetType
                {
                    Code = assetTypeCode.Trim(),
                    Name = assetTypeCode.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AssetType>().Add(assetType);
            }
            // var documentType = _context.Set<Model.DocumentType>().Where(d => d.Code == documentTypeCode).Single();

            var employee = _context.Set<Model.Employee>().Where(e => e.InternalCode == "NSP").SingleOrDefault();

            if (employee == null)
            {
                employee = new Model.Employee
                {
                    InternalCode = "NSP",
                    FirstName = "NSP",
                    LastName = "NSP",
                    IsDeleted = false
                };
                _context.Set<Model.Employee>().Add(employee);
            }

            assetCategory = _context.Set<Model.AssetCategory>().Where(a => a.Code == codeDefault.Trim()).FirstOrDefault();

            if (assetCategory == null)
            {
                assetCategory = new Model.AssetCategory
                {
                    Code = codeDefault,
                    Name = codeDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AssetCategory>().Add(assetCategory);
            }

            uom = _context.Set<Model.Uom>().Where(a => a.Code == assetImport.Uom.Trim()).FirstOrDefault();
            if (uom == null)
            {
                uom = new Model.Uom
                {
                    Code = assetImport.Uom.Trim(),
                    Name = assetImport.Uom.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Uom>().Add(uom);
            }

            department = _context.Set<Model.Department>().Where(a => a.Code == codeDefault.Trim()).FirstOrDefault();

            if (department == null)
            {
                department = new Model.Department
                {
                    Code = codeDefault.Trim(),
                    Name = codeDefault.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Department>().Add(department);
            }


            admCenter = _context.Set<Model.AdmCenter>().Where(a => a.Name.Trim() == assetImport.Room).FirstOrDefault();

            if (admCenter == null)
            {
                admCenter = new Model.AdmCenter
                {
                    Code = assetImport.Room.Trim(),
                    Name = assetImport.Room.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AdmCenter>().Add(admCenter);
            }

            costCenter = _context.Set<Model.CostCenter>().Where(a => a.Name.Trim() == codeDefault.Trim()).FirstOrDefault();

            if (costCenter == null)
            {
                costCenter = new Model.CostCenter
                {
                    Code = codeDefault.Trim(),
                    Name = codeDefault.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.CostCenter>().Add(costCenter);
            }

            region = _context.Set<Model.Region>().Where(a => a.Name.Trim() == assetImport.Room.Trim()).FirstOrDefault();

            if (region == null)
            {
                region = new Model.Region
                {
                    Code = assetImport.Room.Trim(),
                    Name = assetImport.Room.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Region>().Add(region);
            }




            location = _context.Set<Model.Location>().Where(a => a.Code == assetImport.Room.Trim()).FirstOrDefault();

            if (location == null)
            {
                location = new Model.Location
                {
                    Code = assetImport.Room.Trim(),
                    Name = assetImport.Room.Trim(),
                    Region = region,
                    AdmCenter = admCenter,
                    IsDeleted = false
                };
                _context.Set<Model.Location>().Add(location);
            }

            room = _context.Set<Model.Room>().Where(a => a.Code == assetImport.Room.Trim()).FirstOrDefault();

            if (room == null)
            {
                room = new Model.Room
                {
                    Code = assetImport.Room.Trim(),
                    Name = assetImport.Room.Trim(),
                    Location = location,
                    IsDeleted = false
                };
                _context.Set<Model.Room>().Add(room);
            }

            invState = _context.Set<Model.InvState>().Where(a => a.Id == 1).FirstOrDefault();

            if (invState == null)
            {
                invState = new Model.InvState
                {
                    Code = codeDefault,
                    Name = nameDefault,
                    IsDeleted = false
                };
                _context.Set<Model.InvState>().Add(invState);
            }

            assetState = _context.Set<Model.AssetState>().Where(a => a.Id == 1).FirstOrDefault();

            if (assetState == null)
            {
                assetState = new Model.AssetState
                {
                    Code = codeDefault,
                    Name = nameDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AssetState>().Add(assetState);
            }


            assetNature = _context.Set<Model.AssetNature>().Where(a => a.Code == assetImport.AssetNature.Trim()).FirstOrDefault();

            if (assetNature == null)
            {
                assetNature = new Model.AssetNature
                {
                    Code = assetImport.AssetNature.Trim(),
                    Name = assetImport.AssetNature.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AssetNature>().Add(assetNature);
            }

            brand = _context.Set<Model.Brand>().Where(a => a.Code == codeDefault.Trim()).FirstOrDefault();

            if (brand == null)
            {
                brand = new Model.Brand
                {
                    Code = codeDefault.Trim(),
                    Name = codeDefault.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Brand>().Add(brand);
            }


            model = _context.Set<Model.Model>().Where(a => a.Code == codeDefault.Trim()).FirstOrDefault();

            if (model == null)
            {
                model = new Model.Model
                {
                    Code = codeDefault.Trim(),
                    Name = codeDefault.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Model>().Add(model);
            }

            company = _context.Set<Model.Company>().Where(a => a.Code == codeDefault.Trim()).FirstOrDefault();

            if (company == null)
            {
                company = new Model.Company
                {
                    Code = codeDefault.Trim(),
                    Name = codeDefault.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Company>().Add(company);
            }


            //article = _context.Set<Model.Article>().Where(a => a.Code == assetImport.InvName.Trim()).FirstOrDefault();

            //if (article == null)
            //{
            //    article = new Model.Article
            //    {
            //        Code = assetImport.InvName.Trim().Substring(0, 2),
            //        Name = assetImport.InvName.Trim(),
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.Article>().Add(article);
            //}

            partnerLocation = _context.Set<Model.PartnerLocation>().Where(a => a.Denumire == codeDefault.Trim()).FirstOrDefault();

            if (partnerLocation == null)
            {
                partnerLocation = new Model.PartnerLocation();
                partnerLocation.Denumire = nameDefault;
                //partnerLocation.FiscalCode = "NSP";
                //partnerLocation.RegistryNumber = string.Empty;
                partnerLocation.IsDeleted = false;

                _context.Set<Model.PartnerLocation>().Add(partnerLocation);
            }


            partner = _context.Set<Model.Partner>().Where(a => a.RegistryNumber == codeDefault.Trim()).FirstOrDefault();

            if (partner == null)
            {
                partner = new Model.Partner();
                partner.Name = nameDefault;
                partner.FiscalCode = "NSP";
                partner.RegistryNumber = string.Empty;
                partner.IsDeleted = false;
                partner.PartnerLocation = partnerLocation;

                _context.Set<Model.Partner>().Add(partner);
            }

            accMonth = _context.Set<Model.AccMonth>().Where(a => a.IsActive == true).FirstOrDefault();

            inventory = _context.Set<Model.Inventory>().OrderByDescending(j => j.Id).FirstOrDefault();

            if (assetImport.Quantity == 0)
            {
                assetImport.Quantity = 1;
            }

            for (int i = 0; i < assetImport.Quantity; i++)
            {
                //if (i == 0)
                //{
                //    asset = _context.Set<Model.Asset>().Where(a => a.InvNo == assetImport.InvNo.Trim()).FirstOrDefault();
                //}
                //else
                //{
                //    asset = _context.Set<Model.Asset>().Where(a => a.InvNo == assetImport.InvNo.Trim() + "/" + i).FirstOrDefault();
                //}

                asset = null;

                Model.EntityType entityType = _context.Set<Model.EntityType>().Where(e => e.UploadFolder == "NEWASSET").SingleOrDefault();


                if (asset == null)
                {

                    document = new Model.Document
                    {
                        Approved = true,
                        DocumentTypeId = 1,
                        DocNo1 = string.Empty,
                        DocNo2 = string.Empty,
                        DocumentDate = DateTime.Now,
                        RegisterDate = DateTime.Now,
                        Partner = partner,
                        CreationDate = DateTime.Now,
                        ParentDocumentId = inventory.DocumentId

                    };

                    _context.Add(document);

                    asset = new Model.Asset()
                    {
                        InvNo = entityType.Code + entityType.Name,
                        Employee = employee,
                        Room = room,
                        AssetType = assetType,
                        PurchaseDate = null,
                        Quantity = 1,
                        Validated = true,
                        InvStateId = invState.Id,
                        Administration = administration,
                        CostCenter = costCenter,
                        AssetStateId = assetState.Id,
                        Uom = uom,
                        AssetCategory = assetCategory,
                        IsDeleted = false,
                        Custody = false,
                        ERPCode = entityType.Code + entityType.Name,
                        SAPCode = entityType.Code + entityType.Name,
                        AssetNatureId = assetNature.Id,
                        Name = Encoding.ASCII.GetString(Encoding.ASCII.GetBytes(assetImport.Name)),
                        
                        IsTemp = false,
                        Document = document,
                        Brand = brand,
                        Model = model,
                        Company = company,
                        Department = department,

                    };


                    _context.Add(asset);


                    //assetOp = new Model.AssetOp()
                    //{
                    //	Asset = asset,
                    //	Document = document,
                    //	RoomInitial = room,
                    //	RoomFinal = room,
                    //	EmployeeInitial = employee,
                    //	EmployeeFinal = employee,
                    //	CostCenterInitial = costCenter,
                    //	CostCenterFinal = costCenter,
                    //	AssetCategoryInitial = assetCategory,
                    //	AssetCategoryFinal = assetCategory,
                    //	InvStateIdInitial = invState.Id,
                    //	InvStateIdFinal = invState.Id,
                    //	AdministrationInitial = administration,
                    //	AdministrationFinal = administration,
                    //	AccSystem = accSystem,
                    //	Info = string.Empty,
                    //	AssetStateInitial = assetState,
                    //	AssetStateFinal = assetState,
                    //	AssetTypeInitial = assetType,
                    //	AssetTypeFinal = assetType
                    //};

                    //_context.Add(assetOp);


                    if (inventory != null)
                    {
                        inventoryAsset = new Model.InventoryAsset()
                        {
                            Asset = asset,
                            Inventory = inventory,
                            QInitial = assetImport.Quantity,
                            QFinal = 0,
                            EmployeeInitial = employee,
                            RoomInitial = room,
                            CostCenterInitial = costCenter,
                            StateIdInitial = invState.Id,
                            StateIdFinal = null,
                            SerialNumber = string.Empty,
                            SNInitial = string.Empty,
                            Info = string.Empty,
                            AdministrationInitial = administration,
                            IsTemp = false


                        };

                        _context.Add(inventoryAsset);


                        assetAc = new Model.AssetAC
                        {
                            AssetClassType = assetClassType,
                            Asset = asset,
                            AssetClass = assetClass,
                            AssetClassIn = assetClass
                        };


                        _context.Set<Model.AssetAC>().Add(assetAc);


                        assetDep = new Model.AssetDep
                        {
                            AccSystem = accSystem,
                            Asset = asset,
                            DepPeriod = 0,
                            DepPeriodRem = 0,
                            ValueInv = 0
                        };

                        _context.Set<Model.AssetDep>().Add(assetDep);




                        assetInv = new Model.AssetInv
                        {
                            Asset = asset,
                            //AllowLabel = true,
                            //Barcode = string.Empty,
                            Info = asset.Info,
                            //InvNoOld = string.Empty,
                            //Model = string.Empty,
                            //Producer = string.Empty,
                            InvState = invState

                        };

                        _context.Set<Model.AssetInv>().Add(assetInv);

                        assetDepMD = new Model.AssetDepMD
                        {
                            AccMonth = accMonth,
                            AccSystem = accSystem,
                            Asset = asset,
                            UsefulLife = 0,
                            RemLifeInPeriods = 0,
                            CurrentAPC = 0


                        };

                        _context.Set<Model.AssetDepMD>().Add(assetDepMD);


                        assetAdmMD = new Model.AssetAdmMD
                        {
                            AccMonth = accMonth,
                            Asset = asset,
                            Administration = administration,
                            AssetCategory = assetCategory,
                            AssetState = assetState,
                            AssetType = assetType,
                            CostCenter = costCenter,
                            Employee = employee,
                            Room = room,
                            AssetStateId = assetState.Id,
                            AssetNatureId = assetNature.Id,
                            
                            Brand = brand,
                            Model = model,
                            Department = department,
                        };

                        _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);

                    }
                }

                entityType.Name = StringsADD(entityType.Name, "1");
                _context.SaveChanges();
            }

            return asset.Id;

        }

        public async Task<ImportITMFXResult> ImportITMFX(ImportITMFX import)
        {
            Model.Asset asset = null;
            Model.AssetAdmMD assetAdmMD = null;
            Model.CostCenter costCenter = null;
            Model.Employee employee = null;
            Model.AdmCenter admCenter = null;
            //Model.AssetType assetType = null;
            Model.BudgetBase budgetBase = null;
            Model.BudgetForecast budgetForecast = null;
            Model.Document document = null;
            Model.DocumentType documentType = null;
            Model.Inventory inventory = null;
            Model.Tax tax = null;
            Model.Rate rate = null;
            Model.EntityType entityType = null;
            Model.EmailType emailType = null;
            Model.AppState appState = null;
            Model.AssetState assetState = null;
            Model.Order order = null;
            Model.RequestBudgetForecast requestBudgetForecast = null;
            Model.RequestBudgetForecastMaterial requestBudgetForecastMaterial = null;
            Model.OrderMaterial orderMaterial = null;
            Model.Request request = null;
            Model.Offer offer = null;
            Model.Stock stock = null;
            Model.RequestBFMaterialCostCenter requestBFMaterialCostCenter = null;
            Model.BudgetBaseAsset budgetBaseAsset = null;
            Model.EmailStatus emailStatus = null;
            Model.AssetOp operation = null;
            Model.Employee employeeIni = null;
            Model.Project project = null;
            int documentNumber = 0;
            Guid guid = Guid.NewGuid();
            Guid guidAll = Guid.NewGuid();

            if (import == null) return new ImportITMFXResult { Success = false, Message = $"Eroare fisier import!" };
            if (import.SerialNumber == null || (import.SerialNumber.Trim().Length < 4 && import.SerialNumber != "N/A")) return new ImportITMFXResult { Success = false, Message = $"Lipsa serie pentru {import.ERPCode}!" };

            int countSN = await _context.Set<Model.Asset>().Where(a => a.SerialNumber.Trim() == import.SerialNumber.Trim() && a.IsDeleted == false && a.IsWFH == false).CountAsync();
            if (countSN > 0 && import.SerialNumber != "N/A") return new ImportITMFXResult { Success = false, Message = $"Seria {import.SerialNumber} exista deja in baza de date!" };

            if (import.Description == null || (import.Description.Trim().Length < 3)) return new ImportITMFXResult { Success = false, Message = $"Lipsa descriere pentru {import.ERPCode}!" };

            asset = await _context.Set<Model.Asset>().Where(a => a.ERPCode == import.ERPCode && a.IsDeleted == false).FirstOrDefaultAsync();
            if (asset == null) return new ImportITMFXResult { Success = false, Message = $"Nr. de inventar {import.ERPCode} nu exista!" };
            if (asset.IsInTransfer && asset.EmployeeTransferId != null) return new ImportITMFXResult { Success = false, Message = $"Nr. de inventar {import.ERPCode} este deja intr - un flux de transfer!" };

            admCenter = await _context.Set<Model.AdmCenter>().Where(a => a.Code == import.AdmCenter && a.IsDeleted == false).FirstOrDefaultAsync();
            if (admCenter == null) return new ImportITMFXResult { Success = false, Message = $"Profit Center - ul {import.AdmCenter} nu exista!" };

            project = await _context.Set<Model.Project>().Where(a => a.Code == import.Project && a.IsDeleted == false).FirstOrDefaultAsync();
            if (project == null) return new ImportITMFXResult { Success = false, Message = $"Cod - ul WBS {import.Project} nu exista!" };

            costCenter = await _context.Set<Model.CostCenter>().Where(a => a.Code == import.CostCenterCode && a.IsDeleted == false).FirstOrDefaultAsync();
            if (costCenter == null) return new ImportITMFXResult { Success = false, Message = $"Centru de cost {import.CostCenterCode} nu exista!" };

            employee = await _context.Set<Model.Employee>().Where(a => a.InternalCode == import.InternalCode && a.IsDeleted == false).FirstOrDefaultAsync();
            if (employee == null) return new ImportITMFXResult { Success = false, Message = $"Marca {import.InternalCode} nu exista!" };

            if (employee.Email == null || employee.Email == "") return new ImportITMFXResult { Success = false, Message = $"Marca {import.InternalCode} nu are o adresa de email!" };

            //if(employee.CostCenter == null) return new ImportITMFXResult { Success = false, Message = $"Marca {import.InternalCode} nu are un centru de cost!" };

            //if (employee.CostCenter.Code != costCenter.Code) return new ImportITMFXResult { Success = false, Message = $"Centru - ul de cost al angajatului {employee.Email} este diferit de centru -ul de cost {costCenter.Code} din fisier!" };
            if (employee.Email.Substring(0, employee.Email.IndexOf('@')) != import.Email) return new ImportITMFXResult { Success = false, Message = $"Userul - ul angajatului {employee.Email} este diferit de user -ul {import.Email} din fisier!" };

            employeeIni = await _context.Set<Model.Employee>().Where(a => a.Id == import.EmployeeId).FirstOrDefaultAsync();
            if (employeeIni == null) return new ImportITMFXResult { Success = false, Message = $"Userul nu este mapat pe un angajat!" };

            //assetType = await _context.Set<Model.AssetType>().Where(a => a.Name == import.AssetType && a.IsDeleted == false).FirstOrDefaultAsync();
            //if (assetType == null) return new ImportITMFXResult { Success = false, Message = $"Cost Type - ul {import.AssetType} nu exista!" };

            budgetBase = await _context.Set<Model.BudgetBase>().Where(a => a.Code == import.BudgetBase && a.IsDeleted == false && a.IsLast == true).FirstOrDefaultAsync();
            if (budgetBase == null) return new ImportITMFXResult { Success = false, Message = $"Cod- ul de buget {import.BudgetBase} nu exista!" };

           //  if (budgetBase.AssetTypeId != assetType.Id) return new ImportITMFXResult { Success = false, Message = $"Cost type - ul codului de buget {import.BudgetBase} este diferit de cost type - ul din fisier!" };
            if (budgetBase.AdmCenterId != admCenter.Id) return new ImportITMFXResult { Success = false, Message = $"Profit center - ul codului de buget {import.BudgetBase} este diferit de profit center - ul din fisier!" };
            //if (budgetBase.DivisionId != costCenter.DivisionId) return new ImportITMFXResult { Success = false, Message = $"Departament - ul codului de buget {import.BudgetBase} este diferit de departament - ul din fisier!" };

            budgetForecast = await _context.Set<Model.BudgetForecast>().Where(a => a.BudgetBaseId == budgetBase.Id && a.IsDeleted == false).FirstOrDefaultAsync();
            if (budgetForecast == null) return new ImportITMFXResult { Success = false, Message = $"Pentru cod- ul de buget {import.BudgetBase} nu exista forecast!" };

            documentType = await _context.Set<Model.DocumentType>().Where(a => a.Code == "TRANSFER").FirstOrDefaultAsync();
            if (documentType == null) return new ImportITMFXResult { Success = false, Message = $"Tip - ul de document transfer nu exista!" };

            inventory = await _context.Set<Model.Inventory>().AsNoTracking().Where(a => a.Active == true).FirstOrDefaultAsync();
            if (inventory == null) return new ImportITMFXResult { Success = false, Message = $"Nu exista niciun inventar activ!" };

            tax = await _context.Set<Model.Tax>().Where(t => t.Code == "W1").FirstOrDefaultAsync();
            if (tax == null) return new Model.ImportITMFXResult { Success = false, Message = "Lipsa TAX" };

            stock = await _context.Set<Model.Stock>().Where(t => t.Id == asset.StockId).FirstOrDefaultAsync();
            if (stock == null) return new Model.ImportITMFXResult { Success = false, Message = "Lipsa Produs Stock" };

            emailType = await _context.Set<Model.EmailType>().AsNoTracking().Where(a => a.Code == "TRANSFER").FirstOrDefaultAsync();
            if (emailType == null) return new ImportITMFXResult { Success = false, Message = $"Nu exista tip email TRANSFER!" };

            entityType = await _context.Set<Model.EntityType>().AsNoTracking().Where(a => a.Code == "TRANSFER").FirstOrDefaultAsync();
            if (entityType == null) return new ImportITMFXResult { Success = false, Message = $"Nu exista entitate de tip TRANSFER!" };

            appState = await _context.Set<Model.AppState>().AsNoTracking().Where(a => a.Code == "FINAL_EMPLOYEE_VALIDATE").FirstOrDefaultAsync();
            if (appState == null) return new ImportITMFXResult { Success = false, Message = $"Nu exista stare tip FINAL_EMPLOYEE_VALIDATE!" };

            assetState = await _context.Set<Model.AssetState>().AsNoTracking().Where(a => a.Code == "FINAL_EMPLOYEE_VALIDATE").FirstOrDefaultAsync();
            if (assetState == null) return new ImportITMFXResult { Success = false, Message = $"Nu exista stare tip FINAL_EMPLOYEE_VALIDATE!" };

            order = await _context.Set<Model.Order>().Include(o => o.Offer).ThenInclude(o => o.OfferType).Where(a => a.Id == asset.OrderId).FirstOrDefaultAsync();
            if (order == null) return new ImportITMFXResult { Success = false, Message = $"Nu exista comanda pentru numarul de inventar {import.ERPCode} !" };

            orderMaterial = await _context.Set<Model.OrderMaterial>().Include(o => o.OfferMaterial).Where(a => a.OrderId == order.Id && a.MaterialId == asset.MaterialId && a.IsDeleted == false).FirstOrDefaultAsync();
            if (orderMaterial == null) return new ImportITMFXResult { Success = false, Message = $"Nu exista order material pentru numarul de inventar {import.ERPCode} !" };

            request = await _context.Set<Model.Request>().Where(a => a.Id == order.Offer.RequestId && a.IsDeleted == false).FirstOrDefaultAsync();
            if (request == null) return new ImportITMFXResult { Success = false, Message = $"Nu exista P.R. pentru numarul de inventar {import.ERPCode} !" };

            offer = await _context.Set<Model.Offer>().Where(a => a.Id == order.OfferId && a.IsDeleted == false).FirstOrDefaultAsync();
            if (offer == null) return new ImportITMFXResult { Success = false, Message = $"Nu exista oferta pentru numarul de inventar {import.ERPCode} !" };

            rate = await _context.Set<Model.Rate>().Where(t => t.Id == order.RateId).FirstOrDefaultAsync();
            if (rate == null) return new Model.ImportITMFXResult { Success = false, Message = "Lipsa CURS BNR" };

			documentType = await _context.Set<Model.DocumentType>().Where(a => a.Code == "TRANSFER").FirstOrDefaultAsync();
			if (documentType == null) return new ImportITMFXResult { Success = false, Message = $"Tip - ul de document transfer nu exista!" };

			assetAdmMD = await _context.Set<Model.AssetAdmMD>().Where(a => a.AssetId == asset.Id && a.AccMonthId == inventory.AccMonthId.Value).FirstOrDefaultAsync();

			//requestBudgetForecast = await _context.Set<Model.RequestBudgetForecast>().Where(r => r.RequestId == order.Offer.RequestId).FirstOrDefaultAsync();

			requestBudgetForecast = await _context.Set<Model.RequestBudgetForecast>()
                                   .Where(e => e.BudgetForecastId == budgetForecast.Id && e.RequestId == order.Offer.RequestId && e.ContractId == order.ContractId && e.OfferTypeId == order.Offer.OfferTypeId && e.IsDeleted == false)
                                   .FirstOrDefaultAsync();

            if (requestBudgetForecast == null)
            {
                requestBudgetForecast = new Model.RequestBudgetForecast()
                {
                    AccMonthId = inventory.AccMonthId.Value,
                    AppStateId = appState.Id,
                    BudgetForecastId = budgetForecast.Id,
                    BudgetManagerId = inventory.BudgetManagerId.Value,
                    ContractId = order.ContractId,
                    CreatedAt = DateTime.Now,
                    CreatedBy = _context.UserId,
                    Guid = orderMaterial.OfferMaterial.Guid,
                    IsDeleted = false,
                    Materials = "",
                    MaxQuantity = 1,
                    MaxValue = stock.Value,
                    MaxValueRon = stock.Value,
                    ModifiedAt = DateTime.Now,
                    ModifiedBy = _context.UserId,
                    NeedBudget = false,
                    NeedContract = false,
                    Price = stock.Value,
                    PriceRon = stock.Value,
                    Quantity = 1,
                    RequestId = order.Offer.RequestId,
                    TotalOrderQuantity = 1,
                    TotalOrderValue = stock.Value,
                    TotalOrderValueRon = stock.Value,
                    Value = stock.Value,
                    ValueRon = stock.Value,
                    NeedBudgetValue = 0,
                    NeedContractValue = 0,
                    OfferTypeId = order.Offer.OfferTypeId

                };

                _context.Add(requestBudgetForecast);
            }
            else
            {
                requestBudgetForecast.MaxQuantity++;
                requestBudgetForecast.MaxValue += stock.Value;
                requestBudgetForecast.MaxValueRon += stock.Value;
                requestBudgetForecast.Quantity++;
                requestBudgetForecast.TotalOrderQuantity++;
                requestBudgetForecast.TotalOrderValue += stock.Value;
                requestBudgetForecast.TotalOrderValueRon += stock.Value;
                requestBudgetForecast.Value += stock.Value;
                requestBudgetForecast.ValueRon += stock.Value;

                requestBudgetForecast.AppStateId = appState.Id;

                _context.Update(requestBudgetForecast);
            }


            //if (requestBudgetForecast == null) return new ImportITMFXResult { Success = false, Message = $"Nu exista P.R.pentru numarul de inventar {import.ERPCode} !" };

            if(budgetForecast.TotalRem < orderMaterial.PriceRon)
			{
                return new ImportITMFXResult { Success = false, Message = $"Nu exista buget disponibil pentru numarul de inventar {import.ERPCode} !" };
            }

            //requestBudgetForecast.BudgetForecastId = budgetForecast.Id;
            //orderMaterial.BudgetForecastId = budgetForecast.Id;
            //request.BudgetForecastId = budgetForecast.Id;
            //offer.BudgetForecastId = budgetForecast.Id;
            //order.BudgetForecastId = budgetForecast.Id;

            //requestBudgetForecastMaterial = await _context.Set<Model.RequestBudgetForecastMaterial>()
            //    .Where(u => u.RequestBudgetForecastId == requestBudgetForecast.Id && u.MaterialId == asset.MaterialId && u.IsDeleted == false)
            //    .FirstOrDefaultAsync();
            //if (requestBudgetForecastMaterial == null) return new ImportITMFXResult { Success = false, Message = $"Nu exista request budget forecast material pentru numarul de inventar {import.ERPCode} !" };
            requestBudgetForecastMaterial = await _context.Set<Model.RequestBudgetForecastMaterial>()
                                  .Where(e => e.RequestBudgetForecastId == requestBudgetForecast.Id && e.OrderId == order.Id && e.MaterialId == asset.MaterialId && e.OfferTypeId == order.Offer.OfferTypeId && e.IsDeleted == false)
                                  .FirstOrDefaultAsync();

            if (requestBudgetForecastMaterial == null)
            {
                requestBudgetForecastMaterial = new Model.RequestBudgetForecastMaterial()
                {
                    AppStateId = appState.Id,
                    BudgetForecastTimeStamp = 0,
                    BudgetValueNeed = 0,
                    CreatedAt = DateTime.Now,
                    CreatedBy = _context.UserId,
                    Guid = orderMaterial.OfferMaterial.Guid,
                    IsDeleted = false,
                    MaterialId = stock.MaterialId != null ? stock.MaterialId.Value : 627,
                    OfferMaterial = orderMaterial.OfferMaterial,
                    OrderId = order.Id,
                    OrderMaterial = orderMaterial,
                    PreAmount = 0,
                    PreAmountRon = 0,
                    Price = stock.Value,
                    PriceRon = stock.Value,
                    Quantity = 1,
                    QuantityRem = 0,
                    RequestBudgetForecast = requestBudgetForecast,
                    Value = stock.Value,
                    ValueRon = stock.Value,
                    ValueRem = 0,
                    ValueRemRon = 0,
                    MaxQuantity = 1,
                    MaxValue = stock.Value,
                    MaxValueRon = stock.Value,
                    ModifiedAt = DateTime.Now,
                    ModifiedBy = _context.UserId,
                    OfferTypeId = order.Offer.OfferTypeId

                };

                _context.Add(requestBudgetForecastMaterial);
            }
            else
            {
                requestBudgetForecastMaterial.MaxQuantity++;
                requestBudgetForecastMaterial.MaxValue += stock.Value;
                requestBudgetForecastMaterial.MaxValueRon += stock.Value;
                requestBudgetForecastMaterial.Quantity++;
                //requestBudgetForecastMaterial.QuantityRem++;
                //requestBudgetForecastMaterial.ValueRemRon += stock.Value;
                //requestBudgetForecastMaterial.ValueRem += stock.Value;
                requestBudgetForecastMaterial.Value += stock.Value;
                requestBudgetForecastMaterial.ValueRon += stock.Value;


                requestBudgetForecastMaterial.AppStateId = appState.Id;
                //requestBudgetForecastMaterial.QuantityRem--;
                //requestBudgetForecastMaterial.ValueRem -= requestBudgetForecastMaterial.Price;
                //requestBudgetForecastMaterial.ValueRemRon -= requestBudgetForecastMaterial.PriceRon;

                requestBudgetForecastMaterial.TotalCostCenterQuantity++;
                requestBudgetForecastMaterial.TotalCostCenterValue = requestBudgetForecastMaterial.Price;
                requestBudgetForecastMaterial.TotalCostCenterValueRon = requestBudgetForecastMaterial.PriceRon;

                requestBudgetForecastMaterial.QuantityRem = 0;
                requestBudgetForecastMaterial.ValueRem = 0;
                requestBudgetForecastMaterial.ValueRemRon = 0;


                _context.Update(requestBudgetForecastMaterial);
            }

            List<Model.RequestBFMaterialCostCenter> requestBFMaterialCostCenters = await _context.Set<Model.RequestBFMaterialCostCenter>().
                Where(a => a.RequestBudgetForecastMaterialId == requestBudgetForecastMaterial.Id && a.OrderMaterialId == orderMaterial.Id && a.OfferMaterialId == orderMaterial.OfferMaterialId
                && a.OrderId == order.Id).ToListAsync();

			for (int r = 0; r < requestBFMaterialCostCenters.Count; r++)
			{
                requestBFMaterialCostCenters[r].MaxQuantity++;
                requestBFMaterialCostCenters[r].MaxValue += stock.Value;
                requestBFMaterialCostCenters[r].MaxValueRon += stock.Value;

				_context.Update(requestBFMaterialCostCenters[r]);
            }

            requestBFMaterialCostCenter = new Model.RequestBFMaterialCostCenter()
            {
                RequestBudgetForecastMaterial = requestBudgetForecastMaterial,
                CostCenterId = costCenter.Id,
                Price = requestBudgetForecastMaterial.Price,
                PriceRon = requestBudgetForecastMaterial.PriceRon,
                Quantity = 1,
                QuantityRem = 0,
                Value = requestBudgetForecastMaterial.Price,
                ValueRon = requestBudgetForecastMaterial.PriceRon,
                ValueRem = 0,
                ValueRemRon = 0,
                Guid = requestBudgetForecastMaterial.Guid,
                AppStateId = appState.Id,
                OfferTypeId = requestBudgetForecastMaterial.OfferTypeId,
                MaxQuantity = requestBudgetForecastMaterial.Quantity,
                MaxValueRon = requestBudgetForecastMaterial.ValueRon,
                MaxValue = requestBudgetForecastMaterial.Value,
                OfferMaterialId = requestBudgetForecastMaterial.OfferMaterialId,
                OrderId = requestBudgetForecastMaterial.OrderId,
                OrderMaterialId = requestBudgetForecastMaterial.OrderMaterialId,
                ReceptionsPrice = requestBudgetForecastMaterial.Price,
                ReceptionsPriceRon = requestBudgetForecastMaterial.PriceRon,
                ReceptionsQuantity = 1,
                ReceptionsValue = requestBudgetForecastMaterial.Price,
                ReceptionsValueRon = requestBudgetForecastMaterial.PriceRon
            };

            _context.Add(requestBFMaterialCostCenter);




			budgetBaseAsset = new BudgetBaseAsset()
			{
				BudgetBaseId = budgetBase.Id,
				BudgetTypeId = 1,
				BudgetManagerId = inventory.BudgetManagerId.Value,
				AccMonthId = inventory.AccMonthId.Value,
				AppStateId = appState.Id,
				AssetId = asset.Id,
				IsLast = true,
				IsFirst = true,
			};

			_context.Add(budgetBaseAsset);

			documentNumber = int.Parse(entityType.Name);
			documentNumber++;

			document = new Model.Document();

			document.DocumentTypeId = documentType.Id;
			document.DocNo1 = string.Empty;
			document.DocNo2 = string.Empty;
			document.DocumentDate = DateTime.Now;
			document.Approved = true;
			document.Exported = false;
			document.CreationDate = DateTime.Now;
			document.CreatedAt = DateTime.Now;
			document.RegisterDate = DateTime.Now;
			document.ValidationDate = DateTime.Now;

			_context.Add(document);

			asset.Guid = guid;
            asset.AppStateId = appState.Id;
            asset.AssetStateId = assetState.Id;
            asset.IsInTransfer = true;
            asset.EmployeeTransferId = employee.Id;
            asset.ModifiedAt = DateTime.Now;
            asset.ModifiedBy = _context.UserId;
            asset.BudgetForecastId = budgetForecast.Id;
            asset.ReqBFMCostCenter = requestBFMaterialCostCenter;
            asset.ReqBFMaterialId = requestBudgetForecastMaterial.Id;
            asset.RequestId = offer.RequestId;
            asset.BudgetBaseId = budgetBase.Id;
            asset.OfferMaterialId = orderMaterial.OfferMaterialId;
            asset.OrderMaterialId = orderMaterial.Id;
            asset.TaxId = tax.Id;
            asset.RateId = rate.Id;
            asset.ContractId = order.ContractId;
            asset.ProjectTypeId = budgetBase.ProjectTypeId;
            asset.AllowLabel = true;
            asset.ProjectId = budgetBase.ProjectId;
            asset.BrandId = stock.BrandId;
            asset.UomId = rate.UomId;

            asset.SerialNumber = import.SerialNumber;
            asset.Name = import.Description;

            asset.ValueInv = requestBudgetForecastMaterial.Price;
            asset.ValueInvRon = requestBudgetForecastMaterial.PriceRon;
            asset.ValueRem = requestBudgetForecastMaterial.Price;
            asset.ValueRemRon = requestBudgetForecastMaterial.PriceRon;
            asset.TaxAmount = (requestBudgetForecastMaterial.Price * tax.Value) / 100;
            asset.TaxAmountRon = (requestBudgetForecastMaterial.PriceRon * tax.Value) / 100;
            asset.NetAmount = requestBudgetForecastMaterial.Price;
            asset.NetAmountRon = requestBudgetForecastMaterial.PriceRon;
            asset.TotalAmount = (requestBudgetForecastMaterial.Price + (requestBudgetForecastMaterial.Price * tax.Value) / 100);
            asset.TotalAmountRon = (requestBudgetForecastMaterial.Price + (requestBudgetForecastMaterial.Price * tax.Value) / 100);
            asset.ReceptionPrice = requestBudgetForecastMaterial.PriceRon;
            asset.FirstTransfer = true;

            _context.Update(asset);

            if(assetAdmMD != null)
            {
                assetAdmMD.ProjectId = budgetBase.ProjectId;
                assetAdmMD.AssetStateId = assetState.Id;
				_context.Update(assetAdmMD);

			}


			operation = new Model.AssetOp
			{
				AssetOpStateId = appState.Id,
				InvStateIdInitial = asset.InvStateId,
				InvStateIdFinal = asset.InvStateId,
				AssetStateIdInitial = asset.AssetStateId,
				AssetStateIdFinal = assetState.Id
			};

			operation.AccSystemId = 3;
			operation.AdministrationIdInitial = asset.AdministrationId;
			operation.AdministrationIdFinal = asset.AdministrationId;
			operation.AssetCategoryIdInitial = asset.AssetCategoryId;
			operation.AssetCategoryIdFinal = asset.AssetCategoryId;
			operation.AssetId = asset.Id;
			operation.CostCenterIdInitial = asset.CostCenterId;
			operation.CostCenterIdFinal = costCenter.Id;
			operation.CreatedAt = DateTime.Now;
			operation.CreatedBy = _context.UserId;
			operation.DepartmentIdInitial = asset.DepartmentId;
			operation.DepartmentIdFinal = asset.DepartmentId;
			operation.DocumentId = document.Id;
			operation.EmployeeIdInitial = employeeIni.Id;
			operation.EmployeeIdFinal = employee.Id;
			operation.IsDeleted = false;
			operation.ModifiedAt = DateTime.Now;
			operation.ModifiedBy = _context.UserId;
			operation.RoomIdInitial = asset.RoomId;
			operation.RoomIdFinal = asset.RoomId;
			operation.SrcConfAt = DateTime.Now;
			operation.SrcConfBy = _context.UserId;
			operation.AllowLabel = asset.AllowLabel != null ? (bool)asset.AllowLabel : false;
			operation.AssetTypeIdInitial = asset.AssetTypeId;
			operation.AssetTypeIdFinal = asset.AssetTypeId;
			operation.InvName = asset.Name;
			operation.Quantity = asset.Quantity;
			operation.SerialNumber = asset.SerialNumber;
			operation.AssetNatureIdInitial = asset.AssetNatureId;
			operation.AssetNatureIdFinal = asset.AssetNatureId;
			operation.BudgetManagerIdInitial = asset.BudgetManagerId;
			operation.BudgetManagerIdFinal = asset.BudgetManagerId;
			operation.DimensionIdInitial = asset.DimensionId;
			operation.DimensionIdFinal = asset.DimensionId;
			operation.ProjectIdInitial = asset.ProjectId;
			operation.ProjectIdFinal = asset.ProjectId;
			operation.IsMinus = false;
			operation.IsPlus = false;
			operation.CompanyId = asset.CompanyId;
			operation.InsuranceCategoryId = asset.InsuranceCategoryId;
			
			operation.UomId = asset.UomId;
			operation.TaxId = asset.TaxId;
			operation.ValueAdd = documentNumber;
			operation.Guid = guid;

			emailStatus = new Model.EmailStatus()
			{
				AppStateId = appState.Id,
				AssetId = asset.Id,
				AssetOp = operation,
				BudgetBaseId = asset.BudgetBaseId,
				CompanyId = asset.CompanyId,
				Completed = false,
				CostCenterIdFinal = costCenter.Id,
				CostCenterIdInitial = asset.CostCenterId,
				CreatedAt = DateTime.Now,
				CreatedBy = _context.UserId,
				DocumentNumber = documentNumber,
				DstEmployeeEmailSend = false,
				DstEmployeeValidateAt = null,
				DstEmployeeValidateBy = null,
				DstManagerEmailSend = false,
				DstManagerValidateAt = null,
				DstManagerValidateBy = null,
				EmailSend = false,
				EmailTypeId = emailType.Id,
				EmployeeIdFinal = employee.Id,
				EmployeeIdInitial = employeeIni.Id,
				ErrorId = null,
				Exported = false,
				FinalValidateAt = null,
				FinalValidateBy = null,
				Guid = guid,
				GuidAll = guidAll,
				Info = string.Empty,
				IsAccepted = false,
				IsDeleted = false,
				ModifiedAt = DateTime.Now,
				ModifiedBy = _context.UserId,
				NotCompletedSync = false,
				NotDstEmployeeSync = true,
				NotDstManagerSync = false,
				NotSrcEmployeeSync = false,
				NotSrcManagerSync = false,
				NotSync = false,
				OfferId = order.OfferId,
				OrderId = asset.OrderId,
				PartnerId = order.PartnerId,
				RequestId = asset.RequestId,
				SameEmployee = asset.EmployeeId == employee.Id ? true : false,
				SameManager = false,
				Skip = false,
				SkipDstEmployee = false,
				SkipDstManager = false,
				SkipSrcEmployee = false,
				SkipSrcManager = false,
				SrcEmployeeEmailSend = false,
				SrcEmployeeValidateAt = DateTime.Now,
				SrcEmployeeValidateBy = _context.UserId,
				SrcManagerEmailSend = false,
				SrcManagerValidateAt = DateTime.Now,
				SrcManagerValidateBy = _context.UserId,
				StockId = asset.StockId,
				SyncCompletedErrorCount = 0,
				SyncDstEmployeeErrorCount = 0,
				SyncDstManagerErrorCount = 0,
				SyncErrorCount = 0,
				SyncSrcEmployeeErrorCount = 0,
				SyncSrcManagerErrorCount = 0

			};

			entityType.Name = documentNumber.ToString();

            _context.Add(emailStatus);
            _context.Add(operation);
            _context.Update(asset);
            _context.Update(entityType);
            _context.SaveChanges();

            var count = await _context.Set<Model.RecordCount>().FromSql("UpdateAllAssets").ToListAsync();
            var countOffer = await _context.Set<Model.RecordCount>().FromSql("UpdateAllOffers").ToListAsync();
            var countOrd = _context.Set<Model.RecordCount>().FromSql("UpdateAllOrders").ToList();
			var countOrdMaterial = _context.Set<Model.RecordCount>().FromSql("UpdateAllOrderMaterials").ToList();
			var countContract = await _context.Set<Model.RecordCount>().FromSql("UpdateAllContracts").ToListAsync();
            var countContractAmount = await _context.Set<Model.RecordCount>().FromSql("UpdateAllContractAmount").ToListAsync();
            var countBudget = await _context.Set<Model.RecordCount>().FromSql("UpdateAllBudgetBase").ToListAsync();
			var countBudgetBases = await _context.Set<Model.RecordCount>().FromSql("UpdateAllBudgetBases").ToListAsync();
			var countOfferMaterials2 = _context.Set<Model.RecordCount>().FromSql("UpdateAllOfferMaterials2").ToList();
            var UpdateAllRequestBudgetForecastMaterials = _context.Set<Model.RecordCount>().FromSql("UpdateAllRequestBudgetForecastMaterials").ToList();
            var UpdateAllRequestBFMaterialCostCenters = _context.Set<Model.RecordCount>().FromSql("UpdateAllRequestBFMaterialCostCenters").ToList();


            return new ImportITMFXResult { Success = true, Message = "", Id = 0 };
        }

		public async Task<ImportPrintLabelResult> ImportPrintLabel(ImportPrintLabel import)
		{
			Model.Asset asset = null;
            Model.PrintLabel printLabel = null;
            Model.Company company = null;
            var assetToSearch = string.Empty;
            var subNo = string.Empty;

			if (import == null) return new ImportPrintLabelResult { Success = false, Message = $"Eroare fisier import!" };
			if (import.Asset == null || (import.Asset.Trim().Length < 13 && import.Asset != "N/A")) return new ImportPrintLabelResult { Success = false, Message = $"Lipsa asset {import.Asset}!" };

            if(import.Asset.Length > 12)
            {
                if(import.Asset.Length == 13)
                {
					assetToSearch = import.Asset.Substring(0, 12);
					subNo = import.Asset.Substring(import.Asset.Length - 1);
				} 
                else if (import.Asset.Length == 14)
				{
					assetToSearch = import.Asset.Substring(0, 12);
					subNo = import.Asset.Substring(import.Asset.Length - 2);
				}
				else if (import.Asset.Length == 15)
				{
					assetToSearch = import.Asset.Substring(0, 12);
					subNo = import.Asset.Substring(import.Asset.Length - 3);
				}
				else if (import.Asset.Length == 16)
				{
					assetToSearch = import.Asset.Substring(0, 12);
					subNo = import.Asset.Substring(import.Asset.Length - 4);
				}


				if (subNo.Length == 1)
                {
                    subNo = "000" + subNo;
                }
				else if (subNo.Length == 2)
				{
					subNo = "00" + subNo;
				}
				else if (subNo.Length == 3)
				{
					subNo = "0" + subNo;
				}
			}
            else
            {
                assetToSearch = import.Asset;
                subNo = "0000";
			}

			company = await _context.Set<Model.Company>().Where(a => a.Code == "RO10" && a.IsDeleted == false).FirstOrDefaultAsync();
			if (company == null) return new ImportPrintLabelResult { Success = false, Message = $"Compania RO10 nu exista!" };

			asset = await _context.Set<Model.Asset>().Where(a => a.InvNo == assetToSearch && a.SubNo == subNo && a.IsDeleted == false).FirstOrDefaultAsync();
			if (asset == null) return new ImportPrintLabelResult { Success = false, Message = $"Nr. de inventar {import.Asset} nu exista!" };

            printLabel = new Model.PrintLabel()
            {
                Code = subNo,
                Name = assetToSearch,
                UploadDate = DateTime.Now,
                PrintDate = null,
                Asset = asset,
                Company = company,
                IsDeleted = false,
                Hidden = false,
                CreatedAt = DateTime.Now,
                CreatedBy = _context.UserId,
                ModifiedAt = DateTime.Now,
                ModifiedBy = _context.UserId
            };

            _context.Add(printLabel);
            _context.SaveChanges();
			
			return new ImportPrintLabelResult { Success = true, Message = asset.InvNo + "/" + asset.SubNo, Id = 0 };
		}

		public int ImportITThales(ImportITThales assetImport)
        {
            Model.Asset asset = null;
            Model.AssetCategory assetCategory = null;
            Model.CostCenter costCenter = null;
            Model.Location location = null;
            Model.Room room = null;
            Model.Document document = null;
            Model.InventoryAsset inventoryAsset = null;
            Model.AssetOp assetOp = null;
            Model.Inventory inventory = null;
            Model.Partner partner = null;
            Model.PartnerLocation partnerLocation = null;
            Model.Region region = null;
            Model.AdmCenter admCenter = null;
            Model.AssetState assetState = null;
            Model.AssetNature assetNature = null;
            Model.Brand brand = null;
            Model.Model model = null;
            Model.Company company = null;
            
            Model.InvState invState = null;
            Model.AssetType assetType = null;
            Model.Uom uom = null;
            Model.Department department = null;
            Model.AccSystem accSystem = null;
            Model.Administration administration = null;
            Model.AssetClass assetClass = null;
            Model.AssetClassType assetClassType = null;
            Model.AssetAC assetAc = null;
            Model.AssetDep assetDep = null;
            Model.AssetDepMD assetDepMD = null;
            Model.AccMonth accMonth = null;
            Model.AssetAdmMD assetAdmMD = null;
            Model.AssetInv assetInv = null;
            Model.Project project = null;

            string assetTypeCode = "ASSET";
            string codeDefault = "NSP";
            string nameDefault = "Nespecificat";
            string documentTypeCode = "PURCHASE";
            string locationCode = string.Empty;
            string locationName = string.Empty;
            string roomCode = string.Empty;
            string roomName = string.Empty;
            string costCenterCode = string.Empty;
            string costCenterName = string.Empty;
            string invNo = string.Empty;
            string disposition = string.Empty;
            string assetClassTypeDefault = "RAS";
            string assetClassDefault = "RAS";



            assetClassType = _context.Set<Model.AssetClassType>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();

            if (assetClassType == null)
            {
                assetClassType = new Model.AssetClassType
                {
                    Code = assetClassTypeDefault,
                    Name = assetClassTypeDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AssetClassType>().Add(assetClassType);
            }

            assetClass = _context.Set<Model.AssetClass>().Where(a => (a.Code == codeDefault.Trim())).FirstOrDefault();

            if (assetClass == null)
            {
                assetClass = new Model.AssetClass
                {
                    Code = codeDefault.Trim(),
                    Name = codeDefault.Trim(),
                    IsDeleted = false,
                    AssetClassType = assetClassType
                };
                _context.Set<Model.AssetClass>().Add(assetClass);
            }

            accSystem = _context.Set<Model.AccSystem>().Where(a => (a.Code == assetClassTypeDefault)).FirstOrDefault();

            if (accSystem == null)
            {
                accSystem = new Model.AccSystem
                {
                    AssetClassType = assetClassType,
                    Code = assetClassTypeDefault,
                    Name = assetClassTypeDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AccSystem>().Add(accSystem);
            }

            administration = _context.Set<Model.Administration>().Where(a => (a.Code == assetClassDefault.Trim())).FirstOrDefault();

            if (administration == null)
            {
                administration = new Model.Administration
                {
                    Code = assetClassDefault.Trim(),
                    Name = assetClassDefault.Trim(),
                    IsDeleted = false
                };

                _context.Set<Model.Administration>().Add(administration);
            }

            assetType = _context.Set<Model.AssetType>().Where(a => a.Code == assetTypeCode.Trim()).SingleOrDefault();

            if (assetType == null)
            {
                assetType = new Model.AssetType
                {
                    Code = assetTypeCode.Trim(),
                    Name = assetTypeCode.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AssetType>().Add(assetType);
            }
            // var documentType = _context.Set<Model.DocumentType>().Where(d => d.Code == documentTypeCode).Single();

            var employee = _context.Set<Model.Employee>().Where(e => e.InternalCode.Trim() == assetImport.Employee.Trim()).SingleOrDefault();

            if (employee == null)
            {
                employee = new Model.Employee
                {
                    InternalCode = assetImport.Employee.Trim(),
                    FirstName = "-",
                    LastName = "-",
                    IsDeleted = false
                };
                _context.Set<Model.Employee>().Add(employee);
            }

            assetCategory = _context.Set<Model.AssetCategory>().Where(a => a.Code == codeDefault.Trim()).FirstOrDefault();

            if (assetCategory == null)
            {
                assetCategory = new Model.AssetCategory
                {
                    Code = codeDefault,
                    Name = codeDefault,
                    IsDeleted = false
                };
                _context.Set<Model.AssetCategory>().Add(assetCategory);
            }

            uom = _context.Set<Model.Uom>().Where(a => a.Code == "buc").FirstOrDefault();
            if (uom == null)
            {
                uom = new Model.Uom
                {
                    Code = "buc",
                    Name = "buc",
                    IsDeleted = false
                };
                _context.Set<Model.Uom>().Add(uom);
            }

            department = _context.Set<Model.Department>().Where(a => a.Code == assetImport.Department.Trim()).FirstOrDefault();

            if (department == null)
            {
                department = new Model.Department
                {
                    Code = assetImport.Department.Trim(),
                    Name = assetImport.Department.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Department>().Add(department);
            }


            admCenter = _context.Set<Model.AdmCenter>().Where(a => a.Name.Trim() == assetImport.Room).FirstOrDefault();

            if (admCenter == null)
            {
                admCenter = new Model.AdmCenter
                {
                    Code = assetImport.Room.Trim(),
                    Name = assetImport.Room.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AdmCenter>().Add(admCenter);
            }

            costCenter = _context.Set<Model.CostCenter>().Where(a => a.Name.Trim() == codeDefault.Trim()).FirstOrDefault();

            if (costCenter == null)
            {
                costCenter = new Model.CostCenter
                {
                    Code = codeDefault.Trim(),
                    Name = codeDefault.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.CostCenter>().Add(costCenter);
            }

            region = _context.Set<Model.Region>().Where(a => a.Name.Trim() == assetImport.Room.Trim()).FirstOrDefault();

            if (region == null)
            {
                region = new Model.Region
                {
                    Code = assetImport.Room.Trim(),
                    Name = assetImport.Room.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Region>().Add(region);
            }




            location = _context.Set<Model.Location>().Where(a => a.Code == assetImport.Room.Trim()).FirstOrDefault();

            if (location == null)
            {
                location = new Model.Location
                {
                    Code = assetImport.Room.Trim(),
                    Name = assetImport.Room.Trim(),
                    Region = region,
                    AdmCenter = admCenter,
                    IsDeleted = false
                };
                _context.Set<Model.Location>().Add(location);
            }

            room = _context.Set<Model.Room>().Where(a => a.Code == assetImport.Room.Trim()).FirstOrDefault();

            if (room == null)
            {
                room = new Model.Room
                {
                    Code = assetImport.Room.Trim(),
                    Name = assetImport.Room.Trim(),
                    Location = location,
                    IsDeleted = false
                };
                _context.Set<Model.Room>().Add(room);
            }

            invState = _context.Set<Model.InvState>().Where(a => a.Name.Trim() == assetImport.InvState.Trim()).FirstOrDefault();

            if (invState == null)
            {
                invState = new Model.InvState
                {
                    Code = "F",
                    Name = assetImport.InvState.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.InvState>().Add(invState);
            }

            assetState = _context.Set<Model.AssetState>().Where(a => a.Name.Trim() == assetImport.InvState.Trim()).FirstOrDefault();

            if (assetState == null)
            {
                assetState = new Model.AssetState
                {
                    Code = "F",
                    Name = assetImport.InvState.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AssetState>().Add(assetState);
            }


            assetNature = _context.Set<Model.AssetNature>().Where(a => a.Code == assetImport.AssetNature.Trim()).FirstOrDefault();

            if (assetNature == null)
            {
                assetNature = new Model.AssetNature
                {
                    Code = assetImport.AssetNature.Trim(),
                    Name = assetImport.AssetNature.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.AssetNature>().Add(assetNature);
            }

            project = _context.Set<Model.Project>().Where(a => a.Name.Trim() == assetImport.SAPCode.Trim()).FirstOrDefault();

            if (project == null)
            {
                project = new Model.Project
                {
                    Code = assetImport.SAPCode.Trim(),
                    Name = assetImport.SAPCode.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Project>().Add(project);
            }

            brand = _context.Set<Model.Brand>().Where(a => a.Code == assetImport.Brand.Trim()).FirstOrDefault();

            if (brand == null)
            {
                brand = new Model.Brand
                {
                    Code = assetImport.Brand.Trim(),
                    Name = assetImport.Brand.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Brand>().Add(brand);
            }


            model = _context.Set<Model.Model>().Where(a => a.Code == codeDefault.Trim()).FirstOrDefault();

            if (model == null)
            {
                model = new Model.Model
                {
                    Code = codeDefault.Trim(),
                    Name = codeDefault.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Model>().Add(model);
            }

            company = _context.Set<Model.Company>().Where(a => a.Code == assetImport.Company.Trim()).FirstOrDefault();

            if (company == null)
            {
                company = new Model.Company
                {
                    Code = assetImport.Company.Trim(),
                    Name = assetImport.Company.Trim(),
                    IsDeleted = false
                };
                _context.Set<Model.Company>().Add(company);
            }


            //article = _context.Set<Model.Article>().Where(a => a.Name == assetImport.Description.Trim()).FirstOrDefault();

            //if (article == null)
            //{
            //    article = new Model.Article
            //    {
            //        Code = assetImport.Description.Length > 2 ? assetImport.Description.Trim().Substring(0, 2) : assetImport.Description.Trim(),
            //        Name = assetImport.Description.Trim(),
            //        IsDeleted = false
            //    };
            //    _context.Set<Model.Article>().Add(article);
            //}

            partnerLocation = _context.Set<Model.PartnerLocation>().Where(a => a.Denumire == codeDefault.Trim()).FirstOrDefault();

            if (partnerLocation == null)
            {
                partnerLocation = new Model.PartnerLocation();
                partnerLocation.Denumire = nameDefault;
                //partnerLocation.FiscalCode = "NSP";
                //partnerLocation.RegistryNumber = string.Empty;
                partnerLocation.IsDeleted = false;

                _context.Set<Model.PartnerLocation>().Add(partnerLocation);
            }


            partner = _context.Set<Model.Partner>().Where(a => a.RegistryNumber == codeDefault.Trim()).FirstOrDefault();

            if (partner == null)
            {
                partner = new Model.Partner();
                partner.Name = nameDefault;
                partner.FiscalCode = "NSP";
                partner.RegistryNumber = string.Empty;
                partner.IsDeleted = false;
                partner.PartnerLocation = partnerLocation;

                _context.Set<Model.Partner>().Add(partner);
            }

            accMonth = _context.Set<Model.AccMonth>().Where(a => a.IsActive == true).FirstOrDefault();

            inventory = _context.Set<Model.Inventory>().OrderByDescending(j => j.Id).FirstOrDefault();

            if (assetImport.Quantity == 0)
            {
                assetImport.Quantity = 1;
            }

            for (int i = 0; i < assetImport.Quantity; i++)
            {
                //if (i == 0)
                //{
                //    asset = _context.Set<Model.Asset>().Where(a => a.InvNo == assetImport.InvNo.Trim()).FirstOrDefault();
                //}
                //else
                //{
                //    asset = _context.Set<Model.Asset>().Where(a => a.InvNo == assetImport.InvNo.Trim() + "/" + i).FirstOrDefault();
                //}

                asset = null;

                Model.EntityType entityType = _context.Set<Model.EntityType>().Where(e => e.UploadFolder == "NEWASSET").SingleOrDefault();

                DateTime? date = DateTime.Now;

                if (assetImport.PODate != "" && assetImport.PODate != "#N/A")
                {
                    string[] docDate = assetImport.PODate.Split('/');

                    int month = int.Parse(docDate[0]);
                    int day = int.Parse(docDate[1]);
                    int year = int.Parse(docDate[2].Substring(0, 4));

                    date = new DateTime(year, month, day);
                }
                else
                {
                    date = null;
                }


                if (asset == null)
                {

                    document = new Model.Document
                    {
                        Approved = true,
                        DocumentTypeId = 1,
                        DocNo1 = assetImport.PONumber,
                        DocNo2 = string.Empty,
                        DocumentDate = DateTime.Now,
                        RegisterDate = DateTime.Now,
                        Partner = partner,
                        CreationDate = DateTime.Now,
                        ParentDocumentId = inventory.DocumentId

                    };

                    _context.Add(document);

                    asset = new Model.Asset()
                    {
                        InvNo = entityType.Code + entityType.Name,
                        Employee = employee,
                        Room = room,
                        AssetType = assetType,
                        PurchaseDate = date,
                        Quantity = 1,
                        Validated = true,
                        InvStateId = invState.Id,
                        Administration = administration,
                        CostCenter = costCenter,
                        AssetStateId = assetState.Id,
                        Uom = uom,
                        AssetCategory = assetCategory,
                        IsDeleted = false,
                        Custody = false,
                        ERPCode = assetImport.ERPCode.Trim(),
                        SAPCode = assetImport.SAPCode.Trim(),
                        AssetNatureId = assetNature.Id,
                        Name = Encoding.ASCII.GetString(Encoding.ASCII.GetBytes(assetImport.Description)),
                        
                        IsTemp = false,
                        Document = document,
                        Brand = brand,
                        Model = model,
                        Company = company,
                        Department = department,
                        ValueInv = assetImport.Value,
                        ValueRem = assetImport.Value,
                        PODate = date,
                        SerialNumber = assetImport.SN.Trim(),
                        Project = project
                    };


                    _context.Add(asset);


                    //assetOp = new Model.AssetOp()
                    //{
                    //	Asset = asset,
                    //	Document = document,
                    //	RoomInitial = room,
                    //	RoomFinal = room,
                    //	EmployeeInitial = employee,
                    //	EmployeeFinal = employee,
                    //	CostCenterInitial = costCenter,
                    //	CostCenterFinal = costCenter,
                    //	AssetCategoryInitial = assetCategory,
                    //	AssetCategoryFinal = assetCategory,
                    //	InvStateIdInitial = invState.Id,
                    //	InvStateIdFinal = invState.Id,
                    //	AdministrationInitial = administration,
                    //	AdministrationFinal = administration,
                    //	AccSystem = accSystem,
                    //	Info = string.Empty,
                    //	AssetStateInitial = assetState,
                    //	AssetStateFinal = assetState,
                    //	AssetTypeInitial = assetType,
                    //	AssetTypeFinal = assetType
                    //};

                    //_context.Add(assetOp);


                    if (inventory != null)
                    {
                        inventoryAsset = new Model.InventoryAsset()
                        {
                            Asset = asset,
                            Inventory = inventory,
                            QInitial = assetImport.Quantity,
                            QFinal = 0,
                            EmployeeInitial = employee,
                            RoomInitial = room,
                            CostCenterInitial = costCenter,
                            StateIdInitial = invState.Id,
                            StateIdFinal = null,
                            SerialNumber = string.Empty,
                            SNInitial = assetImport.SN,
                            Info = string.Empty,
                            AdministrationInitial = administration,
                            IsTemp = false


                        };

                        _context.Add(inventoryAsset);


                        assetAc = new Model.AssetAC
                        {
                            AssetClassType = assetClassType,
                            Asset = asset,
                            AssetClass = assetClass,
                            AssetClassIn = assetClass
                        };


                        _context.Set<Model.AssetAC>().Add(assetAc);


                        assetDep = new Model.AssetDep
                        {
                            AccSystem = accSystem,
                            Asset = asset,
                            DepPeriod = 0,
                            DepPeriodRem = 0,
                            ValueInv = assetImport.Value
                        };

                        _context.Set<Model.AssetDep>().Add(assetDep);




                        assetInv = new Model.AssetInv
                        {
                            Asset = asset,
                            //AllowLabel = true,
                            //Barcode = string.Empty,
                            Info = asset.Info,
                            //InvNoOld = string.Empty,
                            //Model = string.Empty,
                            //Producer = string.Empty,
                            InvState = invState

                        };

                        _context.Set<Model.AssetInv>().Add(assetInv);

                        assetDepMD = new Model.AssetDepMD
                        {
                            AccMonth = accMonth,
                            AccSystem = accSystem,
                            Asset = asset,
                            UsefulLife = 0,
                            RemLifeInPeriods = 0,
                            CurrentAPC = assetImport.Value


                        };

                        _context.Set<Model.AssetDepMD>().Add(assetDepMD);


                        assetAdmMD = new Model.AssetAdmMD
                        {
                            AccMonth = accMonth,
                            Asset = asset,
                            Administration = administration,
                            AssetCategory = assetCategory,
                            AssetState = assetState,
                            AssetType = assetType,
                            CostCenter = costCenter,
                            Employee = employee,
                            Room = room,
                            AssetStateId = assetState.Id,
                            AssetNatureId = assetNature.Id,
                            
                            Brand = brand,
                            Model = model,
                            Department = department,
                            Project = project
                        };

                        _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);

                    }
                }

                entityType.Name = StringsADD(entityType.Name, "1");
                _context.SaveChanges();
            }

            return asset.Id;

        }

        public int AssetImportV3(AssetImportV3 assetImport)
        {
            Model.Asset asset = null;
            Model.CostCenter costCenter = null;
            Model.Room room = null;
            Model.Employee employee = null;
            Model.InventoryAsset inventoryAsset = null;
            Model.Inventory inventory = null;
            Model.Location location = null;
            bool saveAsset = false;
            bool saveInventoryAsset = false;

            string codeDefault = "_NSP";
            string nameDefault = "_Nespecificat";

            string costCenterCode = assetImport.CostCenterCode != null && assetImport.CostCenterCode.Trim().Length > 0
                ? assetImport.CostCenterCode.Trim() : codeDefault;
            string costCenterName = assetImport.CostCenterName != null && assetImport.CostCenterName.Trim().Length > 0
                ? assetImport.CostCenterName.Trim() : codeDefault;

            costCenter = _context.Set<Model.CostCenter>().Where(a => a.Code == costCenterCode).FirstOrDefault();
            if (costCenter == null)
            {
                costCenter = new Model.CostCenter();
                costCenter.Code = costCenterCode;
                costCenter.Name = costCenterName;
                costCenter.AdmCenter = null;
                costCenter.IsDeleted = false;
                _context.Set<Model.CostCenter>().Add(costCenter);
            }

            string regionCode = "BNR";
            Model.Region region = _context.Set<Model.Region>().Where(r => (r.Code == regionCode)).FirstOrDefault();
            if (region == null)
            {
                region = new Model.Region();
                region.Code = regionCode;
                region.Name = regionCode;
                region.IsDeleted = false;
                _context.Set<Model.Region>().Add(region);
            }

            string locationCode = assetImport.LocationCode != null && assetImport.LocationCode.Trim().Length > 0
                            ? assetImport.LocationCode.Trim() : codeDefault;
            string locationName = assetImport.LocationName != null && assetImport.LocationName.Trim().Length > 0
                            ? assetImport.LocationName.Trim() : nameDefault;

            string roomCode = assetImport.RoomCode != null && assetImport.RoomCode.Trim().Length > 0
                            ? assetImport.RoomCode.Trim() : codeDefault;
            string roomName = assetImport.RoomName != null && assetImport.RoomName.Trim().Length > 0
                            ? assetImport.RoomName.Trim() : nameDefault;

            location = _context.Set<Model.Location>().Where(l => (l.RegionId == region.Id) && (l.Code == locationCode)).FirstOrDefault();

            if (location == null)
            {
                location = new Model.Location();
                location.Code = locationCode;
                location.Name = locationName;
                location.IsDeleted = false;
                location.Region = region;
                _context.Set<Model.Location>().Add(location);
            }
            else
            {
                room = _context.Set<Model.Room>().Where(r => ((r.LocationId == location.Id) && (r.Code == roomCode))).FirstOrDefault();
            }

            if (room == null)
            {
                room = new Model.Room();
                room.Code = roomCode;
                room.Name = roomName;
                room.Location = location;
                room.IsDeleted = false;
                _context.Set<Model.Room>().Add(room);
            }

            string internalCode = assetImport.InternalCode != null && assetImport.InternalCode.Trim().Length > 0
                ? assetImport.InternalCode.Trim() : codeDefault;
            employee = _context.Set<Model.Employee>().Where(e => e.InternalCode == internalCode).FirstOrDefault();

            if (employee == null)
            {
                employee = new Model.Employee();

                string firstName = assetImport.FirstName != null && assetImport.FirstName.Trim().Length > 0
                    ? assetImport.FirstName.Trim() : nameDefault;
                string lastName = assetImport.LastName != null && assetImport.LastName.Trim().Length > 0
                    ? assetImport.LastName.Trim() : nameDefault;

                employee.InternalCode = internalCode;
                employee.FirstName = firstName;
                employee.LastName = lastName;
                employee.IsDeleted = false;

                _context.Set<Model.Employee>().Add(employee);
            }

            string assetTypeCode = assetImport.AssetType.Trim();
            Model.AssetType assetType = _context.Set<Model.AssetType>().Where(a => (a.Code == assetTypeCode)).FirstOrDefault();

            if (assetType == null)
            {
                assetType = new Model.AssetType();
                assetType.Code = assetTypeCode;
                assetType.Name = assetTypeCode;
                assetType.IsDeleted = false;
                _context.Set<Model.AssetType>().Add(assetType);
            }

            string assetStateCode = assetImport.AssetState.Trim();
            Model.AssetState assetState = _context.Set<Model.AssetState>().Where(a => (a.Code == assetStateCode)).FirstOrDefault();

            if (assetState == null)
            {
                assetState = new Model.AssetState();
                assetState.Code = string.Empty;
                assetState.Name = assetStateCode;
                assetState.IsDeleted = false;
                _context.Set<Model.AssetState>().Add(assetState);
            }

            string assetCategoryCode = assetImport.AssetCategory.Trim();
            Model.AssetCategory assetCategory = _context.Set<Model.AssetCategory>().Where(a => (a.Code == assetCategoryCode)).FirstOrDefault();

            if (assetCategory == null)
            {
                assetCategory = new Model.AssetCategory();
                assetCategory.Code = assetCategoryCode;
                assetCategory.Name = assetCategoryCode;
                assetCategory.IsDeleted = false;
                _context.Set<Model.AssetCategory>().Add(assetCategory);
            }

            inventory = _context.Set<Model.Inventory>().Where(i => !i.IsDeleted && i.Active).OrderByDescending(i => i.Id).FirstOrDefault();

            //asset = _context.Set<Model.Asset>().Where(a => a.InvNo == assetImport.InvNo).FirstOrDefault();

            if (asset == null) //nu exista in bd, asset nou
            {
                asset = new Model.Asset()
                {
                    InvNo = assetImport.InvNo
                };

                _context.Add(asset);

                inventoryAsset = new Model.InventoryAsset()
                {
                    Asset = asset,
                    Inventory = inventory
                };
                _context.Add(inventoryAsset);

                saveAsset = true;
                saveInventoryAsset = true;
            }
            else
            {
                //saveAsset = (asset.Name != assetImport.Name) || (asset.SerialNumber != serialNumber) || (asset.ValueInv != assetImport.ValueInv)
                //    || (asset.ValueInv - asset.ValueRem != assetImport.ValueDep) || (asset.EmployeeId != employee.Id) || (asset.CostCenterId != costCenter.Id)
                //    || (asset.RoomId != room.Id) || (asset.UomId != uom.Id);

                //inventoryAsset = _context.Set<Model.InventoryAsset>().Where(a => ((a.InventoryId == inventory.Id) && (a.AssetId == asset.Id))).SingleOrDefault();

                //if (inventoryAsset == null)
                //{
                //    inventoryAsset = new Model.InventoryAsset()
                //    {
                //        Asset = asset,
                //        Inventory = inventory
                //    };
                //    _context.Add(inventoryAsset);
                //    saveInventoryAsset = true;
                //}
                //else
                //{
                //    saveInventoryAsset = saveAsset;
                //}
            }

            if (saveAsset)
            {
                asset.Name = assetImport.Name;
                asset.PurchaseDate = assetImport.PurchaseDate;
                asset.CostCenter = costCenter;
                asset.Room = room;
                asset.Employee = employee;
                asset.AssetType = assetType;
                asset.AssetState = assetState;
                asset.AssetCategory = assetCategory;
                asset.ValueInv = assetImport.ValueInv;
                asset.ValueRem = assetImport.ValueRem;
                asset.Quantity = assetImport.Quantity;
                asset.ERPCode = "";
                asset.Validated = true;
            }

            if (saveInventoryAsset)
            {
                inventoryAsset.QInitial = assetImport.Quantity;
                inventoryAsset.QFinal = assetImport.Quantity;
                inventoryAsset.EmployeeInitial = employee;
                inventoryAsset.EmployeeFinal = null;
                inventoryAsset.RoomInitial = room;
                inventoryAsset.RoomFinal = null;
                inventoryAsset.CostCenterInitial = costCenter;
                inventoryAsset.CostCenterFinal = null;
            }

            _context.SaveChanges();

            return asset.Id;
        }

        //public AssetDetail GetAssetDetail(int assetId)
        //{
        //        AssetDetail assetDetail = new AssetDetail();

        //        Model.Asset asset = _context.Set<Model.Asset>().Where(a => a.Id == assetId).SingleOrDefault();

        //        if (asset == null) return null;

        //        assetDetail.Id = asset.Id;
        //        assetDetail.InvNo = asset.InvNo;
        //        assetDetail.Name = asset.Name;
        //        assetDetail.ERPCode = asset.ERPCode;
        //        assetDetail.SerialNumber = asset.SerialNumber;
        //        assetDetail.Validated = asset.Validated;
        //        assetDetail.PurchaseDate = asset.PurchaseDate;
        //        assetDetail.ValueInv = asset.ValueInv;

        //        if (asset.AssetStateId != null)
        //        {
        //            var state = _context.Set<Model.AssetState>()
        //                .Where(a => a.Id == asset.AssetStateId)
        //                .Select(a => new
        //                {
        //                    Id = a.Id,
        //                    Name = a.Name
        //                }).Single();

        //            assetDetail.AssetStateId = state.Id;
        //            assetDetail.AssetState = state.Name;
        //        }

        //        if (asset.AssetTypeId != null)
        //        {
        //            var assetType = _context.Set<Model.AssetType>()
        //                .Where(a => a.Id == asset.AssetTypeId)
        //                .Select(a => new
        //                {
        //                    Id = a.Id,
        //                    Name = a.Name
        //                }).Single();

        //            assetDetail.AssetTypeId = assetType.Id;
        //            assetDetail.AssetState = assetType.Name;
        //        }

        //        if (asset.CostCenterId != null)
        //        {
        //            var costCenter = _context.Set<Model.CostCenter>()
        //                .Where(c => c.Id == asset.CostCenterId)
        //                .Select(c => new
        //                {
        //                    Id = c.Id,
        //                    Code = c.Code,
        //                    Name = c.Name
        //                }).Single();

        //            assetDetail.CostCenterId = costCenter.Id;
        //            assetDetail.CostCenterCode = costCenter.Code;
        //            assetDetail.CostCenterName = costCenter.Name;
        //        }

        //        if (asset.AssetCategoryId != null)
        //        {
        //            var assetCategory = _context.Set<Model.AssetCategory>()
        //                .Where(a => a.Id == asset.AssetCategoryId)
        //                .Select(a => new
        //                {
        //                    Id = a.Id,
        //                    Code = a.Code,
        //                    Name = a.Name
        //                }).Single();

        //            assetDetail.AssetCategoryId = assetCategory.Id;
        //            assetDetail.AssetCategory = assetCategory.Name;
        //        }

        //        if (asset.EmployeeId != null)
        //        {
        //            var employee = _context.Set<Model.Employee>()
        //                .Where(e => e.Id == asset.EmployeeId)
        //                .Select(e => new
        //                {
        //                    Id = e.Id,
        //                    InternalCode = e.InternalCode,
        //                    FirstName = e.FirstName,
        //                    LastName = e.LastName,
        //                    DepartmentId = e.DepartmentId
        //                }).Single();

        //            assetDetail.EmployeeId = employee.Id;
        //            assetDetail.InternalCode = employee.InternalCode;
        //            assetDetail.FirstName = employee.FirstName;
        //            assetDetail.LastName = employee.LastName;

        //            var department = _context.Set<Model.Department>()
        //                .Where(d => d.Id == employee.DepartmentId)
        //                .Select(d => new
        //                {
        //                    Id = d.Id,
        //                    Name = d.Name
        //                }).SingleOrDefault();

        //            if (department != null)
        //            {
        //                assetDetail.DepartmentId = department.Id;
        //                assetDetail.Department = department.Name;
        //            }
        //        }

        //        if (asset.RoomId != null)
        //        {
        //            Model.Room room = _context.Set<Model.Room>().Where(r => r.Id == asset.RoomId).Single();
        //            assetDetail.RoomId = room.Id;
        //            assetDetail.RoomCode = room.Code;
        //            assetDetail.RoomName = room.Name;

        //            Model.Location location = _context.Set<Model.Location>().Where(l => l.Id == room.LocationId).Single();
        //            assetDetail.LocationId = location.Id;
        //            assetDetail.LocationCode = location.Code;
        //            assetDetail.LocationName = location.Name;
        //        }

        //        Model.AssetInv assetInv = _context.Set<Model.AssetInv>().Where(a => a.AssetId == assetId).SingleOrDefault();
        //        //Model.AssetInv assetInv = _context.Set<Model.AssetInv>().Where(a => a.Id == assetId).SingleOrDefault();
        //        if (assetInv != null)
        //        {
        //            assetDetail.InvNoOld = assetInv.InvNoOld;
        //            assetDetail.InvName = assetInv.InvName;
        //            assetDetail.Info = assetInv.Info;
        //        }

        //        if (asset.DocumentId.HasValue)
        //        {
        //            Model.Document document = _context.Set<Model.Document>().Where(d => d.Id == asset.DocumentId.Value).Single();
        //            Model.DocumentType documentType = _context.Set<Model.DocumentType>().Where(dt => dt.Id == document.DocumentTypeId).Single();
        //            Model.Partner partner = _context.Set<Model.Partner>().Where(p => p.Id == document.PartnerId).Single();

        //            assetDetail.DocumentId = document.Id;
        //            assetDetail.DocNo1 = document.DocNo1;
        //            assetDetail.DocNo2 = document.DocNo2;
        //            assetDetail.DocumentDate = document.DocumentDate;
        //            assetDetail.DocumentTypeId = documentType.Id;
        //            assetDetail.DocumentType = documentType.Name;
        //            assetDetail.PartnerId = partner.Id;
        //            assetDetail.Partner = partner.Name;
        //        }

        //        Model.AssetDep assetDep = _context.Set<Model.AssetDep>().Where(a => a.AssetId == assetId).FirstOrDefault();
        //        if (assetDep != null)
        //        {
        //            assetDetail.UsageStartDate = assetDep.UsageStartDate;
        //            assetDetail.ValueInv = assetDep.ValueInv;
        //            assetDetail.DepPeriod = assetDep.DepPeriod;
        //            assetDetail.ValueRem = assetDep.ValueRem;
        //            assetDetail.DepPeriodRem = assetDep.DepPeriodRem;
        //            assetDetail.ValueDepPU = assetDep.ValueDepPU;
        //            assetDetail.DepPeriodMonth = assetDep.DepPeriodMonth;
        //            assetDetail.ValueDep = assetDep.ValueDep;
        //            assetDetail.ValueDepYTD = assetDep.ValueDepYTD;
        //        }

        //        Model.AssetAC assetAC = _context.Set<Model.AssetAC>().Where(a => a.AssetId == assetId).FirstOrDefault();
        //        if (assetAC != null)
        //        {
        //            var assetClass = _context.Set<Model.AssetClass>()
        //                .Where(a => a.Id == assetAC.AssetClassId)
        //                .Select(c => new
        //                {
        //                    Id = c.Id,
        //                    Code = c.Code,
        //                    Name = c.Name
        //                }).Single();

        //            assetDetail.AssetClassId = assetClass.Id;
        //            assetDetail.AssetClassCode = assetClass.Code;
        //            assetDetail.AssetClassName = assetClass.Name;
        //        }

        //        return assetDetail;
        //    }

        public IEnumerable<AssetDepDetail> GetDepDetails(Paging paging, Sorting sorting,
            AssetFilter assetFilter, out Dto.AssetDepTotal assetDepTotal)
        {
            assetDepTotal = null;
            return null;

            //IQueryable<Dto.AssetDepDetail> query = null;
            //IQueryable<Model.Asset> assets = _context.Set<Model.Asset>().AsQueryable();
            //IQueryable<Model.AssetDep> assetDeps = _context.Set<Model.AssetDep>().AsQueryable();
            //IQueryable<Model.AssetDepMD> assetDepMDs = _context.Set<Model.AssetDepMD>().AsQueryable();
            //IQueryable<Model.AssetAC> assetACs = _context.Set<Model.AssetAC>().AsQueryable();
            //IQueryable<Model.AssetClass> assetClasses = _context.Set<Model.AssetClass>().AsQueryable();
            //IQueryable<Model.AssetState> assetStates = _context.Set<Model.AssetState>().AsQueryable();
            //IQueryable<Model.AssetType> assetTypes = _context.Set<Model.AssetType>().AsQueryable();
            //IQueryable<Model.Document> documents = _context.Set<Model.Document>().AsQueryable();
            //IQueryable<Model.Partner> partners = _context.Set<Model.Partner>().AsQueryable();
            //IQueryable<Model.CostCenter> costCenters = _context.Set<Model.CostCenter>().AsQueryable();


            //if ((assetFilter.AssetTypeIds != null) && (assetFilter.AssetTypeIds.Count > 0))
            //    assetTypes = assetTypes.Where(a => assetFilter.AssetTypeIds.Contains(a.Id));
            //if ((assetFilter.AssetStateIds != null) && (assetFilter.AssetStateIds.Count > 0))
            //    assetStates = assetStates.Where(a => assetFilter.AssetStateIds.Contains(a.Id));
            //if ((assetFilter.AssetClassIds != null) && (assetFilter.AssetClassIds.Count > 0))
            //    assetClasses = assetClasses.Where(a => assetFilter.AssetClassIds.Contains(a.Id));
            //if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
            //    costCenters = costCenters.Where(c => assetFilter.CostCenterIds.Contains(c.Id));
            //if ((assetFilter.PartnerIds != null) && (assetFilter.PartnerIds.Count > 0))
            //    partners = partners.Where(p => assetFilter.PartnerIds.Contains(p.Id));

            //assetDepMDs = assetDepMDs.Where(a => a.AccMonthId == assetFilter.AccMonthId);

            //query =
            //    from asset in assets
            //    join assetDep in assetDeps on asset.Id equals assetDep.AssetId
            //    join assetMonthlyDep in assetDepMDs on asset.Id equals assetMonthlyDep.AssetId
            //    join assetState in assetStates on asset.AssetStateId equals assetState.Id
            //    join assetType in assetTypes on asset.AssetTypeId equals assetType.Id
            //    join assetAC in assetACs on asset.Id equals assetAC.AssetId
            //    join assetClass in assetClasses on assetAC.AssetClassId equals assetClass.Id
            //    join document in documents on asset.DocumentId equals document.Id
            //    join partner in partners on document.PartnerId equals partner.Id

            //    //query =
            //    //    from asset in assets
            //    //    join assetDep in assetDeps on asset.Id equals assetDep.AssetId into assetDepsAll
            //    //    from assetDep in assetDepsAll.DefaultIfEmpty()
            //    //    join accState in accStates on assetDep.AccStateId equals accState.Id into accStatesAll
            //    //    from accState in accStatesAll.DefaultIfEmpty()
            //    //    join assetType in assetTypes on accState.AssetTypeId equals assetType.Id into assetTypesAll
            //    //    from assetType in assetTypesAll.DefaultIfEmpty()
            //    //    join assetAC in assetACs on asset.Id equals assetAC.AssetId into assetACsAll
            //    //    from assetAC in assetACsAll.DefaultIfEmpty()
            //    //    join assetClass in assetClasses on assetAC.AssetClassId equals assetClass.Id into assetClassesAll
            //    //    from assetClass in assetClassesAll.DefaultIfEmpty()
            //    //    join document in documents on asset.DocumentId equals document.Id into documentsAll
            //    //    from document in documentsAll.DefaultIfEmpty()
            //    //    join partner in partners on document.PartnerId equals partner.Id into partnersAll
            //    //    from partner in partnersAll.DefaultIfEmpty()

            //    select new Dto.AssetDepDetail()
            //    {
            //        //Id = asset.Id,
            //        //InvNo = asset.InvNo,
            //        //Name = asset.Name,
            //        //UsageStartDate = assetDep.UsageStartDate,

            //        //AssetTypeId = assetType.Id,
            //        //AssetType = assetType.Name,
            //        //AssetStateId = assetState.Id,
            //        //AssetState = assetState.Name,
            //        //AssetClassId = assetAC.AssetClassId,
            //        //AssetClassCode = assetClass.Code,
            //        //AssetClassName = assetClass.Name,

            //        //DocumentId = asset.DocumentId,
            //        //DocNo1 = document.DocNo1,
            //        //DocNo2 = document.DocNo2,
            //        //PartnerId = document.PartnerId,
            //        //Partner = partner.Name,

            //        ValueInv = assetMonthlyDep.ValueInv,
            //        DepPeriod = assetMonthlyDep.DepPeriod,
            //        ValueRem = assetMonthlyDep.ValueRem,
            //        DepPeriodRem = assetMonthlyDep.DepPeriodRem,
            //        ValueDepPU = assetMonthlyDep.ValueDepPU,
            //        DepPeriodMonth = assetMonthlyDep.DepPeriodMonth,
            //        ValueDep = assetMonthlyDep.ValueDep,
            //        ValueDepYTD = assetMonthlyDep.ValueDepYTD
            //    };

            //if (assetFilter.Filter != null) query = query.Where(a => (a.InvNo.Contains(assetFilter.Filter)
            //    || a.Name.Contains(assetFilter.Filter) || a.DocNo1.Contains(assetFilter.Filter) || a.AssetClassCode.Contains(assetFilter.Filter)));

            ////count = query.Count();
            //var qTotal = from q in query
            //             group q by 0 into t
            //             select new AssetDepTotal()
            //             {
            //                 Count = t.Count(),
            //                 ValueInv = t.Sum(q => q.ValueInv),
            //                 ValueRem = t.Sum(q => q.ValueRem),
            //                 ValueDep = t.Sum(q => q.ValueDep),
            //                 ValueDepYTD = t.Sum(q => q.ValueDepYTD)
            //             };
            //assetDepTotal = qTotal.SingleOrDefault();

            //if (assetDepTotal == null) assetDepTotal = new AssetDepTotal();

            //if (sorting != null)
            //{
            //    query = sorting.Direction.ToLower() == "asc"
            //        ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<Dto.AssetDepDetail>(sorting.Column))
            //        : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<Dto.AssetDepDetail>(sorting.Column));
            //}

            //if (paging != null)
            //{
            //    query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
            //}

            //return query.ToList();
        }

        private IQueryable<Model.Asset> GetAssetQuery(string includes)
        {
            IQueryable<Model.Asset> query = null;
            query = _context.Assets.AsNoTracking();

            if (includes != null)
            {
                foreach (var includeProperty in includes.Split
                    (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                {
                    query = query.Include(includeProperty);
                }
            }
            else
            {
                query = query
                    .Include(a => a.Document)
                        .ThenInclude(d => d.DocumentType)
                    .Include(a => a.AssetCategory)
                    
                    .Include(a => a.Uom)
                    .Include(a => a.CostCenter)
                        .ThenInclude(c => c.Division)
                            .ThenInclude(c => c.Department)
                    .Include(a => a.CostCenter)
                        .ThenInclude(c => c.Room)
                            .ThenInclude(r => r.Location)
                                .ThenInclude(c => c.City)
                                    .ThenInclude(c => c.County)
                                        .ThenInclude(c => c.Country)
                    .Include(a => a.CostCenter)
                        .ThenInclude(c => c.Administration)
                    .Include(a => a.BudgetManager)
                    .Include(a => a.AssetNature)
                    .Include(a => a.SubType)
                        .ThenInclude(a => a.Type)
                    .Include(a => a.Employee)
                    .Include(a => a.Material)
                    .Include(a => a.Company)
                    .Include(a => a.CostCenter)
                        .ThenInclude(c => c.AdmCenter)
                   .Include(a => a.CostCenter)
                        .ThenInclude(c => c.Region)
                    .Include(a => a.AssetType)
                    .Include(a => a.Project)
                    .Include(a => a.Order)
                    .Include(a => a.InvState)
                    .Include(a => a.AssetState)
                    .Include(a => a.Tax)
                    .Include(a => a.Rate).ThenInclude(u => u.Uom)
                    .Include(a => a.Request)
                    .Include(a => a.DictionaryItem);
                //.Include(a => a.AssetDepMDs);

             
            }

            return query;
        }

        public Model.Asset GetDetailsById(int assetId, string includes)
        {
            IQueryable<Model.Asset> query = null;
            query = GetAssetQuery(includes);

            return query.Where(a => a.Id == assetId)

                //.Include(ac => ac.AssetCategory)
                //.Include(ac => ac.Company)
                //.Include(ac => ac.Department)
                //.Include(ac => ac.Uom)
                //.Include(ac => ac.Order)
                //.Include(ac => ac.Dimension)
                .Include(p => p.Document)
                    .ThenInclude(p => p.Partner)
                        .ThenInclude(p => p.PartnerLocation)
                //.Include(ast => ast.InvState)
                //.Include(ast => ast.AssetInv)
                //.Include(adm => adm.Administration)
                .Include(dep => dep.AssetDeps)
                .Include(dep => dep.AssetDepMDs)
                .Include(e => e.Error).ThenInclude(e => e.ErrorType)
                .SingleOrDefault();
                //.Where(a => a.AssetDepMDs.Any(a => a.AccMonthId == 47))
                //.Where(a => a.AssetAdmMDs.Any(a => a.AccMonthId == 47))
                //.Include(dep => dep.AssetAdmMDs)
                //.Where(a => a.AssetDepMDs)
                //.ToList().Where(a => a.AssetDepMDs.FirstOrDefault(a => a.AccMonthId == 47));
        }

        //public IEnumerable<AssetDetail> GetDep(AssetFilter assetFilter, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
        //{
        //    IQueryable<AssetDetail> query = null;
        //    var assetQuery = _context.Assets.AsQueryable();

        //    int? accSystemId = assetFilter.AccSystemId;

        //    if (!accSystemId.HasValue || accSystemId.Value <= 0)
        //    {
        //        Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
        //        if (accSystem != null) accSystemId = accSystem.Id;
        //    }

        //    //if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
        //    //{
        //    //    query = query.Where(a => assetFilter.EmployeeIds.Contains(a.Adm.EmployeeId));
        //    //}



        //    //if ((assetFilter.RoomIds != null) && (assetFilter.RoomIds.Count > 0))
        //    //{
        //    //    query = query.Where(a => assetFilter.RoomIds.Contains(a.Adm.RoomId) && a.Adm.AccMonthId == accSystemId);
        //    //}
        //    //else
        //    //{
        //    //    if ((assetFilter.LocationIds != null) && (assetFilter.LocationIds.Count > 0))
        //    //    {
        //    //        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetDetail, int?>((id) => { return a => a.Adm.Room.Location.Id == id && a.Adm.AccMonthId == accSystemId; }, assetFilter.LocationIds));
        //    //    }
        //    //    else
        //    //    {
        //    //        if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
        //    //        {
        //    //            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetDetail, int?>((id) => { return a => a.Adm.Room.Location.Region.Id == id && a.Adm.AccMonth.Id == accSystemId; }, assetFilter.RegionIds));
        //    //        }
        //    //    }
        //    //}


        //    //if ((assetFilter.AdministrationIds != null) && (assetFilter.AdministrationIds.Count > 0))
        //    //{

        //    //    query = query.Where(a => assetFilter.AdministrationIds.Contains(a.Adm.AdministrationId) && a.Adm.AccMonthId == accSystemId);
        //    //}

        //    //if ((assetFilter.AssetTypeIds != null) && (assetFilter.AssetTypeIds.Count > 0))
        //    //{

        //    //    query = query.Where(a => assetFilter.AssetTypeIds.Contains(a.Adm.AssetTypeId) && a.Adm.AccMonthId == accSystemId);
        //    //}


        //    //if ((assetFilter.AssetCategoryIds != null) && (assetFilter.AssetCategoryIds.Count > 0))
        //    //{

        //    //    query = query.Where(a => assetFilter.AssetCategoryIds.Contains(a.Adm.AssetCategoryId) && a.Adm.AccMonthId == accSystemId);
        //    //}

        //    //if ((assetFilter.AssetStateIds != null) && (assetFilter.AssetStateIds.Count > 0))
        //    //{

        //    //    query = query.Where(a => assetFilter.AssetStateIds.Contains(a.Adm.AssetStateId) && a.Adm.AccMonthId == accSystemId);
        //    //}

        //    //if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
        //    //{

        //    //    query = query.Where(a => assetFilter.CostCenterIds.Contains(a.Adm.CostCenterId) && a.Adm.AccMonthId == accSystemId);
        //    //}

        //    //if ((assetFilter.DepartmentIds != null) && (assetFilter.DepartmentIds.Count > 0))
        //    //{

        //    //    query = query.Where(a => assetFilter.DepartmentIds.Contains(a.Adm.DepartmentId) && a.Adm.AccMonthId == accSystemId);
        //    //}

        //    var admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => a.AccMonthId == assetFilter.AccMonthId);
        //    var depQuery = _context.AssetDepMDs.AsQueryable().Where(a => ((a.AccMonthId == assetFilter.AccMonthId) && (a.AccSystemId == accSystemId)));
        //    var assetClassQuery = _context.AssetACs.AsQueryable();

        //    if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
        //    {
        //        admQuery = admQuery.Where(a => assetFilter.EmployeeIds.Contains(a.EmployeeId));
        //    }

        //    if ((assetFilter.RoomIds != null) && (assetFilter.RoomIds.Count > 0))
        //    {
        //        admQuery = admQuery.Where(a => assetFilter.RoomIds.Contains(a.RoomId));
        //    }
        //    else
        //    {
        //        if ((assetFilter.LocationIds != null) && (assetFilter.LocationIds.Count > 0))
        //        {
        //            admQuery = admQuery.Where(ExpressionHelper.GetInListPredicate<Model.AssetAdmMD, int?>((id) => { return a => a.Room.Location.Id == id; }, assetFilter.LocationIds));
        //        }
        //        else
        //        {
        //            if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
        //            {
        //                admQuery = admQuery.Where(ExpressionHelper.GetInListPredicate<Model.AssetAdmMD, int?>((id) => { return a => a.Room.Location.Region.Id == id ; }, assetFilter.RegionIds));
        //            }
        //        }
        //    }


        //    if ((assetFilter.AdministrationIds != null) && (assetFilter.AdministrationIds.Count > 0))
        //    {

        //        admQuery = admQuery.Where(a => assetFilter.AdministrationIds.Contains(a.AdministrationId));
        //    }

        //    if ((assetFilter.AssetTypeIds != null) && (assetFilter.AssetTypeIds.Count > 0))
        //    {

        //        admQuery = admQuery.Where(a => assetFilter.AssetTypeIds.Contains(a.AssetTypeId));
        //    }


        //    if ((assetFilter.AssetCategoryIds != null) && (assetFilter.AssetCategoryIds.Count > 0))
        //    {

        //        admQuery = admQuery.Where(a => assetFilter.AssetCategoryIds.Contains(a.AssetCategoryId));
        //    }

        //    if ((assetFilter.AssetStateIds != null) && (assetFilter.AssetStateIds.Count > 0))
        //    {

        //        admQuery = admQuery.Where(a => assetFilter.AssetStateIds.Contains(a.AssetStateId));
        //    }

        //    if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
        //    {

        //        admQuery = admQuery.Where(a => assetFilter.CostCenterIds.Contains(a.CostCenterId));
        //    }

        //    if ((assetFilter.DepartmentIds != null) && (assetFilter.DepartmentIds.Count > 0))
        //    {

        //        admQuery = admQuery.Where(a => assetFilter.DepartmentIds.Contains(a.DepartmentId));
        //    }

        //    bool joinAdm = true;
        //    bool joinDep = true;
        //    bool joinAssetClass = false;

        //    includes = includes ?? string.Empty;

        //    foreach (var includeProperty in includes.Split
        //                (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
        //    {
        //        int dotIndex = includeProperty.IndexOf(".");
        //        string prefix = string.Empty;
        //        string property = string.Empty;

        //        if (dotIndex > 0)
        //        {
        //            prefix = includeProperty.Substring(0, dotIndex);
        //            property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
        //        }
        //        else
        //        {
        //            prefix = includeProperty;
        //        }

        //        //prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

        //        switch (prefix)
        //        {
        //            case "Asset":
        //                assetQuery = assetQuery.Include(property);
        //                break;
        //            case "Dep":
        //                if (property.Length > 0) depQuery = depQuery.Include(property);
        //                joinDep = true;
        //                break;
        //            case "Adm":
        //                if (property.Length > 0) admQuery = admQuery.Include(property);
        //                joinAdm = true;
        //                break;
        //            case "AssetClass":
        //                if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
        //                joinAssetClass = true;
        //                break;
        //            default:
        //                break;
        //        }
        //    }

        //    //var adms = _context.AssetAdmMDs
        //    //    .Include(a => a.Employee)
        //    //    .Include(a => a.CostCenter).ThenInclude(a => a.AdmCenter)
        //    //    .Include(a => a.Room).ThenInclude(a => a.Location).ThenInclude(a => a.Region)
        //    //    .Where(a => a.AccMonthId == 1);

        //    //var deps = _context.AssetDepMDs
        //    //    .Include(d => d.CostCenter)
        //    //    .Include(d => d.AssetState)
        //    //    .Where(d => d.AccMonthId == 1);

        //    //var acs = _context.AssetACs
        //    //    .Include(a => a.AssetClass)
        //    //    .Where(a => a.AssetClassTypeId == 1);

        //    //var result = _context.Assets
        //    //    .Join(adms, asset => asset.Id, adm => adm.AssetId, (asset, adm) => new { Asset = asset, Adm = adm })
        //    //    .Join(deps, assetAdm => assetAdm.Asset.Id, dep => dep.AssetId, (assetAdm, dep) => new { Asset = assetAdm.Asset, AssetAdm = assetAdm.Adm, AssetDep = dep });
        //    ////.OrderBy(t => t.AssetAdm.Employee.InternalCode).Skip(100).Take(100).ToList();

        //    query = assetQuery.Select(asset => new AssetDetail { Asset = asset });

        //    if (joinAdm)
        //    {
        //        query = query
        //            .Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetDetail { Asset = q.Asset, Adm = adm, Dep = null });
        //    }

        //    if (joinDep)
        //    {
        //        query = query
        //            .Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
        //    }

        //    //var qTotal = from q in query
        //    //             group q by 0 into t
        //    //             select new AssetDepTotal()
        //    //             {
        //    //                 Count = t.Count(),
        //    //                 ValueInv = t.Sum(q => q.Dep.ValueInv),
        //    //                 ValueRem = t.Sum(q => q.Dep.ValueRem),
        //    //                 ValueDep = t.Sum(q => q.Dep.ValueDep),
        //    //                 ValueDepYTD = t.Sum(q => q.Dep.ValueDepYTD)
        //    //             };
        //    //depTotal = qTotal.SingleOrDefault();

        //    //depTotal = query.GroupBy(a => 0).Select(a => new AssetDepTotal()
        //    //{
        //    //    Count = a.Count(),
        //    //    ValueInv = a.Sum(b => b.Asset.ValueInv)
        //    //}).SingleOrDefault();
        //    //if (depTotal == null) depTotal = new AssetDepTotal();

        //    depTotal = new AssetDepTotal();
        //    depTotal.Count = query.Count();
        //    depTotal.ValueInv = query.Sum(a => a.Dep.ValueInv);
        //    depTotal.ValueRem = query.Sum(a => a.Dep.ValueRem);
        //    depTotal.ValueDep = query.Sum(a => a.Dep.ValueDep);
        //    depTotal.ValueDepYTD = query.Sum(a => a.Dep.ValueDepYTD);
        //    depTotal.ValueInitial = query.Sum(a => a.Asset.ValueInv);

        //    //var result = _context.Assets
        //    //    .Join(adms, asset => asset.Id, adm => adm.AssetId, (asset, adm) => new { Asset = asset, Adm = adm })
        //    //    .Join(deps, assetAdm => assetAdm.Asset.Id, dep => dep.AssetId, (assetAdm, dep) => new AssetFullDetail { Asset = assetAdm.Asset, Adm = assetAdm.Adm, Dep = dep });

        //    if (sorting != null)
        //    {
        //        query = sorting.Direction.ToLower() == "asc"
        //            ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetDetail>(sorting.Column))
        //            : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetDetail>(sorting.Column));
        //    }

        //    if (paging != null)
        //        query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
        //    var list = query.ToList();

        //    return list;


        //    //var t1 = _context.Assets
        //    //        .Join(_context.AssetAdmMDs.Include(a => a.Employee).Where(a => a.AccMonthId == 1), a => a.Id, adm => adm.AssetId, (asset, adm) => new { AssetId = asset.Id, InternalCode = adm.Employee.InternalCode })
        //    //        .Join(_context.AssetDepMDs.Where(a => a.AccMonthId == 1), asset => asset.AssetId, dep => dep.AssetId, (asset, dep) => new { asset, dep })
        //    //        .OrderBy(a => a.asset.InternalCode).Skip(10).Take(10).ToList();

        //    //IQueryable<Dto.Asset> query = null;
        //    //IQueryable<Model.Asset> assetsQuery = _context.Assets; // GetAssetQuery(null);

        //    //var list2 = assetsQuery.Include(a => a.AssetAdmMDs).Include(a => a.AssetDepMDs)
        //    //    .Where(a => a.AssetAdmMDs.Any(b => b.AccMonthId == 1) && a.AssetDepMDs.Any(c => c.AccMonthId == 1)).OrderBy(a => a.Id).Skip(100).Take(10).ToList();

        //    //List<int> assetIds = _context.AssetAdmMDs.Where(a1 => a1.AccMonthId == 1).OrderBy(a1 => a1.Employee.InternalCode).Skip(5).Take(5).Select(a3 => a3.AssetId).ToList();

        //    ////IQueryable<Model.AssetAdmMD> assetAdmQuery = _context.AssetAdmMDs.Include(a => a.Employee).Include(a => a.Room).ThenInclude(a => a.Location)
        //    ////    .OrderBy(a => a.Room.Location.Name).Skip(5).Take(5);

        //    //var assetAdmQuery = _context.AssetAdmMDs.Include(a => a.Employee).Where(a => a.EmployeeId <= 5000);
        //    ////_context.AssetAdmMDs.Where(a => a.AccMonthId == 1)
        //    ////.Join(_context.Employees, a => a.EmployeeId, employee => employee.Id, (assetAdm, employee) => new { AssetId = assetAdm.AssetId, InternalCode = employee.InternalCode });

        //    //var t = _context.Assets
        //    //        .Join(assetAdmQuery.Where(a2 => a2.AccMonthId == 1).OrderBy(a1 => a1.Employee.InternalCode).Skip(5).Take(5), a => a.Id, adm => adm.AssetId, (asset, adm) => asset)
        //    //        .Join(_context.AssetDepMDs.Where(a => a.AccMonthId == 1)
        //    //                , a => a.Id, assetDep => assetDep.AssetId, (asset, assetDep) => asset)
        //    //        ;
        //    ////var list = t.OrderBy(a => a.adm.Employee.InternalCode).Skip(5).Take(5).ToList();
        //    //var list = t.ToList();
        //    //int i = list.Count();

        //    //.Select(a => new
        //    //{
        //    //    InvNo = a.asset.InvNo,
        //    //    Name = a.asset.Name,
        //    //    //Room = new CodeNameEntity() { Code = a.asset.Room.Code, Name = a.asset.Room.Name },
        //    //    //Employee = new CodeNameEntity() { Code = a.asset.Employee.InternalCode, Name = a.asset.Employee.FirstName },
        //    //    ValueInv = a.dep.ValueInv,
        //    //    ValueRem = a.dep.ValueRem,
        //    //    ValueDep = a.dep.ValueDep,
        //    //    ValueDepYTD = a.dep.ValueDepYTD,
        //    //    InternalCode = a.adm.Employee.InternalCode
        //    //}).OrderBy(a => a.InternalCode).Skip(5).Take(5).ToList();

        //    //return query;
        //}

        //public IEnumerable<AssetDetail> Get(AssetFilter assetFilter, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
        //{
        //    IQueryable<Model.Asset> assetQuery = null;
        //    IQueryable<AssetAdmMD> admMDQuery = null;
        //    IQueryable<AssetDep> depQuery = null;
        //    IQueryable<AssetDepMD> depMDQuery = null;
        //    IQueryable<AssetAC> assetClassQuery = null;
        //    IQueryable<AssetDetail> query = null;
        //    bool monthDetails = assetFilter.AccMonthId.GetValueOrDefault() > 0;




        //    assetQuery = _context.Assets.AsQueryable();

        //    int? accSystemId = assetFilter.AccSystemId;

        //    if (!accSystemId.HasValue || accSystemId.Value <= 0)
        //    {
        //        Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
        //        if (accSystem != null) accSystemId = accSystem.Id;
        //    }

        //    admMDQuery = _context.AssetAdmMDs.AsQueryable().Where(a => a.AccMonthId == assetFilter.AccMonthId);
        //    Console.WriteLine(admMDQuery.Count());
        //    depQuery = _context.AssetDeps.AsQueryable().Where(a => a.AccSystemId == accSystemId);
        //    Console.WriteLine(depQuery.Count());
        //    depMDQuery = _context.AssetDepMDs.AsQueryable().Where(a => ((a.AccMonthId == assetFilter.AccMonthId) && (a.AccSystemId == accSystemId)));
        //    Console.WriteLine(depMDQuery.Count());
        //    assetClassQuery = _context.AssetACs.AsQueryable();

        //    if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
        //    if (assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter)));



        //    bool joinAdmMD = false;
        //    bool joinDep = true;
        //    bool joinDepMD = false;
        //    bool joinAssetClass = false;

        //    includes = includes ?? string.Empty;

        //    foreach (var includeProperty in includes.Split
        //                (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
        //    {
        //        int dotIndex = includeProperty.IndexOf(".");
        //        string prefix = string.Empty;
        //        string property = string.Empty;

        //        if (dotIndex > 0)
        //        {
        //            prefix = includeProperty.Substring(0, dotIndex);
        //            property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
        //        }
        //        else
        //        {
        //            prefix = includeProperty;
        //        }

        //        //prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

        //        switch (prefix)
        //        {
        //            case "Asset":
        //                if (property.Length > 0) assetQuery = assetQuery.Include(property);
        //                break;
        //            case "Dep":
        //                if (monthDetails)
        //                {
        //                    if (property.Length > 0) depMDQuery = depMDQuery.Include(property);
        //                    joinDepMD = true;
        //                }
        //                else
        //                {
        //                    if (property.Length > 0) depQuery = depQuery.Include(property);
        //                    joinDep = true;
        //                }
        //                break;
        //            case "Adm":
        //                if (monthDetails)
        //                {
        //                    if (property.Length > 0) admMDQuery = admMDQuery.Include(property);
        //                    joinAdmMD = true;
        //                }
        //                else
        //                {
        //                    if (property.Length > 0) assetQuery = assetQuery.Include(property);
        //                }
        //                break;
        //            case "AssetClass":
        //                if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
        //                joinAssetClass = true;
        //                break;
        //            default:
        //                break;
        //        }
        //    }

        //    if (joinDepMD) joinDep = false;

        //    if ((assetFilter.AssetTypeIds != null) && (assetFilter.AssetTypeIds.Count > 0))
        //    {
        //        if (joinAdmMD)
        //        {
        //            admMDQuery = admMDQuery.Where(a => assetFilter.AssetTypeIds.Contains(a.AssetTypeId));
        //        }
        //        else
        //        {
        //            assetQuery = assetQuery.Where(a => assetFilter.AssetTypeIds.Contains(a.AssetTypeId));
        //        }
        //    }



        //    if ((assetFilter.AssetStateIds != null) && (assetFilter.AssetStateIds.Count > 0))
        //    {
        //        if (joinAdmMD)
        //        {
        //            admMDQuery = admMDQuery.Where(a => assetFilter.AssetStateIds.Contains(a.AssetStateId));
        //        }
        //        else
        //        {
        //            assetQuery = assetQuery.Where(a => assetFilter.AssetStateIds.Contains(a.AssetStateId));
        //        }
        //    }

        //    //if (assetFilter.FilterPurchaseDate != "false")
        //    //{


        //    //    var monthYear = DateTime.ParseExact(assetFilter.FilterPurchaseDate,
        //    //                      "yyyy-MM-dd",
        //    //                       CultureInfo.InvariantCulture);

        //    //    var firstDayOfMonth = new DateTime(monthYear.Year, monthYear.Month, 1);
        //    //    var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);

        //    //    if (joinAdmMD)
        //    //    {
        //    //        admMDQuery = admMDQuery.Where(a => assetFilter.FilterPurchaseDate >= firstDayOfMonth && ass);
        //    //    }
        //    //    else
        //    //    {
        //    //        assetQuery = assetQuery.Where(a => assetFilter.AssetStateIds.Contains(a.AssetStateId));
        //    //    }

        //    //    assetQuery = query.Where(a => a.Asset >= firstDayOfMonth && a.Asset.PurchaseDate <= lastDayOfMonth);
        //    //}

        //    if ((assetFilter.AssetCategoryIds != null) && (assetFilter.AssetCategoryIds.Count > 0))
        //    {
        //        if (joinAdmMD)
        //        {
        //            admMDQuery = admMDQuery.Where(a => assetFilter.AssetCategoryIds.Contains(a.AssetCategoryId));
        //        }
        //        else
        //        {
        //            assetQuery = assetQuery.Where(a => assetFilter.AssetCategoryIds.Contains(a.AssetCategoryId));
        //        }
        //    }

        //    if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
        //    {
        //        if (joinAdmMD)
        //        {
        //            admMDQuery = admMDQuery.Where(a => assetFilter.CostCenterIds.Contains(a.CostCenterId));
        //        }
        //        else
        //        {
        //            assetQuery = assetQuery.Where(a => assetFilter.CostCenterIds.Contains(a.CostCenterId));
        //        }
        //    }
        //    else
        //    {
        //        if ((assetFilter.AdmCenterIds != null) && (assetFilter.AdmCenterIds.Count > 0))
        //        {
        //            if (joinAdmMD)
        //            {
        //                admMDQuery = admMDQuery.Where(ExpressionHelper.GetInListPredicate<Model.AssetAdmMD, int?>((id) => { return a => a.CostCenter.AdmCenter.Id == id; }, assetFilter.AdmCenterIds));
        //            }
        //            else
        //            {
        //                assetQuery = assetQuery.Where(ExpressionHelper.GetInListPredicate<Model.Asset, int?>((id) => { return a => a.CostCenter.AdmCenter.Id == id; }, assetFilter.AdmCenterIds));
        //            }
        //        }
        //    }

        //    if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
        //    {
        //        if (joinAdmMD)
        //            admMDQuery = admMDQuery.Where(a => assetFilter.EmployeeIds.Contains(a.EmployeeId));
        //        else
        //            assetQuery = assetQuery.Where(a => assetFilter.EmployeeIds.Contains(a.EmployeeId));
        //    }

        //    if ((assetFilter.RoomIds != null) && (assetFilter.RoomIds.Count > 0))
        //    {
        //        if (joinAdmMD)
        //            admMDQuery = admMDQuery.Where(a => assetFilter.RoomIds.Contains(a.RoomId));
        //        else
        //            assetQuery = assetQuery.Where(a => assetFilter.RoomIds.Contains(a.RoomId));
        //    }
        //    else
        //    {
        //        if ((assetFilter.LocationIds != null) && (assetFilter.LocationIds.Count > 0))
        //        {
        //            if (joinAdmMD)
        //                admMDQuery = admMDQuery.Where(ExpressionHelper.GetInListPredicate<Model.AssetAdmMD, int?>((id) => { return a => a.Room.Location.Id == id; }, assetFilter.LocationIds));
        //            else
        //                assetQuery = assetQuery.Where(ExpressionHelper.GetInListPredicate<Model.Asset, int?>((id) => { return a => a.Room.Location.Id == id; }, assetFilter.LocationIds));
        //        }
        //        else
        //        {
        //            if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
        //            {
        //                if (joinAdmMD)
        //                    admMDQuery = admMDQuery.Where(ExpressionHelper.GetInListPredicate<Model.AssetAdmMD, int?>((id) => { return a => a.Room.Location.Region.Id == id; }, assetFilter.RegionIds));
        //                else
        //                    assetQuery = assetQuery.Where(ExpressionHelper.GetInListPredicate<Model.Asset, int?>((id) => { return a => a.Room.Location.Region.Id == id; }, assetFilter.RegionIds));
        //            }
        //        }
        //    }

        //    query = assetQuery.Select(asset => new AssetDetail { Asset = asset });

        //    if (joinAdmMD)
        //    {
        //        query = query
        //            .Join(admMDQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetDetail { Asset = q.Asset, AdmMD = adm, DepMD = null, Dep = null, AC = null });
        //        //joinDep = true;
        //        //joinDepMD = true;
        //    }

        //    if (joinDep)
        //    {
        //        query = query
        //            .Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetDetail { Asset = q.Asset, AdmMD = q.AdmMD, DepMD = q.DepMD, Dep = dep, AC = null });
        //    }

        //    if (joinDepMD)
        //    {
        //        query = query
        //            .Join(depMDQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetDetail { Asset = q.Asset, AdmMD = q.AdmMD, DepMD = dep, Dep = q.Dep, AC = null });
        //    }

        //    //var qTotal = from q in query
        //    //             group q by 0 into t
        //    //             select new AssetDepTotal()
        //    //             {
        //    //                 Count = t.Count(),
        //    //                 ValueInv = t.Sum(q => q.Dep.ValueInv),
        //    //                 ValueRem = t.Sum(q => q.Dep.ValueRem),
        //    //                 ValueDep = t.Sum(q => q.Dep.ValueDep),
        //    //                 ValueDepYTD = t.Sum(q => q.Dep.ValueDepYTD)
        //    //             };
        //    //depTotal = qTotal.SingleOrDefault();

        //    //depTotal = query.GroupBy(a => 0).Select(a => new AssetDepTotal()
        //    //{
        //    //    Count = a.Count(),
        //    //    ValueInv = a.Sum(b => b.Asset.ValueInv)
        //    //}).SingleOrDefault();
        //    //if (depTotal == null) depTotal = new AssetDepTotal();

        //    depTotal = new AssetDepTotal();
        //    depTotal.Count = query.Count();
        //    if (monthDetails)
        //    {
        //        if (joinDepMD)
        //        {
        //            depTotal.ValueInv = query.Sum(a => a.DepMD.ValueInv);
        //            depTotal.ValueRem = query.Sum(a => a.DepMD.ValueRem);
        //            depTotal.ValueDep = query.Sum(a => a.DepMD.ValueDep);
        //            depTotal.ValueDepYTD = query.Sum(a => a.DepMD.ValueDepYTD);
        //            depTotal.ValueDepPu = query.Sum(a => a.DepMD.ValueDepPU);
        //        }
        //    }
        //    else
        //    {
        //        if (joinDep)
        //        {
        //            depTotal.ValueInv = query.Sum(a => a.Dep.ValueInv);
        //            depTotal.ValueRem = query.Sum(a => a.Dep.ValueRem);
        //            depTotal.ValueDep = query.Sum(a => a.Dep.ValueDep);
        //            depTotal.ValueDepYTD = query.Sum(a => a.Dep.ValueDepYTD);

        //        }
        //    }

        //    if (sorting != null)
        //    {
        //        query = sorting.Direction.ToLower() == "asc"
        //            ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetDetail>(sorting.Column))
        //            : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetDetail>(sorting.Column));
        //    }

        //    if (paging != null)
        //        query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
        //    var list = query.ToList();

        //    return list;
        //}GetCostCenterAuditInventoryAsync

        public IEnumerable<AssetDetail> Get(AssetFilter assetFilter, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
        {
            IQueryable<Model.Asset> assetQuery = null;
            IQueryable<AssetDep> depQuery = null;
            IQueryable<AssetAC> assetClassQuery = null;
            IQueryable<AssetDetail> query = null;
            bool monthDetails = assetFilter.AccMonthId.GetValueOrDefault() > 0;

            assetQuery = _context.Assets.AsQueryable();

            int? accSystemId = assetFilter.AccSystemId;

            if (!accSystemId.HasValue || accSystemId.Value <= 0)
            {
                Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
                if (accSystem != null) accSystemId = accSystem.Id;
            }

            depQuery = _context.AssetDeps.AsQueryable().Where(a => a.AccSystemId == accSystemId);
            assetClassQuery = _context.AssetACs.AsQueryable();

            if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
            if (assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.ERPCode.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter)));

            bool joinAdmMD = false;
            bool joinDep = true;
            bool joinDepMD = false;
            bool joinAssetClass = false;

            includes = includes ?? string.Empty;

            foreach (var includeProperty in includes.Split
                        (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                int dotIndex = includeProperty.IndexOf(".");
                string prefix = string.Empty;
                string property = string.Empty;

                if (dotIndex > 0)
                {
                    prefix = includeProperty.Substring(0, dotIndex);
                    property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
                }
                else
                {
                    prefix = includeProperty;
                }

                //prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

                switch (prefix)
                {
                    case "Asset":
                        if (property.Length > 0) assetQuery = assetQuery.Include(property);
                        break;
                    case "AssetDep":
                        if (property.Length > 0) depQuery = depQuery.Include(property);
                        joinDep = true;
                        break;
                    case "AssetAdm":
                        if (property.Length > 0) assetQuery = assetQuery.Include(property);
                        break;
                    case "AssetClass":
                        if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
                        joinAssetClass = true;
                        break;
                    default:
                        break;
                }
            }

            query = assetQuery.Select(asset => new AssetDetail { Asset = asset });

            if (joinDep)
            {
                query = query
                    .Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetDetail { Asset = q.Asset, Dep = dep, AC = null });
            }

            if ((assetFilter.AssetTypeIds != null) && (assetFilter.AssetTypeIds.Count > 0))
            {
                query = query.Where(a => assetFilter.AssetTypeIds.Contains(a.Asset.AssetTypeId));
            }

            if ((assetFilter.AssetStateIds != null) && (assetFilter.AssetStateIds.Count > 0))
            {
                query = query.Where(a => assetFilter.AssetStateIds.Contains(a.Asset.AssetStateId));
            }
            else
            {
                query = query.Where(a => a.Asset.AssetStateId != 4).Where(a => a.Asset.AssetStateId != 5);
            }

            if ((assetFilter.AssetCategoryIds != null) && (assetFilter.AssetCategoryIds.Count > 0))
            {
                query = query.Where(a => assetFilter.AssetCategoryIds.Contains(a.Asset.AssetCategoryId));
            }

            if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
            {
                query = query.Where(a => assetFilter.CostCenterIds.Contains(a.Asset.CostCenterId));
            }
            else
            {
                if ((assetFilter.AdmCenterIds != null) && (assetFilter.AdmCenterIds.Count > 0))
                {
                    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetDetail, int?>((id) => { return a => a.Asset.CostCenter.AdmCenter.Id == id; }, assetFilter.AdmCenterIds));
                }
            }

            if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
            {
                query = query.Where(a => assetFilter.EmployeeIds.Contains(a.Asset.EmployeeId));
            }

            if ((assetFilter.RoomIds != null) && (assetFilter.RoomIds.Count > 0))
            {
                query = query.Where(a => assetFilter.RoomIds.Contains(a.Asset.RoomId));
            }
            else
            {
                if ((assetFilter.LocationIds != null) && (assetFilter.LocationIds.Count > 0))
                {
                    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetDetail, int?>((id) => { return a => a.Asset.Room.Location.Id == id; }, assetFilter.LocationIds));
                }
                else
                {
                    if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetDetail, int?>((id) => { return a => a.Asset.Room.Location.Region.Id == id; }, assetFilter.RegionIds));
                    }
                }
            }

            depTotal = new AssetDepTotal();
            depTotal.Count = query.Count();
            if (joinDep)
            {
                depTotal.DepFYStart = query.Sum(a => a.Dep.ValueInvIn);
                depTotal.APCFYStart = query.Sum(a => a.Dep.ValueDepIn);
                depTotal.BkValFYStart = query.Sum(a => a.Dep.ValueDepPU);
                depTotal.CurrBkValue = query.Sum(a => a.Dep.ValueDepYTDIn);
                depTotal.CurrentAPC = query.Sum(a => a.Dep.ValueDepYTD);
                depTotal.DepTransfer = query.Sum(a => a.Dep.ValueRetIn);
                depTotal.DepRetirement = query.Sum(a => a.Dep.ValueRet);
                depTotal.Acquisition = query.Sum(a => a.Dep.ValueDepPUIn);
                depTotal.DepForYear = query.Sum(a => a.Dep.ValueInv);
                depTotal.AccumulDep = query.Sum(a => a.Dep.ValueDep);
            }

            if (sorting != null)
            {
                query = sorting.Direction.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetDetail>(sorting.Column))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetDetail>(sorting.Column));
            }

            if (paging != null)
                query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
            var list = query.ToList();

            return list;
        }

        public IEnumerable<AssetMonthDetail> GetMonth(AssetFilter assetFilter, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
        {
            IQueryable<Model.Asset> assetQuery = null;
            IQueryable<AssetDepMD> depQuery = null;
            IQueryable<AssetAdmMD> admQuery = null;
            IQueryable<AssetAC> assetClassQuery = null;
            IQueryable<AssetMonthDetail> query = null;

            assetQuery = _context.Assets.AsQueryable();

            int? accSystemId = assetFilter.AccSystemId;
            int? accMonthId = assetFilter.AccMonthId;

            if (!accMonthId.HasValue || accMonthId.Value <= 0)
            {
                accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
            }

            if (!accSystemId.HasValue || accSystemId.Value <= 0)
            {
                Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
                if (accSystem != null) accSystemId = accSystem.Id;
            }

            depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
            admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));
            assetClassQuery = _context.AssetACs.AsQueryable();

            if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
            if (assetFilter.Filter != "" && assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.ERPCode.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter)));
            if (assetFilter.FilterDoc != "" && assetFilter.FilterDoc != null) assetQuery = assetQuery.Where(a => a.Document.DocNo1.Contains(assetFilter.FilterDoc));
            if (assetFilter.IsPrinted != null) assetQuery = assetQuery.Where(a => a.IsPrinted == assetFilter.IsPrinted);
            if (assetFilter.IsDuplicate != null) assetQuery = assetQuery.Where(a => a.IsDuplicate == assetFilter.IsDuplicate);

            bool joinAdm = false;
            bool joinDep = false;
            bool joinAssetClass = false;

            includes = includes ?? string.Empty;

            foreach (var includeProperty in includes.Split
                        (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                int dotIndex = includeProperty.IndexOf(".");
                string prefix = string.Empty;
                string property = string.Empty;

                if (dotIndex > 0)
                {
                    prefix = includeProperty.Substring(0, dotIndex);
                    property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
                }
                else
                {
                    prefix = includeProperty;
                }

                //prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

                switch (prefix)
                {
                    case "Asset":
                        if (property.Length > 0) assetQuery = assetQuery.Include(property);
                        break;
                    case "Dep":
                        if (property.Length > 0) depQuery = depQuery.Include(property);
                        joinDep = true;
                        break;
                    case "Adm":
                        if (property.Length > 0) admQuery = admQuery.Include(property);
                        joinAdm = true;
                        break;
                    case "AssetClass":
                        if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
                        joinAssetClass = true;
                        break;
                    default:
                        break;
                }
            }

            query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

            if (joinAdm)
            {
                query = query
                    .Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
            }

            if (joinDep)
            {
                query = query
                    .Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
            }

			//if ((assetFilter.AssetTypeIds != null) && (assetFilter.AssetTypeIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetTypeIds.Contains(a.Adm.AssetTypeId));
			//}

			//if ((assetFilter.UomIds != null) && (assetFilter.UomIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.UomIds.Contains(a.Asset.UomId));
			//}

			//if ((assetFilter.PartnerIds != null) && (assetFilter.PartnerIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.PartnerIds.Contains(a.Asset.Document.PartnerId));
			//}

			//if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.Administration.DivisionId));
			//}

			//if ((assetFilter.AssetStateIds != null) && (assetFilter.AssetStateIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetStateIds.Contains(a.Adm.AssetStateId));
			//}
			//else
			//{
			//     //query = query.Where(a => a.Adm.AssetStateId !=22 && a.Adm.AssetStateId != 27);
			//    //query = query.Where(a => assetFilter.AssetStateIds.Contains(20) || assetFilter.AssetStateIds.Contains(21) || assetFilter.AssetStateIds.Contains(24) || assetFilter.AssetStateIds.Contains(25) || assetFilter.AssetStateIds.Contains(26));
			//}

			//if ((assetFilter.InvStateIds != null) && (assetFilter.InvStateIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.InvStateIds.Contains(a.Asset.InvStateId));
			//}
			//else
			//{
			//    //query = query.Where(a => a.Asset.InvStateId != 40);
			//}

			//if ((assetFilter.DocumentTypeIds != null) && (assetFilter.DocumentTypeIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.DocumentTypeIds.Contains(a.Asset.Document.DocumentTypeId));
			//}

			//if ((assetFilter.AssetCategoryIds != null) && (assetFilter.AssetCategoryIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetCategoryIds.Contains(a.Adm.AssetCategoryId));
			//}

			List<int?> companiesIds = _context.Set<Model.EmployeeCompany>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CompanyId).ToList();

			if (companiesIds.Count == 0)
			{
				companiesIds = new List<int?>();
				companiesIds.Add(-1);

				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}
			else
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}

			if (assetFilter.Role != null && assetFilter.Role != "")
            {
                if (assetFilter.Role.ToUpper() == "ADMINISTRATOR")
                {
                    if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                    }

                    if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.EmployeeId == id)); }, assetFilter.EmployeeIds));
                    }
                }
                else
                {
                    if (assetFilter.Role.ToUpper() == "USER")
                    {

                        List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CostCenterId).ToList();

                        if(costCenterIds.Count == 0)
						{
                            costCenterIds = new List<int?>();
                            costCenterIds.Add(10000000);
						}


                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, costCenterIds));


                        if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                        {
                            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                        }

                    }
                }
            }

   //         if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
			//{
			//	query = query.Where(a => assetFilter.CostCenterIds.Contains(a.Adm.CostCenterId));
			//}
			//else
			//{
			//	if ((assetFilter.AdmCenterIds != null) && (assetFilter.AdmCenterIds.Count > 0))
			//	{
			//		query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.CostCenter.AdmCenter.Id == id; }, assetFilter.AdmCenterIds));
			//	}

   //             if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
   //             {
   //                 query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.CostCenter.AdmCenter.Id == id; }, assetFilter.RegionIds));
   //             }
   //         }

			if ((assetFilter.AssetNatureIds != null) && (assetFilter.AssetNatureIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.AssetNatureId == id; }, assetFilter.AssetNatureIds));
            }

            if ((assetFilter.CompanyIds != null) && (assetFilter.CompanyIds.Count > 0))
			{
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CompanyId == id; }, assetFilter.CompanyIds));
            }

            if ((assetFilter.InsuranceCategoryIds != null) && (assetFilter.InsuranceCategoryIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.InsuranceCategoryId == id; }, assetFilter.InsuranceCategoryIds));
            }

            if ((assetFilter.DimensionIds != null) && (assetFilter.DimensionIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.DimensionId == id; }, assetFilter.DimensionIds));
            }

			//if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
			//{
			//	query = query.Where(a => assetFilter.EmployeeIds.Contains(a.Adm.EmployeeId));
			//}

            if ((assetFilter.ProjectIds != null) && (assetFilter.ProjectIds.Count > 0))
            {
                query = query.Where(a => assetFilter.ProjectIds.Contains(a.Adm.ProjectId));
            }

            if ((assetFilter.DictionaryItemIds != null) && (assetFilter.DictionaryItemIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DictionaryItemIds.Contains(a.Asset.DictionaryItemId));
            }

            if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.DivisionId));
            }

            if ((assetFilter.DepartmentIds != null) && (assetFilter.DepartmentIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DepartmentIds.Contains(a.Asset.DepartmentId));
            }


            if ((assetFilter.BrandIds != null) && (assetFilter.BrandIds.Count > 0))
            {
                query = query.Where(a => assetFilter.BrandIds.Contains(a.Adm.BrandId));
            }

            if ((assetFilter.RoomIds != null) && (assetFilter.RoomIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.RoomId == id; }, assetFilter.RoomIds));
            }
            else
            {
                if ((assetFilter.LocationIds != null) && (assetFilter.LocationIds.Count > 0))
                {
                    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Id == id; }, assetFilter.LocationIds));
                }
                else
                {
                    if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Region.Id == id; }, assetFilter.RegionIds));
                    }
                }
            }

			//if ((assetFilter.AdministrationIds != null) && (assetFilter.AdministrationIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AdministrationIds.Contains(a.Adm.AdministrationId));
			//}
			//else
			//{
			//    if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
			//    {
			//        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Administration.Division.Id == id; }, assetFilter.DivisionIds));
			//    }

			//}

			if (assetFilter.ShowReco)
			{
				query = query.Where(a => a.Asset.ERPCode == null || a.Asset.ERPCode == "");
			}

			query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true);

			if (assetFilter.FilterPurchaseDate != "false" && assetFilter.FilterPurchaseDate != null)
			{


				var monthYear = DateTime.ParseExact(assetFilter.FilterPurchaseDate,
								  "yyyy-MM-dd",
								   CultureInfo.InvariantCulture);

				var firstDayOfMonth = new DateTime(monthYear.Year, monthYear.Month, 1);
				var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
				query = query.Where(a => a.Asset.PurchaseDate >= firstDayOfMonth && a.Asset.PurchaseDate <= lastDayOfMonth);
				// Console.Write("Iesiri: " + query.Count());
			}

			//if (assetFilter.FromDate != null)
			//{
			//    query = query.Where(a => a.Asset.PurchaseDate >= assetFilter.FromDate);
			//}

			//if (assetFilter.ToDate != null)
			//{
			//    query = query.Where(a => a.Asset.PurchaseDate <= assetFilter.ToDate);
			//}


			//if (assetFilter.FromReceptionDate != null)
			//{
			//    query = query.Where(a => a.Asset.ReceptionDate >= assetFilter.FromReceptionDate);
			//}

			//if (assetFilter.ToReceptionDate != null)
			//{
			//    query = query.Where(a => a.Asset.ReceptionDate <= assetFilter.ToReceptionDate);
			//}

			//if (assetFilter.ErpCode != null && assetFilter.ErpCode == true)
			//{
			//    assetQuery = assetQuery.Where(a => a.ERPCode != null);
			//}
			//else if (assetFilter.ErpCode != null && assetFilter.ErpCode == false)
			//{
			//    assetQuery = assetQuery.Where(a => a.ERPCode == null);
			//}

			depTotal = new AssetDepTotal();
            depTotal.Count = query.Count();
            if (joinDep)
            {
                depTotal.DepFYStart = query.Sum(a => a.Dep.APCFYStart);
                depTotal.APCFYStart = query.Sum(a => a.Dep.DepFYStart);
                depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
                depTotal.CurrBkValue = query.Sum(a => a.Dep.Acquisition);
                depTotal.CurrentAPC = query.Sum(a => a.Dep.DepForYear);
                depTotal.DepTransfer = query.Sum(a => a.Dep.Retirement);
                depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
                depTotal.Acquisition = query.Sum(a => a.Dep.CurrBkValue);
                depTotal.DepForYear = query.Sum(a => a.Dep.CurrentAPC);
                depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
            }

            if (sorting != null)
            {
                query = sorting.Direction.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
            }

            if (paging != null)
                query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
            var list = query.ToList();

            return list;
        }

        public IEnumerable<AssetMonthDetail> GetAcquisitionMonth(AssetFilter assetFilter, string docNo1, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
        {
            IQueryable<Model.Asset> assetQuery = null;
            IQueryable<AssetDepMD> depQuery = null;
            IQueryable<AssetAdmMD> admQuery = null;
            IQueryable<AssetAC> assetClassQuery = null;
            IQueryable<AssetMonthDetail> query = null;

            assetQuery = _context.Assets.AsQueryable();

            int? accSystemId = assetFilter.AccSystemId;
            int? accMonthId = assetFilter.AccMonthId;

            if (!accMonthId.HasValue || accMonthId.Value <= 0)
            {
                accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
            }

            if (!accSystemId.HasValue || accSystemId.Value <= 0)
            {
                Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
                if (accSystem != null) accSystemId = accSystem.Id;
            }

            depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
            admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));
            assetClassQuery = _context.AssetACs.AsQueryable();

            if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
            if (assetFilter.Filter != "" && assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.ERPCode.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter)));
            if (assetFilter.FilterDoc != "" && assetFilter.FilterDoc != null) assetQuery = assetQuery.Where(a => a.Document.DocNo1.Contains(assetFilter.FilterDoc));
            if (assetFilter.IsPrinted != null) assetQuery = assetQuery.Where(a => a.IsPrinted == assetFilter.IsPrinted);
            if (assetFilter.IsDuplicate != null) assetQuery = assetQuery.Where(a => a.IsDuplicate == assetFilter.IsDuplicate);

            bool joinAdm = false;
            bool joinDep = false;
            bool joinAssetClass = false;

            includes = includes ?? string.Empty;

            foreach (var includeProperty in includes.Split
                        (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                int dotIndex = includeProperty.IndexOf(".");
                string prefix = string.Empty;
                string property = string.Empty;

                if (dotIndex > 0)
                {
                    prefix = includeProperty.Substring(0, dotIndex);
                    property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
                }
                else
                {
                    prefix = includeProperty;
                }

                //prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

                switch (prefix)
                {
                    case "Asset":
                        if (property.Length > 0) assetQuery = assetQuery.Include(property);
                        break;
                    case "Dep":
                        if (property.Length > 0) depQuery = depQuery.Include(property);
                        joinDep = true;
                        break;
                    case "Adm":
                        if (property.Length > 0) admQuery = admQuery.Include(property);
                        joinAdm = true;
                        break;
                    case "AssetClass":
                        if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
                        joinAssetClass = true;
                        break;
                    default:
                        break;
                }
            }

            query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

            if (joinAdm)
            {
                query = query
                    .Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
            }

            if (joinDep)
            {
                query = query
                    .Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
            }

			List<int?> companiesIds = _context.Set<Model.EmployeeCompany>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CompanyId).ToList();

			if (companiesIds.Count == 0)
			{
				companiesIds = new List<int?>();
				companiesIds.Add(-1);

				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}
			else
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}

			if (assetFilter.Role != null && assetFilter.Role != "")
            {
                if (assetFilter.Role.ToUpper() == "ADMINISTRATOR")
                {
                    if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                    }

                    if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.EmployeeId == id)); }, assetFilter.EmployeeIds));
                    }
                }
                else
                {
                    if (assetFilter.Role.ToUpper() == "USER")
                    {

                        List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CostCenterId).ToList();

                        if (costCenterIds.Count == 0)
                        {
                            costCenterIds = new List<int?>();
                            costCenterIds.Add(10000000);
                        }


                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, costCenterIds));


                        if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                        {
                            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                        }

                    }
                }
            }

            query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && a.Asset.Document.DocNo1.Equals(docNo1));

            depTotal = new AssetDepTotal();
            depTotal.Count = query.Count();
            if (joinDep)
            {
                depTotal.DepFYStart = query.Sum(a => a.Dep.APCFYStart);
                depTotal.APCFYStart = query.Sum(a => a.Dep.DepFYStart);
                depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
                depTotal.CurrBkValue = query.Sum(a => a.Dep.Acquisition);
                depTotal.CurrentAPC = query.Sum(a => a.Dep.DepForYear);
                depTotal.DepTransfer = query.Sum(a => a.Dep.Retirement);
                depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
                depTotal.Acquisition = query.Sum(a => a.Dep.CurrBkValue);
                depTotal.DepForYear = query.Sum(a => a.Dep.CurrentAPC);
                depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
            }

            if (sorting != null)
            {
                query = sorting.Direction.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
            }

            if (paging != null)
                query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
            var list = query.ToList();

            return list;
        }

        public IEnumerable<AssetMonthDetail> GetMonthScrap(AssetFilter assetFilter, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
        {
            IQueryable<Model.Asset> assetQuery = null;
            IQueryable<AssetDepMD> depQuery = null;
            IQueryable<AssetAdmMD> admQuery = null;
            IQueryable<AssetAC> assetClassQuery = null;
            IQueryable<AssetMonthDetail> query = null;

            assetQuery = _context.Assets.AsQueryable();

            int? accSystemId = assetFilter.AccSystemId;
            int? accMonthId = assetFilter.AccMonthId;

            if (!accMonthId.HasValue || accMonthId.Value <= 0)
            {
                accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
            }

            if (!accSystemId.HasValue || accSystemId.Value <= 0)
            {
                Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
                if (accSystem != null) accSystemId = accSystem.Id;
            }

            depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
            admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));
            assetClassQuery = _context.AssetACs.AsQueryable();

            if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
            if (assetFilter.Filter != "" && assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.ERPCode.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter)));
            if (assetFilter.FilterDoc != "" && assetFilter.FilterDoc != null) assetQuery = assetQuery.Where(a => a.Document.DocNo1.Contains(assetFilter.FilterDoc));
            if (assetFilter.IsPrinted != null) assetQuery = assetQuery.Where(a => a.IsPrinted == assetFilter.IsPrinted);
            if (assetFilter.IsDuplicate != null) assetQuery = assetQuery.Where(a => a.IsDuplicate == assetFilter.IsDuplicate);

            bool joinAdm = false;
            bool joinDep = false;
            bool joinAssetClass = false;

            includes = includes ?? string.Empty;

            foreach (var includeProperty in includes.Split
                        (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                int dotIndex = includeProperty.IndexOf(".");
                string prefix = string.Empty;
                string property = string.Empty;

                if (dotIndex > 0)
                {
                    prefix = includeProperty.Substring(0, dotIndex);
                    property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
                }
                else
                {
                    prefix = includeProperty;
                }

                //prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

                switch (prefix)
                {
                    case "Asset":
                        if (property.Length > 0) assetQuery = assetQuery.Include(property);
                        break;
                    case "Dep":
                        if (property.Length > 0) depQuery = depQuery.Include(property);
                        joinDep = true;
                        break;
                    case "Adm":
                        if (property.Length > 0) admQuery = admQuery.Include(property);
                        joinAdm = true;
                        break;
                    case "AssetClass":
                        if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
                        joinAssetClass = true;
                        break;
                    default:
                        break;
                }
            }

            query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

            if (joinAdm)
            {
                query = query
                    .Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
            }

            if (joinDep)
            {
                query = query
                    .Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
            }

			//if ((assetFilter.AssetTypeIds != null) && (assetFilter.AssetTypeIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetTypeIds.Contains(a.Adm.AssetTypeId));
			//}

			//if ((assetFilter.UomIds != null) && (assetFilter.UomIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.UomIds.Contains(a.Asset.UomId));
			//}

			//if ((assetFilter.PartnerIds != null) && (assetFilter.PartnerIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.PartnerIds.Contains(a.Asset.Document.PartnerId));
			//}

			//if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.Administration.DivisionId));
			//}

			//if ((assetFilter.AssetStateIds != null) && (assetFilter.AssetStateIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetStateIds.Contains(a.Adm.AssetStateId));
			//}
			//else
			//{
			//     //query = query.Where(a => a.Adm.AssetStateId !=22 && a.Adm.AssetStateId != 27);
			//    //query = query.Where(a => assetFilter.AssetStateIds.Contains(20) || assetFilter.AssetStateIds.Contains(21) || assetFilter.AssetStateIds.Contains(24) || assetFilter.AssetStateIds.Contains(25) || assetFilter.AssetStateIds.Contains(26));
			//}

			//if ((assetFilter.InvStateIds != null) && (assetFilter.InvStateIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.InvStateIds.Contains(a.Asset.InvStateId));
			//}
			//else
			//{
			//    //query = query.Where(a => a.Asset.InvStateId != 40);
			//}

			//if ((assetFilter.DocumentTypeIds != null) && (assetFilter.DocumentTypeIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.DocumentTypeIds.Contains(a.Asset.Document.DocumentTypeId));
			//}

			//if ((assetFilter.AssetCategoryIds != null) && (assetFilter.AssetCategoryIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetCategoryIds.Contains(a.Adm.AssetCategoryId));
			//}

			List<int?> companiesIds = _context.Set<Model.EmployeeCompany>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CompanyId).ToList();

			if (companiesIds.Count == 0)
			{
				companiesIds = new List<int?>();
				companiesIds.Add(-1);

				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}
			else
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}

			if (assetFilter.Role != null && assetFilter.Role != "")
            {
                if (assetFilter.Role.ToUpper() == "ADMINISTRATOR")
                {
                    if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                    }

                    if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.EmployeeId == id)); }, assetFilter.EmployeeIds));
                    }
                }
                else
                {
                    if (assetFilter.Role.ToUpper() == "USER")
                    {

                        List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CostCenterId).ToList();

                        if (costCenterIds.Count == 0)
                        {
                            costCenterIds = new List<int?>();
                            costCenterIds.Add(10000000);
                        }


                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, costCenterIds));


                        if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                        {
                            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                        }

                    }
                }
            }

            //         if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
            //{
            //	query = query.Where(a => assetFilter.CostCenterIds.Contains(a.Adm.CostCenterId));
            //}
            //else
            //{
            //	if ((assetFilter.AdmCenterIds != null) && (assetFilter.AdmCenterIds.Count > 0))
            //	{
            //		query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.CostCenter.AdmCenter.Id == id; }, assetFilter.AdmCenterIds));
            //	}

            //             if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
            //             {
            //                 query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.CostCenter.AdmCenter.Id == id; }, assetFilter.RegionIds));
            //             }
            //         }

            if ((assetFilter.AssetNatureIds != null) && (assetFilter.AssetNatureIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.AssetNatureId == id; }, assetFilter.AssetNatureIds));
            }

            if ((assetFilter.CompanyIds != null) && (assetFilter.CompanyIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CompanyId == id; }, assetFilter.CompanyIds));
            }

            if ((assetFilter.InsuranceCategoryIds != null) && (assetFilter.InsuranceCategoryIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.InsuranceCategoryId == id; }, assetFilter.InsuranceCategoryIds));
            }

            if ((assetFilter.DimensionIds != null) && (assetFilter.DimensionIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.DimensionId == id; }, assetFilter.DimensionIds));
            }

            //if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
            //{
            //	query = query.Where(a => assetFilter.EmployeeIds.Contains(a.Adm.EmployeeId));
            //}

            if ((assetFilter.ProjectIds != null) && (assetFilter.ProjectIds.Count > 0))
            {
                query = query.Where(a => assetFilter.ProjectIds.Contains(a.Adm.ProjectId));
            }

            if ((assetFilter.DictionaryItemIds != null) && (assetFilter.DictionaryItemIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DictionaryItemIds.Contains(a.Asset.DictionaryItemId));
            }

            if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.DivisionId));
            }

            if ((assetFilter.DepartmentIds != null) && (assetFilter.DepartmentIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DepartmentIds.Contains(a.Asset.DepartmentId));
            }


            if ((assetFilter.BrandIds != null) && (assetFilter.BrandIds.Count > 0))
            {
                query = query.Where(a => assetFilter.BrandIds.Contains(a.Adm.BrandId));
            }

            if ((assetFilter.RoomIds != null) && (assetFilter.RoomIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.RoomId == id; }, assetFilter.RoomIds));
            }
            else
            {
                if ((assetFilter.LocationIds != null) && (assetFilter.LocationIds.Count > 0))
                {
                    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Id == id; }, assetFilter.LocationIds));
                }
                else
                {
                    if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Region.Id == id; }, assetFilter.RegionIds));
                    }
                }
            }

            //if ((assetFilter.AdministrationIds != null) && (assetFilter.AdministrationIds.Count > 0))
            //{
            //    query = query.Where(a => assetFilter.AdministrationIds.Contains(a.Adm.AdministrationId));
            //}
            //else
            //{
            //    if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
            //    {
            //        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Administration.Division.Id == id; }, assetFilter.DivisionIds));
            //    }

            //}

            if (assetFilter.ShowReco)
            {
                query = query.Where(a => a.Asset.ERPCode == null || a.Asset.ERPCode == "");
            }

            query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && a.Asset.AssetStateId == 2);

            if (assetFilter.FilterPurchaseDate != "false" && assetFilter.FilterPurchaseDate != null)
            {


                var monthYear = DateTime.ParseExact(assetFilter.FilterPurchaseDate,
                                  "yyyy-MM-dd",
                                   CultureInfo.InvariantCulture);

                var firstDayOfMonth = new DateTime(monthYear.Year, monthYear.Month, 1);
                var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
                query = query.Where(a => a.Asset.PurchaseDate >= firstDayOfMonth && a.Asset.PurchaseDate <= lastDayOfMonth);
                // Console.Write("Iesiri: " + query.Count());
            }

            //if (assetFilter.FromDate != null)
            //{
            //    query = query.Where(a => a.Asset.PurchaseDate >= assetFilter.FromDate);
            //}

            //if (assetFilter.ToDate != null)
            //{
            //    query = query.Where(a => a.Asset.PurchaseDate <= assetFilter.ToDate);
            //}


            //if (assetFilter.FromReceptionDate != null)
            //{
            //    query = query.Where(a => a.Asset.ReceptionDate >= assetFilter.FromReceptionDate);
            //}

            //if (assetFilter.ToReceptionDate != null)
            //{
            //    query = query.Where(a => a.Asset.ReceptionDate <= assetFilter.ToReceptionDate);
            //}

            //if (assetFilter.ErpCode != null && assetFilter.ErpCode == true)
            //{
            //    assetQuery = assetQuery.Where(a => a.ERPCode != null);
            //}
            //else if (assetFilter.ErpCode != null && assetFilter.ErpCode == false)
            //{
            //    assetQuery = assetQuery.Where(a => a.ERPCode == null);
            //}

            depTotal = new AssetDepTotal();
            depTotal.Count = query.Count();
            if (joinDep)
            {
                depTotal.DepFYStart = query.Sum(a => a.Dep.APCFYStart);
                depTotal.APCFYStart = query.Sum(a => a.Dep.DepFYStart);
                depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
                depTotal.CurrBkValue = query.Sum(a => a.Dep.Acquisition);
                depTotal.CurrentAPC = query.Sum(a => a.Dep.DepForYear);
                depTotal.DepTransfer = query.Sum(a => a.Dep.Retirement);
                depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
                depTotal.Acquisition = query.Sum(a => a.Dep.CurrBkValue);
                depTotal.DepForYear = query.Sum(a => a.Dep.CurrentAPC);
                depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
            }

            if (sorting != null)
            {
                query = sorting.Direction.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
            }

            if (paging != null)
                query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
            var list = query.ToList();

            return list;
        }

        public IEnumerable<AssetMonthDetail> GetMonthSold(AssetFilter assetFilter, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
        {
            IQueryable<Model.Asset> assetQuery = null;
            IQueryable<AssetDepMD> depQuery = null;
            IQueryable<AssetAdmMD> admQuery = null;
            IQueryable<AssetAC> assetClassQuery = null;
            IQueryable<AssetMonthDetail> query = null;

            assetQuery = _context.Assets.AsQueryable();

            int? accSystemId = assetFilter.AccSystemId;
            int? accMonthId = assetFilter.AccMonthId;

            if (!accMonthId.HasValue || accMonthId.Value <= 0)
            {
                accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
            }

            if (!accSystemId.HasValue || accSystemId.Value <= 0)
            {
                Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
                if (accSystem != null) accSystemId = accSystem.Id;
            }

            depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
            admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));
            assetClassQuery = _context.AssetACs.AsQueryable();

            if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
            if (assetFilter.Filter != "" && assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.ERPCode.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter)));
            if (assetFilter.FilterDoc != "" && assetFilter.FilterDoc != null) assetQuery = assetQuery.Where(a => a.Document.DocNo1.Contains(assetFilter.FilterDoc));
            if (assetFilter.IsPrinted != null) assetQuery = assetQuery.Where(a => a.IsPrinted == assetFilter.IsPrinted);
            if (assetFilter.IsDuplicate != null) assetQuery = assetQuery.Where(a => a.IsDuplicate == assetFilter.IsDuplicate);

            bool joinAdm = false;
            bool joinDep = false;
            bool joinAssetClass = false;

            includes = includes ?? string.Empty;

            foreach (var includeProperty in includes.Split
                        (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                int dotIndex = includeProperty.IndexOf(".");
                string prefix = string.Empty;
                string property = string.Empty;

                if (dotIndex > 0)
                {
                    prefix = includeProperty.Substring(0, dotIndex);
                    property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
                }
                else
                {
                    prefix = includeProperty;
                }

                //prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

                switch (prefix)
                {
                    case "Asset":
                        if (property.Length > 0) assetQuery = assetQuery.Include(property);
                        break;
                    case "Dep":
                        if (property.Length > 0) depQuery = depQuery.Include(property);
                        joinDep = true;
                        break;
                    case "Adm":
                        if (property.Length > 0) admQuery = admQuery.Include(property);
                        joinAdm = true;
                        break;
                    case "AssetClass":
                        if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
                        joinAssetClass = true;
                        break;
                    default:
                        break;
                }
            }

            query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

            if (joinAdm)
            {
                query = query
                    .Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
            }

            if (joinDep)
            {
                query = query
                    .Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
            }

			//if ((assetFilter.AssetTypeIds != null) && (assetFilter.AssetTypeIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetTypeIds.Contains(a.Adm.AssetTypeId));
			//}

			//if ((assetFilter.UomIds != null) && (assetFilter.UomIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.UomIds.Contains(a.Asset.UomId));
			//}

			//if ((assetFilter.PartnerIds != null) && (assetFilter.PartnerIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.PartnerIds.Contains(a.Asset.Document.PartnerId));
			//}

			//if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.Administration.DivisionId));
			//}

			//if ((assetFilter.AssetStateIds != null) && (assetFilter.AssetStateIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetStateIds.Contains(a.Adm.AssetStateId));
			//}
			//else
			//{
			//     //query = query.Where(a => a.Adm.AssetStateId !=22 && a.Adm.AssetStateId != 27);
			//    //query = query.Where(a => assetFilter.AssetStateIds.Contains(20) || assetFilter.AssetStateIds.Contains(21) || assetFilter.AssetStateIds.Contains(24) || assetFilter.AssetStateIds.Contains(25) || assetFilter.AssetStateIds.Contains(26));
			//}

			//if ((assetFilter.InvStateIds != null) && (assetFilter.InvStateIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.InvStateIds.Contains(a.Asset.InvStateId));
			//}
			//else
			//{
			//    //query = query.Where(a => a.Asset.InvStateId != 40);
			//}

			//if ((assetFilter.DocumentTypeIds != null) && (assetFilter.DocumentTypeIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.DocumentTypeIds.Contains(a.Asset.Document.DocumentTypeId));
			//}

			//if ((assetFilter.AssetCategoryIds != null) && (assetFilter.AssetCategoryIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetCategoryIds.Contains(a.Adm.AssetCategoryId));
			//}

			List<int?> companiesIds = _context.Set<Model.EmployeeCompany>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CompanyId).ToList();

			if (companiesIds.Count == 0)
			{
				companiesIds = new List<int?>();
				companiesIds.Add(-1);

				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}
			else
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}

			if (assetFilter.Role != null && assetFilter.Role != "")
            {
                if (assetFilter.Role.ToUpper() == "ADMINISTRATOR")
                {
                    if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                    }

                    if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.EmployeeId == id)); }, assetFilter.EmployeeIds));
                    }
                }
                else
                {
                    if (assetFilter.Role.ToUpper() == "USER")
                    {

                        List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CostCenterId).ToList();

                        if (costCenterIds.Count == 0)
                        {
                            costCenterIds = new List<int?>();
                            costCenterIds.Add(10000000);
                        }


                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, costCenterIds));


                        if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                        {
                            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                        }

                    }
                }
            }

            //         if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
            //{
            //	query = query.Where(a => assetFilter.CostCenterIds.Contains(a.Adm.CostCenterId));
            //}
            //else
            //{
            //	if ((assetFilter.AdmCenterIds != null) && (assetFilter.AdmCenterIds.Count > 0))
            //	{
            //		query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.CostCenter.AdmCenter.Id == id; }, assetFilter.AdmCenterIds));
            //	}

            //             if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
            //             {
            //                 query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.CostCenter.AdmCenter.Id == id; }, assetFilter.RegionIds));
            //             }
            //         }

            if ((assetFilter.AssetNatureIds != null) && (assetFilter.AssetNatureIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.AssetNatureId == id; }, assetFilter.AssetNatureIds));
            }

            if ((assetFilter.CompanyIds != null) && (assetFilter.CompanyIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CompanyId == id; }, assetFilter.CompanyIds));
            }

            if ((assetFilter.InsuranceCategoryIds != null) && (assetFilter.InsuranceCategoryIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.InsuranceCategoryId == id; }, assetFilter.InsuranceCategoryIds));
            }

            if ((assetFilter.DimensionIds != null) && (assetFilter.DimensionIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.DimensionId == id; }, assetFilter.DimensionIds));
            }

            //if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
            //{
            //	query = query.Where(a => assetFilter.EmployeeIds.Contains(a.Adm.EmployeeId));
            //}

            if ((assetFilter.ProjectIds != null) && (assetFilter.ProjectIds.Count > 0))
            {
                query = query.Where(a => assetFilter.ProjectIds.Contains(a.Adm.ProjectId));
            }

            if ((assetFilter.DictionaryItemIds != null) && (assetFilter.DictionaryItemIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DictionaryItemIds.Contains(a.Asset.DictionaryItemId));
            }

            if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.DivisionId));
            }

            if ((assetFilter.DepartmentIds != null) && (assetFilter.DepartmentIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DepartmentIds.Contains(a.Asset.DepartmentId));
            }


            if ((assetFilter.BrandIds != null) && (assetFilter.BrandIds.Count > 0))
            {
                query = query.Where(a => assetFilter.BrandIds.Contains(a.Adm.BrandId));
            }

            if ((assetFilter.RoomIds != null) && (assetFilter.RoomIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.RoomId == id; }, assetFilter.RoomIds));
            }
            else
            {
                if ((assetFilter.LocationIds != null) && (assetFilter.LocationIds.Count > 0))
                {
                    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Id == id; }, assetFilter.LocationIds));
                }
                else
                {
                    if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Region.Id == id; }, assetFilter.RegionIds));
                    }
                }
            }

            //if ((assetFilter.AdministrationIds != null) && (assetFilter.AdministrationIds.Count > 0))
            //{
            //    query = query.Where(a => assetFilter.AdministrationIds.Contains(a.Adm.AdministrationId));
            //}
            //else
            //{
            //    if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
            //    {
            //        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Administration.Division.Id == id; }, assetFilter.DivisionIds));
            //    }

            //}

            if (assetFilter.ShowReco)
            {
                query = query.Where(a => a.Asset.ERPCode == null || a.Asset.ERPCode == "");
            }

            query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && a.Asset.AssetStateId == 6);

            if (assetFilter.FilterPurchaseDate != "false" && assetFilter.FilterPurchaseDate != null)
            {


                var monthYear = DateTime.ParseExact(assetFilter.FilterPurchaseDate,
                                  "yyyy-MM-dd",
                                   CultureInfo.InvariantCulture);

                var firstDayOfMonth = new DateTime(monthYear.Year, monthYear.Month, 1);
                var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
                query = query.Where(a => a.Asset.PurchaseDate >= firstDayOfMonth && a.Asset.PurchaseDate <= lastDayOfMonth);
                // Console.Write("Iesiri: " + query.Count());
            }

            //if (assetFilter.FromDate != null)
            //{
            //    query = query.Where(a => a.Asset.PurchaseDate >= assetFilter.FromDate);
            //}

            //if (assetFilter.ToDate != null)
            //{
            //    query = query.Where(a => a.Asset.PurchaseDate <= assetFilter.ToDate);
            //}


            //if (assetFilter.FromReceptionDate != null)
            //{
            //    query = query.Where(a => a.Asset.ReceptionDate >= assetFilter.FromReceptionDate);
            //}

            //if (assetFilter.ToReceptionDate != null)
            //{
            //    query = query.Where(a => a.Asset.ReceptionDate <= assetFilter.ToReceptionDate);
            //}

            //if (assetFilter.ErpCode != null && assetFilter.ErpCode == true)
            //{
            //    assetQuery = assetQuery.Where(a => a.ERPCode != null);
            //}
            //else if (assetFilter.ErpCode != null && assetFilter.ErpCode == false)
            //{
            //    assetQuery = assetQuery.Where(a => a.ERPCode == null);
            //}

            depTotal = new AssetDepTotal();
            depTotal.Count = query.Count();
            if (joinDep)
            {
                depTotal.DepFYStart = query.Sum(a => a.Dep.APCFYStart);
                depTotal.APCFYStart = query.Sum(a => a.Dep.DepFYStart);
                depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
                depTotal.CurrBkValue = query.Sum(a => a.Dep.Acquisition);
                depTotal.CurrentAPC = query.Sum(a => a.Dep.DepForYear);
                depTotal.DepTransfer = query.Sum(a => a.Dep.Retirement);
                depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
                depTotal.Acquisition = query.Sum(a => a.Dep.CurrBkValue);
                depTotal.DepForYear = query.Sum(a => a.Dep.CurrentAPC);
                depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
            }

            if (sorting != null)
            {
                query = sorting.Direction.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
            }

            if (paging != null)
                query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
            var list = query.ToList();

            return list;
        }

        public IEnumerable<AssetMonthDetail> GetMonthClosed(AssetFilter assetFilter, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
        {
            IQueryable<Model.Asset> assetQuery = null;
            IQueryable<AssetDepMD> depQuery = null;
            IQueryable<AssetAdmMD> admQuery = null;
            IQueryable<AssetAC> assetClassQuery = null;
            IQueryable<AssetMonthDetail> query = null;

            assetQuery = _context.Assets.AsQueryable();

            int? accSystemId = assetFilter.AccSystemId;
            int? accMonthId = assetFilter.AccMonthId;

            if (!accMonthId.HasValue || accMonthId.Value <= 0)
            {
                accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
            }

            if (!accSystemId.HasValue || accSystemId.Value <= 0)
            {
                Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
                if (accSystem != null) accSystemId = accSystem.Id;
            }

            depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
            admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));
            assetClassQuery = _context.AssetACs.AsQueryable();

            if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
            if (assetFilter.Filter != "" && assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.ERPCode.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter)));
            if (assetFilter.FilterDoc != "" && assetFilter.FilterDoc != null) assetQuery = assetQuery.Where(a => a.Document.DocNo1.Contains(assetFilter.FilterDoc));
            if (assetFilter.IsPrinted != null) assetQuery = assetQuery.Where(a => a.IsPrinted == assetFilter.IsPrinted);
            if (assetFilter.IsDuplicate != null) assetQuery = assetQuery.Where(a => a.IsDuplicate == assetFilter.IsDuplicate);

            bool joinAdm = false;
            bool joinDep = false;
            bool joinAssetClass = false;

            includes = includes ?? string.Empty;

            foreach (var includeProperty in includes.Split
                        (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                int dotIndex = includeProperty.IndexOf(".");
                string prefix = string.Empty;
                string property = string.Empty;

                if (dotIndex > 0)
                {
                    prefix = includeProperty.Substring(0, dotIndex);
                    property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
                }
                else
                {
                    prefix = includeProperty;
                }

                //prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

                switch (prefix)
                {
                    case "Asset":
                        if (property.Length > 0) assetQuery = assetQuery.Include(property);
                        break;
                    case "Dep":
                        if (property.Length > 0) depQuery = depQuery.Include(property);
                        joinDep = true;
                        break;
                    case "Adm":
                        if (property.Length > 0) admQuery = admQuery.Include(property);
                        joinAdm = true;
                        break;
                    case "AssetClass":
                        if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
                        joinAssetClass = true;
                        break;
                    default:
                        break;
                }
            }

            query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

            if (joinAdm)
            {
                query = query
                    .Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
            }

            if (joinDep)
            {
                query = query
                    .Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
            }

			//if ((assetFilter.AssetTypeIds != null) && (assetFilter.AssetTypeIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetTypeIds.Contains(a.Adm.AssetTypeId));
			//}

			//if ((assetFilter.UomIds != null) && (assetFilter.UomIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.UomIds.Contains(a.Asset.UomId));
			//}

			//if ((assetFilter.PartnerIds != null) && (assetFilter.PartnerIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.PartnerIds.Contains(a.Asset.Document.PartnerId));
			//}

			//if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.Administration.DivisionId));
			//}

			//if ((assetFilter.AssetStateIds != null) && (assetFilter.AssetStateIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetStateIds.Contains(a.Adm.AssetStateId));
			//}
			//else
			//{
			//     //query = query.Where(a => a.Adm.AssetStateId !=22 && a.Adm.AssetStateId != 27);
			//    //query = query.Where(a => assetFilter.AssetStateIds.Contains(20) || assetFilter.AssetStateIds.Contains(21) || assetFilter.AssetStateIds.Contains(24) || assetFilter.AssetStateIds.Contains(25) || assetFilter.AssetStateIds.Contains(26));
			//}

			//if ((assetFilter.InvStateIds != null) && (assetFilter.InvStateIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.InvStateIds.Contains(a.Asset.InvStateId));
			//}
			//else
			//{
			//    //query = query.Where(a => a.Asset.InvStateId != 40);
			//}

			//if ((assetFilter.DocumentTypeIds != null) && (assetFilter.DocumentTypeIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.DocumentTypeIds.Contains(a.Asset.Document.DocumentTypeId));
			//}

			//if ((assetFilter.AssetCategoryIds != null) && (assetFilter.AssetCategoryIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetCategoryIds.Contains(a.Adm.AssetCategoryId));
			//}

			List<int?> companiesIds = _context.Set<Model.EmployeeCompany>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CompanyId).ToList();

			if (companiesIds.Count == 0)
			{
				companiesIds = new List<int?>();
				companiesIds.Add(-1);

				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}
			else
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}

			if (assetFilter.Role != null && assetFilter.Role != "")
            {
                if (assetFilter.Role.ToUpper() == "ADMINISTRATOR")
                {
                    if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                    }

                    if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.EmployeeId == id)); }, assetFilter.EmployeeIds));
                    }
                }
                else
                {
                    if (assetFilter.Role.ToUpper() == "USER")
                    {

                        List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CostCenterId).ToList();

                        if (costCenterIds.Count == 0)
                        {
                            costCenterIds = new List<int?>();
                            costCenterIds.Add(10000000);
                        }


                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, costCenterIds));


                        if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                        {
                            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                        }

                    }
                }
            }

            //         if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
            //{
            //	query = query.Where(a => assetFilter.CostCenterIds.Contains(a.Adm.CostCenterId));
            //}
            //else
            //{
            //	if ((assetFilter.AdmCenterIds != null) && (assetFilter.AdmCenterIds.Count > 0))
            //	{
            //		query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.CostCenter.AdmCenter.Id == id; }, assetFilter.AdmCenterIds));
            //	}

            //             if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
            //             {
            //                 query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.CostCenter.AdmCenter.Id == id; }, assetFilter.RegionIds));
            //             }
            //         }

            if ((assetFilter.AssetNatureIds != null) && (assetFilter.AssetNatureIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.AssetNatureId == id; }, assetFilter.AssetNatureIds));
            }

            if ((assetFilter.CompanyIds != null) && (assetFilter.CompanyIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CompanyId == id; }, assetFilter.CompanyIds));
            }

            if ((assetFilter.InsuranceCategoryIds != null) && (assetFilter.InsuranceCategoryIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.InsuranceCategoryId == id; }, assetFilter.InsuranceCategoryIds));
            }

            if ((assetFilter.DimensionIds != null) && (assetFilter.DimensionIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.DimensionId == id; }, assetFilter.DimensionIds));
            }

            //if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
            //{
            //	query = query.Where(a => assetFilter.EmployeeIds.Contains(a.Adm.EmployeeId));
            //}

            if ((assetFilter.ProjectIds != null) && (assetFilter.ProjectIds.Count > 0))
            {
                query = query.Where(a => assetFilter.ProjectIds.Contains(a.Adm.ProjectId));
            }

            if ((assetFilter.DictionaryItemIds != null) && (assetFilter.DictionaryItemIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DictionaryItemIds.Contains(a.Asset.DictionaryItemId));
            }

            if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.DivisionId));
            }

            if ((assetFilter.DepartmentIds != null) && (assetFilter.DepartmentIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DepartmentIds.Contains(a.Asset.DepartmentId));
            }


            if ((assetFilter.BrandIds != null) && (assetFilter.BrandIds.Count > 0))
            {
                query = query.Where(a => assetFilter.BrandIds.Contains(a.Adm.BrandId));
            }

            if ((assetFilter.RoomIds != null) && (assetFilter.RoomIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.RoomId == id; }, assetFilter.RoomIds));
            }
            else
            {
                if ((assetFilter.LocationIds != null) && (assetFilter.LocationIds.Count > 0))
                {
                    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Id == id; }, assetFilter.LocationIds));
                }
                else
                {
                    if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Region.Id == id; }, assetFilter.RegionIds));
                    }
                }
            }

            //if ((assetFilter.AdministrationIds != null) && (assetFilter.AdministrationIds.Count > 0))
            //{
            //    query = query.Where(a => assetFilter.AdministrationIds.Contains(a.Adm.AdministrationId));
            //}
            //else
            //{
            //    if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
            //    {
            //        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Administration.Division.Id == id; }, assetFilter.DivisionIds));
            //    }

            //}

            if (assetFilter.ShowReco)
            {
                query = query.Where(a => a.Asset.ERPCode == null || a.Asset.ERPCode == "");
            }

            query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && a.Asset.AssetStateId == 7);

            if (assetFilter.FilterPurchaseDate != "false" && assetFilter.FilterPurchaseDate != null)
            {


                var monthYear = DateTime.ParseExact(assetFilter.FilterPurchaseDate,
                                  "yyyy-MM-dd",
                                   CultureInfo.InvariantCulture);

                var firstDayOfMonth = new DateTime(monthYear.Year, monthYear.Month, 1);
                var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
                query = query.Where(a => a.Asset.PurchaseDate >= firstDayOfMonth && a.Asset.PurchaseDate <= lastDayOfMonth);
                // Console.Write("Iesiri: " + query.Count());
            }

            //if (assetFilter.FromDate != null)
            //{
            //    query = query.Where(a => a.Asset.PurchaseDate >= assetFilter.FromDate);
            //}

            //if (assetFilter.ToDate != null)
            //{
            //    query = query.Where(a => a.Asset.PurchaseDate <= assetFilter.ToDate);
            //}


            //if (assetFilter.FromReceptionDate != null)
            //{
            //    query = query.Where(a => a.Asset.ReceptionDate >= assetFilter.FromReceptionDate);
            //}

            //if (assetFilter.ToReceptionDate != null)
            //{
            //    query = query.Where(a => a.Asset.ReceptionDate <= assetFilter.ToReceptionDate);
            //}

            //if (assetFilter.ErpCode != null && assetFilter.ErpCode == true)
            //{
            //    assetQuery = assetQuery.Where(a => a.ERPCode != null);
            //}
            //else if (assetFilter.ErpCode != null && assetFilter.ErpCode == false)
            //{
            //    assetQuery = assetQuery.Where(a => a.ERPCode == null);
            //}

            depTotal = new AssetDepTotal();
            depTotal.Count = query.Count();
            if (joinDep)
            {
                depTotal.DepFYStart = query.Sum(a => a.Dep.APCFYStart);
                depTotal.APCFYStart = query.Sum(a => a.Dep.DepFYStart);
                depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
                depTotal.CurrBkValue = query.Sum(a => a.Dep.Acquisition);
                depTotal.CurrentAPC = query.Sum(a => a.Dep.DepForYear);
                depTotal.DepTransfer = query.Sum(a => a.Dep.Retirement);
                depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
                depTotal.Acquisition = query.Sum(a => a.Dep.CurrBkValue);
                depTotal.DepForYear = query.Sum(a => a.Dep.CurrentAPC);
                depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
            }

            if (sorting != null)
            {
                query = sorting.Direction.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
            }

            if (paging != null)
                query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
            var list = query.ToList();

            return list;
        }

        public IEnumerable<AssetMonthDetail> GetMonthWFH(AssetFilter assetFilter, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
        {
            IQueryable<Model.Asset> assetQuery = null;
            IQueryable<AssetDepMD> depQuery = null;
            IQueryable<AssetAdmMD> admQuery = null;
            IQueryable<AssetAC> assetClassQuery = null;
            IQueryable<AssetMonthDetail> query = null;

            assetQuery = _context.Assets.AsQueryable();

            int? accSystemId = assetFilter.AccSystemId;
            int? accMonthId = assetFilter.AccMonthId;

			if (assetFilter.WfhYear == 2022)
			{
				accMonthId = 36;
			}
			else if (assetFilter.WfhYear == 2023)
			{
				accMonthId = 53;
			}
            else if (assetFilter.WfhYear == 2024)
            {
                accMonthId = 62;
            }
            else
			{
				accMonthId = -1;
			}

			if (!accSystemId.HasValue || accSystemId.Value <= 0)
            {
                Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
                if (accSystem != null) accSystemId = accSystem.Id;
            }

            depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
            admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));
            assetClassQuery = _context.AssetACs.AsQueryable();

            if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
            if (assetFilter.Filter != "" && assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.Employee.FirstName.Contains(assetFilter.Filter) || a.Employee.LastName.Contains(assetFilter.Filter) || a.Employee.Email.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter) || a.SAPCode.Contains(assetFilter.Filter)));
            if (assetFilter.FilterDoc != "" && assetFilter.FilterDoc != null) assetQuery = assetQuery.Where(a => a.Document.DocNo1.Contains(assetFilter.FilterDoc));
            if (assetFilter.IsPrinted != null) assetQuery = assetQuery.Where(a => a.IsPrinted == assetFilter.IsPrinted);
            if (assetFilter.IsDuplicate != null) assetQuery = assetQuery.Where(a => a.IsDuplicate == assetFilter.IsDuplicate);

            bool joinAdm = false;
            bool joinDep = false;
            bool joinAssetClass = false;

            includes = includes ?? string.Empty;

            foreach (var includeProperty in includes.Split
                        (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                int dotIndex = includeProperty.IndexOf(".");
                string prefix = string.Empty;
                string property = string.Empty;

                if (dotIndex > 0)
                {
                    prefix = includeProperty.Substring(0, dotIndex);
                    property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
                }
                else
                {
                    prefix = includeProperty;
                }

                //prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

                switch (prefix)
                {
                    case "Asset":
                        if (property.Length > 0) assetQuery = assetQuery.Include(property);
                        break;
                    case "Dep":
                        if (property.Length > 0) depQuery = depQuery.Include(property);
                        joinDep = true;
                        break;
                    case "Adm":
                        if (property.Length > 0) admQuery = admQuery.Include(property);
                        joinAdm = true;
                        break;
                    case "AssetClass":
                        if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
                        joinAssetClass = true;
                        break;
                    default:
                        break;
                }
            }

            query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

            if (joinAdm)
            {
                query = query
                    .Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
            }

            if (joinDep)
            {
                query = query
                    .Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
            }

			//if ((assetFilter.AssetTypeIds != null) && (assetFilter.AssetTypeIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetTypeIds.Contains(a.Adm.AssetTypeId));
			//}

			//if ((assetFilter.UomIds != null) && (assetFilter.UomIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.UomIds.Contains(a.Asset.UomId));
			//}

			//if ((assetFilter.PartnerIds != null) && (assetFilter.PartnerIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.PartnerIds.Contains(a.Asset.Document.PartnerId));
			//}

			//if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.Administration.DivisionId));
			//}

			//if ((assetFilter.AssetStateIds != null) && (assetFilter.AssetStateIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetStateIds.Contains(a.Adm.AssetStateId));
			//}
			//else
			//{
			//     //query = query.Where(a => a.Adm.AssetStateId !=22 && a.Adm.AssetStateId != 27);
			//    //query = query.Where(a => assetFilter.AssetStateIds.Contains(20) || assetFilter.AssetStateIds.Contains(21) || assetFilter.AssetStateIds.Contains(24) || assetFilter.AssetStateIds.Contains(25) || assetFilter.AssetStateIds.Contains(26));
			//}

			//if ((assetFilter.InvStateIds != null) && (assetFilter.InvStateIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.InvStateIds.Contains(a.Asset.InvStateId));
			//}
			//else
			//{
			//    //query = query.Where(a => a.Asset.InvStateId != 40);
			//}

			//if ((assetFilter.DocumentTypeIds != null) && (assetFilter.DocumentTypeIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.DocumentTypeIds.Contains(a.Asset.Document.DocumentTypeId));
			//}

			//if ((assetFilter.AssetCategoryIds != null) && (assetFilter.AssetCategoryIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetCategoryIds.Contains(a.Adm.AssetCategoryId));
			//}

			List<int?> companiesIds = _context.Set<Model.EmployeeCompany>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CompanyId).ToList();

			if (companiesIds.Count == 0)
			{
				companiesIds = new List<int?>();
				companiesIds.Add(-1);

				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}
			else
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}

			if (assetFilter.Role != null && assetFilter.Role != "")
            {
                if (assetFilter.Role.ToUpper() == "ADMINISTRATOR")
                {
                    if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                    }

                    if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.EmployeeId == id)); }, assetFilter.EmployeeIds));
                    }
                }
                else
                {
                    if (assetFilter.Role.ToUpper() == "USER")
                    {

                        List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CostCenterId).ToList();

                        if (costCenterIds.Count == 0)
                        {
                            costCenterIds = new List<int?>();
                            costCenterIds.Add(10000000);
                        }


                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, costCenterIds));


                        if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                        {
                            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                        }

                    }
                }
            }

            //         if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
            //{
            //	query = query.Where(a => assetFilter.CostCenterIds.Contains(a.Adm.CostCenterId));
            //}
            //else
            //{
            //	if ((assetFilter.AdmCenterIds != null) && (assetFilter.AdmCenterIds.Count > 0))
            //	{
            //		query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.CostCenter.AdmCenter.Id == id; }, assetFilter.AdmCenterIds));
            //	}

            //             if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
            //             {
            //                 query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.CostCenter.AdmCenter.Id == id; }, assetFilter.RegionIds));
            //             }
            //         }

            //if ((assetFilter.AssetNatureIds != null) && (assetFilter.AssetNatureIds.Count > 0))
            //{
            //    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.AssetNatureId == id; }, assetFilter.AssetNatureIds));
            //}

            //if ((assetFilter.CompanyIds != null) && (assetFilter.CompanyIds.Count > 0))
            //{
            //    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CompanyId == id; }, assetFilter.CompanyIds));
            //}

            //if ((assetFilter.InterCompanyIds != null) && (assetFilter.InterCompanyIds.Count > 0))
            //{
            //    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.InterCompanyId == id; }, assetFilter.InterCompanyIds));
            //}

            //if ((assetFilter.InsuranceCategoryIds != null) && (assetFilter.InsuranceCategoryIds.Count > 0))
            //{
            //    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.InsuranceCategoryId == id; }, assetFilter.InsuranceCategoryIds));
            //}

            //if ((assetFilter.DimensionIds != null) && (assetFilter.DimensionIds.Count > 0))
            //{
            //    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.DimensionId == id; }, assetFilter.DimensionIds));
            //}

            //if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
            //{
            //	query = query.Where(a => assetFilter.EmployeeIds.Contains(a.Adm.EmployeeId));
            //}

            //if ((assetFilter.ProjectIds != null) && (assetFilter.ProjectIds.Count > 0))
            //{
            //    query = query.Where(a => assetFilter.ProjectIds.Contains(a.Adm.ProjectId));
            //}

            //if ((assetFilter.DictionaryItemIds != null) && (assetFilter.DictionaryItemIds.Count > 0))
            //{
            //    query = query.Where(a => assetFilter.DictionaryItemIds.Contains(a.Asset.DictionaryItemId));
            //}

            //if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
            //{
            //    query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.DivisionId));
            //}

            //if ((assetFilter.DepartmentIds != null) && (assetFilter.DepartmentIds.Count > 0))
            //{
            //    query = query.Where(a => assetFilter.DepartmentIds.Contains(a.Asset.DepartmentId));
            //}


            if ((assetFilter.BrandIds != null) && (assetFilter.BrandIds.Count > 0))
            {
                query = query.Where(a => assetFilter.BrandIds.Contains(a.Adm.BrandId));
            }

            //if ((assetFilter.RoomIds != null) && (assetFilter.RoomIds.Count > 0))
            //{
            //    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.RoomId == id; }, assetFilter.RoomIds));
            //}
            //else
            //{
            //    if ((assetFilter.LocationIds != null) && (assetFilter.LocationIds.Count > 0))
            //    {
            //        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Id == id; }, assetFilter.LocationIds));
            //    }
            //    else
            //    {
            //        if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
            //        {
            //            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Region.Id == id; }, assetFilter.RegionIds));
            //        }
            //    }
            //}

            //if ((assetFilter.AdministrationIds != null) && (assetFilter.AdministrationIds.Count > 0))
            //{
            //    query = query.Where(a => assetFilter.AdministrationIds.Contains(a.Adm.AdministrationId));
            //}
            //else
            //{
            //    if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
            //    {
            //        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Administration.Division.Id == id; }, assetFilter.DivisionIds));
            //    }

            //}

            //if (assetFilter.ShowReco)
            //{
            //    query = query.Where(a => a.Asset.ERPCode == null || a.Asset.ERPCode == "");
            //}

            query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && a.Asset.IsWFH == true);

            if (assetFilter.FilterPurchaseDate != "false" && assetFilter.FilterPurchaseDate != null)
            {


                var monthYear = DateTime.ParseExact(assetFilter.FilterPurchaseDate,
                                  "yyyy-MM-dd",
                                   CultureInfo.InvariantCulture);

                var firstDayOfMonth = new DateTime(monthYear.Year, monthYear.Month, 1);
                var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
                query = query.Where(a => a.Asset.PurchaseDate >= firstDayOfMonth && a.Asset.PurchaseDate <= lastDayOfMonth);
                // Console.Write("Iesiri: " + query.Count());
            }

            //if (assetFilter.FromDate != null)
            //{
            //    query = query.Where(a => a.Asset.PurchaseDate >= assetFilter.FromDate);
            //}

            //if (assetFilter.ToDate != null)
            //{
            //    query = query.Where(a => a.Asset.PurchaseDate <= assetFilter.ToDate);
            //}


            //if (assetFilter.FromReceptionDate != null)
            //{
            //    query = query.Where(a => a.Asset.ReceptionDate >= assetFilter.FromReceptionDate);
            //}

            //if (assetFilter.ToReceptionDate != null)
            //{
            //    query = query.Where(a => a.Asset.ReceptionDate <= assetFilter.ToReceptionDate);
            //}

            //if (assetFilter.ErpCode != null && assetFilter.ErpCode == true)
            //{
            //    assetQuery = assetQuery.Where(a => a.ERPCode != null);
            //}
            //else if (assetFilter.ErpCode != null && assetFilter.ErpCode == false)
            //{
            //    assetQuery = assetQuery.Where(a => a.ERPCode == null);
            //}

            depTotal = new AssetDepTotal();
            depTotal.Count = query.Count();
            if (joinDep)
            {
                //depTotal.DepFYStart = query.Sum(a => a.Dep.APCFYStart);
                //depTotal.APCFYStart = query.Sum(a => a.Dep.DepFYStart);
                //depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
                //depTotal.CurrBkValue = query.Sum(a => a.Dep.Acquisition);
                //depTotal.CurrentAPC = query.Sum(a => a.Dep.DepForYear);
                //depTotal.DepTransfer = query.Sum(a => a.Dep.Retirement);
                //depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
                //depTotal.Acquisition = query.Sum(a => a.Dep.CurrBkValue);
                //depTotal.DepForYear = query.Sum(a => a.Dep.CurrentAPC);
                //depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
            }

            if (sorting != null)
            {
                query = sorting.Direction.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
            }

            if (paging != null)
                query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
            var list = query.ToList();

            return list;
        }

        public IEnumerable<AssetMonthDetail> GetMonthInvPlus(AssetFilter assetFilter, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
        {
            IQueryable<Model.Asset> assetQuery = null;
            IQueryable<AssetDepMD> depQuery = null;
            IQueryable<AssetAdmMD> admQuery = null;
            IQueryable<AssetAC> assetClassQuery = null;
            IQueryable<AssetMonthDetail> query = null;

            assetQuery = _context.Assets.AsQueryable();

            int? accSystemId = assetFilter.AccSystemId;
            int? accMonthId = assetFilter.AccMonthId;

            if (!accMonthId.HasValue || accMonthId.Value <= 0)
            {
                accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
            }

            if (!accSystemId.HasValue || accSystemId.Value <= 0)
            {
                Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
                if (accSystem != null) accSystemId = accSystem.Id;
            }

            depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
            admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));
            assetClassQuery = _context.AssetACs.AsQueryable();

            if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
            if (assetFilter.Filter != "" && assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.ERPCode.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter)));
            if (assetFilter.FilterDoc != "" && assetFilter.FilterDoc != null) assetQuery = assetQuery.Where(a => a.Document.DocNo1.Contains(assetFilter.FilterDoc));
            if (assetFilter.IsPrinted != null) assetQuery = assetQuery.Where(a => a.IsPrinted == assetFilter.IsPrinted);
            if (assetFilter.IsDuplicate != null) assetQuery = assetQuery.Where(a => a.IsDuplicate == assetFilter.IsDuplicate);

            bool joinAdm = false;
            bool joinDep = false;
            bool joinAssetClass = false;

            includes = includes ?? string.Empty;

            foreach (var includeProperty in includes.Split
                        (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                int dotIndex = includeProperty.IndexOf(".");
                string prefix = string.Empty;
                string property = string.Empty;

                if (dotIndex > 0)
                {
                    prefix = includeProperty.Substring(0, dotIndex);
                    property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
                }
                else
                {
                    prefix = includeProperty;
                }

                //prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

                switch (prefix)
                {
                    case "Asset":
                        if (property.Length > 0) assetQuery = assetQuery.Include(property);
                        break;
                    case "Dep":
                        if (property.Length > 0) depQuery = depQuery.Include(property);
                        joinDep = true;
                        break;
                    case "Adm":
                        if (property.Length > 0) admQuery = admQuery.Include(property);
                        joinAdm = true;
                        break;
                    case "AssetClass":
                        if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
                        joinAssetClass = true;
                        break;
                    default:
                        break;
                }
            }

            query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

            if (joinAdm)
            {
                query = query
                    .Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
            }

            if (joinDep)
            {
                query = query
                    .Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
            }

			List<int?> companiesIds = _context.Set<Model.EmployeeCompany>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CompanyId).ToList();

			if (companiesIds.Count == 0)
			{
				companiesIds = new List<int?>();
				companiesIds.Add(-1);

				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}
			else
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}

			if (assetFilter.Role != null && assetFilter.Role != "")
            {
                if (assetFilter.Role.ToUpper() == "ADMINISTRATOR")
                {
                    if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                    }

                    if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.EmployeeId == id)); }, assetFilter.EmployeeIds));
                    }
                }
                else
                {
                    if (assetFilter.Role.ToUpper() == "USER")
                    {

                        List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CostCenterId).ToList();

                        if (costCenterIds.Count == 0)
                        {
                            costCenterIds = new List<int?>();
                            costCenterIds.Add(10000000);
                        }


                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, costCenterIds));


                        if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                        {
                            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                        }

                    }
                }
            }

            if ((assetFilter.AssetNatureIds != null) && (assetFilter.AssetNatureIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.AssetNatureId == id; }, assetFilter.AssetNatureIds));
            }

            if ((assetFilter.CompanyIds != null) && (assetFilter.CompanyIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CompanyId == id; }, assetFilter.CompanyIds));
            }

            if ((assetFilter.InsuranceCategoryIds != null) && (assetFilter.InsuranceCategoryIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.InsuranceCategoryId == id; }, assetFilter.InsuranceCategoryIds));
            }

            if ((assetFilter.DimensionIds != null) && (assetFilter.DimensionIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.DimensionId == id; }, assetFilter.DimensionIds));
            }


            if ((assetFilter.ProjectIds != null) && (assetFilter.ProjectIds.Count > 0))
            {
                query = query.Where(a => assetFilter.ProjectIds.Contains(a.Adm.ProjectId));
            }

            if ((assetFilter.DictionaryItemIds != null) && (assetFilter.DictionaryItemIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DictionaryItemIds.Contains(a.Asset.DictionaryItemId));
            }

            if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.DivisionId));
            }

            if ((assetFilter.DepartmentIds != null) && (assetFilter.DepartmentIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DepartmentIds.Contains(a.Asset.DepartmentId));
            }


            if ((assetFilter.BrandIds != null) && (assetFilter.BrandIds.Count > 0))
            {
                query = query.Where(a => assetFilter.BrandIds.Contains(a.Adm.BrandId));
            }

            if ((assetFilter.RoomIds != null) && (assetFilter.RoomIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.RoomId == id; }, assetFilter.RoomIds));
            }
            else
            {
                if ((assetFilter.LocationIds != null) && (assetFilter.LocationIds.Count > 0))
                {
                    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Id == id; }, assetFilter.LocationIds));
                }
                else
                {
                    if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Region.Id == id; }, assetFilter.RegionIds));
                    }
                }
            }


            if (assetFilter.ShowReco)
            {
                query = query.Where(a => a.Asset.ERPCode == null || a.Asset.ERPCode == "");
            }

            query = query.Where(a => a.Asset.IsDeleted == true && a.Asset.Validated == true && a.Asset.IsTemp == true && a.Asset.IsPlus);

            if (assetFilter.FilterPurchaseDate != "false" && assetFilter.FilterPurchaseDate != null)
            {


                var monthYear = DateTime.ParseExact(assetFilter.FilterPurchaseDate,
                                  "yyyy-MM-dd",
                                   CultureInfo.InvariantCulture);

                var firstDayOfMonth = new DateTime(monthYear.Year, monthYear.Month, 1);
                var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
                query = query.Where(a => a.Asset.PurchaseDate >= firstDayOfMonth && a.Asset.PurchaseDate <= lastDayOfMonth);
                // Console.Write("Iesiri: " + query.Count());
            }

            //if (assetFilter.FromDate != null)
            //{
            //    query = query.Where(a => a.Asset.PurchaseDate >= assetFilter.FromDate);
            //}

            //if (assetFilter.ToDate != null)
            //{
            //    query = query.Where(a => a.Asset.PurchaseDate <= assetFilter.ToDate);
            //}


            //if (assetFilter.FromReceptionDate != null)
            //{
            //    query = query.Where(a => a.Asset.ReceptionDate >= assetFilter.FromReceptionDate);
            //}

            //if (assetFilter.ToReceptionDate != null)
            //{
            //    query = query.Where(a => a.Asset.ReceptionDate <= assetFilter.ToReceptionDate);
            //}

            //if (assetFilter.ErpCode != null && assetFilter.ErpCode == true)
            //{
            //    assetQuery = assetQuery.Where(a => a.ERPCode != null);
            //}
            //else if (assetFilter.ErpCode != null && assetFilter.ErpCode == false)
            //{
            //    assetQuery = assetQuery.Where(a => a.ERPCode == null);
            //}

            depTotal = new AssetDepTotal();
            depTotal.Count = query.Count();
            if (joinDep)
            {
                depTotal.DepFYStart = query.Sum(a => a.Dep.APCFYStart);
                depTotal.APCFYStart = query.Sum(a => a.Dep.DepFYStart);
                depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
                depTotal.CurrBkValue = query.Sum(a => a.Dep.Acquisition);
                depTotal.CurrentAPC = query.Sum(a => a.Dep.DepForYear);
                depTotal.DepTransfer = query.Sum(a => a.Dep.Retirement);
                depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
                depTotal.Acquisition = query.Sum(a => a.Dep.CurrBkValue);
                depTotal.DepForYear = query.Sum(a => a.Dep.CurrentAPC);
                depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
            }

            if (sorting != null)
            {
                query = sorting.Direction.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
            }

            if (paging != null)
                query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
            var list = query.ToList();

            return list;
        }

        public IEnumerable<AssetMonthDetail> GetMonthSuspended(AssetFilter assetFilter, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
        {
            IQueryable<Model.Asset> assetQuery = null;
            IQueryable<AssetDepMD> depQuery = null;
            IQueryable<AssetAdmMD> admQuery = null;
            IQueryable<AssetAC> assetClassQuery = null;
            IQueryable<AssetMonthDetail> query = null;

            assetQuery = _context.Assets.AsQueryable();

            int? accSystemId = assetFilter.AccSystemId;
            int? accMonthId = assetFilter.AccMonthId;

            if (!accMonthId.HasValue || accMonthId.Value <= 0)
            {
                accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
            }

            if (!accSystemId.HasValue || accSystemId.Value <= 0)
            {
                Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
                if (accSystem != null) accSystemId = accSystem.Id;
            }

            depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
            admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));
            assetClassQuery = _context.AssetACs.AsQueryable();

            if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
            if (assetFilter.Filter != "" && assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.ERPCode.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter)));
            if (assetFilter.FilterDoc != "" && assetFilter.FilterDoc != null) assetQuery = assetQuery.Where(a => a.Document.DocNo1.Contains(assetFilter.FilterDoc));
            if (assetFilter.IsPrinted != null) assetQuery = assetQuery.Where(a => a.IsPrinted == assetFilter.IsPrinted);
            if (assetFilter.IsDuplicate != null) assetQuery = assetQuery.Where(a => a.IsDuplicate == assetFilter.IsDuplicate);

            bool joinAdm = false;
            bool joinDep = false;
            bool joinAssetClass = false;

            includes = includes ?? string.Empty;

            foreach (var includeProperty in includes.Split
                        (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                int dotIndex = includeProperty.IndexOf(".");
                string prefix = string.Empty;
                string property = string.Empty;

                if (dotIndex > 0)
                {
                    prefix = includeProperty.Substring(0, dotIndex);
                    property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
                }
                else
                {
                    prefix = includeProperty;
                }

                //prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

                switch (prefix)
                {
                    case "Asset":
                        if (property.Length > 0) assetQuery = assetQuery.Include(property);
                        break;
                    case "Dep":
                        if (property.Length > 0) depQuery = depQuery.Include(property);
                        joinDep = true;
                        break;
                    case "Adm":
                        if (property.Length > 0) admQuery = admQuery.Include(property);
                        joinAdm = true;
                        break;
                    case "AssetClass":
                        if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
                        joinAssetClass = true;
                        break;
                    default:
                        break;
                }
            }

            query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

            if (joinAdm)
            {
                query = query
                    .Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
            }

            if (joinDep)
            {
                query = query
                    .Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
            }

			//if ((assetFilter.AssetTypeIds != null) && (assetFilter.AssetTypeIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetTypeIds.Contains(a.Adm.AssetTypeId));
			//}

			//if ((assetFilter.UomIds != null) && (assetFilter.UomIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.UomIds.Contains(a.Asset.UomId));
			//}

			//if ((assetFilter.PartnerIds != null) && (assetFilter.PartnerIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.PartnerIds.Contains(a.Asset.Document.PartnerId));
			//}

			//if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.Administration.DivisionId));
			//}

			//if ((assetFilter.AssetStateIds != null) && (assetFilter.AssetStateIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetStateIds.Contains(a.Adm.AssetStateId));
			//}
			//else
			//{
			//     //query = query.Where(a => a.Adm.AssetStateId !=22 && a.Adm.AssetStateId != 27);
			//    //query = query.Where(a => assetFilter.AssetStateIds.Contains(20) || assetFilter.AssetStateIds.Contains(21) || assetFilter.AssetStateIds.Contains(24) || assetFilter.AssetStateIds.Contains(25) || assetFilter.AssetStateIds.Contains(26));
			//}

			//if ((assetFilter.InvStateIds != null) && (assetFilter.InvStateIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.InvStateIds.Contains(a.Asset.InvStateId));
			//}
			//else
			//{
			//    //query = query.Where(a => a.Asset.InvStateId != 40);
			//}

			//if ((assetFilter.DocumentTypeIds != null) && (assetFilter.DocumentTypeIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.DocumentTypeIds.Contains(a.Asset.Document.DocumentTypeId));
			//}

			//if ((assetFilter.AssetCategoryIds != null) && (assetFilter.AssetCategoryIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetCategoryIds.Contains(a.Adm.AssetCategoryId));
			//}

			List<int?> companiesIds = _context.Set<Model.EmployeeCompany>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CompanyId).ToList();

			if (companiesIds.Count == 0)
			{
				companiesIds = new List<int?>();
				companiesIds.Add(-1);

				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}
			else
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}

			if (assetFilter.Role != null && assetFilter.Role != "")
            {
                if (assetFilter.Role.ToUpper() == "ADMINISTRATOR")
                {
                    if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                    }

                    if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.EmployeeId == id)); }, assetFilter.EmployeeIds));
                    }
                }
                else
                {
                    if (assetFilter.Role.ToUpper() == "USER")
                    {

                        List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CostCenterId).ToList();

                        if (costCenterIds.Count == 0)
                        {
                            costCenterIds = new List<int?>();
                            costCenterIds.Add(10000000);
                        }


                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, costCenterIds));


                        if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                        {
                            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                        }

                    }
                }
            }

            //         if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
            //{
            //	query = query.Where(a => assetFilter.CostCenterIds.Contains(a.Adm.CostCenterId));
            //}
            //else
            //{
            //	if ((assetFilter.AdmCenterIds != null) && (assetFilter.AdmCenterIds.Count > 0))
            //	{
            //		query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.CostCenter.AdmCenter.Id == id; }, assetFilter.AdmCenterIds));
            //	}

            //             if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
            //             {
            //                 query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.CostCenter.AdmCenter.Id == id; }, assetFilter.RegionIds));
            //             }
            //         }

            if ((assetFilter.AssetNatureIds != null) && (assetFilter.AssetNatureIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.AssetNatureId == id; }, assetFilter.AssetNatureIds));
            }

            if ((assetFilter.CompanyIds != null) && (assetFilter.CompanyIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CompanyId == id; }, assetFilter.CompanyIds));
            }

            if ((assetFilter.InsuranceCategoryIds != null) && (assetFilter.InsuranceCategoryIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.InsuranceCategoryId == id; }, assetFilter.InsuranceCategoryIds));
            }

            if ((assetFilter.DimensionIds != null) && (assetFilter.DimensionIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.DimensionId == id; }, assetFilter.DimensionIds));
            }

            //if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
            //{
            //	query = query.Where(a => assetFilter.EmployeeIds.Contains(a.Adm.EmployeeId));
            //}

            if ((assetFilter.ProjectIds != null) && (assetFilter.ProjectIds.Count > 0))
            {
                query = query.Where(a => assetFilter.ProjectIds.Contains(a.Adm.ProjectId));
            }

            if ((assetFilter.DictionaryItemIds != null) && (assetFilter.DictionaryItemIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DictionaryItemIds.Contains(a.Asset.DictionaryItemId));
            }

            if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.DivisionId));
            }

            if ((assetFilter.DepartmentIds != null) && (assetFilter.DepartmentIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DepartmentIds.Contains(a.Asset.DepartmentId));
            }


            if ((assetFilter.BrandIds != null) && (assetFilter.BrandIds.Count > 0))
            {
                query = query.Where(a => assetFilter.BrandIds.Contains(a.Adm.BrandId));
            }

            if ((assetFilter.RoomIds != null) && (assetFilter.RoomIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.RoomId == id; }, assetFilter.RoomIds));
            }
            else
            {
                if ((assetFilter.LocationIds != null) && (assetFilter.LocationIds.Count > 0))
                {
                    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Id == id; }, assetFilter.LocationIds));
                }
                else
                {
                    if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Region.Id == id; }, assetFilter.RegionIds));
                    }
                }
            }

            //if ((assetFilter.AdministrationIds != null) && (assetFilter.AdministrationIds.Count > 0))
            //{
            //    query = query.Where(a => assetFilter.AdministrationIds.Contains(a.Adm.AdministrationId));
            //}
            //else
            //{
            //    if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
            //    {
            //        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Administration.Division.Id == id; }, assetFilter.DivisionIds));
            //    }

            //}

            if (assetFilter.ShowReco)
            {
                query = query.Where(a => a.Asset.ERPCode == null || a.Asset.ERPCode == "");
            }

            query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && a.Asset.AssetStateId == 8);

            if (assetFilter.FilterPurchaseDate != "false" && assetFilter.FilterPurchaseDate != null)
            {


                var monthYear = DateTime.ParseExact(assetFilter.FilterPurchaseDate,
                                  "yyyy-MM-dd",
                                   CultureInfo.InvariantCulture);

                var firstDayOfMonth = new DateTime(monthYear.Year, monthYear.Month, 1);
                var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
                query = query.Where(a => a.Asset.PurchaseDate >= firstDayOfMonth && a.Asset.PurchaseDate <= lastDayOfMonth);
                // Console.Write("Iesiri: " + query.Count());
            }

            //if (assetFilter.FromDate != null)
            //{
            //    query = query.Where(a => a.Asset.PurchaseDate >= assetFilter.FromDate);
            //}

            //if (assetFilter.ToDate != null)
            //{
            //    query = query.Where(a => a.Asset.PurchaseDate <= assetFilter.ToDate);
            //}


            //if (assetFilter.FromReceptionDate != null)
            //{
            //    query = query.Where(a => a.Asset.ReceptionDate >= assetFilter.FromReceptionDate);
            //}

            //if (assetFilter.ToReceptionDate != null)
            //{
            //    query = query.Where(a => a.Asset.ReceptionDate <= assetFilter.ToReceptionDate);
            //}

            //if (assetFilter.ErpCode != null && assetFilter.ErpCode == true)
            //{
            //    assetQuery = assetQuery.Where(a => a.ERPCode != null);
            //}
            //else if (assetFilter.ErpCode != null && assetFilter.ErpCode == false)
            //{
            //    assetQuery = assetQuery.Where(a => a.ERPCode == null);
            //}

            depTotal = new AssetDepTotal();
            depTotal.Count = query.Count();
            if (joinDep)
            {
                depTotal.DepFYStart = query.Sum(a => a.Dep.APCFYStart);
                depTotal.APCFYStart = query.Sum(a => a.Dep.DepFYStart);
                depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
                depTotal.CurrBkValue = query.Sum(a => a.Dep.Acquisition);
                depTotal.CurrentAPC = query.Sum(a => a.Dep.DepForYear);
                depTotal.DepTransfer = query.Sum(a => a.Dep.Retirement);
                depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
                depTotal.Acquisition = query.Sum(a => a.Dep.CurrBkValue);
                depTotal.DepForYear = query.Sum(a => a.Dep.CurrentAPC);
                depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
            }

            if (sorting != null)
            {
                query = sorting.Direction.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
            }

            if (paging != null)
                query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
            var list = query.ToList();

            return list;
        }

        public IEnumerable<AssetMonthDetail> GetMonthInUse(AssetFilter assetFilter, ColumnAssetFilter columnFilters, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
        {
            IQueryable<Model.Asset> assetQuery = null;
            IQueryable<AssetDepMD> depQuery = null;
            IQueryable<AssetAdmMD> admQuery = null;
            IQueryable<AssetMonthDetail> query = null;

            _context.Database.SetCommandTimeout(120);
            assetQuery = _context.Assets.AsQueryable();

            //int assetStateId = _context.Set<Model.AssetState>().AsNoTracking().Where(a => a.Code == "IN_USE").Select(a => a.Id).SingleOrDefault();

            int? accSystemId = assetFilter.AccSystemId;
            int? accMonthId = assetFilter.AccMonthId;
            includes += ",Adm.Room.Location,";
            if (assetFilter.MonthYear != null)
            {
                var month = assetFilter.MonthYear.Value.AddMonths(-1).AddDays(1).Month;
				var year = assetFilter.MonthYear.Value.AddYears(0).Year;

				accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.Month == month && a.Year == year && a.IsDeleted == false).Select(a => a.Id).SingleOrDefault();

    //            if(accMonthId == 0)
    //            {
				//	accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
				//}
            }
            else
            {
				accMonthId = _context.Set<Model.Inventory>().AsNoTracking().Where(a => a.Active == true).Select(a => a.AccMonthId).SingleOrDefault();
			}

            if (!accSystemId.HasValue || accSystemId.Value <= 0)
            {
                Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
                if (accSystem != null) accSystemId = accSystem.Id;
            }

            depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
            admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));

            if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
            if (assetFilter.Filter != "" && assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.ERPCode.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter) || a.Document.DocNo1.Contains(assetFilter.Filter)));
            if (assetFilter.FilterDoc != "" && assetFilter.FilterDoc != null) assetQuery = assetQuery.Where(a => a.Document.DocNo1.Contains(assetFilter.FilterDoc));
            if (assetFilter.IsPrinted != null) assetQuery = assetQuery.Where(a => a.IsPrinted == assetFilter.IsPrinted);
            if (assetFilter.IsDuplicate != null) assetQuery = assetQuery.Where(a => a.IsDuplicate == assetFilter.IsDuplicate);
			if (assetFilter.IsTemp != null) assetQuery = assetQuery.Where(a => a.IsTemp == assetFilter.IsTemp);

			// ColumnFilter //


			if (columnFilters != null && columnFilters.InvNo != "" && columnFilters.InvNo != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(columnFilters.InvNo)));

           /* if (columnFilters != null && columnFilters.Quantity != "" && columnFilters.Quantity != null) admQuery = admQuery.Where(a => (a.Employee.InternalCode.Contains(columnFilters.Quantity)));*/

            // ColumnFilter //
            //foreach (var prop in propFilters)
            //{
            //    if (prop.Property == "Asset.ErpCode" && prop.Filter != "")
            //    {
            //        assetQuery = assetQuery.Where(a => a.ERPCode.Contains(prop.Filter));
            //    }
            //    else if (prop.Property == "Asset.InvNo" && prop.Filter != "")
            //    {
            //        assetQuery = assetQuery.Where(a => a.InvNo.Contains(prop.Filter));
            //    }
            //    else if (prop.Property == "Asset.SubNo" && prop.Filter != "")
            //    {
            //        assetQuery = assetQuery.Where(a => a.SubNo.Contains(prop.Filter));
            //    }
            //    else if (prop.Property == "AssetName" && prop.Filter != "")
            //    {
            //        assetQuery = assetQuery.Where(a => a.Name.Contains(prop.Filter));
            //    }
            //    else if (prop.Property == "AssetSerialNumber" && prop.Filter != "")
            //    {
            //        assetQuery = assetQuery.Where(a => a.SerialNumber.Contains(prop.Filter));
            //    }

            //}

            bool joinAdm = false;
            bool joinDep = false;
            bool joinAssetClass = false;

            includes = includes ?? string.Empty;
            
            foreach (var includeProperty in includes.Split
                        (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                int dotIndex = includeProperty.IndexOf(".");
                string prefix = string.Empty;
                string property = string.Empty;

                if (dotIndex > 0)
                {
                    prefix = includeProperty.Substring(0, dotIndex);
                    property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
                }
                else
                {
                    prefix = includeProperty;
                }

                //prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

                switch (prefix)
                {
                    case "Asset":
                        if (property.Length > 0) assetQuery = assetQuery.Include(property);
                        break;
                    case "Dep":
                        if (property.Length > 0) depQuery = depQuery.Include(property);
                        joinDep = true;
                        break;
                    case "Adm":
                        if (property.Length > 0) admQuery = admQuery.Include(property);
                        joinAdm = true;
                        break;
                    default:
                        break;
                }
            }

            query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });


            if (joinAdm)
            {
                query = query
                    .Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
            }

            if (joinDep)
            {
                query = query
                    .Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
            }


            //if ((assetFilter.AssetTypeIds != null) && (assetFilter.AssetTypeIds.Count > 0))
            //{
            //    query = query.Where(a => assetFilter.AssetTypeIds.Contains(a.Adm.AssetTypeId));
            //}

            //if ((assetFilter.UomIds != null) && (assetFilter.UomIds.Count > 0))
            //{
            //    query = query.Where(a => assetFilter.UomIds.Contains(a.Asset.UomId));
            //}

            //if ((assetFilter.PartnerIds != null) && (assetFilter.PartnerIds.Count > 0))
            //{
            //    query = query.Where(a => assetFilter.PartnerIds.Contains(a.Asset.Document.PartnerId));
            //}

            //if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
            //{
            //    query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.Administration.DivisionId));
            //}

            //if ((assetFilter.AssetStateIds != null) && (assetFilter.AssetStateIds.Count > 0))
            //{
            //    query = query.Where(a => assetFilter.AssetStateIds.Contains(a.Adm.AssetStateId));
            //}
            //else
            //{
            //     //query = query.Where(a => a.Adm.AssetStateId !=22 && a.Adm.AssetStateId != 27);
            //    //query = query.Where(a => assetFilter.AssetStateIds.Contains(20) || assetFilter.AssetStateIds.Contains(21) || assetFilter.AssetStateIds.Contains(24) || assetFilter.AssetStateIds.Contains(25) || assetFilter.AssetStateIds.Contains(26));
            //}

            //if ((assetFilter.InvStateIds != null) && (assetFilter.InvStateIds.Count > 0))
            //{
            //    query = query.Where(a => assetFilter.InvStateIds.Contains(a.Asset.InvStateId));
            //}
            //else
            //{
            //    //query = query.Where(a => a.Asset.InvStateId != 40);
            //}

            //if ((assetFilter.DocumentTypeIds != null) && (assetFilter.DocumentTypeIds.Count > 0))
            //{
            //    query = query.Where(a => assetFilter.DocumentTypeIds.Contains(a.Asset.Document.DocumentTypeId));
            //}

            //if ((assetFilter.AssetCategoryIds != null) && (assetFilter.AssetCategoryIds.Count > 0))
            //{
            //    query = query.Where(a => assetFilter.AssetCategoryIds.Contains(a.Adm.AssetCategoryId));
            //}

            //if (assetFilter.Role != null && assetFilter.Role != "")
            //{
            //    if (assetFilter.Role.ToUpper() == "ADMINISTRATOR")
            //    {
            //        if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
            //        {
            //            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
            //        }

            //        if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
            //        {
            //            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.EmployeeId == id)); }, assetFilter.EmployeeIds));
            //        }
            //    }
            //    else
            //    {
            //        if (assetFilter.Role.ToUpper() == "USER")
            //        {

            //            List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CostCenterId).ToList();

            //            if (costCenterIds.Count == 0)
            //            {
            //                costCenterIds = new List<int?>();
            //                costCenterIds.Add(10000000);
            //            }


            //            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, costCenterIds));


            //            if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
            //            {
            //                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
            //            }

            //        }
            //    }
            //}

            List<int?> companiesIds = _context.Set<Model.EmployeeCompany>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CompanyId).ToList();

			if (companiesIds.Count == 0)
			{
				companiesIds = new List<int?>();
				companiesIds.Add(-1);

				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}
			else
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}


            if (assetFilter.Role != null && assetFilter.Role != "")
            {
                if (assetFilter.Role.ToUpper() == "ADMINISTRATOR")
                {
                    if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                    }
                    else
                    {
						if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CostCenter.DivisionId == id; }, assetFilter.DivisionIds));
                        }
                        else
                        {
							if ((assetFilter.DepartmentIds != null) && (assetFilter.DepartmentIds.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CostCenter.Division.DepartmentId == id; }, assetFilter.DepartmentIds));
							}

							if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CostCenter.RegionId == id; }, assetFilter.RegionIds));
							}

							if ((assetFilter.AdmCenterIds != null) && (assetFilter.AdmCenterIds.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CostCenter.AdmCenterId == id; }, assetFilter.AdmCenterIds));
							}
						}

					}

                    if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.EmployeeId == id)); }, assetFilter.EmployeeIds));
                    }
                }
    //            else if (assetFilter.Role.ToUpper() == "PROCUREMENT")
    //            {
    //                List<int?> divisionIds = new List<int?>();
    //                divisionIds.Add(1482);

    //                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.Order.DivisionId != id; }, divisionIds));

    //                query = query.Where(a => a.Asset.Order.Offer.AssetType.Code != "STOCK_IT");

    //                if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
    //                {
    //                    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
    //                }
    //                else
    //                {
    //                    if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
    //                    {
    //                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CostCenter.DivisionId == id; }, assetFilter.DivisionIds));
    //                    }
    //                    else
    //                    {
    //                        if ((assetFilter.DepartmentIds != null) && (assetFilter.DepartmentIds.Count > 0))
    //                        {
    //                            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CostCenter.Division.DepartmentId == id; }, assetFilter.DepartmentIds));
    //                        }

    //                        if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
    //                        {
    //                            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CostCenter.RegionId == id; }, assetFilter.RegionIds));
    //                        }

    //                        if ((assetFilter.AdmCenterIds != null) && (assetFilter.AdmCenterIds.Count > 0))
    //                        {
    //                            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CostCenter.AdmCenterId == id; }, assetFilter.AdmCenterIds));
    //                        }
    //                    }

    //                }

    //                if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
    //                {
    //                    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.EmployeeId == id)); }, assetFilter.EmployeeIds));
    //                }
    //            }
    //            else if (assetFilter.Role.ToUpper() == "PROC-IT")
    //            {
    //                List<int?> divisionIds = _context.Set<Model.EmployeeDivision>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.DivisionId).ToList();

    //                if (divisionIds.Count == 0)
    //                {
    //                    divisionIds = new List<int?>();
    //                    divisionIds.Add(-1);
    //                }

    //                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.Order.DivisionId == id; }, divisionIds));

    //                query = query.Where(a => a.Asset.AssetType.Code != "STOCK_IT");
    //            }
    //            else if (assetFilter.Role.ToUpper() == "USER")
    //            {
					
				//	List<int?> divisionIds = _context.Set<Model.EmployeeDivision>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.DivisionId).ToList();

    //                if(divisionIds.Count > 0)
    //                {

				//		query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CostCenter.DivisionId == id) || (a.Asset.TempUserId == _context.UserId)); }, divisionIds));
				//	}
    //                else
    //                {
				//		List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CostCenterId).ToList();

				//		if (costCenterIds.Count == 0)
				//		{
				//			if ((assetFilter.EmpCostCenterIds != null) && (assetFilter.EmpCostCenterIds.Count > 0))
				//			{
				//				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id) || (a.Asset.TempUserId == _context.UserId)); }, assetFilter.EmpCostCenterIds));
				//			}
				//			else
				//			{
				//				costCenterIds = new List<int?>();
				//				costCenterIds.Add(-1);

				//				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id) || (a.Asset.TempUserId == _context.UserId)); }, costCenterIds));
				//			}
				//		}
				//		else
				//		{
				//			query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id) || (a.Asset.TempUserId == _context.UserId)); }, costCenterIds));
				//		}
				//	}

					


    //                if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
    //                {
    //                    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id) || (a.Asset.TempUserId == _context.UserId)); }, assetFilter.CostCenterIds));
    //                }
				//	else
				//	{
				//		if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
				//		{
				//			query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CostCenter.DivisionId == id; }, assetFilter.DivisionIds));
				//		}
				//		else
				//		{
				//			if ((assetFilter.DepartmentIds != null) && (assetFilter.DepartmentIds.Count > 0))
				//			{
				//				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CostCenter.Division.DepartmentId == id; }, assetFilter.DepartmentIds));
				//			}

				//			if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
				//			{
				//				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CostCenter.RegionId == id; }, assetFilter.RegionIds));
				//			}

				//			if ((assetFilter.AdmCenterIds != null) && (assetFilter.AdmCenterIds.Count > 0))
				//			{
				//				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CostCenter.AdmCenterId == id; }, assetFilter.AdmCenterIds));
				//			}
				//		}

				//	}



				//}
                else
                {
                    //if (assetFilter.Role.ToUpper() != "ADMINISTRATOR")
                    //{

                    //    if (assetFilter.Role.ToUpper() == "APPROVERS")
                    //    {
                    //        List<int?> employeeIds = new List<int?>();
                    //        employeeIds.Add(assetFilter.EmployeeId);


                    //        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => {
                    //            return a => (
                    //        (
                    //        (a.Asset.Order.EmployeeL4Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVEL4") ||
                    //        (a.Asset.Order.EmployeeL3Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVEL3") ||
                    //        (a.Asset.Order.EmployeeL2Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVEL2") ||
                    //        (a.Asset.Order.EmployeeL1Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVEL1") ||
                    //        (a.Asset.Order.EmployeeS1Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVELS1") ||
                    //        (a.Asset.Order.EmployeeS2Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVELS2") ||
                    //        (a.Asset.Order.EmployeeS3Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVELS3")) || a.Asset.Order.AppState.Code == "NEED_CONTRACT");
                    //        }, employeeIds));
                    //    }
                    //    else
                    //    {
                    //        List<int?> divisionIds = _context.Set<Model.EmployeeDivision>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.DivisionId).ToList();

                    //        if (divisionIds.Count == 0)
                    //        {
                    //            divisionIds = new List<int?>();
                    //            divisionIds.Add(-1);
                    //        }

                    //        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.Order.DivisionId == id; }, divisionIds));
                    //    }



                    //    //if ((orderFilter.CostCenterIds != null) && (orderFilter.CostCenterIds.Count > 0))
                    //    //{
                    //    //    query = query.Where(ExpressionHelper.GetInListPredicate<Model.OrderDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, orderFilter.CostCenterIds));
                    //    //}

                    //}

                    List<int?> divisionIds = _context.Set<Model.EmployeeDivision>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.DivisionId).ToList();

                    if (divisionIds.Count > 0)
                    {

                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CostCenter.DivisionId == id) || (a.Asset.TempUserId == _context.UserId)); }, divisionIds));
                    }
                    else
                    {
                        List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CostCenterId).ToList();

                        if (costCenterIds.Count == 0)
                        {
                            if ((assetFilter.EmpCostCenterIds != null) && (assetFilter.EmpCostCenterIds.Count > 0))
                            {
                                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id) || (a.Asset.TempUserId == _context.UserId)); }, assetFilter.EmpCostCenterIds));
                            }
                            else
                            {
                                costCenterIds = new List<int?>();
                                costCenterIds.Add(-1);

                                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id) || (a.Asset.TempUserId == _context.UserId)); }, costCenterIds));
                            }
                        }
                        else
                        {
                            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id) || (a.Asset.TempUserId == _context.UserId)); }, costCenterIds));
                        }
                    }




                    if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id) || (a.Asset.TempUserId == _context.UserId)); }, assetFilter.CostCenterIds));
                    }
                    else
                    {
                        if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
                        {
                            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CostCenter.DivisionId == id; }, assetFilter.DivisionIds));
                        }
                        else
                        {
                            if ((assetFilter.DepartmentIds != null) && (assetFilter.DepartmentIds.Count > 0))
                            {
                                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CostCenter.Division.DepartmentId == id; }, assetFilter.DepartmentIds));
                            }

                            if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
                            {
                                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CostCenter.RegionId == id; }, assetFilter.RegionIds));
                            }

                            if ((assetFilter.AdmCenterIds != null) && (assetFilter.AdmCenterIds.Count > 0))
                            {
                                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CostCenter.AdmCenterId == id; }, assetFilter.AdmCenterIds));
                            }
                        }

                    }
                }
            }

            //         if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
            //{
            //	query = query.Where(a => assetFilter.CostCenterIds.Contains(a.Adm.CostCenterId));
            //}
            //else
            //{
            //	if ((assetFilter.AdmCenterIds != null) && (assetFilter.AdmCenterIds.Count > 0))
            //	{
            //		query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.CostCenter.AdmCenter.Id == id; }, assetFilter.AdmCenterIds));
            //	}

            //             if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
            //             {
            //                 query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.CostCenter.AdmCenter.Id == id; }, assetFilter.RegionIds));
            //             }
            //         }

            //if ((assetFilter.AssetNatureIds != null) && (assetFilter.AssetNatureIds.Count > 0))
            //{
            //    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.AssetNatureId == id; }, assetFilter.AssetNatureIds));
            //}

            if ((assetFilter.CompanyIds != null) && (assetFilter.CompanyIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CompanyId == id; }, assetFilter.CompanyIds));
            }

            if ((assetFilter.PartnerIds != null) && (assetFilter.PartnerIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.Document.Partner.Id == id; }, columnFilters.PartnerIds));
            }

            //if ((assetFilter.InterCompanyIds != null) && (assetFilter.InterCompanyIds.Count > 0))
            //{
            //    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.InterCompanyId == id; }, assetFilter.InterCompanyIds));
            //}

            //if ((assetFilter.InsuranceCategoryIds != null) && (assetFilter.InsuranceCategoryIds.Count > 0))
            //{
            //    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.InsuranceCategoryId == id; }, assetFilter.InsuranceCategoryIds));
            //}

            //if ((assetFilter.DimensionIds != null) && (assetFilter.DimensionIds.Count > 0))
            //{
            //    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.DimensionId == id; }, assetFilter.DimensionIds));
            //}

            //if ((assetFilter.ExpAccountIds != null) && (assetFilter.ExpAccountIds.Count > 0))
            //{
            //    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.ExpAccountId == id; }, assetFilter.ExpAccountIds));
            //}

            //if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
            //{
            //	query = query.Where(a => assetFilter.EmployeeIds.Contains(a.Adm.EmployeeId));
            //}

            if ((assetFilter.ProjectIds != null) && (assetFilter.ProjectIds.Count > 0))
            {
                query = query.Where(a => assetFilter.ProjectIds.Contains(a.Adm.ProjectId));
            }

            if ((assetFilter.DictionaryItemIds != null) && (assetFilter.DictionaryItemIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DictionaryItemIds.Contains(a.Asset.DictionaryItemId));
            }

            /*if ((columnFilters.PartnerIds != null) && (columnFilters.PartnerIds.Count > 0))
            {
                query = query.Where(a => columnFilters.PartnerIds.Contains(a.));
            }*/



            //if ((assetFilter.BrandIds != null) && (assetFilter.BrandIds.Count > 0))
            //{
            //    query = query.Where(a => assetFilter.BrandIds.Contains(a.Adm.BrandId));
            //}

            //if ((assetFilter.RoomIds != null) && (assetFilter.RoomIds.Count > 0))
            //{
            //    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.RoomId == id; }, assetFilter.RoomIds));
            //}
            //else
            //{
            //    if ((assetFilter.LocationIds != null) && (assetFilter.LocationIds.Count > 0))
            //    {
            //        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Id == id; }, assetFilter.LocationIds));
            //    }
            //    else
            //    {
            //        if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
            //        {
            //            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Region.Id == id; }, assetFilter.RegionIds));
            //        }
            //    }
            //}

            //if ((assetFilter.AdministrationIds != null) && (assetFilter.AdministrationIds.Count > 0))
            //{
            //    query = query.Where(a => assetFilter.AdministrationIds.Contains(a.Adm.AdministrationId));
            //}
            //else
            //{
            //    if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
            //    {
            //        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Administration.Division.Id == id; }, assetFilter.DivisionIds));
            //    }

            //}

            //if (assetFilter.ShowReco)
            //{
            //    query = query.Where(a => a.Asset.ERPCode == null || a.Asset.ERPCode == "");
            //}

            if ((assetFilter.InvStateIds != null) && (assetFilter.InvStateIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.InvStateId == id; }, assetFilter.InvStateIds));
            }

            if ((assetFilter.TransferEmployeeIds != null) && (assetFilter.TransferEmployeeIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.EmployeeTransferId == id; }, assetFilter.TransferEmployeeIds));
            }

			if ((assetFilter.RequestIds != null) && (assetFilter.RequestIds.Count > 0))
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.RequestId == id; }, assetFilter.RequestIds));
			}

			// Column Filter //

			if ((columnFilters != null && columnFilters.InvStateIds != null) && (columnFilters.InvStateIds.Count > 0))
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.InvStateId == id; }, columnFilters.InvStateIds));
			}

            if ((columnFilters != null && columnFilters.LocationIds != null) && (columnFilters.LocationIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.LocationId == id; }, columnFilters.LocationIds));
            }


            // Column Filter //

            //query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true);// && a.Asset.AssetStateId == assetStateId);
            query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && ((a.Asset.IsTemp == false) || (a.Asset.IsTemp == true && a.Asset.InvNo.StartsWith("T") && a.Asset.CostCenterId != 766)));

            if (columnFilters != null && columnFilters.Quantity != "" && columnFilters.Quantity != null) query = query.Where(a => (a.Asset.Employee.InternalCode.Contains(columnFilters.Quantity)));

            //if (assetFilter.FilterPurchaseDate != "false" && assetFilter.FilterPurchaseDate != null)
            //{


            //    var monthYear = DateTime.ParseExact(assetFilter.FilterPurchaseDate,
            //                      "yyyy-MM-dd",
            //                       CultureInfo.InvariantCulture);

            //    var firstDayOfMonth = new DateTime(monthYear.Year, monthYear.Month, 1);
            //    var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
            //    query = query.Where(a => a.Asset.PurchaseDate >= firstDayOfMonth && a.Asset.PurchaseDate <= lastDayOfMonth);
            //    // Console.Write("Iesiri: " + query.Count());
            //}

            //if (assetFilter.FromDate != null)
            //{
            //    query = query.Where(a => a.Asset.PurchaseDate >= assetFilter.FromDate);
            //}

            //if (assetFilter.ToDate != null)
            //{
            //    query = query.Where(a => a.Asset.PurchaseDate <= assetFilter.ToDate);
            //}


            //if (assetFilter.FromReceptionDate != null)
            //{
            //    query = query.Where(a => a.Asset.ReceptionDate >= assetFilter.FromReceptionDate);
            //}

            //if (assetFilter.ToReceptionDate != null)
            //{
            //    query = query.Where(a => a.Asset.ReceptionDate <= assetFilter.ToReceptionDate);
            //}

            //if (assetFilter.ErpCode != null && assetFilter.ErpCode == true)
            //{
            //    assetQuery = assetQuery.Where(a => a.ERPCode != null);
            //}
            //else if (assetFilter.ErpCode != null && assetFilter.ErpCode == false)
            //{
            //    assetQuery = assetQuery.Where(a => a.ERPCode == null);
            //}


            depTotal = new AssetDepTotal();
            depTotal.Count = query.Count();
            if (joinDep && assetFilter.ShowValues)
            {
                depTotal.DepFYStart = query.Sum(a => a.Dep.DepFYStart);
                depTotal.APCFYStart = query.Sum(a => a.Dep.APCFYStart);
                depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
                depTotal.CurrBkValue = query.Sum(a => a.Dep.CurrBkValue);
                depTotal.CurrentAPC = query.Sum(a => a.Dep.CurrentAPC);
                depTotal.DepTransfer = query.Sum(a => a.Dep.DepTransfer);
                depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
                depTotal.Transfer = query.Sum(a => a.Dep.Transfer);
                depTotal.Retirement = query.Sum(a => a.Dep.Retirement);
                depTotal.Acquisition = query.Sum(a => a.Dep.Acquisition);
                depTotal.DepForYear = query.Sum(a => a.Dep.DepForYear);
                depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
            }

            if (sorting != null)
            {
                query = sorting.Direction.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
            }

            if (paging != null)
                query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
            var list = query.ToList();

            return list;
        }

		public IEnumerable<AssetMonthDetail> GetMonthTemps(AssetFilter assetFilter, List<PropertyFilter> propFilters, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
		{
			IQueryable<Model.Asset> assetQuery = null;
			IQueryable<AssetDepMD> depQuery = null;
			IQueryable<AssetAdmMD> admQuery = null;
			IQueryable<AssetMonthDetail> query = null;

			assetQuery = _context.Assets.AsQueryable();

			//int assetStateId = _context.Set<Model.AssetState>().AsNoTracking().Where(a => a.Code == "IN_USE").Select(a => a.Id).SingleOrDefault();

			int? accSystemId = assetFilter.AccSystemId;
			int? accMonthId = assetFilter.AccMonthId;

			if (assetFilter.MonthYear != null)
			{
				var month = assetFilter.MonthYear.Value.AddDays(1).Month;
				var year = assetFilter.MonthYear.Value.AddYears(0).Year;

				accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.Month == month && a.Year == year && a.IsDeleted == false).Select(a => a.Id).SingleOrDefault();

				//            if(accMonthId == 0)
				//            {
				//	accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
				//}
			}
			else
			{
				accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
			}

			if (!accSystemId.HasValue || accSystemId.Value <= 0)
			{
				Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
				if (accSystem != null) accSystemId = accSystem.Id;
			}

			depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
			admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));

			if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
			if (assetFilter.Filter != "" && assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.ERPCode.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter) || a.Document.DocNo1.Contains(assetFilter.Filter)));
			if (assetFilter.FilterDoc != "" && assetFilter.FilterDoc != null) assetQuery = assetQuery.Where(a => a.Document.DocNo1.Contains(assetFilter.FilterDoc));
			if (assetFilter.IsPrinted != null) assetQuery = assetQuery.Where(a => a.IsPrinted == assetFilter.IsPrinted);
			if (assetFilter.IsDuplicate != null) assetQuery = assetQuery.Where(a => a.IsDuplicate == assetFilter.IsDuplicate);

			bool joinAdm = false;
			bool joinDep = false;
			bool joinAssetClass = false;

			includes = includes ?? string.Empty;

			foreach (var includeProperty in includes.Split
						(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
			{
				int dotIndex = includeProperty.IndexOf(".");
				string prefix = string.Empty;
				string property = string.Empty;

				if (dotIndex > 0)
				{
					prefix = includeProperty.Substring(0, dotIndex);
					property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
				}
				else
				{
					prefix = includeProperty;
				}

				//prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

				switch (prefix)
				{
					case "Asset":
						if (property.Length > 0) assetQuery = assetQuery.Include(property);
						break;
					case "Dep":
						if (property.Length > 0) depQuery = depQuery.Include(property);
						joinDep = true;
						break;
					case "Adm":
						if (property.Length > 0) admQuery = admQuery.Include(property);
						joinAdm = true;
						break;
					default:
						break;
				}
			}

			query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

			if (joinAdm)
			{
				query = query
					.Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
			}

			if (joinDep)
			{
				query = query
					.Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
			}

			if (assetFilter.ShowAsignedTemp)
			{
				query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && (a.Asset.IsTemp == true && a.Asset.TempUserId == null && a.Asset.InvNo.StartsWith("T00")));
			}
			else
			{
				query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && (a.Asset.IsTemp == true && a.Asset.TempUserId != null && a.Asset.InvNo.StartsWith("T00")));
			}


			depTotal = new AssetDepTotal();
			depTotal.Count = query.Count();
			if (joinDep && assetFilter.ShowValues)
			{
				depTotal.DepFYStart = query.Sum(a => a.Dep.DepFYStart);
				depTotal.APCFYStart = query.Sum(a => a.Dep.APCFYStart);
				depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
				depTotal.CurrBkValue = query.Sum(a => a.Dep.CurrBkValue);
				depTotal.CurrentAPC = query.Sum(a => a.Dep.CurrentAPC);
				depTotal.DepTransfer = query.Sum(a => a.Dep.DepTransfer);
				depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
				depTotal.Transfer = query.Sum(a => a.Dep.Transfer);
				depTotal.Retirement = query.Sum(a => a.Dep.Retirement);
				depTotal.Acquisition = query.Sum(a => a.Dep.Acquisition);
				depTotal.DepForYear = query.Sum(a => a.Dep.DepForYear);
				depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
			}

			if (sorting != null)
			{
				query = sorting.Direction.ToLower() == "asc"
					? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
					: query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
			}

			if (paging != null)
				query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
			var list = query.ToList();

			return list;
		}

		public IEnumerable<AssetMonthDetail> GetMonthStockHistory(AssetFilter assetFilter, int? bfId, bool historyMeniu, List<PropertyFilter> propFilters, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
		{
			IQueryable<Model.Asset> assetQuery = null;
			IQueryable<AssetDepMD> depQuery = null;
			IQueryable<AssetAdmMD> admQuery = null;
			IQueryable<AssetMonthDetail> query = null;

			assetQuery = _context.Assets.AsQueryable();

			//int assetStateId = _context.Set<Model.AssetState>().AsNoTracking().Where(a => a.Code == "IN_USE").Select(a => a.Id).SingleOrDefault();

			int? accSystemId = assetFilter.AccSystemId;
			int? accMonthId = assetFilter.AccMonthId;

			if (assetFilter.MonthYear != null)
			{
				var month = assetFilter.MonthYear.Value.AddDays(1).Month;
				var year = assetFilter.MonthYear.Value.AddYears(1).Year;

				accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.Month == month && a.Year == year && a.IsDeleted == false).Select(a => a.Id).SingleOrDefault();
			}
			else
			{
				accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
			}

			if (!accSystemId.HasValue || accSystemId.Value <= 0)
			{
				Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
				if (accSystem != null) accSystemId = accSystem.Id;
			}

			depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
			admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));

			if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
			if (assetFilter.Filter != "" && assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.ERPCode.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter) || a.Document.DocNo1.Contains(assetFilter.Filter)));
			if (assetFilter.FilterDoc != "" && assetFilter.FilterDoc != null) assetQuery = assetQuery.Where(a => a.Document.DocNo1.Contains(assetFilter.FilterDoc));
			if (assetFilter.IsPrinted != null) assetQuery = assetQuery.Where(a => a.IsPrinted == assetFilter.IsPrinted);
			if (assetFilter.IsDuplicate != null) assetQuery = assetQuery.Where(a => a.IsDuplicate == assetFilter.IsDuplicate);

			//foreach (var prop in propFilters)
			//{
			//    if (prop.Property == "Asset.ErpCode" && prop.Filter != "")
			//    {
			//        assetQuery = assetQuery.Where(a => a.ERPCode.Contains(prop.Filter));
			//    }
			//    else if (prop.Property == "Asset.InvNo" && prop.Filter != "")
			//    {
			//        assetQuery = assetQuery.Where(a => a.InvNo.Contains(prop.Filter));
			//    }
			//    else if (prop.Property == "Asset.SubNo" && prop.Filter != "")
			//    {
			//        assetQuery = assetQuery.Where(a => a.SubNo.Contains(prop.Filter));
			//    }
			//    else if (prop.Property == "AssetName" && prop.Filter != "")
			//    {
			//        assetQuery = assetQuery.Where(a => a.Name.Contains(prop.Filter));
			//    }
			//    else if (prop.Property == "AssetSerialNumber" && prop.Filter != "")
			//    {
			//        assetQuery = assetQuery.Where(a => a.SerialNumber.Contains(prop.Filter));
			//    }

			//}

			bool joinAdm = false;
			bool joinDep = false;
			bool joinAssetClass = false;

			includes = includes ?? string.Empty;

			foreach (var includeProperty in includes.Split
						(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
			{
				int dotIndex = includeProperty.IndexOf(".");
				string prefix = string.Empty;
				string property = string.Empty;

				if (dotIndex > 0)
				{
					prefix = includeProperty.Substring(0, dotIndex);
					property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
				}
				else
				{
					prefix = includeProperty;
				}

				//prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

				switch (prefix)
				{
					case "Asset":
						if (property.Length > 0) assetQuery = assetQuery.Include(property);
						break;
					case "Dep":
						if (property.Length > 0) depQuery = depQuery.Include(property);
						joinDep = true;
						break;
					case "Adm":
						if (property.Length > 0) admQuery = admQuery.Include(property);
						joinAdm = true;
						break;
					default:
						break;
				}
			}

			query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

			if (joinAdm)
			{
				query = query
					.Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
			}

			if (joinDep)
			{
				query = query
					.Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
			}

			//if ((assetFilter.AssetTypeIds != null) && (assetFilter.AssetTypeIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetTypeIds.Contains(a.Adm.AssetTypeId));
			//}

			//if ((assetFilter.UomIds != null) && (assetFilter.UomIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.UomIds.Contains(a.Asset.UomId));
			//}

			//if ((assetFilter.PartnerIds != null) && (assetFilter.PartnerIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.PartnerIds.Contains(a.Asset.Document.PartnerId));
			//}

			//if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.Administration.DivisionId));
			//}

			//if ((assetFilter.AssetStateIds != null) && (assetFilter.AssetStateIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetStateIds.Contains(a.Adm.AssetStateId));
			//}
			//else
			//{
			//     //query = query.Where(a => a.Adm.AssetStateId !=22 && a.Adm.AssetStateId != 27);
			//    //query = query.Where(a => assetFilter.AssetStateIds.Contains(20) || assetFilter.AssetStateIds.Contains(21) || assetFilter.AssetStateIds.Contains(24) || assetFilter.AssetStateIds.Contains(25) || assetFilter.AssetStateIds.Contains(26));
			//}

			//if ((assetFilter.InvStateIds != null) && (assetFilter.InvStateIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.InvStateIds.Contains(a.Asset.InvStateId));
			//}
			//else
			//{
			//    //query = query.Where(a => a.Asset.InvStateId != 40);
			//}

			//if ((assetFilter.DocumentTypeIds != null) && (assetFilter.DocumentTypeIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.DocumentTypeIds.Contains(a.Asset.Document.DocumentTypeId));
			//}

			//if ((assetFilter.AssetCategoryIds != null) && (assetFilter.AssetCategoryIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetCategoryIds.Contains(a.Adm.AssetCategoryId));
			//}

			//if (assetFilter.Role != null && assetFilter.Role != "")
			//{
			//    if (assetFilter.Role.ToUpper() == "ADMINISTRATOR")
			//    {
			//        if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
			//        {
			//            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
			//        }

			//        if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
			//        {
			//            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.EmployeeId == id)); }, assetFilter.EmployeeIds));
			//        }
			//    }
			//    else
			//    {
			//        if (assetFilter.Role.ToUpper() == "USER")
			//        {

			//            List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CostCenterId).ToList();

			//            if (costCenterIds.Count == 0)
			//            {
			//                costCenterIds = new List<int?>();
			//                costCenterIds.Add(10000000);
			//            }


			//            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, costCenterIds));


			//            if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
			//            {
			//                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
			//            }

			//        }
			//    }
			//}

			List<int?> companiesIds = _context.Set<Model.EmployeeCompany>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CompanyId).ToList();

			if (companiesIds.Count == 0)
			{
				companiesIds = new List<int?>();
				companiesIds.Add(-1);

				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}
			else
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}


			if (assetFilter.Role != null && assetFilter.Role != "")
			{
				if (assetFilter.Role.ToUpper() == "ADMINISTRATOR")
				{
					if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
					{
						query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
					}

					if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
					{
						query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.EmployeeId == id)); }, assetFilter.EmployeeIds));
					}
				}
				else if (assetFilter.Role.ToUpper() == "PROCUREMENT")
				{
					List<int?> divisionIds = new List<int?>();
					divisionIds.Add(1482);

					query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.Order.DivisionId != id; }, divisionIds));

					query = query.Where(a => a.Asset.Order.Offer.AssetType.Code != "STOCK_IT");
				}
				else if (assetFilter.Role.ToUpper() == "PROC-IT")
				{
					List<int?> divisionIds = _context.Set<Model.EmployeeDivision>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.DivisionId).ToList();

					if (divisionIds.Count == 0)
					{
						divisionIds = new List<int?>();
						divisionIds.Add(-1);
					}

					query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.Order.DivisionId == id; }, divisionIds));

					query = query.Where(a => a.Asset.AssetType.Code != "STOCK_IT");
				}
				else if (assetFilter.Role.ToUpper() == "USER")
				{

					List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CostCenterId).ToList();

					if (costCenterIds.Count == 0)
					{
						costCenterIds = new List<int?>();
						costCenterIds.Add(-1);
					}


					query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, costCenterIds));


					if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
					{
						query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
					}

				}
				else
				{
					if (assetFilter.Role.ToUpper() != "ADMINISTRATOR")
					{

						if (assetFilter.Role.ToUpper() == "APPROVERS")
						{
							List<int?> employeeIds = new List<int?>();
							employeeIds.Add(assetFilter.EmployeeId);


							query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => {
								return a => (
							(
							(a.Asset.Order.EmployeeL4Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVEL4") ||
							(a.Asset.Order.EmployeeL3Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVEL3") ||
							(a.Asset.Order.EmployeeL2Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVEL2") ||
							(a.Asset.Order.EmployeeL1Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVEL1") ||
							(a.Asset.Order.EmployeeS1Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVELS1") ||
							(a.Asset.Order.EmployeeS2Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVELS2") ||
							(a.Asset.Order.EmployeeS3Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVELS3")) || a.Asset.Order.AppState.Code == "NEED_CONTRACT");
							}, employeeIds));
						}
						else
						{
							List<int?> divisionIds = _context.Set<Model.EmployeeDivision>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.DivisionId).ToList();

							if (divisionIds.Count == 0)
							{
								divisionIds = new List<int?>();
								divisionIds.Add(-1);
							}

							query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.Order.DivisionId == id; }, divisionIds));
						}



						//if ((orderFilter.CostCenterIds != null) && (orderFilter.CostCenterIds.Count > 0))
						//{
						//    query = query.Where(ExpressionHelper.GetInListPredicate<Model.OrderDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, orderFilter.CostCenterIds));
						//}

					}
				}
			}
			//         if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
			//{
			//	query = query.Where(a => assetFilter.CostCenterIds.Contains(a.Adm.CostCenterId));
			//}
			//else
			//{
			//	if ((assetFilter.AdmCenterIds != null) && (assetFilter.AdmCenterIds.Count > 0))
			//	{
			//		query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.CostCenter.AdmCenter.Id == id; }, assetFilter.AdmCenterIds));
			//	}

			//             if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
			//             {
			//                 query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.CostCenter.AdmCenter.Id == id; }, assetFilter.RegionIds));
			//             }
			//         }

			if ((assetFilter.AssetNatureIds != null) && (assetFilter.AssetNatureIds.Count > 0))
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.AssetNatureId == id; }, assetFilter.AssetNatureIds));
			}

			if ((assetFilter.CompanyIds != null) && (assetFilter.CompanyIds.Count > 0))
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CompanyId == id; }, assetFilter.CompanyIds));
			}

			if ((assetFilter.InsuranceCategoryIds != null) && (assetFilter.InsuranceCategoryIds.Count > 0))
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.InsuranceCategoryId == id; }, assetFilter.InsuranceCategoryIds));
			}

			if ((assetFilter.DimensionIds != null) && (assetFilter.DimensionIds.Count > 0))
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.DimensionId == id; }, assetFilter.DimensionIds));
			}

			//if ((assetFilter.ExpAccountIds != null) && (assetFilter.ExpAccountIds.Count > 0))
			//{
			//	query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.ExpAccountId == id; }, assetFilter.ExpAccountIds));
			//}

			//if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
			//{
			//	query = query.Where(a => assetFilter.EmployeeIds.Contains(a.Adm.EmployeeId));
			//}

			if ((assetFilter.ProjectIds != null) && (assetFilter.ProjectIds.Count > 0))
			{
				query = query.Where(a => assetFilter.ProjectIds.Contains(a.Adm.ProjectId));
			}

			if ((assetFilter.DictionaryItemIds != null) && (assetFilter.DictionaryItemIds.Count > 0))
			{
				query = query.Where(a => assetFilter.DictionaryItemIds.Contains(a.Asset.DictionaryItemId));
			}

			if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
			{
				query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.DivisionId));
			}

			if ((assetFilter.DepartmentIds != null) && (assetFilter.DepartmentIds.Count > 0))
			{
				query = query.Where(a => assetFilter.DepartmentIds.Contains(a.Asset.DepartmentId));
			}


			if ((assetFilter.BrandIds != null) && (assetFilter.BrandIds.Count > 0))
			{
				query = query.Where(a => assetFilter.BrandIds.Contains(a.Adm.BrandId));
			}

			if ((assetFilter.RoomIds != null) && (assetFilter.RoomIds.Count > 0))
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.RoomId == id; }, assetFilter.RoomIds));
			}
			else
			{
				if ((assetFilter.LocationIds != null) && (assetFilter.LocationIds.Count > 0))
				{
					query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Id == id; }, assetFilter.LocationIds));
				}
				else
				{
					if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
					{
						query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Region.Id == id; }, assetFilter.RegionIds));
					}
				}
			}

			//if ((assetFilter.AdministrationIds != null) && (assetFilter.AdministrationIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AdministrationIds.Contains(a.Adm.AdministrationId));
			//}
			//else
			//{
			//    if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
			//    {
			//        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Administration.Division.Id == id; }, assetFilter.DivisionIds));
			//    }

			//}

			//if (assetFilter.ShowReco)
			//{
			//    query = query.Where(a => a.Asset.ERPCode == null || a.Asset.ERPCode == "");
			//}

			if ((assetFilter.InvStateIds != null) && (assetFilter.InvStateIds.Count > 0))
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.InvStateId == id; }, assetFilter.InvStateIds));
			}

			if ((assetFilter.TransferEmployeeIds != null) && (assetFilter.TransferEmployeeIds.Count > 0))
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.EmployeeTransferId == id; }, assetFilter.TransferEmployeeIds));
			}

            if (bfId.HasValue)
            {
                query = query.Where(a => a.Asset.BudgetForecastId == bfId);
            }
            else
            {
                if (!historyMeniu)
                {
					query = query.Where(a => a.Asset.BudgetForecastId == -1);
				}
				
			}

			query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && a.Asset.StockId != null);// && a.Asset.AssetStateId == assetStateId);

			//if (assetFilter.FilterPurchaseDate != "false" && assetFilter.FilterPurchaseDate != null)
			//{


			//	var monthYear = DateTime.ParseExact(assetFilter.FilterPurchaseDate,
			//					  "yyyy-MM-dd",
			//					   CultureInfo.InvariantCulture);

			//	var firstDayOfMonth = new DateTime(monthYear.Year, monthYear.Month, 1);
			//	var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
			//	query = query.Where(a => a.Asset.PurchaseDate >= firstDayOfMonth && a.Asset.PurchaseDate <= lastDayOfMonth);
			//	// Console.Write("Iesiri: " + query.Count());
			//}

			//if (assetFilter.FromDate != null)
			//{
			//    query = query.Where(a => a.Asset.PurchaseDate >= assetFilter.FromDate);
			//}

			//if (assetFilter.ToDate != null)
			//{
			//    query = query.Where(a => a.Asset.PurchaseDate <= assetFilter.ToDate);
			//}


			//if (assetFilter.FromReceptionDate != null)
			//{
			//    query = query.Where(a => a.Asset.ReceptionDate >= assetFilter.FromReceptionDate);
			//}

			//if (assetFilter.ToReceptionDate != null)
			//{
			//    query = query.Where(a => a.Asset.ReceptionDate <= assetFilter.ToReceptionDate);
			//}

			//if (assetFilter.ErpCode != null && assetFilter.ErpCode == true)
			//{
			//    assetQuery = assetQuery.Where(a => a.ERPCode != null);
			//}
			//else if (assetFilter.ErpCode != null && assetFilter.ErpCode == false)
			//{
			//    assetQuery = assetQuery.Where(a => a.ERPCode == null);
			//}


			depTotal = new AssetDepTotal();
			depTotal.Count = query.Count();
			if (joinDep && assetFilter.ShowValues)
			{
				depTotal.DepFYStart = query.Sum(a => a.Dep.DepFYStart);
				depTotal.APCFYStart = query.Sum(a => a.Dep.APCFYStart);
				depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
				depTotal.CurrBkValue = query.Sum(a => a.Dep.CurrBkValue);
				depTotal.CurrentAPC = query.Sum(a => a.Dep.CurrentAPC);
				depTotal.DepTransfer = query.Sum(a => a.Dep.DepTransfer);
				depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
				depTotal.Transfer = query.Sum(a => a.Dep.Transfer);
				depTotal.Retirement = query.Sum(a => a.Dep.Retirement);
				depTotal.Acquisition = query.Sum(a => a.Dep.Acquisition);
				depTotal.DepForYear = query.Sum(a => a.Dep.DepForYear);
				depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
			}

			if (sorting != null)
			{
				query = sorting.Direction.ToLower() == "asc"
					? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
					: query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
			}

			if (paging != null)
				query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
			var list = query.ToList();

			return list;
		}

		public IEnumerable<AssetMonthDetail> GetMonthBudgetForecastCorrection(AssetFilter assetFilter, int? bfId, bool historyMeniu, List<PropertyFilter> propFilters, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
		{
			IQueryable<Model.Asset> assetQuery = null;
			IQueryable<AssetDepMD> depQuery = null;
			IQueryable<AssetAdmMD> admQuery = null;
			IQueryable<AssetMonthDetail> query = null;

			assetQuery = _context.Assets.AsQueryable();

			int? accSystemId = assetFilter.AccSystemId;
			int? accMonthId = assetFilter.AccMonthId;

			if (assetFilter.MonthYear != null)
			{
				var month = assetFilter.MonthYear.Value.AddDays(1).Month;
				var year = assetFilter.MonthYear.Value.AddYears(1).Year;

				accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.Month == month && a.Year == year && a.IsDeleted == false).Select(a => a.Id).SingleOrDefault();
			}
			else
			{
				accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
			}

			if (!accSystemId.HasValue || accSystemId.Value <= 0)
			{
				Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
				if (accSystem != null) accSystemId = accSystem.Id;
			}

			depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
			admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));

			if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
			if (assetFilter.Filter != "" && assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.ERPCode.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter) || a.Document.DocNo1.Contains(assetFilter.Filter)));
			if (assetFilter.FilterDoc != "" && assetFilter.FilterDoc != null) assetQuery = assetQuery.Where(a => a.Document.DocNo1.Contains(assetFilter.FilterDoc));
			if (assetFilter.IsPrinted != null) assetQuery = assetQuery.Where(a => a.IsPrinted == assetFilter.IsPrinted);
			if (assetFilter.IsDuplicate != null) assetQuery = assetQuery.Where(a => a.IsDuplicate == assetFilter.IsDuplicate);

			//foreach (var prop in propFilters)
			//{
			//    if (prop.Property == "Asset.ErpCode" && prop.Filter != "")
			//    {
			//        assetQuery = assetQuery.Where(a => a.ERPCode.Contains(prop.Filter));
			//    }
			//    else if (prop.Property == "Asset.InvNo" && prop.Filter != "")
			//    {
			//        assetQuery = assetQuery.Where(a => a.InvNo.Contains(prop.Filter));
			//    }
			//    else if (prop.Property == "Asset.SubNo" && prop.Filter != "")
			//    {
			//        assetQuery = assetQuery.Where(a => a.SubNo.Contains(prop.Filter));
			//    }
			//    else if (prop.Property == "AssetName" && prop.Filter != "")
			//    {
			//        assetQuery = assetQuery.Where(a => a.Name.Contains(prop.Filter));
			//    }
			//    else if (prop.Property == "AssetSerialNumber" && prop.Filter != "")
			//    {
			//        assetQuery = assetQuery.Where(a => a.SerialNumber.Contains(prop.Filter));
			//    }

			//}

			bool joinAdm = false;
			bool joinDep = false;
			bool joinAssetClass = false;

			includes = includes ?? string.Empty;

			foreach (var includeProperty in includes.Split
						(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
			{
				int dotIndex = includeProperty.IndexOf(".");
				string prefix = string.Empty;
				string property = string.Empty;

				if (dotIndex > 0)
				{
					prefix = includeProperty.Substring(0, dotIndex);
					property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
				}
				else
				{
					prefix = includeProperty;
				}

				//prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

				switch (prefix)
				{
					case "Asset":
						if (property.Length > 0) assetQuery = assetQuery.Include(property);
						break;
					case "Dep":
						if (property.Length > 0) depQuery = depQuery.Include(property);
						joinDep = true;
						break;
					case "Adm":
						if (property.Length > 0) admQuery = admQuery.Include(property);
						joinAdm = true;
						break;
					default:
						break;
				}
			}

			query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

			if (joinAdm)
			{
				query = query
					.Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
			}

			if (joinDep)
			{
				query = query
					.Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
			}

			//if ((assetFilter.AssetTypeIds != null) && (assetFilter.AssetTypeIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetTypeIds.Contains(a.Adm.AssetTypeId));
			//}

			//if ((assetFilter.UomIds != null) && (assetFilter.UomIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.UomIds.Contains(a.Asset.UomId));
			//}

			//if ((assetFilter.PartnerIds != null) && (assetFilter.PartnerIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.PartnerIds.Contains(a.Asset.Document.PartnerId));
			//}

			//if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.Administration.DivisionId));
			//}

			//if ((assetFilter.AssetStateIds != null) && (assetFilter.AssetStateIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetStateIds.Contains(a.Adm.AssetStateId));
			//}
			//else
			//{
			//     //query = query.Where(a => a.Adm.AssetStateId !=22 && a.Adm.AssetStateId != 27);
			//    //query = query.Where(a => assetFilter.AssetStateIds.Contains(20) || assetFilter.AssetStateIds.Contains(21) || assetFilter.AssetStateIds.Contains(24) || assetFilter.AssetStateIds.Contains(25) || assetFilter.AssetStateIds.Contains(26));
			//}

			//if ((assetFilter.InvStateIds != null) && (assetFilter.InvStateIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.InvStateIds.Contains(a.Asset.InvStateId));
			//}
			//else
			//{
			//    //query = query.Where(a => a.Asset.InvStateId != 40);
			//}

			//if ((assetFilter.DocumentTypeIds != null) && (assetFilter.DocumentTypeIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.DocumentTypeIds.Contains(a.Asset.Document.DocumentTypeId));
			//}

			//if ((assetFilter.AssetCategoryIds != null) && (assetFilter.AssetCategoryIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetCategoryIds.Contains(a.Adm.AssetCategoryId));
			//}

			//if (assetFilter.Role != null && assetFilter.Role != "")
			//{
			//    if (assetFilter.Role.ToUpper() == "ADMINISTRATOR")
			//    {
			//        if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
			//        {
			//            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
			//        }

			//        if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
			//        {
			//            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.EmployeeId == id)); }, assetFilter.EmployeeIds));
			//        }
			//    }
			//    else
			//    {
			//        if (assetFilter.Role.ToUpper() == "USER")
			//        {

			//            List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CostCenterId).ToList();

			//            if (costCenterIds.Count == 0)
			//            {
			//                costCenterIds = new List<int?>();
			//                costCenterIds.Add(10000000);
			//            }


			//            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, costCenterIds));


			//            if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
			//            {
			//                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
			//            }

			//        }
			//    }
			//}

			List<int?> companiesIds = _context.Set<Model.EmployeeCompany>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CompanyId).ToList();

			if (companiesIds.Count == 0)
			{
				companiesIds = new List<int?>();
				companiesIds.Add(-1);

				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}
			else
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}


			if (assetFilter.Role != null && assetFilter.Role != "")
			{
				if (assetFilter.Role.ToUpper() == "ADMINISTRATOR")
				{
					if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
					{
						query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
					}

					if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
					{
						query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.EmployeeId == id)); }, assetFilter.EmployeeIds));
					}
				}
				else if (assetFilter.Role.ToUpper() == "PROCUREMENT")
				{
					List<int?> divisionIds = new List<int?>();
					divisionIds.Add(1482);

					query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.Order.DivisionId != id; }, divisionIds));

					query = query.Where(a => a.Asset.Order.Offer.AssetType.Code != "STOCK_IT");
				}
				else if (assetFilter.Role.ToUpper() == "PROC-IT")
				{
					List<int?> divisionIds = _context.Set<Model.EmployeeDivision>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.DivisionId).ToList();

					if (divisionIds.Count == 0)
					{
						divisionIds = new List<int?>();
						divisionIds.Add(-1);
					}

					query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.Order.DivisionId == id; }, divisionIds));

					query = query.Where(a => a.Asset.AssetType.Code != "STOCK_IT");
				}
				else if (assetFilter.Role.ToUpper() == "USER")
				{

					List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CostCenterId).ToList();

					if (costCenterIds.Count == 0)
					{
						costCenterIds = new List<int?>();
						costCenterIds.Add(-1);
					}


					query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, costCenterIds));


					if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
					{
						query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
					}

				}
				else
				{
					if (assetFilter.Role.ToUpper() != "ADMINISTRATOR")
					{

						if (assetFilter.Role.ToUpper() == "APPROVERS")
						{
							List<int?> employeeIds = new List<int?>();
							employeeIds.Add(assetFilter.EmployeeId);


							query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => {
								return a => (
							(
							(a.Asset.Order.EmployeeL4Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVEL4") ||
							(a.Asset.Order.EmployeeL3Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVEL3") ||
							(a.Asset.Order.EmployeeL2Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVEL2") ||
							(a.Asset.Order.EmployeeL1Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVEL1") ||
							(a.Asset.Order.EmployeeS1Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVELS1") ||
							(a.Asset.Order.EmployeeS2Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVELS2") ||
							(a.Asset.Order.EmployeeS3Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVELS3")) || a.Asset.Order.AppState.Code == "NEED_CONTRACT");
							}, employeeIds));
						}
						else
						{
							List<int?> divisionIds = _context.Set<Model.EmployeeDivision>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.DivisionId).ToList();

							if (divisionIds.Count == 0)
							{
								divisionIds = new List<int?>();
								divisionIds.Add(-1);
							}

							query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.Order.DivisionId == id; }, divisionIds));
						}



						//if ((orderFilter.CostCenterIds != null) && (orderFilter.CostCenterIds.Count > 0))
						//{
						//    query = query.Where(ExpressionHelper.GetInListPredicate<Model.OrderDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, orderFilter.CostCenterIds));
						//}

					}
				}
			}
			//         if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
			//{
			//	query = query.Where(a => assetFilter.CostCenterIds.Contains(a.Adm.CostCenterId));
			//}
			//else
			//{
			//	if ((assetFilter.AdmCenterIds != null) && (assetFilter.AdmCenterIds.Count > 0))
			//	{
			//		query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.CostCenter.AdmCenter.Id == id; }, assetFilter.AdmCenterIds));
			//	}

			//             if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
			//             {
			//                 query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.CostCenter.AdmCenter.Id == id; }, assetFilter.RegionIds));
			//             }
			//         }

			if ((assetFilter.AssetNatureIds != null) && (assetFilter.AssetNatureIds.Count > 0))
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.AssetNatureId == id; }, assetFilter.AssetNatureIds));
			}

			if ((assetFilter.CompanyIds != null) && (assetFilter.CompanyIds.Count > 0))
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CompanyId == id; }, assetFilter.CompanyIds));
			}

			if ((assetFilter.InsuranceCategoryIds != null) && (assetFilter.InsuranceCategoryIds.Count > 0))
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.InsuranceCategoryId == id; }, assetFilter.InsuranceCategoryIds));
			}

			if ((assetFilter.DimensionIds != null) && (assetFilter.DimensionIds.Count > 0))
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.DimensionId == id; }, assetFilter.DimensionIds));
			}

			//if ((assetFilter.ExpAccountIds != null) && (assetFilter.ExpAccountIds.Count > 0))
			//{
			//	query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.ExpAccountId == id; }, assetFilter.ExpAccountIds));
			//}

			//if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
			//{
			//	query = query.Where(a => assetFilter.EmployeeIds.Contains(a.Adm.EmployeeId));
			//}

			if ((assetFilter.ProjectIds != null) && (assetFilter.ProjectIds.Count > 0))
			{
				query = query.Where(a => assetFilter.ProjectIds.Contains(a.Adm.ProjectId));
			}

			if ((assetFilter.DictionaryItemIds != null) && (assetFilter.DictionaryItemIds.Count > 0))
			{
				query = query.Where(a => assetFilter.DictionaryItemIds.Contains(a.Asset.DictionaryItemId));
			}

			if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
			{
				query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.DivisionId));
			}

			if ((assetFilter.DepartmentIds != null) && (assetFilter.DepartmentIds.Count > 0))
			{
				query = query.Where(a => assetFilter.DepartmentIds.Contains(a.Asset.DepartmentId));
			}


			if ((assetFilter.BrandIds != null) && (assetFilter.BrandIds.Count > 0))
			{
				query = query.Where(a => assetFilter.BrandIds.Contains(a.Adm.BrandId));
			}

			if ((assetFilter.RoomIds != null) && (assetFilter.RoomIds.Count > 0))
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.RoomId == id; }, assetFilter.RoomIds));
			}
			else
			{
				if ((assetFilter.LocationIds != null) && (assetFilter.LocationIds.Count > 0))
				{
					query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Id == id; }, assetFilter.LocationIds));
				}
				else
				{
					if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
					{
						query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Region.Id == id; }, assetFilter.RegionIds));
					}
				}
			}

			//if ((assetFilter.AdministrationIds != null) && (assetFilter.AdministrationIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AdministrationIds.Contains(a.Adm.AdministrationId));
			//}
			//else
			//{
			//    if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
			//    {
			//        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Administration.Division.Id == id; }, assetFilter.DivisionIds));
			//    }

			//}

			//if (assetFilter.ShowReco)
			//{
			//    query = query.Where(a => a.Asset.ERPCode == null || a.Asset.ERPCode == "");
			//}

			if ((assetFilter.InvStateIds != null) && (assetFilter.InvStateIds.Count > 0))
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.InvStateId == id; }, assetFilter.InvStateIds));
			}

			if ((assetFilter.TransferEmployeeIds != null) && (assetFilter.TransferEmployeeIds.Count > 0))
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.EmployeeTransferId == id; }, assetFilter.TransferEmployeeIds));
			}

			if (bfId.HasValue)
			{
				query = query.Where(a => a.Asset.BudgetForecastId == bfId);
			}
			else
			{
				if (!historyMeniu)
				{
					query = query.Where(a => a.Asset.BudgetForecastId == -1);
				}

			}

			DateTime toDate = _context.Set<Model.BudgetType>().AsNoTracking().Where(a => a.IsDeleted == false).Select(a => a.CreatedAt).LastOrDefault();
			int lastBFId = _context.Set<Model.BudgetForecast>().AsNoTracking().Where(a => a.IsDeleted == false && a.IsLast == true).Select(a => a.Id).FirstOrDefault();

			var firstDayOfMonth = new DateTime(toDate.Year, toDate.Month, 1);
			//var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);

			query = query.Where(a => ((a.Asset.IsDeleted == false && a.Asset.Validated == true && a.Asset.BudgetForecastId != null && a.Asset.BudgetForecastId < lastBFId) && (a.Asset.CreatedAt >= firstDayOfMonth && a.Asset.CreatedAt <= toDate)));// && a.Asset.AssetStateId == assetStateId);

			//if (assetFilter.FilterPurchaseDate != "false" && assetFilter.FilterPurchaseDate != null)
			//{


			//	var monthYear = DateTime.ParseExact(assetFilter.FilterPurchaseDate,
			//					  "yyyy-MM-dd",
			//					   CultureInfo.InvariantCulture);

			//	var firstDayOfMonth = new DateTime(monthYear.Year, monthYear.Month, 1);
			//	var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
			//	query = query.Where(a => a.Asset.PurchaseDate >= firstDayOfMonth && a.Asset.PurchaseDate <= lastDayOfMonth);
			//	// Console.Write("Iesiri: " + query.Count());
			//}

			//if (assetFilter.FromDate != null)
			//{
			//    query = query.Where(a => a.Asset.PurchaseDate >= assetFilter.FromDate);
			//}

			//if (assetFilter.ToDate != null)
			//{
			//    query = query.Where(a => a.Asset.PurchaseDate <= assetFilter.ToDate);
			//}


			//if (assetFilter.FromReceptionDate != null)
			//{
			//    query = query.Where(a => a.Asset.ReceptionDate >= assetFilter.FromReceptionDate);
			//}

			//if (assetFilter.ToReceptionDate != null)
			//{
			//    query = query.Where(a => a.Asset.ReceptionDate <= assetFilter.ToReceptionDate);
			//}

			//if (assetFilter.ErpCode != null && assetFilter.ErpCode == true)
			//{
			//    assetQuery = assetQuery.Where(a => a.ERPCode != null);
			//}
			//else if (assetFilter.ErpCode != null && assetFilter.ErpCode == false)
			//{
			//    assetQuery = assetQuery.Where(a => a.ERPCode == null);
			//}


			depTotal = new AssetDepTotal();
			depTotal.Count = query.Count();
			if (joinDep && assetFilter.ShowValues)
			{
				depTotal.DepFYStart = query.Sum(a => a.Dep.DepFYStart);
				depTotal.APCFYStart = query.Sum(a => a.Dep.APCFYStart);
				depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
				depTotal.CurrBkValue = query.Sum(a => a.Dep.CurrBkValue);
				depTotal.CurrentAPC = query.Sum(a => a.Dep.CurrentAPC);
				depTotal.DepTransfer = query.Sum(a => a.Dep.DepTransfer);
				depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
				depTotal.Transfer = query.Sum(a => a.Dep.Transfer);
				depTotal.Retirement = query.Sum(a => a.Dep.Retirement);
				depTotal.Acquisition = query.Sum(a => a.Dep.Acquisition);
				depTotal.DepForYear = query.Sum(a => a.Dep.DepForYear);
				depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
			}

			if (sorting != null)
			{
				query = sorting.Direction.ToLower() == "asc"
					? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
					: query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
			}

			if (paging != null)
				query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
			var list = query.ToList();

			return list;
		}

		public IEnumerable<AssetMonthDetailExport> GetMonthExportInUse(AssetFilter assetFilter, List<PropertyFilter> propFilters)
		{
			IQueryable<Model.Asset> assetQuery = null;
			IQueryable<AssetDepMD> depQuery = null;
			IQueryable<AssetAdmMD> admQuery = null;
			IQueryable<AssetMonthDetail> query = null;

			assetQuery = _context.Assets
                .Include(a => a.CreatedByUser)
                .Include(a => a.Order).ThenInclude(a => a.Offer).ThenInclude(a => a.Request)
                .Include(a => a.CostCenter).ThenInclude(a => a.Division).ThenInclude(a => a.Department)
                .AsQueryable();

			//int assetStateId = _context.Set<Model.AssetState>().AsNoTracking().Where(a => a.Code == "IN_USE").Select(a => a.Id).SingleOrDefault();

			int? accSystemId = assetFilter.AccSystemId;
			int? accMonthId = assetFilter.AccMonthId;

			if (assetFilter.MonthYear != null)
			{
				var month = assetFilter.MonthYear.Value.AddDays(1).Month;
				var year = assetFilter.MonthYear.Value.AddYears(0).Year;

				accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.Month == month && a.Year == year && a.IsDeleted == false).Select(a => a.Id).SingleOrDefault();
			}
			else
			{
				accMonthId = _context.Set<Model.Inventory>().AsNoTracking().Where(a => a.Active == true).Select(a => a.AccMonthId).SingleOrDefault();
			}

			if (!accSystemId.HasValue || accSystemId.Value <= 0)
			{
				Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
				if (accSystem != null) accSystemId = accSystem.Id;
			}

			depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
			admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));


			bool joinAdm = true;
			bool joinDep = true;

			query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

			if (joinAdm)
			{
				query = query
					.Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
			}

			if (joinDep)
			{
				query = query
					.Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
			}

            if(assetFilter.Role.ToUpper() == "USER")
            {
                
                List<int?> divisionIds = _context.Set<Model.EmployeeDivision>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.DivisionId).ToList();

				if (divisionIds.Count > 0)
				{

					query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenter.DivisionId == id) || (a.Asset.TempUserId == _context.UserId)); }, divisionIds));
				}
				else
				{
					List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CostCenterId).ToList();

					if (costCenterIds.Count == 0)
					{
						if ((assetFilter.EmpCostCenterIds != null) && (assetFilter.EmpCostCenterIds.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.EmpCostCenterIds));
						}
						else
						{
							costCenterIds = new List<int?>();
							costCenterIds.Add(-1);

							query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, costCenterIds));
						}
					}
					else
					{
						query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, costCenterIds));
					}
				}
			}
            else
            {
				if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
				{
					query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
				}
			}

			if (assetFilter.IsPrinted != null) query = query.Where(a => a.Asset.IsPrinted == assetFilter.IsPrinted);
			if (assetFilter.IsDuplicate != null) query = query.Where(a => a.Asset.IsDuplicate == assetFilter.IsDuplicate);
			if (assetFilter.IsTemp != null) query = query.Where(a => a.Asset.IsTemp == assetFilter.IsTemp);

            //Console.WriteLine(query.ToList().Count);


			query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && ((a.Asset.IsTemp == false) || (a.Asset.IsTemp == true && a.Asset.InvNo.StartsWith("T") && a.Asset.CostCenterId != 766)));// && a.Asset.AssetStateId == assetStateId);
            //query = query.Where(a => a.Asset.InvNo == "213200014608");
			var list = query.Select(a => new AssetMonthDetailExport()
            {
                InvNo = a.Asset.InvNo,
                SubNo = a.Asset.SubNo,
				
				AssetCategory = a.Adm.AssetCategory != null ? a.Adm.AssetCategory.Name : "",
				Description = a.Asset.Name,
				ErpCode = a.Asset.ERPCode,
				SerialNumber = a.Asset.SerialNumber,
                Partner = a.Asset.Document.Partner != null ? a.Asset.Document.Partner.RegistryNumber: "",
				PartnerName = a.Asset.Document.Partner != null ? a.Asset.Document.Partner.Name : "",
				Manufacturier = a.Asset.Manufacturer,
				Location = a.Adm.Administration != null ? a.Adm.Administration.Name : "",
				CostCenterCode = a.Adm.CostCenter != null ? a.Adm.CostCenter.Code : "",
				CostCenterName = a.Adm.CostCenter != null ? a.Adm.CostCenter.Name : "",
                DivisionName = a.Adm.Division != null ? a.Adm.Division.Name :"",
                DepartmentName = a.Adm.Department != null ? a.Adm.Department.Name : "",
                EmployeeCostCenterCode = a.Adm.Employee != null ? a.Adm.Employee.CostCenter.Code : "",
                EmployeeInternalCode = a.Adm.Employee != null ? a.Adm.Employee.InternalCode : "",
                EmployeeFirstName = a.Adm.Employee != null ? a.Adm.Employee.FirstName : "",
                EmployeeLastName = a.Adm.Employee != null ? a.Adm.Employee.LastName : "",
                ProfitCenterCode = a.Adm.AdmCenter != null ? a.Adm.AdmCenter.Code : "",
                PurchaseDate = a.Asset.PurchaseDate,
				InvoiceDate = a.Asset.InvoiceDate,
				RemovalDate = a.Asset.RemovalDate,
				UsefulLife = a.Dep.UsefulLife,
		        TotLifeInpPeriods = a.Dep.TotLifeInpPeriods,
		        ExpLifeInPeriods = a.Dep.ExpLifeInPeriods,
				RemLifeInPeriods = a.Dep.RemLifeInPeriods,
		        APCFYStart = a.Dep.APCFYStart,
				DepFYStart = a.Dep.DepFYStart,
		        BkValFYStart = a.Dep.BkValFYStart,
		        Acquisition = a.Dep.Acquisition,
		        DepForYear = a.Dep.DepForYear,
		        Retirement = a.Dep.Retirement,
		        DepRetirement = a.Dep.DepRetirement,
		        CurrBkValue = a.Dep.CurrBkValue,
		        Transfer = a.Dep.Transfer,
		        DepTransfer = a.Dep.DepTransfer,
		        PosCap = a.Dep.PosCap,
		        DepPostCap = a.Dep.DepPostCap,
		        InvestSupport = a.Dep.InvestSupport,
		        WriteUps = a.Dep.WriteUps,
		        CurrentAPC = a.Dep.CurrentAPC,
		        AccumulDep = a.Dep.AccumulDep,
                Source = a.Asset.IsTemp == false && a.Asset.OrderId == null ? "SAP" : "OPTIMA",
                RequestCode = a.Asset.Order != null && a.Asset.Order.Offer != null && a.Asset.Request != null ? a.Asset.Order.Offer.Request.Code : "",
				OfferCode = a.Asset.Order != null && a.Asset.Order.Offer != null ? a.Asset.Order.Offer.Code : "",
				OrderCode = a.Asset.Order != null ? a.Asset.Order.Code : "",
                ReceptionEmail = a.Asset.CreatedBy != null ? a.Asset.CreatedBy : ""
			}).ToList();

			return list;
		}

		public IEnumerable<AssetMonthDetailExport> GetMonthExportReceptionHistoryInUse(AssetFilter assetFilter, List<PropertyFilter> propFilters)
		{
			IQueryable<Model.Asset> assetQuery = null;
			IQueryable<AssetDepMD> depQuery = null;
			IQueryable<AssetAdmMD> admQuery = null;
			IQueryable<AssetMonthDetail> query = null;
            DateTime? defaultDate = null;

			assetQuery = _context.Assets
                .Include(a => a.Contract)
				.Include(a => a.Document)
                    .ThenInclude(a => a.Partner)
				.Include(a => a.Order)
                    .ThenInclude(a => a.Offer)
                        .ThenInclude(a => a.Request)
                 .AsQueryable();

			//int assetStateId = _context.Set<Model.AssetState>().AsNoTracking().Where(a => a.Code == "IN_USE").Select(a => a.Id).SingleOrDefault();

			int? accSystemId = assetFilter.AccSystemId;
			int? accMonthId = assetFilter.AccMonthId;

			if (assetFilter.MonthYear != null)
			{
				var month = assetFilter.MonthYear.Value.AddDays(1).Month;
				var year = assetFilter.MonthYear.Value.AddYears(0).Year;

				accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.Month == month && a.Year == year && a.IsDeleted == false).Select(a => a.Id).SingleOrDefault();
			}
			else
			{
				accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
			}

			if (!accSystemId.HasValue || accSystemId.Value <= 0)
			{
				Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
				if (accSystem != null) accSystemId = accSystem.Id;
			}

			depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
			admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));


			bool joinAdm = true;
			bool joinDep = true;

			query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

			if (joinAdm)
			{
				query = query
					.Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
			}

			if (joinDep)
			{
				query = query
					.Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
			}

			if (assetFilter.Role.ToUpper() == "USER")
			{

				List<int?> divisionIds = _context.Set<Model.EmployeeDivision>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.DivisionId).ToList();

				if (divisionIds.Count > 0)
				{

					query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenter.DivisionId == id) || (a.Asset.TempUserId == _context.UserId)); }, divisionIds));
				}
				else
				{
					List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CostCenterId).ToList();

					if (costCenterIds.Count == 0)
					{
						if ((assetFilter.EmpCostCenterIds != null) && (assetFilter.EmpCostCenterIds.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.EmpCostCenterIds));
						}
						else
						{
							costCenterIds = new List<int?>();
							costCenterIds.Add(-1);

							query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, costCenterIds));
						}
					}
					else
					{
						query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, costCenterIds));
					}
				}
			}
			else
			{
				if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
				{
					query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
				}
			}

			if (assetFilter.IsPrinted != null) query = query.Where(a => a.Asset.IsPrinted == assetFilter.IsPrinted);
			if (assetFilter.IsDuplicate != null) query = query.Where(a => a.Asset.IsDuplicate == assetFilter.IsDuplicate);
			if (assetFilter.IsTemp != null) query = query.Where(a => a.Asset.IsTemp == assetFilter.IsTemp);

			//Console.WriteLine(query.ToList().Count);


			query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && a.Asset.OrderId != null);
																																																						 //query = query.Where(a => a.Asset.InvNo == "213200014608");
			var list = query.Select(a => new AssetMonthDetailExport()
			{
				InvNo = a.Asset.InvNo,
				SubNo = a.Asset.SubNo,
				
				AssetCategory = a.Adm.AssetCategory != null ? a.Adm.AssetCategory.Name : "",
				Description = a.Asset.Name,
				ErpCode = a.Asset.ERPCode,
				SerialNumber = a.Asset.SerialNumber,
				Partner = a.Asset.Document.Partner != null ? a.Asset.Document.Partner.RegistryNumber : "",
				PartnerName = a.Asset.Document.Partner != null ? a.Asset.Document.Partner.Name : "",
				Manufacturier = a.Asset.Manufacturer,
				
				CostCenterCode = a.Adm.CostCenter != null ? a.Adm.CostCenter.Code : "",
				CostCenterName = a.Adm.CostCenter != null ? a.Adm.CostCenter.Name : "",
				PurchaseDate = a.Asset.PurchaseDate,
				InvoiceDate = a.Asset.InvoiceDate,
				RemovalDate = a.Asset.RemovalDate,
				UsefulLife = a.Dep.UsefulLife,
				TotLifeInpPeriods = a.Dep.TotLifeInpPeriods,
				ExpLifeInPeriods = a.Dep.ExpLifeInPeriods,
				RemLifeInPeriods = a.Dep.RemLifeInPeriods,
				APCFYStart = a.Dep.APCFYStart,
				DepFYStart = a.Dep.DepFYStart,
				BkValFYStart = a.Dep.BkValFYStart,
				Acquisition = a.Dep.Acquisition,
				DepForYear = a.Dep.DepForYear,
				Retirement = a.Dep.Retirement,
				DepRetirement = a.Dep.DepRetirement,
				CurrBkValue = a.Dep.CurrBkValue,
				Transfer = a.Dep.Transfer,
				DepTransfer = a.Dep.DepTransfer,
				PosCap = a.Dep.PosCap,
				DepPostCap = a.Dep.DepPostCap,
				InvestSupport = a.Dep.InvestSupport,
				WriteUps = a.Dep.WriteUps,
				CurrentAPC = a.Dep.CurrentAPC,
				AccumulDep = a.Dep.AccumulDep,
				Source = a.Asset.IsTemp == false && a.Asset.OrderId == null ? "SAP" : "OPTIMA",
				RequestCode = a.Asset.Order != null && a.Asset.Order.Offer != null && a.Asset.Request != null ? a.Asset.Order.Offer.Request.Code : "",
				OfferCode = a.Asset.Order != null && a.Asset.Order.Offer != null ? a.Asset.Order.Offer.Code : "",
				OrderCode = a.Asset.Order != null ? a.Asset.Order.Code : "",
				ReceptionEmail = a.Asset.CreatedBy != null ? a.Asset.CreatedBy : "",
                ContractID = a.Asset.Contract != null ? a.Asset.Contract.ContractId : "",
                ProjectCode = a.Asset.Project != null ? a.Asset.Project.Code : "",
                ReceptionDate = a.Asset.Request != null ? a.Asset.Request.CreatedAt : defaultDate,
				OfferDate = a.Asset.Order != null && a.Asset.Order.Offer != null ? a.Asset.Order.Offer.CreatedAt : defaultDate,
				OrderDate = a.Asset.Order != null ? a.Asset.Order.CreatedAt : defaultDate,
				OrderEndDate = a.Asset.Order != null ? a.Asset.Order.EndDate : defaultDate,
				RequestDate = a.Asset.Request != null ? a.Asset.Request.CreatedAt : defaultDate

			}).ToList();

			return list;
		}

        public IEnumerable<AssetMonthDetailExport> GetMonthExportScrap(AssetFilter assetFilter, List<PropertyFilter> propFilters)
        {
            IQueryable<Model.Asset> assetQuery = null;
            IQueryable<AssetDepMD> depQuery = null;
            IQueryable<AssetAdmMD> admQuery = null;
            IQueryable<AssetMonthDetail> query = null;
            DateTime? defaultDate = null;

            assetQuery = _context.Assets
                .Include(a => a.Contract)
                .Include(a => a.Document)
                    .ThenInclude(a => a.Partner)
                .Include(a => a.Order)
                    .ThenInclude(a => a.Offer)
                        .ThenInclude(a => a.Request)
                 .AsQueryable();

            //int assetStateId = _context.Set<Model.AssetState>().AsNoTracking().Where(a => a.Code == "IN_USE").Select(a => a.Id).SingleOrDefault();

            int? accSystemId = assetFilter.AccSystemId;
            int? accMonthId = assetFilter.AccMonthId;

            if (assetFilter.MonthYear != null)
            {
                var month = assetFilter.MonthYear.Value.AddDays(1).Month;
                var year = assetFilter.MonthYear.Value.AddYears(0).Year;

                accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.Month == month && a.Year == year && a.IsDeleted == false).Select(a => a.Id).SingleOrDefault();
            }
            else
            {
                accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
            }

            if (!accSystemId.HasValue || accSystemId.Value <= 0)
            {
                Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
                if (accSystem != null) accSystemId = accSystem.Id;
            }

            depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
            admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));


            bool joinAdm = true;
            bool joinDep = true;

            query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

            if (joinAdm)
            {
                query = query
                    .Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
            }

            if (joinDep)
            {
                query = query
                    .Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
            }

            if (assetFilter.Role.ToUpper() == "USER")
            {

                List<int?> divisionIds = _context.Set<Model.EmployeeDivision>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.DivisionId).ToList();

                if (divisionIds.Count > 0)
                {

                    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenter.DivisionId == id) || (a.Asset.TempUserId == _context.UserId)); }, divisionIds));
                }
                else
                {
                    List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CostCenterId).ToList();

                    if (costCenterIds.Count == 0)
                    {
                        if ((assetFilter.EmpCostCenterIds != null) && (assetFilter.EmpCostCenterIds.Count > 0))
                        {
                            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.EmpCostCenterIds));
                        }
                        else
                        {
                            costCenterIds = new List<int?>();
                            costCenterIds.Add(-1);

                            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, costCenterIds));
                        }
                    }
                    else
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, costCenterIds));
                    }
                }
            }
            else
            {
                if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                {
                    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                }
            }

            if (assetFilter.IsPrinted != null) query = query.Where(a => a.Asset.IsPrinted == assetFilter.IsPrinted);
            if (assetFilter.IsDuplicate != null) query = query.Where(a => a.Asset.IsDuplicate == assetFilter.IsDuplicate);
            if (assetFilter.IsTemp != null) query = query.Where(a => a.Asset.IsTemp == assetFilter.IsTemp);

            query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true);
            //query = query.Where(a => a.Asset.OrderId != null);
            query = query.Where(a => a.Asset.AssetStateId == 2);
            var list = query.Select(a => new AssetMonthDetailExport()
            {
                InvNo = a.Asset.InvNo,
                SubNo = a.Asset.SubNo,
                
                AssetCategory = a.Adm.AssetCategory != null ? a.Adm.AssetCategory.Name : "",
                Description = a.Asset.Name,
                ErpCode = a.Asset.ERPCode,
                SerialNumber = a.Asset.SerialNumber,
                Partner = a.Asset.Document.Partner != null ? a.Asset.Document.Partner.RegistryNumber : "",
                PartnerName = a.Asset.Document.Partner != null ? a.Asset.Document.Partner.Name : "",
                Manufacturier = a.Asset.Manufacturer,
                
                CostCenterCode = a.Adm.CostCenter != null ? a.Adm.CostCenter.Code : "",
                CostCenterName = a.Adm.CostCenter != null ? a.Adm.CostCenter.Name : "",
                PurchaseDate = a.Asset.PurchaseDate,
                InvoiceDate = a.Asset.InvoiceDate,
                RemovalDate = a.Asset.RemovalDate,
                UsefulLife = a.Dep.UsefulLife,
                TotLifeInpPeriods = a.Dep.TotLifeInpPeriods,
                ExpLifeInPeriods = a.Dep.ExpLifeInPeriods,
                RemLifeInPeriods = a.Dep.RemLifeInPeriods,
                APCFYStart = a.Dep.APCFYStart,
                DepFYStart = a.Dep.DepFYStart,
                BkValFYStart = a.Dep.BkValFYStart,
                Acquisition = a.Dep.Acquisition,
                DepForYear = a.Dep.DepForYear,
                Retirement = a.Dep.Retirement,
                DepRetirement = a.Dep.DepRetirement,
                CurrBkValue = a.Dep.CurrBkValue,
                Transfer = a.Dep.Transfer,
                DepTransfer = a.Dep.DepTransfer,
                PosCap = a.Dep.PosCap,
                DepPostCap = a.Dep.DepPostCap,
                InvestSupport = a.Dep.InvestSupport,
                WriteUps = a.Dep.WriteUps,
                CurrentAPC = a.Dep.CurrentAPC,
                AccumulDep = a.Dep.AccumulDep,
                Source = a.Asset.IsTemp == false && a.Asset.OrderId == null ? "SAP" : "OPTIMA",
                RequestCode = a.Asset.Order != null && a.Asset.Order.Offer != null && a.Asset.Request != null ? a.Asset.Order.Offer.Request.Code : "",
                OfferCode = a.Asset.Order != null && a.Asset.Order.Offer != null ? a.Asset.Order.Offer.Code : "",
                OrderCode = a.Asset.Order != null ? a.Asset.Order.Code : "",
                ReceptionEmail = a.Asset.CreatedBy != null ? a.Asset.CreatedBy : "",
                ContractID = a.Asset.Contract != null ? a.Asset.Contract.ContractId : "",
                ProjectCode = a.Asset.Project != null ? a.Asset.Project.Code : "",
                ReceptionDate = a.Asset.Request != null ? a.Asset.Request.CreatedAt : defaultDate,
                OfferDate = a.Asset.Order != null && a.Asset.Order.Offer != null ? a.Asset.Order.Offer.CreatedAt : defaultDate,
                OrderDate = a.Asset.Order != null ? a.Asset.Order.CreatedAt : defaultDate,
                OrderEndDate = a.Asset.Order != null ? a.Asset.Order.EndDate : defaultDate,
                RequestDate = a.Asset.Request != null ? a.Asset.Request.CreatedAt : defaultDate

            }).ToList();

            return list;
        }


        public IEnumerable<AssetMonthDetailExport> GetMonthExportStockHistory(AssetFilter assetFilter, int? bfId, List<PropertyFilter> propFilters)
		{
			IQueryable<Model.Asset> assetQuery = null;
			IQueryable<AssetDepMD> depQuery = null;
			IQueryable<AssetAdmMD> admQuery = null;
			IQueryable<AssetMonthDetail> query = null;

			assetQuery = _context.Assets.AsQueryable();

			//int assetStateId = _context.Set<Model.AssetState>().AsNoTracking().Where(a => a.Code == "IN_USE").Select(a => a.Id).SingleOrDefault();

			int? accSystemId = assetFilter.AccSystemId;
			int? accMonthId = assetFilter.AccMonthId;

			if (assetFilter.MonthYear != null)
			{
				var month = assetFilter.MonthYear.Value.AddDays(1).Month;
				var year = assetFilter.MonthYear.Value.AddYears(1).Year;

				accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.Month == month && a.Year == year && a.IsDeleted == false).Select(a => a.Id).SingleOrDefault();
			}
			else
			{
				accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
			}

			if (!accSystemId.HasValue || accSystemId.Value <= 0)
			{
				Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
				if (accSystem != null) accSystemId = accSystem.Id;
			}

			depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
			admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));


			bool joinAdm = true;
			bool joinDep = true;

			query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

			if (joinAdm)
			{
				query = query
					.Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
			}

			if (joinDep)
			{
				query = query
					.Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
			}

			query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && a.Asset.Stock != null);// && a.Asset.AssetStateId == assetStateId);

			var list = query.Select(a => new AssetMonthDetailExport()
			{
				InvNo = a.Asset.InvNo,
				SubNo = a.Asset.SubNo,

				
				AssetCategory = a.Adm.AssetCategory != null ? a.Adm.AssetCategory.Name : "",
				Description = a.Asset.Name,
				ErpCode = a.Asset.ERPCode,
				SerialNumber = a.Asset.SerialNumber,
				Partner = a.Asset.Document.Partner != null ? a.Asset.Document.Partner.RegistryNumber : "",
				PartnerName = a.Asset.Document.Partner != null ? a.Asset.Document.Partner.Name : "",
				Manufacturier = a.Asset.Manufacturer,
				
				CostCenterCode = a.Adm.CostCenter != null ? a.Adm.CostCenter.Code : "",
				CostCenterName = a.Adm.CostCenter != null ? a.Adm.CostCenter.Name : "",
				PurchaseDate = a.Asset.PurchaseDate,
				InvoiceDate = a.Asset.InvoiceDate,
				RemovalDate = a.Asset.RemovalDate,
				UsefulLife = a.Dep.UsefulLife,
				TotLifeInpPeriods = a.Dep.TotLifeInpPeriods,
				ExpLifeInPeriods = a.Dep.ExpLifeInPeriods,
				RemLifeInPeriods = a.Dep.RemLifeInPeriods,
				APCFYStart = a.Dep.APCFYStart,
				DepFYStart = a.Dep.DepFYStart,
				BkValFYStart = a.Dep.BkValFYStart,
				Acquisition = a.Dep.Acquisition,
				DepForYear = a.Dep.DepForYear,
				Retirement = a.Dep.Retirement,
				DepRetirement = a.Dep.DepRetirement,
				CurrBkValue = a.Dep.CurrBkValue,
				Transfer = a.Dep.Transfer,
				DepTransfer = a.Dep.DepTransfer,
				PosCap = a.Dep.PosCap,
				DepPostCap = a.Dep.DepPostCap,
				InvestSupport = a.Dep.InvestSupport,
				WriteUps = a.Dep.WriteUps,
				CurrentAPC = a.Dep.CurrentAPC,
				AccumulDep = a.Dep.AccumulDep,
                Material = a.Asset.Material != null ? a.Asset.Material.Code : "",
                ProjectCode = a.Asset.Project != null ? a.Asset.Project.Code : "",
				BudgetBaseCode = a.Asset.BudgetBase != null ? a.Asset.BudgetBase.Code : ""
                
			}).ToList();

			return list;
		}

		public IEnumerable<AssetMonthDetail> GetMonthInEmployeePersonel(AssetFilter assetFilter, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
        {
            IQueryable<Model.Asset> assetQuery = null;
            IQueryable<AssetDepMD> depQuery = null;
            IQueryable<AssetAdmMD> admQuery = null;
            IQueryable<AssetAC> assetClassQuery = null;
            IQueryable<AssetMonthDetail> query = null;

            assetQuery = _context.Assets.AsQueryable();

            int? accSystemId = assetFilter.AccSystemId;
            int? accMonthId = assetFilter.AccMonthId;

            if (!accMonthId.HasValue || accMonthId.Value <= 0)
            {
                accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
            }

            if (!accSystemId.HasValue || accSystemId.Value <= 0)
            {
                Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
                if (accSystem != null) accSystemId = accSystem.Id;
            }

            depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
            admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));
            assetClassQuery = _context.AssetACs.AsQueryable();

            if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
            if (assetFilter.Filter != "" && assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.ERPCode.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter) || a.Document.DocNo1.Contains(assetFilter.Filter)));
            if (assetFilter.FilterDoc != "" && assetFilter.FilterDoc != null) assetQuery = assetQuery.Where(a => a.Document.DocNo1.Contains(assetFilter.FilterDoc));
            if (assetFilter.IsPrinted != null) assetQuery = assetQuery.Where(a => a.IsPrinted == assetFilter.IsPrinted);
            if (assetFilter.IsDuplicate != null) assetQuery = assetQuery.Where(a => a.IsDuplicate == assetFilter.IsDuplicate);

            bool joinAdm = false;
            bool joinDep = false;
            bool joinAssetClass = false;

            includes = includes ?? string.Empty;

            foreach (var includeProperty in includes.Split
                        (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                int dotIndex = includeProperty.IndexOf(".");
                string prefix = string.Empty;
                string property = string.Empty;

                if (dotIndex > 0)
                {
                    prefix = includeProperty.Substring(0, dotIndex);
                    property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
                }
                else
                {
                    prefix = includeProperty;
                }

                //prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

                switch (prefix)
                {
                    case "Asset":
                        if (property.Length > 0) assetQuery = assetQuery.Include(property);
                        break;
                    case "Dep":
                        if (property.Length > 0) depQuery = depQuery.Include(property);
                        joinDep = true;
                        break;
                    case "Adm":
                        if (property.Length > 0) admQuery = admQuery.Include(property);
                        joinAdm = true;
                        break;
                    case "AssetClass":
                        if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
                        joinAssetClass = true;
                        break;
                    default:
                        break;
                }
            }

            query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

            if (joinAdm)
            {
                query = query
                    .Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
            }

            if (joinDep)
            {
                query = query
                    .Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
            }

            // assetFilter.UserName = "ioana.cristea";

            //List<int?> managerIds = _context.Set<Model.Manager>().AsNoTracking().Where(e => e.Email.Contains(assetFilter.UserName) && e.IsDeleted == false).Select(c => (int?)c.Id).ToList();


            //if (managerIds.Count == 0)
            //{
            //    managerIds = new List<int?>();
            //    managerIds.Add(-1);
            //}


            // query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.EmployeeId == assetFilter.EmployeeId || a.Asset.EmployeeTransferId == assetFilter.EmployeeId) || (a.Asset.Employee.ManagerId == id || a.Asset.EmployeeTransfer.ManagerId == id)); }, managerIds));

            query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && a.Asset.EmployeeId == assetFilter.EmployeeId);

            depTotal = new AssetDepTotal();
            depTotal.Count = query.Count();
            if (joinDep)
            {
                depTotal.DepFYStart = query.Sum(a => a.Dep.APCFYStart);
                depTotal.APCFYStart = query.Sum(a => a.Dep.DepFYStart);
                depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
                depTotal.CurrBkValue = query.Sum(a => a.Dep.Acquisition);
                depTotal.CurrentAPC = query.Sum(a => a.Dep.DepForYear);
                depTotal.DepTransfer = query.Sum(a => a.Dep.Retirement);
                depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
                depTotal.Acquisition = query.Sum(a => a.Dep.CurrBkValue);
                depTotal.DepForYear = query.Sum(a => a.Dep.CurrentAPC);
                depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
            }

            if (sorting != null)
            {
                query = sorting.Direction.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
            }

            if (paging != null)
                query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
            var list = query.ToList();

            return list;
        }

		public IEnumerable<AssetMonthDetail> GetMonthInEmployeeWFH(AssetFilter assetFilter, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
		{
			IQueryable<Model.Asset> assetQuery = null;
			IQueryable<AssetDepMD> depQuery = null;
			IQueryable<AssetAdmMD> admQuery = null;
			IQueryable<AssetAC> assetClassQuery = null;
			IQueryable<AssetMonthDetail> query = null;

			assetQuery = _context.Assets.AsQueryable();

			int? accSystemId = assetFilter.AccSystemId;
			int? accMonthId = 0;

			if (!accMonthId.HasValue || accMonthId.Value <= 0)
			{
				accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
			}

			if (!accSystemId.HasValue || accSystemId.Value <= 0)
			{
				Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
				if (accSystem != null) accSystemId = accSystem.Id;
			}

			depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
			admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));
			assetClassQuery = _context.AssetACs.AsQueryable();

			if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
			if (assetFilter.Filter != "" && assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.ERPCode.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter) || a.Document.DocNo1.Contains(assetFilter.Filter)));
			if (assetFilter.FilterDoc != "" && assetFilter.FilterDoc != null) assetQuery = assetQuery.Where(a => a.Document.DocNo1.Contains(assetFilter.FilterDoc));
			if (assetFilter.IsPrinted != null) assetQuery = assetQuery.Where(a => a.IsPrinted == assetFilter.IsPrinted);
			if (assetFilter.IsDuplicate != null) assetQuery = assetQuery.Where(a => a.IsDuplicate == assetFilter.IsDuplicate);

			bool joinAdm = false;
			bool joinDep = false;
			bool joinAssetClass = false;

			includes = includes ?? string.Empty;

			foreach (var includeProperty in includes.Split
						(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
			{
				int dotIndex = includeProperty.IndexOf(".");
				string prefix = string.Empty;
				string property = string.Empty;

				if (dotIndex > 0)
				{
					prefix = includeProperty.Substring(0, dotIndex);
					property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
				}
				else
				{
					prefix = includeProperty;
				}

				//prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

				switch (prefix)
				{
					case "Asset":
						if (property.Length > 0) assetQuery = assetQuery.Include(property);
						break;
					case "Dep":
						if (property.Length > 0) depQuery = depQuery.Include(property);
						joinDep = true;
						break;
					case "Adm":
						if (property.Length > 0) admQuery = admQuery.Include(property);
						joinAdm = true;
						break;
					case "AssetClass":
						if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
						joinAssetClass = true;
						break;
					default:
						break;
				}
			}

			query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

			if (joinAdm)
			{
				query = query
					.Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
			}

			if (joinDep)
			{
				query = query
					.Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
			}

			//query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && a.Asset.EmployeeId == assetFilter.EmployeeId && (a.Asset.InvNo.StartsWith("WFH2022") || a.Asset.InvNo.StartsWith("WFH2023")));
            query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && a.Asset.EmployeeId == assetFilter.EmployeeId);

            depTotal = new AssetDepTotal();
			depTotal.Count = query.Count();
			if (joinDep)
			{
				//depTotal.DepFYStart = query.Sum(a => a.Dep.APCFYStart);
				//depTotal.APCFYStart = query.Sum(a => a.Dep.DepFYStart);
				//depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
				//depTotal.CurrBkValue = query.Sum(a => a.Dep.Acquisition);
				//depTotal.CurrentAPC = query.Sum(a => a.Dep.DepForYear);
				//depTotal.DepTransfer = query.Sum(a => a.Dep.Retirement);
				//depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
				//depTotal.Acquisition = query.Sum(a => a.Dep.CurrBkValue);
				//depTotal.DepForYear = query.Sum(a => a.Dep.CurrentAPC);
				//depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
			}

			if (sorting != null)
			{
				query = sorting.Direction.ToLower() == "asc"
					? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
					: query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
			}

			if (paging != null)
				query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
			var list = query.ToList();

			return list;
		}


		public IEnumerable<AssetMonthDetail> GetMonthInEmployeePersonelValidate(AssetFilter assetFilter, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
        {
            IQueryable<Model.Asset> assetQuery = null;
            IQueryable<AssetDepMD> depQuery = null;
            IQueryable<AssetAdmMD> admQuery = null;
            IQueryable<AssetAC> assetClassQuery = null;
            IQueryable<AssetMonthDetail> query = null;

            assetQuery = _context.Assets.AsQueryable();

            int appStateId = _context.Set<Model.AppState>().AsNoTracking().Where(a => a.Code == "FINAL_EMPLOYEE_VALIDATE").Select(a => a.Id).SingleOrDefault();

            int? accSystemId = assetFilter.AccSystemId;
            int? accMonthId = assetFilter.AccMonthId;

            if (!accMonthId.HasValue || accMonthId.Value <= 0)
            {
                accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
            }

            if (!accSystemId.HasValue || accSystemId.Value <= 0)
            {
                Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
                if (accSystem != null) accSystemId = accSystem.Id;
            }

            depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
            admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));
            assetClassQuery = _context.AssetACs.AsQueryable();

            if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
            if (assetFilter.Filter != "" && assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.ERPCode.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter) || a.Document.DocNo1.Contains(assetFilter.Filter)));
            if (assetFilter.FilterDoc != "" && assetFilter.FilterDoc != null) assetQuery = assetQuery.Where(a => a.Document.DocNo1.Contains(assetFilter.FilterDoc));
            if (assetFilter.IsPrinted != null) assetQuery = assetQuery.Where(a => a.IsPrinted == assetFilter.IsPrinted);
            if (assetFilter.IsDuplicate != null) assetQuery = assetQuery.Where(a => a.IsDuplicate == assetFilter.IsDuplicate);

            bool joinAdm = false;
            bool joinDep = false;
            bool joinAssetClass = false;

            includes = includes ?? string.Empty;

            foreach (var includeProperty in includes.Split
                        (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                int dotIndex = includeProperty.IndexOf(".");
                string prefix = string.Empty;
                string property = string.Empty;

                if (dotIndex > 0)
                {
                    prefix = includeProperty.Substring(0, dotIndex);
                    property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
                }
                else
                {
                    prefix = includeProperty;
                }

                //prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

                switch (prefix)
                {
                    case "Asset":
                        if (property.Length > 0) assetQuery = assetQuery.Include(property);
                        break;
                    case "Dep":
                        if (property.Length > 0) depQuery = depQuery.Include(property);
                        joinDep = true;
                        break;
                    case "Adm":
                        if (property.Length > 0) admQuery = admQuery.Include(property);
                        joinAdm = true;
                        break;
                    case "AssetClass":
                        if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
                        joinAssetClass = true;
                        break;
                    default:
                        break;
                }
            }

            query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

            if (joinAdm)
            {
                query = query
                    .Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
            }

            if (joinDep)
            {
                query = query
                    .Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
            }

            // assetFilter.UserName = "ioana.cristea";

            //List<int?> managerIds = _context.Set<Model.Manager>().AsNoTracking().Where(e => e.Email.Contains(assetFilter.UserName) && e.IsDeleted == false).Select(c => (int?)c.Id).ToList();


            //if (managerIds.Count == 0)
            //{
            //    managerIds = new List<int?>();
            //    managerIds.Add(-1);
            //}


            //query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.EmployeeId == assetFilter.EmployeeId || a.Asset.EmployeeTransferId == assetFilter.EmployeeId) || (a.Asset.Employee.ManagerId == id || a.Asset.EmployeeTransfer.ManagerId == id)); }, managerIds));

            query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && a.Asset.IsInTransfer == true && a.Asset.AppStateId == appStateId && a.Asset.EmployeeTransferId == assetFilter.EmployeeId);

            depTotal = new AssetDepTotal();
            depTotal.Count = query.Count();
            if (joinDep)
            {
                depTotal.DepFYStart = query.Sum(a => a.Dep.APCFYStart);
                depTotal.APCFYStart = query.Sum(a => a.Dep.DepFYStart);
                depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
                depTotal.CurrBkValue = query.Sum(a => a.Dep.Acquisition);
                depTotal.CurrentAPC = query.Sum(a => a.Dep.DepForYear);
                depTotal.DepTransfer = query.Sum(a => a.Dep.Retirement);
                depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
                depTotal.Acquisition = query.Sum(a => a.Dep.CurrBkValue);
                depTotal.DepForYear = query.Sum(a => a.Dep.CurrentAPC);
                depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
            }

            if (sorting != null)
            {
                query = sorting.Direction.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
            }

            if (paging != null)
                query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
            var list = query.ToList();

            return list;
        }

        public IEnumerable<AssetMonthDetail> GetMonthInEmployeeManager(AssetFilter assetFilter, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
        {
            IQueryable<Model.Asset> assetQuery = null;
            IQueryable<AssetDepMD> depQuery = null;
            IQueryable<AssetAdmMD> admQuery = null;
            IQueryable<AssetAC> assetClassQuery = null;
            IQueryable<AssetMonthDetail> query = null;

            assetQuery = _context.Assets.AsQueryable();

            int? accSystemId = assetFilter.AccSystemId;
            int? accMonthId = assetFilter.AccMonthId;

            if (!accMonthId.HasValue || accMonthId.Value <= 0)
            {
                accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
            }

            if (!accSystemId.HasValue || accSystemId.Value <= 0)
            {
                Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
                if (accSystem != null) accSystemId = accSystem.Id;
            }

            depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
            admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));
            assetClassQuery = _context.AssetACs.AsQueryable();

            if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
            if (assetFilter.Filter != "" && assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.ERPCode.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter) || a.Document.DocNo1.Contains(assetFilter.Filter)));
            if (assetFilter.FilterDoc != "" && assetFilter.FilterDoc != null) assetQuery = assetQuery.Where(a => a.Document.DocNo1.Contains(assetFilter.FilterDoc));
            if (assetFilter.IsPrinted != null) assetQuery = assetQuery.Where(a => a.IsPrinted == assetFilter.IsPrinted);
            if (assetFilter.IsDuplicate != null) assetQuery = assetQuery.Where(a => a.IsDuplicate == assetFilter.IsDuplicate);

            bool joinAdm = false;
            bool joinDep = false;
            bool joinAssetClass = false;

            includes = includes ?? string.Empty;

            foreach (var includeProperty in includes.Split
                        (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                int dotIndex = includeProperty.IndexOf(".");
                string prefix = string.Empty;
                string property = string.Empty;

                if (dotIndex > 0)
                {
                    prefix = includeProperty.Substring(0, dotIndex);
                    property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
                }
                else
                {
                    prefix = includeProperty;
                }

                //prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

                switch (prefix)
                {
                    case "Asset":
                        if (property.Length > 0) assetQuery = assetQuery.Include(property);
                        break;
                    case "Dep":
                        if (property.Length > 0) depQuery = depQuery.Include(property);
                        joinDep = true;
                        break;
                    case "Adm":
                        if (property.Length > 0) admQuery = admQuery.Include(property);
                        joinAdm = true;
                        break;
                    case "AssetClass":
                        if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
                        joinAssetClass = true;
                        break;
                    default:
                        break;
                }
            }

            query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

            if (joinAdm)
            {
                query = query
                    .Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
            }

            if (joinDep)
            {
                query = query
                    .Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
            }

            // assetFilter.UserName = "ioana.cristea";

            List<int?> managerIds = _context.Set<Model.Manager>().AsNoTracking().Where(e => e.Email.Contains(assetFilter.UserName) && e.IsDeleted == false).Select(c => (int?)c.Id).Take(1).ToList();


            if (managerIds.Count == 0)
            {
                managerIds = new List<int?>();
                managerIds.Add(-1);
            }

            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.Employee.ManagerId == id)); }, managerIds));

            query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && a.Asset.IsInTransfer == false);

            depTotal = new AssetDepTotal();
            depTotal.Count = query.Count();
            if (joinDep)
            {
                depTotal.DepFYStart = query.Sum(a => a.Dep.APCFYStart);
                depTotal.APCFYStart = query.Sum(a => a.Dep.DepFYStart);
                depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
                depTotal.CurrBkValue = query.Sum(a => a.Dep.Acquisition);
                depTotal.CurrentAPC = query.Sum(a => a.Dep.DepForYear);
                depTotal.DepTransfer = query.Sum(a => a.Dep.Retirement);
                depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
                depTotal.Acquisition = query.Sum(a => a.Dep.CurrBkValue);
                depTotal.DepForYear = query.Sum(a => a.Dep.CurrentAPC);
                depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
            }

            if (sorting != null)
            {
                query = sorting.Direction.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
            }

            if (paging != null)
                query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
            var list = query.ToList();

            return list;
        }

        public IEnumerable<AssetMonthDetail> GetMonthInEmployeeManagerValidate(AssetFilter assetFilter, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
        {
            IQueryable<Model.Asset> assetQuery = null;
            IQueryable<AssetDepMD> depQuery = null;
            IQueryable<AssetAdmMD> admQuery = null;
            IQueryable<AssetAC> assetClassQuery = null;
            IQueryable<AssetMonthDetail> query = null;

            assetQuery = _context.Assets.AsQueryable();

            int appStateId = _context.Set<Model.AppState>().AsNoTracking().Where(a => a.Code == "FINAL_EMPLOYEE_VALIDATE").Select(a => a.Id).SingleOrDefault();

            int? accSystemId = assetFilter.AccSystemId;
            int? accMonthId = assetFilter.AccMonthId;

            if (!accMonthId.HasValue || accMonthId.Value <= 0)
            {
                accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
            }

            if (!accSystemId.HasValue || accSystemId.Value <= 0)
            {
                Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
                if (accSystem != null) accSystemId = accSystem.Id;
            }

            depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
            admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));
            assetClassQuery = _context.AssetACs.AsQueryable();

            if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
            if (assetFilter.Filter != "" && assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.ERPCode.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter) || a.Document.DocNo1.Contains(assetFilter.Filter)));
            if (assetFilter.FilterDoc != "" && assetFilter.FilterDoc != null) assetQuery = assetQuery.Where(a => a.Document.DocNo1.Contains(assetFilter.FilterDoc));
            if (assetFilter.IsPrinted != null) assetQuery = assetQuery.Where(a => a.IsPrinted == assetFilter.IsPrinted);
            if (assetFilter.IsDuplicate != null) assetQuery = assetQuery.Where(a => a.IsDuplicate == assetFilter.IsDuplicate);

            bool joinAdm = false;
            bool joinDep = false;
            bool joinAssetClass = false;

            includes = includes ?? string.Empty;

            foreach (var includeProperty in includes.Split
                        (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                int dotIndex = includeProperty.IndexOf(".");
                string prefix = string.Empty;
                string property = string.Empty;

                if (dotIndex > 0)
                {
                    prefix = includeProperty.Substring(0, dotIndex);
                    property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
                }
                else
                {
                    prefix = includeProperty;
                }

                //prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

                switch (prefix)
                {
                    case "Asset":
                        if (property.Length > 0) assetQuery = assetQuery.Include(property);
                        break;
                    case "Dep":
                        if (property.Length > 0) depQuery = depQuery.Include(property);
                        joinDep = true;
                        break;
                    case "Adm":
                        if (property.Length > 0) admQuery = admQuery.Include(property);
                        joinAdm = true;
                        break;
                    case "AssetClass":
                        if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
                        joinAssetClass = true;
                        break;
                    default:
                        break;
                }
            }

            query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

            if (joinAdm)
            {
                query = query
                    .Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
            }

            if (joinDep)
            {
                query = query
                    .Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
            }

            //assetFilter.UserName = "gabriela.visan";

            List<int?> managerIds = _context.Set<Model.Manager>().AsNoTracking().Where(e => e.Email.Contains(assetFilter.UserName) && e.IsDeleted == false).Take(1).Select(c => (int?)c.Id).ToList();


            if (managerIds.Count == 0)
            {
                managerIds = new List<int?>();
                managerIds.Add(-1);
            }


            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => (a.Asset.EmployeeTransfer.ManagerId == id); }, managerIds));

            query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && a.Asset.AppStateId == appStateId && a.Asset.IsInTransfer == true);

            depTotal = new AssetDepTotal();
            depTotal.Count = query.Count();
            if (joinDep)
            {
                depTotal.DepFYStart = query.Sum(a => a.Dep.APCFYStart);
                depTotal.APCFYStart = query.Sum(a => a.Dep.DepFYStart);
                depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
                depTotal.CurrBkValue = query.Sum(a => a.Dep.Acquisition);
                depTotal.CurrentAPC = query.Sum(a => a.Dep.DepForYear);
                depTotal.DepTransfer = query.Sum(a => a.Dep.Retirement);
                depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
                depTotal.Acquisition = query.Sum(a => a.Dep.CurrBkValue);
                depTotal.DepForYear = query.Sum(a => a.Dep.CurrentAPC);
                depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
            }

            if (sorting != null)
            {
                query = sorting.Direction.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
            }

            if (paging != null)
                query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
            var list = query.ToList();

            return list;
        }

        public IEnumerable<AssetMonthDetail> GetMonthInReception(AssetFilter assetFilter, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
        {
            IQueryable<Model.Asset> assetQuery = null;
            IQueryable<AssetDepMD> depQuery = null;
            IQueryable<AssetAdmMD> admQuery = null;
            IQueryable<AssetAC> assetClassQuery = null;
            IQueryable<AssetMonthDetail> query = null;

            assetQuery = _context.Assets.AsQueryable();

            int assetStateId = _context.Set<Model.AssetState>().AsNoTracking().Where(a => a.Code == "RECEPTION").Select(a => a.Id).SingleOrDefault();

            int? accSystemId = assetFilter.AccSystemId;
            int? accMonthId = assetFilter.AccMonthId;

            if (!accMonthId.HasValue || accMonthId.Value <= 0)
            {
                accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
            }

            if (!accSystemId.HasValue || accSystemId.Value <= 0)
            {
                Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
                if (accSystem != null) accSystemId = accSystem.Id;
            }

            depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
            admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));
            assetClassQuery = _context.AssetACs.AsQueryable();

            if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
            if (assetFilter.Filter != "" && assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.ERPCode.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter)));
            if (assetFilter.FilterDoc != "" && assetFilter.FilterDoc != null) assetQuery = assetQuery.Where(a => a.Document.DocNo1.Contains(assetFilter.FilterDoc));
            if (assetFilter.IsPrinted != null) assetQuery = assetQuery.Where(a => a.IsPrinted == assetFilter.IsPrinted);
            if (assetFilter.IsDuplicate != null) assetQuery = assetQuery.Where(a => a.IsDuplicate == assetFilter.IsDuplicate);

            bool joinAdm = false;
            bool joinDep = false;
            bool joinAssetClass = false;

            includes = includes ?? string.Empty;

            foreach (var includeProperty in includes.Split
                        (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                int dotIndex = includeProperty.IndexOf(".");
                string prefix = string.Empty;
                string property = string.Empty;

                if (dotIndex > 0)
                {
                    prefix = includeProperty.Substring(0, dotIndex);
                    property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
                }
                else
                {
                    prefix = includeProperty;
                }

                //prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

                switch (prefix)
                {
                    case "Asset":
                        if (property.Length > 0) assetQuery = assetQuery.Include(property);
                        break;
                    case "Dep":
                        if (property.Length > 0) depQuery = depQuery.Include(property);
                        joinDep = true;
                        break;
                    case "Adm":
                        if (property.Length > 0) admQuery = admQuery.Include(property);
                        joinAdm = true;
                        break;
                    case "AssetClass":
                        if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
                        joinAssetClass = true;
                        break;
                    default:
                        break;
                }
            }

            query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

            if (joinAdm)
            {
                query = query
                    .Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
            }

            if (joinDep)
            {
                query = query
                    .Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
            }

			List<int?> companiesIds = _context.Set<Model.EmployeeCompany>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CompanyId).ToList();

			if (companiesIds.Count == 0)
			{
				companiesIds = new List<int?>();
				companiesIds.Add(-1);

				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}
			else
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}

			if (assetFilter.Role != null && assetFilter.Role != "")
            {
                if (assetFilter.Role.ToUpper() == "ADMINISTRATOR")
                {
                    if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                    }

                    if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.EmployeeId == id)); }, assetFilter.EmployeeIds));
                    }
                }
                else if (assetFilter.Role.ToUpper() == "PROCUREMENT")
                {
                    List<int?> divisionIds = new List<int?>();
                    divisionIds.Add(1482);

                    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.Order.DivisionId != id; }, divisionIds));

                    query = query.Where(a => a.Asset.Order.Offer.AssetType.Code != "STOCK_IT");
                }
                else if (assetFilter.Role.ToUpper() == "PROC-IT")
                {
                    List<int?> divisionIds = _context.Set<Model.EmployeeDivision>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.DivisionId).ToList();

                    if (divisionIds.Count == 0)
                    {
                        divisionIds = new List<int?>();
                        divisionIds.Add(-1);
                    }

                    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.Order.DivisionId == id; }, divisionIds));

                    query = query.Where(a => a.Asset.AssetType.Code != "STOCK_IT");
                }
                else if (assetFilter.Role.ToUpper() == "USER")
                {

                    List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CostCenterId).ToList();

                    if (costCenterIds.Count == 0)
                    {
                        costCenterIds = new List<int?>();
                        costCenterIds.Add(-1);
                    }


                    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, costCenterIds));


                    if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                    }

                }
                else
                {
                    if (assetFilter.Role.ToUpper() != "ADMINISTRATOR")
                    {

                        if (assetFilter.Role.ToUpper() == "APPROVERS")
                        {
                            List<int?> employeeIds = new List<int?>();
                            employeeIds.Add(assetFilter.EmployeeId);


                            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => {
                                return a => (
                            (
                            (a.Asset.Order.EmployeeL4Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVEL4") ||
                            (a.Asset.Order.EmployeeL3Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVEL3") ||
                            (a.Asset.Order.EmployeeL2Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVEL2") ||
                            (a.Asset.Order.EmployeeL1Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVEL1") ||
                            (a.Asset.Order.EmployeeS1Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVELS1") ||
                            (a.Asset.Order.EmployeeS2Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVELS2") ||
                            (a.Asset.Order.EmployeeS3Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVELS3")) || a.Asset.Order.AppState.Code == "NEED_CONTRACT");
                            }, employeeIds));
                        }
                        else
                        {
                            List<int?> divisionIds = _context.Set<Model.EmployeeDivision>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.DivisionId).ToList();

                            if (divisionIds.Count == 0)
                            {
                                divisionIds = new List<int?>();
                                divisionIds.Add(-1);
                            }

                            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.Order.DivisionId == id; }, divisionIds));
                        }



                        //if ((orderFilter.CostCenterIds != null) && (orderFilter.CostCenterIds.Count > 0))
                        //{
                        //    query = query.Where(ExpressionHelper.GetInListPredicate<Model.OrderDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, orderFilter.CostCenterIds));
                        //}

                    }
                }
            }

            if ((assetFilter.AssetNatureIds != null) && (assetFilter.AssetNatureIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.AssetNatureId == id; }, assetFilter.AssetNatureIds));
            }

            if ((assetFilter.CompanyIds != null) && (assetFilter.CompanyIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CompanyId == id; }, assetFilter.CompanyIds));
            }

            if ((assetFilter.InsuranceCategoryIds != null) && (assetFilter.InsuranceCategoryIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.InsuranceCategoryId == id; }, assetFilter.InsuranceCategoryIds));
            }

            if ((assetFilter.DimensionIds != null) && (assetFilter.DimensionIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.DimensionId == id; }, assetFilter.DimensionIds));
            }

            //if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
            //{
            //	query = query.Where(a => assetFilter.EmployeeIds.Contains(a.Adm.EmployeeId));
            //}

            if ((assetFilter.ProjectIds != null) && (assetFilter.ProjectIds.Count > 0))
            {
                query = query.Where(a => assetFilter.ProjectIds.Contains(a.Adm.ProjectId));
            }

            if ((assetFilter.DictionaryItemIds != null) && (assetFilter.DictionaryItemIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DictionaryItemIds.Contains(a.Asset.DictionaryItemId));
            }

            if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.DivisionId));
            }

            if ((assetFilter.DepartmentIds != null) && (assetFilter.DepartmentIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DepartmentIds.Contains(a.Asset.DepartmentId));
            }


            if ((assetFilter.BrandIds != null) && (assetFilter.BrandIds.Count > 0))
            {
                query = query.Where(a => assetFilter.BrandIds.Contains(a.Adm.BrandId));
            }

            if ((assetFilter.RoomIds != null) && (assetFilter.RoomIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.RoomId == id; }, assetFilter.RoomIds));
            }
            else
            {
                if ((assetFilter.LocationIds != null) && (assetFilter.LocationIds.Count > 0))
                {
                    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Id == id; }, assetFilter.LocationIds));
                }
                else
                {
                    if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Region.Id == id; }, assetFilter.RegionIds));
                    }
                }
            }

			//if ((assetFilter.AdministrationIds != null) && (assetFilter.AdministrationIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AdministrationIds.Contains(a.Adm.AdministrationId));
			//}
			//else
			//{
			//    if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
			//    {
			//        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Administration.Division.Id == id; }, assetFilter.DivisionIds));
			//    }

			//}

			//if (assetFilter.ShowReco)
			//{
			//    query = query.Where(a => a.Asset.ERPCode == null || a.Asset.ERPCode == "");
			//}

			if ((assetFilter.RequestIds != null) && (assetFilter.RequestIds.Count > 0))
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.RequestId == id; }, assetFilter.RequestIds));
			}

			query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && a.Asset.AssetStateId == assetStateId);

            if (assetFilter.FilterPurchaseDate != "false" && assetFilter.FilterPurchaseDate != null)
            {
                var monthYear = DateTime.ParseExact(assetFilter.FilterPurchaseDate,
                                  "yyyy-MM-dd",
                                   CultureInfo.InvariantCulture);

                var firstDayOfMonth = new DateTime(monthYear.Year, monthYear.Month, 1);
                var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
                query = query.Where(a => a.Asset.PurchaseDate >= firstDayOfMonth && a.Asset.PurchaseDate <= lastDayOfMonth);
                // Console.Write("Iesiri: " + query.Count());
            }

            //if (assetFilter.FromDate != null)
            //{
            //    query = query.Where(a => a.Asset.PurchaseDate >= assetFilter.FromDate);
            //}

            //if (assetFilter.ToDate != null)
            //{
            //    query = query.Where(a => a.Asset.PurchaseDate <= assetFilter.ToDate);
            //}


            //if (assetFilter.FromReceptionDate != null)
            //{
            //    query = query.Where(a => a.Asset.ReceptionDate >= assetFilter.FromReceptionDate);
            //}

            //if (assetFilter.ToReceptionDate != null)
            //{
            //    query = query.Where(a => a.Asset.ReceptionDate <= assetFilter.ToReceptionDate);
            //}

            //if (assetFilter.ErpCode != null && assetFilter.ErpCode == true)
            //{
            //    assetQuery = assetQuery.Where(a => a.ERPCode != null);
            //}
            //else if (assetFilter.ErpCode != null && assetFilter.ErpCode == false)
            //{
            //    assetQuery = assetQuery.Where(a => a.ERPCode == null);
            //}

            depTotal = new AssetDepTotal();
            depTotal.Count = query.Count();
            if (joinDep)
            {
                depTotal.DepFYStart = query.Sum(a => a.Dep.APCFYStart);
                depTotal.APCFYStart = query.Sum(a => a.Dep.DepFYStart);
                depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
                depTotal.CurrBkValue = query.Sum(a => a.Dep.Acquisition);
                depTotal.CurrentAPC = query.Sum(a => a.Dep.DepForYear);
                depTotal.DepTransfer = query.Sum(a => a.Dep.Retirement);
                depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
                depTotal.Acquisition = query.Sum(a => a.Dep.CurrBkValue);
                depTotal.DepForYear = query.Sum(a => a.Dep.CurrentAPC);
                depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
            }

            if (sorting != null)
            {
                query = sorting.Direction.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
            }

            if (paging != null)
                query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
            var list = query.ToList();

            return list;
        }

		public IEnumerable<AssetMonthDetail> GetMonthInPreReception(AssetFilter assetFilter, ColumnAssetFilter propFilters, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
		{
			IQueryable<Model.Asset> assetQuery = null;
			IQueryable<AssetDepMD> depQuery = null;
			IQueryable<AssetAdmMD> admQuery = null;
			IQueryable<AssetAC> assetClassQuery = null;
			IQueryable<AssetMonthDetail> query = null;

			assetQuery = _context.Assets.AsQueryable();

			int assetStateId = _context.Set<Model.AssetState>().AsNoTracking().Where(a => a.Code == "PRE_RECEPTION").Select(a => a.Id).SingleOrDefault();

			int? accSystemId = assetFilter.AccSystemId;
			int? accMonthId = assetFilter.AccMonthId;

			if (!accMonthId.HasValue || accMonthId.Value <= 0)
			{
				accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
			}

			if (!accSystemId.HasValue || accSystemId.Value <= 0)
			{
				Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
				if (accSystem != null) accSystemId = accSystem.Id;
			}

			depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
			admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));
			assetClassQuery = _context.AssetACs.AsQueryable();

			if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
			if (assetFilter.Filter != "" && assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.ERPCode.Contains(assetFilter.Filter)
            || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter) || a.Document.Partner.Name.Contains(assetFilter.Filter)));
			if (assetFilter.FilterDoc != "" && assetFilter.FilterDoc != null) assetQuery = assetQuery.Where(a => a.Document.DocNo1.Contains(assetFilter.FilterDoc));
			if (assetFilter.IsPrinted != null) assetQuery = assetQuery.Where(a => a.IsPrinted == assetFilter.IsPrinted);
			if (assetFilter.IsDuplicate != null) assetQuery = assetQuery.Where(a => a.IsDuplicate == assetFilter.IsDuplicate);

			bool joinAdm = false;
			bool joinDep = false;
			bool joinAssetClass = false;

			includes = includes ?? string.Empty;

			foreach (var includeProperty in includes.Split
						(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
			{
				int dotIndex = includeProperty.IndexOf(".");
				string prefix = string.Empty;
				string property = string.Empty;

				if (dotIndex > 0)
				{
					prefix = includeProperty.Substring(0, dotIndex);
					property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
				}
				else
				{
					prefix = includeProperty;
				}

				//prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

				switch (prefix)
				{
					case "Asset":
						if (property.Length > 0) assetQuery = assetQuery.Include(property);
						break;
					case "Dep":
						if (property.Length > 0) depQuery = depQuery.Include(property);
						joinDep = true;
						break;
					case "Adm":
						if (property.Length > 0) admQuery = admQuery.Include(property);
						joinAdm = true;
						break;
					case "AssetClass":
						if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
						joinAssetClass = true;
						break;
					default:
						break;
				}
			}

			query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

			if (joinAdm)
			{
				query = query
					.Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
			}

			if (joinDep)
			{
				query = query
					.Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
			}

			List<int?> companiesIds = _context.Set<Model.EmployeeCompany>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CompanyId).ToList();

			if (companiesIds.Count == 0)
			{
				companiesIds = new List<int?>();
				companiesIds.Add(-1);

				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}
			else
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}
            if ((propFilters != null && propFilters.PartnerIds != null) && (propFilters.PartnerIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.Document.Partner.Id == id)); }, propFilters.PartnerIds));
            }
            if ((propFilters != null && propFilters.InvStateIds != null) && (propFilters.InvStateIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.InvState.Id == id)); }, propFilters.InvStateIds));
            }
            //if ((propFilters != null && propFilters.AccountIds != null) && (propFilters.AccountIds.Count > 0))
            //{
            //    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.Account.Id== id)); }, propFilters.AccountIds));
            //}
            if ((propFilters != null && propFilters.InvNo != null) && (propFilters.InvNo != ""))
            {
                query = query.Where(x => x.Asset.InvNo.Contains(propFilters.InvNo));
            }
            if ((propFilters != null && propFilters.Quantity != null) && (propFilters.Quantity != ""))
            {
                query = query.Where(x => x.Adm.Employee.InternalCode.Contains(propFilters.Quantity));
            }
            if (assetFilter.Role != null && assetFilter.Role != "")
			{
				if (assetFilter.Role.ToUpper() == "ADMINISTRATOR")
				{
					if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
					{
						query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
					}

					if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
					{
						query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.EmployeeId == id)); }, assetFilter.EmployeeIds));
					}
				}
				else if (assetFilter.Role.ToUpper() == "PROCUREMENT")
				{
					List<int?> divisionIds = new List<int?>();
					divisionIds.Add(1482);

					query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.Order.DivisionId != id; }, divisionIds));

					query = query.Where(a => a.Asset.Order.Offer.AssetType.Code != "STOCK_IT");
				}
				else if (assetFilter.Role.ToUpper() == "PROC-IT")
				{
					List<int?> divisionIds = _context.Set<Model.EmployeeDivision>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.DivisionId).ToList();

					if (divisionIds.Count == 0)
					{
						divisionIds = new List<int?>();
						divisionIds.Add(-1);
					}

					query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.Order.DivisionId == id; }, divisionIds));

					query = query.Where(a => a.Asset.AssetType.Code != "STOCK_IT");
				}
				else if (assetFilter.Role.ToUpper() == "USER")
				{

					List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CostCenterId).ToList();

					if (costCenterIds.Count == 0)
					{
						costCenterIds = new List<int?>();
						costCenterIds.Add(-1);
					}


					query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, costCenterIds));


					if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
					{
						query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
					}

				}
				else
				{
					if (assetFilter.Role.ToUpper() != "ADMINISTRATOR")
					{

						if (assetFilter.Role.ToUpper() == "APPROVERS")
						{
							List<int?> employeeIds = new List<int?>();
							employeeIds.Add(assetFilter.EmployeeId);


							query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => {
								return a => (
							(
							(a.Asset.Order.EmployeeL4Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVEL4") ||
							(a.Asset.Order.EmployeeL3Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVEL3") ||
							(a.Asset.Order.EmployeeL2Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVEL2") ||
							(a.Asset.Order.EmployeeL1Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVEL1") ||
							(a.Asset.Order.EmployeeS1Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVELS1") ||
							(a.Asset.Order.EmployeeS2Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVELS2") ||
							(a.Asset.Order.EmployeeS3Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVELS3")) || a.Asset.Order.AppState.Code == "NEED_CONTRACT");
							}, employeeIds));
						}
						else
						{
							List<int?> divisionIds = _context.Set<Model.EmployeeDivision>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.DivisionId).ToList();

							if (divisionIds.Count == 0)
							{
								divisionIds = new List<int?>();
								divisionIds.Add(-1);
							}

							query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.Order.DivisionId == id; }, divisionIds));
						}



						//if ((orderFilter.CostCenterIds != null) && (orderFilter.CostCenterIds.Count > 0))
						//{
						//    query = query.Where(ExpressionHelper.GetInListPredicate<Model.OrderDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, orderFilter.CostCenterIds));
						//}

					}
				}
			}

			if ((assetFilter.AssetNatureIds != null) && (assetFilter.AssetNatureIds.Count > 0))
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.AssetNatureId == id; }, assetFilter.AssetNatureIds));
			}

			if ((assetFilter.CompanyIds != null) && (assetFilter.CompanyIds.Count > 0))
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CompanyId == id; }, assetFilter.CompanyIds));
			}

			if ((assetFilter.InsuranceCategoryIds != null) && (assetFilter.InsuranceCategoryIds.Count > 0))
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.InsuranceCategoryId == id; }, assetFilter.InsuranceCategoryIds));
			}

			if ((assetFilter.DimensionIds != null) && (assetFilter.DimensionIds.Count > 0))
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.DimensionId == id; }, assetFilter.DimensionIds));
			}

			//if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
			//{
			//	query = query.Where(a => assetFilter.EmployeeIds.Contains(a.Adm.EmployeeId));
			//}

			if ((assetFilter.ProjectIds != null) && (assetFilter.ProjectIds.Count > 0))
			{
				query = query.Where(a => assetFilter.ProjectIds.Contains(a.Adm.ProjectId));
			}

			if ((assetFilter.DictionaryItemIds != null) && (assetFilter.DictionaryItemIds.Count > 0))
			{
				query = query.Where(a => assetFilter.DictionaryItemIds.Contains(a.Asset.DictionaryItemId));
			}

			if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
			{
				query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.DivisionId));
			}

			if ((assetFilter.DepartmentIds != null) && (assetFilter.DepartmentIds.Count > 0))
			{
				query = query.Where(a => assetFilter.DepartmentIds.Contains(a.Asset.DepartmentId));
			}


			if ((assetFilter.BrandIds != null) && (assetFilter.BrandIds.Count > 0))
			{
				query = query.Where(a => assetFilter.BrandIds.Contains(a.Adm.BrandId));
			}

			if ((assetFilter.RoomIds != null) && (assetFilter.RoomIds.Count > 0))
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.RoomId == id; }, assetFilter.RoomIds));
			}
			else
			{
				if ((assetFilter.LocationIds != null) && (assetFilter.LocationIds.Count > 0))
				{
					query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Id == id; }, assetFilter.LocationIds));
				}
				else
				{
					if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
					{
						query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Region.Id == id; }, assetFilter.RegionIds));
					}
				}
			}

			//if ((assetFilter.AdministrationIds != null) && (assetFilter.AdministrationIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AdministrationIds.Contains(a.Adm.AdministrationId));
			//}
			//else
			//{
			//    if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
			//    {
			//        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Administration.Division.Id == id; }, assetFilter.DivisionIds));
			//    }

			//}

			//if (assetFilter.ShowReco)
			//{
			//    query = query.Where(a => a.Asset.ERPCode == null || a.Asset.ERPCode == "");
			//}

			if ((assetFilter.RequestIds != null) && (assetFilter.RequestIds.Count > 0))
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.RequestId == id; }, assetFilter.RequestIds));
			}

			query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && a.Asset.AssetStateId == assetStateId);

			if (assetFilter.FilterPurchaseDate != "false" && assetFilter.FilterPurchaseDate != null)
			{
				var monthYear = DateTime.ParseExact(assetFilter.FilterPurchaseDate,
								  "yyyy-MM-dd",
								   CultureInfo.InvariantCulture);

				var firstDayOfMonth = new DateTime(monthYear.Year, monthYear.Month, 1);
				var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
				query = query.Where(a => a.Asset.PurchaseDate >= firstDayOfMonth && a.Asset.PurchaseDate <= lastDayOfMonth);
				// Console.Write("Iesiri: " + query.Count());
			}

			//if (assetFilter.FromDate != null)
			//{
			//    query = query.Where(a => a.Asset.PurchaseDate >= assetFilter.FromDate);
			//}

			//if (assetFilter.ToDate != null)
			//{
			//    query = query.Where(a => a.Asset.PurchaseDate <= assetFilter.ToDate);
			//}


			//if (assetFilter.FromReceptionDate != null)
			//{
			//    query = query.Where(a => a.Asset.ReceptionDate >= assetFilter.FromReceptionDate);
			//}

			//if (assetFilter.ToReceptionDate != null)
			//{
			//    query = query.Where(a => a.Asset.ReceptionDate <= assetFilter.ToReceptionDate);
			//}

			//if (assetFilter.ErpCode != null && assetFilter.ErpCode == true)
			//{
			//    assetQuery = assetQuery.Where(a => a.ERPCode != null);
			//}
			//else if (assetFilter.ErpCode != null && assetFilter.ErpCode == false)
			//{
			//    assetQuery = assetQuery.Where(a => a.ERPCode == null);
			//}

			depTotal = new AssetDepTotal();
			depTotal.Count = query.Count();
			if (joinDep)
			{
				depTotal.DepFYStart = query.Sum(a => a.Dep.APCFYStart);
				depTotal.APCFYStart = query.Sum(a => a.Dep.DepFYStart);
				depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
				depTotal.CurrBkValue = query.Sum(a => a.Dep.Acquisition);
				depTotal.CurrentAPC = query.Sum(a => a.Dep.DepForYear);
				depTotal.DepTransfer = query.Sum(a => a.Dep.Retirement);
				depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
				depTotal.Acquisition = query.Sum(a => a.Dep.CurrBkValue);
				depTotal.DepForYear = query.Sum(a => a.Dep.CurrentAPC);
				depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
			}

			if (sorting != null)
			{
				query = sorting.Direction.ToLower() == "asc"
					? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
					: query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
			}

			if (paging != null)
				query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
			var list = query.ToList();

			return list;
		}

		public IEnumerable<AssetMonthDetail> GetMonthInReceptionHistory(AssetFilter assetFilter, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
		{
			IQueryable<Model.Asset> assetQuery = null;
			IQueryable<AssetDepMD> depQuery = null;
			IQueryable<AssetAdmMD> admQuery = null;
			IQueryable<AssetAC> assetClassQuery = null;
			IQueryable<AssetMonthDetail> query = null;

			assetQuery = _context.Assets.AsQueryable();

			//int assetStateId = _context.Set<Model.AssetState>().AsNoTracking().Where(a => a.Code == "RECEPTION").Select(a => a.Id).SingleOrDefault();

			int? accSystemId = assetFilter.AccSystemId;
			int? accMonthId = assetFilter.AccMonthId;

			if (!accMonthId.HasValue || accMonthId.Value <= 0)
			{
				accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
			}

			if (!accSystemId.HasValue || accSystemId.Value <= 0)
			{
				Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
				if (accSystem != null) accSystemId = accSystem.Id;
			}

			depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
			admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));
			assetClassQuery = _context.AssetACs.AsQueryable();

			if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
			if (assetFilter.Filter != "" && assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.ERPCode.Contains(assetFilter.Filter) 
            || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter)));
			if (assetFilter.FilterDoc != "" && assetFilter.FilterDoc != null) assetQuery = assetQuery.Where(a => a.Document.DocNo1.Contains(assetFilter.FilterDoc));
			if (assetFilter.IsPrinted != null) assetQuery = assetQuery.Where(a => a.IsPrinted == assetFilter.IsPrinted);
			if (assetFilter.IsDuplicate != null) assetQuery = assetQuery.Where(a => a.IsDuplicate == assetFilter.IsDuplicate);

			bool joinAdm = false;
			bool joinDep = false;
			bool joinAssetClass = false;

			includes = includes ?? string.Empty;

			foreach (var includeProperty in includes.Split
						(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
			{
				int dotIndex = includeProperty.IndexOf(".");
				string prefix = string.Empty;
				string property = string.Empty;

				if (dotIndex > 0)
				{
					prefix = includeProperty.Substring(0, dotIndex);
					property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
				}
				else
				{
					prefix = includeProperty;
				}

				//prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

				switch (prefix)
				{
					case "Asset":
						if (property.Length > 0) assetQuery = assetQuery.Include(property);
						break;
					case "Dep":
						if (property.Length > 0) depQuery = depQuery.Include(property);
						joinDep = true;
						break;
					case "Adm":
						if (property.Length > 0) admQuery = admQuery.Include(property);
						joinAdm = true;
						break;
					case "AssetClass":
						if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
						joinAssetClass = true;
						break;
					default:
						break;
				}
			}

			query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

			if (joinAdm)
			{
				query = query
					.Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
			}

			if (joinDep)
			{
				query = query
					.Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
			}

			List<int?> companiesIds = _context.Set<Model.EmployeeCompany>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CompanyId).ToList();

			if (companiesIds.Count == 0)
			{
				companiesIds = new List<int?>();
				companiesIds.Add(-1);

				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}
			else
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}

			if (assetFilter.Role != null && assetFilter.Role != "")
			{
				if (assetFilter.Role.ToUpper() == "ADMINISTRATOR")
				{
					if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
					{
						query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
					}
					else
					{
						if ((assetFilter.AdministrationIds != null) && (assetFilter.AdministrationIds.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CostCenter.AdministrationId == id; }, assetFilter.AdministrationIds));
						}

						if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CostCenter.RegionId == id; }, assetFilter.RegionIds));
						}

						if ((assetFilter.AdmCenterIds != null) && (assetFilter.AdmCenterIds.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CostCenter.AdmCenterId == id; }, assetFilter.AdmCenterIds));
						}

						if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CostCenter.DivisionId == id; }, assetFilter.DivisionIds));
						}
						else
						{
							if ((assetFilter.DepartmentIds != null) && (assetFilter.DepartmentIds.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CostCenter.Division.DepartmentId == id; }, assetFilter.DepartmentIds));
							}
						}

					}

					if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
					{
						query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.EmployeeId == id)); }, assetFilter.EmployeeIds));
					}
				}
				else if (assetFilter.Role.ToUpper() == "PROCUREMENT")
				{
					List<int?> divisionIds = new List<int?>();
					divisionIds.Add(1482);

					query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.Order.DivisionId != id; }, divisionIds));

					query = query.Where(a => a.Asset.Order.Offer.AssetType.Code != "STOCK_IT");
				}
				else if (assetFilter.Role.ToUpper() == "PROC-IT")
				{
					List<int?> divisionIds = _context.Set<Model.EmployeeDivision>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.DivisionId).ToList();

					if (divisionIds.Count == 0)
					{
						divisionIds = new List<int?>();
						divisionIds.Add(-1);
					}

					query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.Order.DivisionId == id; }, divisionIds));

					query = query.Where(a => a.Asset.AssetType.Code != "STOCK_IT");
				}
				else if (assetFilter.Role.ToUpper() == "USER")
				{

					List<int?> divisionIds = _context.Set<Model.EmployeeDivision>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.DivisionId).ToList();

					if (divisionIds.Count > 0)
					{

						query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CostCenter.DivisionId == id) || (a.Asset.TempUserId == _context.UserId)); }, divisionIds));
					}
					else
					{
						List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CostCenterId).ToList();

						if (costCenterIds.Count == 0)
						{
							if ((assetFilter.EmpCostCenterIds != null) && (assetFilter.EmpCostCenterIds.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id) || (a.Asset.TempUserId == _context.UserId)); }, assetFilter.EmpCostCenterIds));
							}
							else
							{
								costCenterIds = new List<int?>();
								costCenterIds.Add(-1);

								query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id) || (a.Asset.TempUserId == _context.UserId)); }, costCenterIds));
							}
						}
						else
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id) || (a.Asset.TempUserId == _context.UserId)); }, costCenterIds));
						}
					}




					if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
					{
						query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id) || (a.Asset.TempUserId == _context.UserId)); }, assetFilter.CostCenterIds));
					}
					else
					{
						if ((assetFilter.AdministrationIds != null) && (assetFilter.AdministrationIds.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CostCenter.AdministrationId == id; }, assetFilter.AdministrationIds));
						}

						if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CostCenter.DivisionId == id; }, assetFilter.DivisionIds));
						}
						else
						{
							if ((assetFilter.DepartmentIds != null) && (assetFilter.DepartmentIds.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CostCenter.Division.DepartmentId == id; }, assetFilter.DepartmentIds));
							}

							if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CostCenter.RegionId == id; }, assetFilter.RegionIds));
							}

							if ((assetFilter.AdmCenterIds != null) && (assetFilter.AdmCenterIds.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CostCenter.AdmCenterId == id; }, assetFilter.AdmCenterIds));
							}
						}

					}



				}
				else
				{
					if (assetFilter.Role.ToUpper() != "ADMINISTRATOR")
					{

						if (assetFilter.Role.ToUpper() == "APPROVERS")
						{
							List<int?> employeeIds = new List<int?>();
							employeeIds.Add(assetFilter.EmployeeId);


							query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => {
								return a => (
							(
							(a.Asset.Order.EmployeeL4Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVEL4") ||
							(a.Asset.Order.EmployeeL3Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVEL3") ||
							(a.Asset.Order.EmployeeL2Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVEL2") ||
							(a.Asset.Order.EmployeeL1Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVEL1") ||
							(a.Asset.Order.EmployeeS1Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVELS1") ||
							(a.Asset.Order.EmployeeS2Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVELS2") ||
							(a.Asset.Order.EmployeeS3Id == id && a.Asset.Order.AppState.Code == "ORDER_LEVELS3")) || a.Asset.Order.AppState.Code == "NEED_CONTRACT");
							}, employeeIds));
						}
						else
						{
							List<int?> divisionIds = _context.Set<Model.EmployeeDivision>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.DivisionId).ToList();

							if (divisionIds.Count == 0)
							{
								divisionIds = new List<int?>();
								divisionIds.Add(-1);
							}

							query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.Order.DivisionId == id; }, divisionIds));
						}



						//if ((orderFilter.CostCenterIds != null) && (orderFilter.CostCenterIds.Count > 0))
						//{
						//    query = query.Where(ExpressionHelper.GetInListPredicate<Model.OrderDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, orderFilter.CostCenterIds));
						//}

					}
				}
			}

			//if ((assetFilter.AssetNatureIds != null) && (assetFilter.AssetNatureIds.Count > 0))
			//{
			//	query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.AssetNatureId == id; }, assetFilter.AssetNatureIds));
			//}

			//if ((assetFilter.CompanyIds != null) && (assetFilter.CompanyIds.Count > 0))
			//{
			//	query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CompanyId == id; }, assetFilter.CompanyIds));
			//}

			//if ((assetFilter.InterCompanyIds != null) && (assetFilter.InterCompanyIds.Count > 0))
			//{
			//	query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.InterCompanyId == id; }, assetFilter.InterCompanyIds));
			//}

			//if ((assetFilter.InsuranceCategoryIds != null) && (assetFilter.InsuranceCategoryIds.Count > 0))
			//{
			//	query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.InsuranceCategoryId == id; }, assetFilter.InsuranceCategoryIds));
			//}

			//if ((assetFilter.DimensionIds != null) && (assetFilter.DimensionIds.Count > 0))
			//{
			//	query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.DimensionId == id; }, assetFilter.DimensionIds));
			//}

			//if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
			//{
			//	query = query.Where(a => assetFilter.EmployeeIds.Contains(a.Adm.EmployeeId));
			//}

			//if ((assetFilter.ProjectIds != null) && (assetFilter.ProjectIds.Count > 0))
			//{
			//	query = query.Where(a => assetFilter.ProjectIds.Contains(a.Adm.ProjectId));
			//}

			//if ((assetFilter.DictionaryItemIds != null) && (assetFilter.DictionaryItemIds.Count > 0))
			//{
			//	query = query.Where(a => assetFilter.DictionaryItemIds.Contains(a.Asset.DictionaryItemId));
			//}

			//if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
			//{
			//	query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.DivisionId));
			//}

			//if ((assetFilter.DepartmentIds != null) && (assetFilter.DepartmentIds.Count > 0))
			//{
			//	query = query.Where(a => assetFilter.DepartmentIds.Contains(a.Asset.DepartmentId));
			//}


			//if ((assetFilter.BrandIds != null) && (assetFilter.BrandIds.Count > 0))
			//{
			//	query = query.Where(a => assetFilter.BrandIds.Contains(a.Adm.BrandId));
			//}

			//if ((assetFilter.RoomIds != null) && (assetFilter.RoomIds.Count > 0))
			//{
			//	query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.RoomId == id; }, assetFilter.RoomIds));
			//}
			//else
			//{
			//	if ((assetFilter.LocationIds != null) && (assetFilter.LocationIds.Count > 0))
			//	{
			//		query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Id == id; }, assetFilter.LocationIds));
			//	}
			//	else
			//	{
			//		if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
			//		{
			//			query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Region.Id == id; }, assetFilter.RegionIds));
			//		}
			//	}
			//}

			//if ((assetFilter.AdministrationIds != null) && (assetFilter.AdministrationIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AdministrationIds.Contains(a.Adm.AdministrationId));
			//}
			//else
			//{
			//    if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
			//    {
			//        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Administration.Division.Id == id; }, assetFilter.DivisionIds));
			//    }

			//}

			//if (assetFilter.ShowReco)
			//{
			//    query = query.Where(a => a.Asset.ERPCode == null || a.Asset.ERPCode == "");
			//}

			//if ((assetFilter.RequestIds != null) && (assetFilter.RequestIds.Count > 0))
			//{
			//	query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.RequestId == id; }, assetFilter.RequestIds));
			//}

			if (assetFilter.RangeDates != null && assetFilter.RangeDates.Length > 0)
			{
				DateTime? fromDate = null;
				DateTime? toDate = null;

				if (assetFilter.RangeDates.Length > 0)
				{
					fromDate = assetFilter.RangeDates.ElementAt(0);
				}


				if (assetFilter.RangeDates.Length > 1)
				{
					toDate = assetFilter.RangeDates.ElementAt(1);
				}

				if (fromDate != null)
				{
					query = query.Where(a => a.Asset.PurchaseDate >= fromDate.Value.AddDays(1));
				}

				if (toDate != null)
				{
					query = query.Where(a => a.Asset.PurchaseDate <= toDate);
				}


			}

			query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && a.Asset.OrderId != null);

			//if (assetFilter.FilterPurchaseDate != "false" && assetFilter.FilterPurchaseDate != null)
			//{
			//	var monthYear = DateTime.ParseExact(assetFilter.FilterPurchaseDate,
			//					  "yyyy-MM-dd",
			//					   CultureInfo.InvariantCulture);

			//	var firstDayOfMonth = new DateTime(monthYear.Year, monthYear.Month, 1);
			//	var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
			//	query = query.Where(a => a.Asset.PurchaseDate >= firstDayOfMonth && a.Asset.PurchaseDate <= lastDayOfMonth);
			//	// Console.Write("Iesiri: " + query.Count());
			//}

			//if (assetFilter.FromDate != null)
			//{
			//    query = query.Where(a => a.Asset.PurchaseDate >= assetFilter.FromDate);
			//}

			//if (assetFilter.ToDate != null)
			//{
			//    query = query.Where(a => a.Asset.PurchaseDate <= assetFilter.ToDate);
			//}


			//if (assetFilter.FromReceptionDate != null)
			//{
			//    query = query.Where(a => a.Asset.ReceptionDate >= assetFilter.FromReceptionDate);
			//}

			//if (assetFilter.ToReceptionDate != null)
			//{
			//    query = query.Where(a => a.Asset.ReceptionDate <= assetFilter.ToReceptionDate);
			//}

			//if (assetFilter.ErpCode != null && assetFilter.ErpCode == true)
			//{
			//    assetQuery = assetQuery.Where(a => a.ERPCode != null);
			//}
			//else if (assetFilter.ErpCode != null && assetFilter.ErpCode == false)
			//{
			//    assetQuery = assetQuery.Where(a => a.ERPCode == null);
			//}

			depTotal = new AssetDepTotal();
			depTotal.Count = query.Count();
			if (joinDep)
			{
				depTotal.DepFYStart = query.Sum(a => a.Dep.APCFYStart);
				depTotal.APCFYStart = query.Sum(a => a.Dep.DepFYStart);
				depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
				depTotal.CurrBkValue = query.Sum(a => a.Dep.Acquisition);
				depTotal.CurrentAPC = query.Sum(a => a.Dep.DepForYear);
				depTotal.DepTransfer = query.Sum(a => a.Dep.Retirement);
				depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
				depTotal.Acquisition = query.Sum(a => a.Dep.CurrBkValue);
				depTotal.DepForYear = query.Sum(a => a.Dep.CurrentAPC);
				depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
			}

			if (sorting != null)
			{
				query = sorting.Direction.ToLower() == "asc"
					? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
					: query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
			}

			if (paging != null)
				query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
			var list = query.ToList();

			return list;
		}

		public IEnumerable<AssetMonthDetail> GetMonthStockIT(AssetFilter assetFilter, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
        {
            IQueryable<Model.Asset> assetQuery = null;
            IQueryable<AssetDepMD> depQuery = null;
            IQueryable<AssetAdmMD> admQuery = null;
            IQueryable<AssetAC> assetClassQuery = null;
            IQueryable<AssetMonthDetail> query = null;

            assetQuery = _context.Assets.AsQueryable();

           // int appStateId = _context.Set<Model.AppState>().AsNoTracking().Where(a => a.Code == "STOCK_VALIDATE").Select(a => a.Id).SingleOrDefault();
           int assetStateId = _context.Set<Model.AssetState>().AsNoTracking().Where(a => a.Code == "STOCK_IT").Select(a => a.Id).SingleOrDefault();

            int? accSystemId = assetFilter.AccSystemId;
            int? accMonthId = assetFilter.AccMonthId;

            if (!accMonthId.HasValue || accMonthId.Value <= 0)
            {
                accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
            }

            if (!accSystemId.HasValue || accSystemId.Value <= 0)
            {
                Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
                if (accSystem != null) accSystemId = accSystem.Id;
            }

            depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
            admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));
            assetClassQuery = _context.AssetACs.AsQueryable();

            if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
            if (assetFilter.Filter != "" && assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.ERPCode.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter)));
            if (assetFilter.FilterDoc != "" && assetFilter.FilterDoc != null) assetQuery = assetQuery.Where(a => a.Document.DocNo1.Contains(assetFilter.FilterDoc));
            if (assetFilter.IsPrinted != null) assetQuery = assetQuery.Where(a => a.IsPrinted == assetFilter.IsPrinted);
            if (assetFilter.IsDuplicate != null) assetQuery = assetQuery.Where(a => a.IsDuplicate == assetFilter.IsDuplicate);

            bool joinAdm = false;
            bool joinDep = false;
            bool joinAssetClass = false;

            includes = includes ?? string.Empty;

            foreach (var includeProperty in includes.Split
                        (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                int dotIndex = includeProperty.IndexOf(".");
                string prefix = string.Empty;
                string property = string.Empty;

                if (dotIndex > 0)
                {
                    prefix = includeProperty.Substring(0, dotIndex);
                    property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
                }
                else
                {
                    prefix = includeProperty;
                }

                //prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

                switch (prefix)
                {
                    case "Asset":
                        if (property.Length > 0) assetQuery = assetQuery.Include(property);
                        break;
                    case "Dep":
                        if (property.Length > 0) depQuery = depQuery.Include(property);
                        joinDep = true;
                        break;
                    case "Adm":
                        if (property.Length > 0) admQuery = admQuery.Include(property);
                        joinAdm = true;
                        break;
                    case "AssetClass":
                        if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
                        joinAssetClass = true;
                        break;
                    default:
                        break;
                }
            }

            query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

            if (joinAdm)
            {
                query = query
                    .Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
            }

            if (joinDep)
            {
                query = query
                    .Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
            }

			List<int?> companiesIds = _context.Set<Model.EmployeeCompany>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CompanyId).ToList();

			if (companiesIds.Count == 0)
			{
				companiesIds = new List<int?>();
				companiesIds.Add(-1);

				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}
			else
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}

			if (assetFilter.Role != null && assetFilter.Role != "")
            {
                if (assetFilter.Role.ToUpper() == "ADMINISTRATOR")
                {
                    if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                    }

                    if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.EmployeeId == id)); }, assetFilter.EmployeeIds));
                    }
                }
                else
                {
                    //if (assetFilter.Role.ToUpper() == "USER")
                    //{

                    //    List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false && e.CostCenter.Storage.Code == "MFX").Select(c => (int?)c.CostCenterId).ToList();

                    //    if (costCenterIds.Count == 0)
                    //    {
                    //        costCenterIds = new List<int?>();
                    //        costCenterIds.Add(-1);
                    //    }


                    //    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, costCenterIds));


                    //    if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                    //    {
                    //        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                    //    }

                    //}
                }
            }


            if ((assetFilter.AssetNatureIds != null) && (assetFilter.AssetNatureIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.AssetNatureId == id; }, assetFilter.AssetNatureIds));
            }

            if ((assetFilter.CompanyIds != null) && (assetFilter.CompanyIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CompanyId == id; }, assetFilter.CompanyIds));
            }

            if ((assetFilter.InsuranceCategoryIds != null) && (assetFilter.InsuranceCategoryIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.InsuranceCategoryId == id; }, assetFilter.InsuranceCategoryIds));
            }

            if ((assetFilter.DimensionIds != null) && (assetFilter.DimensionIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.DimensionId == id; }, assetFilter.DimensionIds));
            }


            if ((assetFilter.ProjectIds != null) && (assetFilter.ProjectIds.Count > 0))
            {
                query = query.Where(a => assetFilter.ProjectIds.Contains(a.Adm.ProjectId));
            }

            if ((assetFilter.DictionaryItemIds != null) && (assetFilter.DictionaryItemIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DictionaryItemIds.Contains(a.Asset.DictionaryItemId));
            }

            if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.DivisionId));
            }

            if ((assetFilter.DepartmentIds != null) && (assetFilter.DepartmentIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DepartmentIds.Contains(a.Asset.DepartmentId));
            }


            if ((assetFilter.BrandIds != null) && (assetFilter.BrandIds.Count > 0))
            {
                query = query.Where(a => assetFilter.BrandIds.Contains(a.Adm.BrandId));
            }

            if ((assetFilter.RoomIds != null) && (assetFilter.RoomIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.RoomId == id; }, assetFilter.RoomIds));
            }
            else
            {
                if ((assetFilter.LocationIds != null) && (assetFilter.LocationIds.Count > 0))
                {
                    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Id == id; }, assetFilter.LocationIds));
                }
                else
                {
                    if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Region.Id == id; }, assetFilter.RegionIds));
                    }
                }
            }

            //if (assetFilter.ShowReco)
            //{
            //    query = query.Where(a => a.Asset.ERPCode == null || a.Asset.ERPCode == "");
            //}

            query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && a.Asset.AssetStateId == assetStateId && a.Asset.IsInTransfer == false);

            if (assetFilter.FilterPurchaseDate != "false" && assetFilter.FilterPurchaseDate != null)
            {


                var monthYear = DateTime.ParseExact(assetFilter.FilterPurchaseDate,
                                  "yyyy-MM-dd",
                                   CultureInfo.InvariantCulture);

                var firstDayOfMonth = new DateTime(monthYear.Year, monthYear.Month, 1);
                var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
                query = query.Where(a => a.Asset.PurchaseDate >= firstDayOfMonth && a.Asset.PurchaseDate <= lastDayOfMonth);
                // Console.Write("Iesiri: " + query.Count());
            }

            depTotal = new AssetDepTotal();
            depTotal.Count = query.Count();
            if (joinDep)
            {
                depTotal.DepFYStart = query.Sum(a => a.Dep.APCFYStart);
                depTotal.APCFYStart = query.Sum(a => a.Dep.DepFYStart);
                depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
                depTotal.CurrBkValue = query.Sum(a => a.Dep.Acquisition);
                depTotal.CurrentAPC = query.Sum(a => a.Dep.DepForYear);
                depTotal.DepTransfer = query.Sum(a => a.Dep.Retirement);
                depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
                depTotal.Acquisition = query.Sum(a => a.Dep.CurrBkValue);
                depTotal.DepForYear = query.Sum(a => a.Dep.CurrentAPC);
                depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
            }

            if (sorting != null)
            {
                query = sorting.Direction.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
            }

            if (paging != null)
                query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
            var list = query.ToList();

            return list;
        }

        public IEnumerable<AssetMonthDetail> GetMonthStockITMFX(AssetFilter assetFilter, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
        {
            IQueryable<Model.Asset> assetQuery = null;
            IQueryable<AssetDepMD> depQuery = null;
            IQueryable<AssetAdmMD> admQuery = null;
            IQueryable<AssetAC> assetClassQuery = null;
            IQueryable<AssetMonthDetail> query = null;

            assetQuery = _context.Assets.AsQueryable();

            int assetStateId = _context.Set<Model.AssetState>().AsNoTracking().Where(a => a.Code == "STOCK_IT_MFX").Select(a => a.Id).SingleOrDefault();

            int? accSystemId = assetFilter.AccSystemId;
            int? accMonthId = assetFilter.AccMonthId;

            if (!accMonthId.HasValue || accMonthId.Value <= 0)
            {
                accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
            }

            if (!accSystemId.HasValue || accSystemId.Value <= 0)
            {
                Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
                if (accSystem != null) accSystemId = accSystem.Id;
            }

            depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
            admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));
            assetClassQuery = _context.AssetACs.AsQueryable();

            if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
            if (assetFilter.Filter != "" && assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.ERPCode.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter)));
            if (assetFilter.FilterDoc != "" && assetFilter.FilterDoc != null) assetQuery = assetQuery.Where(a => a.Document.DocNo1.Contains(assetFilter.FilterDoc));
            if (assetFilter.IsPrinted != null) assetQuery = assetQuery.Where(a => a.IsPrinted == assetFilter.IsPrinted);
            if (assetFilter.IsDuplicate != null) assetQuery = assetQuery.Where(a => a.IsDuplicate == assetFilter.IsDuplicate);

            bool joinAdm = false;
            bool joinDep = false;
            bool joinAssetClass = false;

            includes = includes ?? string.Empty;

            foreach (var includeProperty in includes.Split
                        (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                int dotIndex = includeProperty.IndexOf(".");
                string prefix = string.Empty;
                string property = string.Empty;

                if (dotIndex > 0)
                {
                    prefix = includeProperty.Substring(0, dotIndex);
                    property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
                }
                else
                {
                    prefix = includeProperty;
                }

                //prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

                switch (prefix)
                {
                    case "Asset":
                        if (property.Length > 0) assetQuery = assetQuery.Include(property);
                        break;
                    case "Dep":
                        if (property.Length > 0) depQuery = depQuery.Include(property);
                        joinDep = true;
                        break;
                    case "Adm":
                        if (property.Length > 0) admQuery = admQuery.Include(property);
                        joinAdm = true;
                        break;
                    case "AssetClass":
                        if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
                        joinAssetClass = true;
                        break;
                    default:
                        break;
                }
            }

            query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

            if (joinAdm)
            {
                query = query
                    .Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
            }

            if (joinDep)
            {
                query = query
                    .Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
            }

			List<int?> companiesIds = _context.Set<Model.EmployeeCompany>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CompanyId).ToList();

			if (companiesIds.Count == 0)
			{
				companiesIds = new List<int?>();
				companiesIds.Add(-1);

				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}
			else
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}

			if (assetFilter.Role != null && assetFilter.Role != "")
            {
                if (assetFilter.Role.ToUpper() == "ADMINISTRATOR")
                {
                    if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                    }

                    if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.EmployeeId == id)); }, assetFilter.EmployeeIds));
                    }
                }
                else
                {
                    //if (assetFilter.Role.ToUpper() == "USER")
                    //{

                    //    List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().Include(c => c.CostCenter).ThenInclude(s => s.Storage).Include(c => c.CostCenter).ThenInclude(s => s.Storage).AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false && e.CostCenter.Storage.Code == "MFX").Select(c => (int?)c.CostCenterId).ToList();

                    //    if (costCenterIds.Count == 0)
                    //    {
                    //        costCenterIds = new List<int?>();
                    //        costCenterIds.Add(-1);
                    //    }


                    //    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, costCenterIds));


                    //    if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                    //    {
                    //        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                    //    }

                    //}
                }
            }


            if ((assetFilter.AssetNatureIds != null) && (assetFilter.AssetNatureIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.AssetNatureId == id; }, assetFilter.AssetNatureIds));
            }

            if ((assetFilter.CompanyIds != null) && (assetFilter.CompanyIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CompanyId == id; }, assetFilter.CompanyIds));
            }

            if ((assetFilter.InsuranceCategoryIds != null) && (assetFilter.InsuranceCategoryIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.InsuranceCategoryId == id; }, assetFilter.InsuranceCategoryIds));
            }

            if ((assetFilter.DimensionIds != null) && (assetFilter.DimensionIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.DimensionId == id; }, assetFilter.DimensionIds));
            }


            if ((assetFilter.ProjectIds != null) && (assetFilter.ProjectIds.Count > 0))
            {
                query = query.Where(a => assetFilter.ProjectIds.Contains(a.Adm.ProjectId));
            }

            if ((assetFilter.DictionaryItemIds != null) && (assetFilter.DictionaryItemIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DictionaryItemIds.Contains(a.Asset.DictionaryItemId));
            }

            if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.DivisionId));
            }

            if ((assetFilter.DepartmentIds != null) && (assetFilter.DepartmentIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DepartmentIds.Contains(a.Asset.DepartmentId));
            }


            if ((assetFilter.BrandIds != null) && (assetFilter.BrandIds.Count > 0))
            {
                query = query.Where(a => assetFilter.BrandIds.Contains(a.Adm.BrandId));
            }

            if ((assetFilter.RoomIds != null) && (assetFilter.RoomIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.RoomId == id; }, assetFilter.RoomIds));
            }
            else
            {
                if ((assetFilter.LocationIds != null) && (assetFilter.LocationIds.Count > 0))
                {
                    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Id == id; }, assetFilter.LocationIds));
                }
                else
                {
                    if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Region.Id == id; }, assetFilter.RegionIds));
                    }
                }
            }

            //if (assetFilter.ShowReco)
            //{
            //    query = query.Where(a => a.Asset.ERPCode == null || a.Asset.ERPCode == "");
            //}

            // query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && a.Asset.AssetStateId == assetStateId);
            query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && a.Asset.AssetStateId == assetStateId && a.Asset.IsInTransfer == false);

            if (assetFilter.FilterPurchaseDate != "false" && assetFilter.FilterPurchaseDate != null)
            {


                var monthYear = DateTime.ParseExact(assetFilter.FilterPurchaseDate,
                                  "yyyy-MM-dd",
                                   CultureInfo.InvariantCulture);

                var firstDayOfMonth = new DateTime(monthYear.Year, monthYear.Month, 1);
                var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
                query = query.Where(a => a.Asset.PurchaseDate >= firstDayOfMonth && a.Asset.PurchaseDate <= lastDayOfMonth);
                // Console.Write("Iesiri: " + query.Count());
            }

            depTotal = new AssetDepTotal();
            depTotal.Count = query.Count();
            if (joinDep)
            {
                depTotal.DepFYStart = query.Sum(a => a.Dep.DepFYStart);
                depTotal.APCFYStart = query.Sum(a => a.Dep.APCFYStart);
                depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
                depTotal.CurrBkValue = query.Sum(a => a.Dep.CurrBkValue);
                depTotal.CurrentAPC = query.Sum(a => a.Dep.CurrentAPC);
                depTotal.DepTransfer = query.Sum(a => a.Dep.DepTransfer);
                depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
                depTotal.Transfer = query.Sum(a => a.Dep.Transfer);
                depTotal.Retirement = query.Sum(a => a.Dep.Retirement);
                depTotal.Acquisition = query.Sum(a => a.Dep.Acquisition);
                depTotal.DepForYear = query.Sum(a => a.Dep.DepForYear);
                depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
            }

            if (sorting != null)
            {
                query = sorting.Direction.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
            }

            if (paging != null)
                query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
            var list = query.ToList();

            return list;
        }

        public IEnumerable<AssetMonthDetail> GetMonthStockITToValidate(AssetFilter assetFilter, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
        {
            IQueryable<Model.Asset> assetQuery = null;
            IQueryable<AssetDepMD> depQuery = null;
            IQueryable<AssetAdmMD> admQuery = null;
            IQueryable<AssetAC> assetClassQuery = null;
            IQueryable<AssetMonthDetail> query = null;

            assetQuery = _context.Assets.AsQueryable();

            int appStateId = _context.Set<Model.AppState>().AsNoTracking().Where(a => a.Code == "STOCK_VALIDATE").Select(a => a.Id).SingleOrDefault();
            //int assetStateId = _context.Set<Model.AssetState>().AsNoTracking().Where(a => a.Code == "STOCK_IT").Select(a => a.Id).SingleOrDefault();

            int? accSystemId = assetFilter.AccSystemId;
            int? accMonthId = assetFilter.AccMonthId;

            if (!accMonthId.HasValue || accMonthId.Value <= 0)
            {
                accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
            }

            if (!accSystemId.HasValue || accSystemId.Value <= 0)
            {
                Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
                if (accSystem != null) accSystemId = accSystem.Id;
            }

            depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
            admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));
            assetClassQuery = _context.AssetACs.AsQueryable();

            if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
            if (assetFilter.Filter != "" && assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.ERPCode.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter)));
            if (assetFilter.FilterDoc != "" && assetFilter.FilterDoc != null) assetQuery = assetQuery.Where(a => a.Document.DocNo1.Contains(assetFilter.FilterDoc));
            if (assetFilter.IsPrinted != null) assetQuery = assetQuery.Where(a => a.IsPrinted == assetFilter.IsPrinted);
            if (assetFilter.IsDuplicate != null) assetQuery = assetQuery.Where(a => a.IsDuplicate == assetFilter.IsDuplicate);

            bool joinAdm = false;
            bool joinDep = false;
            bool joinAssetClass = false;

            includes = includes ?? string.Empty;

            foreach (var includeProperty in includes.Split
                        (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                int dotIndex = includeProperty.IndexOf(".");
                string prefix = string.Empty;
                string property = string.Empty;

                if (dotIndex > 0)
                {
                    prefix = includeProperty.Substring(0, dotIndex);
                    property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
                }
                else
                {
                    prefix = includeProperty;
                }

                //prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

                switch (prefix)
                {
                    case "Asset":
                        if (property.Length > 0) assetQuery = assetQuery.Include(property);
                        break;
                    case "Dep":
                        if (property.Length > 0) depQuery = depQuery.Include(property);
                        joinDep = true;
                        break;
                    case "Adm":
                        if (property.Length > 0) admQuery = admQuery.Include(property);
                        joinAdm = true;
                        break;
                    case "AssetClass":
                        if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
                        joinAssetClass = true;
                        break;
                    default:
                        break;
                }
            }

            query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

            if (joinAdm)
            {
                query = query
                    .Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
            }

            if (joinDep)
            {
                query = query
                    .Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
            }

			List<int?> companiesIds = _context.Set<Model.EmployeeCompany>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CompanyId).ToList();

			if (companiesIds.Count == 0)
			{
				companiesIds = new List<int?>();
				companiesIds.Add(-1);

				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}
			else
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}

			if (assetFilter.Role != null && assetFilter.Role != "")
            {
                if (assetFilter.Role.ToUpper() == "ADMINISTRATOR")
                {
                    if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                    }

                    if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.EmployeeId == id)); }, assetFilter.EmployeeIds));
                    }
                }
                else
                {
                    //if (assetFilter.Role.ToUpper() == "USER")
                    //{

                    //    List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().Include(c => c.CostCenter).ThenInclude(s => s.Storage).AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false && e.CostCenter.Storage.Code == "MFX").Select(c => (int?)c.CostCenterId).ToList();

                    //    if (costCenterIds.Count == 0)
                    //    {
                    //        costCenterIds = new List<int?>();
                    //        costCenterIds.Add(-1);
                    //    }


                    //    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, costCenterIds));


                    //    if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                    //    {
                    //        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                    //    }

                    //}
                }
            }


            if ((assetFilter.AssetNatureIds != null) && (assetFilter.AssetNatureIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.AssetNatureId == id; }, assetFilter.AssetNatureIds));
            }

            if ((assetFilter.CompanyIds != null) && (assetFilter.CompanyIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CompanyId == id; }, assetFilter.CompanyIds));
            }

            if ((assetFilter.InsuranceCategoryIds != null) && (assetFilter.InsuranceCategoryIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.InsuranceCategoryId == id; }, assetFilter.InsuranceCategoryIds));
            }

            if ((assetFilter.DimensionIds != null) && (assetFilter.DimensionIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.DimensionId == id; }, assetFilter.DimensionIds));
            }


            if ((assetFilter.ProjectIds != null) && (assetFilter.ProjectIds.Count > 0))
            {
                query = query.Where(a => assetFilter.ProjectIds.Contains(a.Adm.ProjectId));
            }

            if ((assetFilter.DictionaryItemIds != null) && (assetFilter.DictionaryItemIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DictionaryItemIds.Contains(a.Asset.DictionaryItemId));
            }

            if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.DivisionId));
            }

            if ((assetFilter.DepartmentIds != null) && (assetFilter.DepartmentIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DepartmentIds.Contains(a.Asset.DepartmentId));
            }


            if ((assetFilter.BrandIds != null) && (assetFilter.BrandIds.Count > 0))
            {
                query = query.Where(a => assetFilter.BrandIds.Contains(a.Adm.BrandId));
            }

            if ((assetFilter.RoomIds != null) && (assetFilter.RoomIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.RoomId == id; }, assetFilter.RoomIds));
            }
            else
            {
                if ((assetFilter.LocationIds != null) && (assetFilter.LocationIds.Count > 0))
                {
                    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Id == id; }, assetFilter.LocationIds));
                }
                else
                {
                    if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Region.Id == id; }, assetFilter.RegionIds));
                    }
                }
            }

            query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && a.Asset.AppStateId == appStateId);

            if (assetFilter.FilterPurchaseDate != "false" && assetFilter.FilterPurchaseDate != null)
            {

                var monthYear = DateTime.ParseExact(assetFilter.FilterPurchaseDate,
                                  "yyyy-MM-dd",
                                   CultureInfo.InvariantCulture);

                var firstDayOfMonth = new DateTime(monthYear.Year, monthYear.Month, 1);
                var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
                query = query.Where(a => a.Asset.PurchaseDate >= firstDayOfMonth && a.Asset.PurchaseDate <= lastDayOfMonth);
                // Console.Write("Iesiri: " + query.Count());
            }

            depTotal = new AssetDepTotal();
            depTotal.Count = query.Count();
            if (joinDep)
            {
                depTotal.DepFYStart = query.Sum(a => a.Dep.APCFYStart);
                depTotal.APCFYStart = query.Sum(a => a.Dep.DepFYStart);
                depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
                depTotal.CurrBkValue = query.Sum(a => a.Dep.Acquisition);
                depTotal.CurrentAPC = query.Sum(a => a.Dep.DepForYear);
                depTotal.DepTransfer = query.Sum(a => a.Dep.Retirement);
                depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
                depTotal.Acquisition = query.Sum(a => a.Dep.CurrBkValue);
                depTotal.DepForYear = query.Sum(a => a.Dep.CurrentAPC);
                depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
            }

            if (sorting != null)
            {
                query = sorting.Direction.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
            }

            if (paging != null)
                query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
            var list = query.ToList();

            return list;
        }

        public IEnumerable<AssetMonthDetail> GetMonthStockITToValidateEmployee(AssetFilter assetFilter, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
        {
            IQueryable<Model.Asset> assetQuery = null;
            IQueryable<AssetDepMD> depQuery = null;
            IQueryable<AssetAdmMD> admQuery = null;
            IQueryable<AssetAC> assetClassQuery = null;
            IQueryable<AssetMonthDetail> query = null;

            assetQuery = _context.Assets.AsQueryable();

            //int appStateId = _context.Set<Model.AppState>().AsNoTracking().Where(a => a.Code == "FINAL_EMPLOYEE_VALIDATE").Select(a => a.Id).SingleOrDefault();
            int assetStateId = _context.Set<Model.AssetState>().AsNoTracking().Where(a => a.Code == "FINAL_EMPLOYEE_VALIDATE").Select(a => a.Id).SingleOrDefault();

            int? accSystemId = assetFilter.AccSystemId;
            int? accMonthId = assetFilter.AccMonthId;

            if (!accMonthId.HasValue || accMonthId.Value <= 0)
            {
                accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
            }

            if (!accSystemId.HasValue || accSystemId.Value <= 0)
            {
                Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
                if (accSystem != null) accSystemId = accSystem.Id;
            }

            depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
            admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));
            assetClassQuery = _context.AssetACs.AsQueryable();

            if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
            if (assetFilter.Filter != "" && assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.ERPCode.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter)));
            if (assetFilter.FilterDoc != "" && assetFilter.FilterDoc != null) assetQuery = assetQuery.Where(a => a.Document.DocNo1.Contains(assetFilter.FilterDoc));
            if (assetFilter.IsPrinted != null) assetQuery = assetQuery.Where(a => a.IsPrinted == assetFilter.IsPrinted);
            if (assetFilter.IsDuplicate != null) assetQuery = assetQuery.Where(a => a.IsDuplicate == assetFilter.IsDuplicate);

            bool joinAdm = false;
            bool joinDep = false;
            bool joinAssetClass = false;

            includes = includes ?? string.Empty;

            foreach (var includeProperty in includes.Split
                        (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                int dotIndex = includeProperty.IndexOf(".");
                string prefix = string.Empty;
                string property = string.Empty;

                if (dotIndex > 0)
                {
                    prefix = includeProperty.Substring(0, dotIndex);
                    property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
                }
                else
                {
                    prefix = includeProperty;
                }

                //prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

                switch (prefix)
                {
                    case "Asset":
                        if (property.Length > 0) assetQuery = assetQuery.Include(property);
                        break;
                    case "Dep":
                        if (property.Length > 0) depQuery = depQuery.Include(property);
                        joinDep = true;
                        break;
                    case "Adm":
                        if (property.Length > 0) admQuery = admQuery.Include(property);
                        joinAdm = true;
                        break;
                    case "AssetClass":
                        if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
                        joinAssetClass = true;
                        break;
                    default:
                        break;
                }
            }

            query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

            if (joinAdm)
            {
                query = query
                    .Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
            }

            if (joinDep)
            {
                query = query
                    .Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
            }

			List<int?> companiesIds = _context.Set<Model.EmployeeCompany>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CompanyId).ToList();

			if (companiesIds.Count == 0)
			{
				companiesIds = new List<int?>();
				companiesIds.Add(-1);

				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}
			else
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}

			if (assetFilter.Role != null && assetFilter.Role != "")
            {
                if (assetFilter.Role.ToUpper() == "ADMINISTRATOR")
                {
                    if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                    }

                    if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.EmployeeId == id)); }, assetFilter.EmployeeIds));
                    }
                }
                else
                {
                    //if (assetFilter.Role.ToUpper() == "USER")
                    //{

                    //    List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().Include(c => c.CostCenter).ThenInclude(s => s.Storage).AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false && e.CostCenter.Storage.Code == "MFX").Select(c => (int?)c.CostCenterId).ToList();

                    //    if (costCenterIds.Count == 0)
                    //    {
                    //        costCenterIds = new List<int?>();
                    //        costCenterIds.Add(-1);
                    //    }


                    //    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, costCenterIds));


                    //    if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                    //    {
                    //        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                    //    }

                    //}
                }
            }


            if ((assetFilter.AssetNatureIds != null) && (assetFilter.AssetNatureIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.AssetNatureId == id; }, assetFilter.AssetNatureIds));
            }

            if ((assetFilter.CompanyIds != null) && (assetFilter.CompanyIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CompanyId == id; }, assetFilter.CompanyIds));
            }

            if ((assetFilter.InsuranceCategoryIds != null) && (assetFilter.InsuranceCategoryIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.InsuranceCategoryId == id; }, assetFilter.InsuranceCategoryIds));
            }

            if ((assetFilter.DimensionIds != null) && (assetFilter.DimensionIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.DimensionId == id; }, assetFilter.DimensionIds));
            }


            if ((assetFilter.ProjectIds != null) && (assetFilter.ProjectIds.Count > 0))
            {
                query = query.Where(a => assetFilter.ProjectIds.Contains(a.Adm.ProjectId));
            }

            if ((assetFilter.DictionaryItemIds != null) && (assetFilter.DictionaryItemIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DictionaryItemIds.Contains(a.Asset.DictionaryItemId));
            }

            if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.DivisionId));
            }

            if ((assetFilter.DepartmentIds != null) && (assetFilter.DepartmentIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DepartmentIds.Contains(a.Asset.DepartmentId));
            }


            if ((assetFilter.BrandIds != null) && (assetFilter.BrandIds.Count > 0))
            {
                query = query.Where(a => assetFilter.BrandIds.Contains(a.Adm.BrandId));
            }

            if ((assetFilter.RoomIds != null) && (assetFilter.RoomIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.RoomId == id; }, assetFilter.RoomIds));
            }
            else
            {
                if ((assetFilter.LocationIds != null) && (assetFilter.LocationIds.Count > 0))
                {
                    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Id == id; }, assetFilter.LocationIds));
                }
                else
                {
                    if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Region.Id == id; }, assetFilter.RegionIds));
                    }
                }
            }

            query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && a.Asset.AssetStateId == assetStateId && a.Asset.IsInTransfer == true);

            if (assetFilter.FilterPurchaseDate != "false" && assetFilter.FilterPurchaseDate != null)
            {

                var monthYear = DateTime.ParseExact(assetFilter.FilterPurchaseDate,
                                  "yyyy-MM-dd",
                                   CultureInfo.InvariantCulture);

                var firstDayOfMonth = new DateTime(monthYear.Year, monthYear.Month, 1);
                var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
                query = query.Where(a => a.Asset.PurchaseDate >= firstDayOfMonth && a.Asset.PurchaseDate <= lastDayOfMonth);
                // Console.Write("Iesiri: " + query.Count());
            }

            depTotal = new AssetDepTotal();
            depTotal.Count = query.Count();
            if (joinDep)
            {
                depTotal.DepFYStart = query.Sum(a => a.Dep.APCFYStart);
                depTotal.APCFYStart = query.Sum(a => a.Dep.DepFYStart);
                depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
                depTotal.CurrBkValue = query.Sum(a => a.Dep.Acquisition);
                depTotal.CurrentAPC = query.Sum(a => a.Dep.DepForYear);
                depTotal.DepTransfer = query.Sum(a => a.Dep.Retirement);
                depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
                depTotal.Acquisition = query.Sum(a => a.Dep.CurrBkValue);
                depTotal.DepForYear = query.Sum(a => a.Dep.CurrentAPC);
                depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
            }

            if (sorting != null)
            {
                query = sorting.Direction.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
            }

            if (paging != null)
                query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
            var list = query.ToList();

            return list;
        }

        public IEnumerable<AssetMonthDetail> GetMonthRejection(AssetFilter assetFilter, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
        {
            IQueryable<Model.Asset> assetQuery = null;
            IQueryable<AssetDepMD> depQuery = null;
            IQueryable<AssetAdmMD> admQuery = null;
            IQueryable<AssetAC> assetClassQuery = null;
            IQueryable<AssetMonthDetail> query = null;

            assetQuery = _context.Assets.AsQueryable();

            int? accSystemId = assetFilter.AccSystemId;
            int? accMonthId = assetFilter.AccMonthId;

            if (!accMonthId.HasValue || accMonthId.Value <= 0)
            {
                accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
            }

            if (!accSystemId.HasValue || accSystemId.Value <= 0)
            {
                Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
                if (accSystem != null) accSystemId = accSystem.Id;
            }

            depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
            admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));
            assetClassQuery = _context.AssetACs.AsQueryable();

            if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
            if (assetFilter.Filter != "" && assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.ERPCode.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter)));
            if (assetFilter.FilterDoc != "" && assetFilter.FilterDoc != null) assetQuery = assetQuery.Where(a => a.Document.DocNo1.Contains(assetFilter.FilterDoc));
            if (assetFilter.IsPrinted != null) assetQuery = assetQuery.Where(a => a.IsPrinted == assetFilter.IsPrinted);
            if (assetFilter.IsDuplicate != null) assetQuery = assetQuery.Where(a => a.IsDuplicate == assetFilter.IsDuplicate);

            bool joinAdm = false;
            bool joinDep = false;
            bool joinAssetClass = false;

            includes = includes ?? string.Empty;

            foreach (var includeProperty in includes.Split
                        (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                int dotIndex = includeProperty.IndexOf(".");
                string prefix = string.Empty;
                string property = string.Empty;

                if (dotIndex > 0)
                {
                    prefix = includeProperty.Substring(0, dotIndex);
                    property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
                }
                else
                {
                    prefix = includeProperty;
                }

                //prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

                switch (prefix)
                {
                    case "Asset":
                        if (property.Length > 0) assetQuery = assetQuery.Include(property);
                        break;
                    case "Dep":
                        if (property.Length > 0) depQuery = depQuery.Include(property);
                        joinDep = true;
                        break;
                    case "Adm":
                        if (property.Length > 0) admQuery = admQuery.Include(property);
                        joinAdm = true;
                        break;
                    case "AssetClass":
                        if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
                        joinAssetClass = true;
                        break;
                    default:
                        break;
                }
            }

            query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

            if (joinAdm)
            {
                query = query
                    .Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
            }

            if (joinDep)
            {
                query = query
                    .Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
            }

			//if ((assetFilter.AssetTypeIds != null) && (assetFilter.AssetTypeIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetTypeIds.Contains(a.Adm.AssetTypeId));
			//}

			//if ((assetFilter.UomIds != null) && (assetFilter.UomIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.UomIds.Contains(a.Asset.UomId));
			//}

			//if ((assetFilter.PartnerIds != null) && (assetFilter.PartnerIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.PartnerIds.Contains(a.Asset.Document.PartnerId));
			//}

			//if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.Administration.DivisionId));
			//}

			//if ((assetFilter.AssetStateIds != null) && (assetFilter.AssetStateIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetStateIds.Contains(a.Adm.AssetStateId));
			//}
			//else
			//{
			//     //query = query.Where(a => a.Adm.AssetStateId !=22 && a.Adm.AssetStateId != 27);
			//    //query = query.Where(a => assetFilter.AssetStateIds.Contains(20) || assetFilter.AssetStateIds.Contains(21) || assetFilter.AssetStateIds.Contains(24) || assetFilter.AssetStateIds.Contains(25) || assetFilter.AssetStateIds.Contains(26));
			//}

			//if ((assetFilter.InvStateIds != null) && (assetFilter.InvStateIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.InvStateIds.Contains(a.Asset.InvStateId));
			//}
			//else
			//{
			//    //query = query.Where(a => a.Asset.InvStateId != 40);
			//}

			//if ((assetFilter.DocumentTypeIds != null) && (assetFilter.DocumentTypeIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.DocumentTypeIds.Contains(a.Asset.Document.DocumentTypeId));
			//}

			//if ((assetFilter.AssetCategoryIds != null) && (assetFilter.AssetCategoryIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetCategoryIds.Contains(a.Adm.AssetCategoryId));
			//}

			List<int?> companiesIds = _context.Set<Model.EmployeeCompany>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CompanyId).ToList();

			if (companiesIds.Count == 0)
			{
				companiesIds = new List<int?>();
				companiesIds.Add(-1);

				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}
			else
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}

			if (assetFilter.Role != null && assetFilter.Role != "")
            {
                if (assetFilter.Role.ToUpper() == "ADMINISTRATOR")
                {
                    if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                    }

                    if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.EmployeeId == id)); }, assetFilter.EmployeeIds));
                    }
                }
                else
                {
                    if (assetFilter.Role.ToUpper() == "USER")
                    {

                        List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CostCenterId).ToList();

                        if (costCenterIds.Count == 0)
                        {
                            costCenterIds = new List<int?>();
                            costCenterIds.Add(10000000);
                        }


                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, costCenterIds));


                        if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                        {
                            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                        }

                    }
                }
            }

            //         if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
            //{
            //	query = query.Where(a => assetFilter.CostCenterIds.Contains(a.Adm.CostCenterId));
            //}
            //else
            //{
            //	if ((assetFilter.AdmCenterIds != null) && (assetFilter.AdmCenterIds.Count > 0))
            //	{
            //		query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.CostCenter.AdmCenter.Id == id; }, assetFilter.AdmCenterIds));
            //	}

            //             if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
            //             {
            //                 query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.CostCenter.AdmCenter.Id == id; }, assetFilter.RegionIds));
            //             }
            //         }

            if ((assetFilter.AssetNatureIds != null) && (assetFilter.AssetNatureIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.AssetNatureId == id; }, assetFilter.AssetNatureIds));
            }

            if ((assetFilter.CompanyIds != null) && (assetFilter.CompanyIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CompanyId == id; }, assetFilter.CompanyIds));
            }

            if ((assetFilter.InsuranceCategoryIds != null) && (assetFilter.InsuranceCategoryIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.InsuranceCategoryId == id; }, assetFilter.InsuranceCategoryIds));
            }

            if ((assetFilter.DimensionIds != null) && (assetFilter.DimensionIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.DimensionId == id; }, assetFilter.DimensionIds));
            }

            //if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
            //{
            //	query = query.Where(a => assetFilter.EmployeeIds.Contains(a.Adm.EmployeeId));
            //}

            if ((assetFilter.ProjectIds != null) && (assetFilter.ProjectIds.Count > 0))
            {
                query = query.Where(a => assetFilter.ProjectIds.Contains(a.Adm.ProjectId));
            }

            if ((assetFilter.DictionaryItemIds != null) && (assetFilter.DictionaryItemIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DictionaryItemIds.Contains(a.Asset.DictionaryItemId));
            }

            if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.DivisionId));
            }

            if ((assetFilter.DepartmentIds != null) && (assetFilter.DepartmentIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DepartmentIds.Contains(a.Asset.DepartmentId));
            }


            if ((assetFilter.BrandIds != null) && (assetFilter.BrandIds.Count > 0))
            {
                query = query.Where(a => assetFilter.BrandIds.Contains(a.Adm.BrandId));
            }

            if ((assetFilter.RoomIds != null) && (assetFilter.RoomIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.RoomId == id; }, assetFilter.RoomIds));
            }
            else
            {
                if ((assetFilter.LocationIds != null) && (assetFilter.LocationIds.Count > 0))
                {
                    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Id == id; }, assetFilter.LocationIds));
                }
                else
                {
                    if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Region.Id == id; }, assetFilter.RegionIds));
                    }
                }
            }

            //if ((assetFilter.AdministrationIds != null) && (assetFilter.AdministrationIds.Count > 0))
            //{
            //    query = query.Where(a => assetFilter.AdministrationIds.Contains(a.Adm.AdministrationId));
            //}
            //else
            //{
            //    if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
            //    {
            //        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Administration.Division.Id == id; }, assetFilter.DivisionIds));
            //    }

            //}

            if (assetFilter.ShowReco)
            {
                query = query.Where(a => a.Asset.ERPCode == null || a.Asset.ERPCode == "");
            }

            query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && a.Asset.AssetStateId == 22);

            if (assetFilter.FilterPurchaseDate != "false" && assetFilter.FilterPurchaseDate != null)
            {


                var monthYear = DateTime.ParseExact(assetFilter.FilterPurchaseDate,
                                  "yyyy-MM-dd",
                                   CultureInfo.InvariantCulture);

                var firstDayOfMonth = new DateTime(monthYear.Year, monthYear.Month, 1);
                var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
                query = query.Where(a => a.Asset.PurchaseDate >= firstDayOfMonth && a.Asset.PurchaseDate <= lastDayOfMonth);
                // Console.Write("Iesiri: " + query.Count());
            }

            //if (assetFilter.FromDate != null)
            //{
            //    query = query.Where(a => a.Asset.PurchaseDate >= assetFilter.FromDate);
            //}

            //if (assetFilter.ToDate != null)
            //{
            //    query = query.Where(a => a.Asset.PurchaseDate <= assetFilter.ToDate);
            //}


            //if (assetFilter.FromReceptionDate != null)
            //{
            //    query = query.Where(a => a.Asset.ReceptionDate >= assetFilter.FromReceptionDate);
            //}

            //if (assetFilter.ToReceptionDate != null)
            //{
            //    query = query.Where(a => a.Asset.ReceptionDate <= assetFilter.ToReceptionDate);
            //}

            //if (assetFilter.ErpCode != null && assetFilter.ErpCode == true)
            //{
            //    assetQuery = assetQuery.Where(a => a.ERPCode != null);
            //}
            //else if (assetFilter.ErpCode != null && assetFilter.ErpCode == false)
            //{
            //    assetQuery = assetQuery.Where(a => a.ERPCode == null);
            //}

            depTotal = new AssetDepTotal();
            depTotal.Count = query.Count();
            if (joinDep)
            {
                depTotal.DepFYStart = query.Sum(a => a.Dep.APCFYStart);
                depTotal.APCFYStart = query.Sum(a => a.Dep.DepFYStart);
                depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
                depTotal.CurrBkValue = query.Sum(a => a.Dep.Acquisition);
                depTotal.CurrentAPC = query.Sum(a => a.Dep.DepForYear);
                depTotal.DepTransfer = query.Sum(a => a.Dep.Retirement);
                depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
                depTotal.Acquisition = query.Sum(a => a.Dep.CurrBkValue);
                depTotal.DepForYear = query.Sum(a => a.Dep.CurrentAPC);
                depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
            }

            if (sorting != null)
            {
                query = sorting.Direction.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
            }

            if (paging != null)
                query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
            var list = query.ToList();

            return list;
        }

        public IEnumerable<AssetMonthDetail> GetMonthValidate(AssetFilter assetFilter, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
        {
            IQueryable<Model.Asset> assetQuery = null;
            IQueryable<AssetDepMD> depQuery = null;
            IQueryable<AssetAdmMD> admQuery = null;
            IQueryable<AssetAC> assetClassQuery = null;
            IQueryable<AssetMonthDetail> query = null;

            assetQuery = _context.Assets.AsQueryable();

            int assetStateId = _context.Set<Model.AssetState>().AsNoTracking().Where(a => a.Code == "TOVALIDATE").Select(a => a.Id).SingleOrDefault();

            int? accSystemId = assetFilter.AccSystemId;
            int? accMonthId = assetFilter.AccMonthId;

            if (!accMonthId.HasValue || accMonthId.Value <= 0)
            {
                accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
            }

            if (!accSystemId.HasValue || accSystemId.Value <= 0)
            {
                Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
                if (accSystem != null) accSystemId = accSystem.Id;
            }

            depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
            admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));
            assetClassQuery = _context.AssetACs.AsQueryable();

            if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
            if (assetFilter.Filter != "" && assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.ERPCode.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter) || a.Document.DocNo1.Contains(assetFilter.Filter)));
            if (assetFilter.FilterDoc != "" && assetFilter.FilterDoc != null) assetQuery = assetQuery.Where(a => a.Document.DocNo1.Contains(assetFilter.FilterDoc));
            if (assetFilter.IsPrinted != null) assetQuery = assetQuery.Where(a => a.IsPrinted == assetFilter.IsPrinted);
            if (assetFilter.IsDuplicate != null) assetQuery = assetQuery.Where(a => a.IsDuplicate == assetFilter.IsDuplicate);

            bool joinAdm = false;
            bool joinDep = false;
            bool joinAssetClass = false;

            includes = includes ?? string.Empty;

            foreach (var includeProperty in includes.Split
                        (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                int dotIndex = includeProperty.IndexOf(".");
                string prefix = string.Empty;
                string property = string.Empty;

                if (dotIndex > 0)
                {
                    prefix = includeProperty.Substring(0, dotIndex);
                    property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
                }
                else
                {
                    prefix = includeProperty;
                }

                //prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

                switch (prefix)
                {
                    case "Asset":
                        if (property.Length > 0) assetQuery = assetQuery.Include(property);
                        break;
                    case "Dep":
                        if (property.Length > 0) depQuery = depQuery.Include(property);
                        joinDep = true;
                        break;
                    case "Adm":
                        if (property.Length > 0) admQuery = admQuery.Include(property);
                        joinAdm = true;
                        break;
                    case "AssetClass":
                        if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
                        joinAssetClass = true;
                        break;
                    default:
                        break;
                }
            }

            query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

            if (joinAdm)
            {
                query = query
                    .Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
            }

            if (joinDep)
            {
                query = query
                    .Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
            }

			//if ((assetFilter.AssetTypeIds != null) && (assetFilter.AssetTypeIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetTypeIds.Contains(a.Adm.AssetTypeId));
			//}

			//if ((assetFilter.UomIds != null) && (assetFilter.UomIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.UomIds.Contains(a.Asset.UomId));
			//}

			//if ((assetFilter.PartnerIds != null) && (assetFilter.PartnerIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.PartnerIds.Contains(a.Asset.Document.PartnerId));
			//}

			//if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.Administration.DivisionId));
			//}

			//if ((assetFilter.AssetStateIds != null) && (assetFilter.AssetStateIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetStateIds.Contains(a.Adm.AssetStateId));
			//}
			//else
			//{
			//     //query = query.Where(a => a.Adm.AssetStateId !=22 && a.Adm.AssetStateId != 27);
			//    //query = query.Where(a => assetFilter.AssetStateIds.Contains(20) || assetFilter.AssetStateIds.Contains(21) || assetFilter.AssetStateIds.Contains(24) || assetFilter.AssetStateIds.Contains(25) || assetFilter.AssetStateIds.Contains(26));
			//}

			//if ((assetFilter.InvStateIds != null) && (assetFilter.InvStateIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.InvStateIds.Contains(a.Asset.InvStateId));
			//}
			//else
			//{
			//    //query = query.Where(a => a.Asset.InvStateId != 40);
			//}

			//if ((assetFilter.DocumentTypeIds != null) && (assetFilter.DocumentTypeIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.DocumentTypeIds.Contains(a.Asset.Document.DocumentTypeId));
			//}

			//if ((assetFilter.AssetCategoryIds != null) && (assetFilter.AssetCategoryIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetCategoryIds.Contains(a.Adm.AssetCategoryId));
			//}

			List<int?> companiesIds = _context.Set<Model.EmployeeCompany>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CompanyId).ToList();

			if (companiesIds.Count == 0)
			{
				companiesIds = new List<int?>();
				companiesIds.Add(-1);

				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}
			else
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Asset.CompanyId == id) || (a.Asset.TempUserId == _context.UserId)); }, companiesIds));
			}

			if (assetFilter.Role != null && assetFilter.Role != "")
            {
                if (assetFilter.Role.ToUpper() == "ADMINISTRATOR")
                {
                    if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                    }

                    if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.EmployeeId == id)); }, assetFilter.EmployeeIds));
                    }
                }
                else
                {
                    if (assetFilter.Role.ToUpper() == "USER")
                    {

                        List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().AsNoTracking().Where(e => e.EmployeeId == assetFilter.EmployeeId && e.IsDeleted == false).Select(c => (int?)c.CostCenterId).ToList();

                        if (costCenterIds.Count == 0)
                        {
                            costCenterIds = new List<int?>();
                            costCenterIds.Add(10000000);
                        }


                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, costCenterIds));


                        if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
                        {
                            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => ((a.Adm.CostCenterId == id)); }, assetFilter.CostCenterIds));
                        }

                    }
                }
            }

            //         if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
            //{
            //	query = query.Where(a => assetFilter.CostCenterIds.Contains(a.Adm.CostCenterId));
            //}
            //else
            //{
            //	if ((assetFilter.AdmCenterIds != null) && (assetFilter.AdmCenterIds.Count > 0))
            //	{
            //		query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.CostCenter.AdmCenter.Id == id; }, assetFilter.AdmCenterIds));
            //	}

            //             if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
            //             {
            //                 query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.CostCenter.AdmCenter.Id == id; }, assetFilter.RegionIds));
            //             }
            //         }

            if ((assetFilter.AssetNatureIds != null) && (assetFilter.AssetNatureIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.AssetNatureId == id; }, assetFilter.AssetNatureIds));
            }

            if ((assetFilter.CompanyIds != null) && (assetFilter.CompanyIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.CompanyId == id; }, assetFilter.CompanyIds));
            }

            if ((assetFilter.InsuranceCategoryIds != null) && (assetFilter.InsuranceCategoryIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.InsuranceCategoryId == id; }, assetFilter.InsuranceCategoryIds));
            }

            if ((assetFilter.DimensionIds != null) && (assetFilter.DimensionIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Asset.DimensionId == id; }, assetFilter.DimensionIds));
            }

            //if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
            //{
            //	query = query.Where(a => assetFilter.EmployeeIds.Contains(a.Adm.EmployeeId));
            //}

            if ((assetFilter.ProjectIds != null) && (assetFilter.ProjectIds.Count > 0))
            {
                query = query.Where(a => assetFilter.ProjectIds.Contains(a.Adm.ProjectId));
            }

            if ((assetFilter.DictionaryItemIds != null) && (assetFilter.DictionaryItemIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DictionaryItemIds.Contains(a.Asset.DictionaryItemId));
            }

            if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.DivisionId));
            }

            if ((assetFilter.DepartmentIds != null) && (assetFilter.DepartmentIds.Count > 0))
            {
                query = query.Where(a => assetFilter.DepartmentIds.Contains(a.Asset.DepartmentId));
            }


            if ((assetFilter.BrandIds != null) && (assetFilter.BrandIds.Count > 0))
            {
                query = query.Where(a => assetFilter.BrandIds.Contains(a.Adm.BrandId));
            }

            if ((assetFilter.RoomIds != null) && (assetFilter.RoomIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.RoomId == id; }, assetFilter.RoomIds));
            }
            else
            {
                if ((assetFilter.LocationIds != null) && (assetFilter.LocationIds.Count > 0))
                {
                    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Id == id; }, assetFilter.LocationIds));
                }
                else
                {
                    if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Region.Id == id; }, assetFilter.RegionIds));
                    }
                }
            }

            //if ((assetFilter.AdministrationIds != null) && (assetFilter.AdministrationIds.Count > 0))
            //{
            //    query = query.Where(a => assetFilter.AdministrationIds.Contains(a.Adm.AdministrationId));
            //}
            //else
            //{
            //    if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
            //    {
            //        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Administration.Division.Id == id; }, assetFilter.DivisionIds));
            //    }

            //}

            //if (assetFilter.ShowReco)
            //{
            //    query = query.Where(a => a.Asset.ERPCode == null || a.Asset.ERPCode == "");
            //}

            // query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && a.Asset.AssetStateId == assetStateId && a.Asset.NotSync == false);
            query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && a.Asset.AssetStateId == assetStateId);

            if (assetFilter.FilterPurchaseDate != "false" && assetFilter.FilterPurchaseDate != null)
            {


                var monthYear = DateTime.ParseExact(assetFilter.FilterPurchaseDate,
                                  "yyyy-MM-dd",
                                   CultureInfo.InvariantCulture);

                var firstDayOfMonth = new DateTime(monthYear.Year, monthYear.Month, 1);
                var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
                query = query.Where(a => a.Asset.PurchaseDate >= firstDayOfMonth && a.Asset.PurchaseDate <= lastDayOfMonth);
                // Console.Write("Iesiri: " + query.Count());
            }

            //if (assetFilter.FromDate != null)
            //{
            //    query = query.Where(a => a.Asset.PurchaseDate >= assetFilter.FromDate);
            //}

            //if (assetFilter.ToDate != null)
            //{
            //    query = query.Where(a => a.Asset.PurchaseDate <= assetFilter.ToDate);
            //}


            //if (assetFilter.FromReceptionDate != null)
            //{
            //    query = query.Where(a => a.Asset.ReceptionDate >= assetFilter.FromReceptionDate);
            //}

            //if (assetFilter.ToReceptionDate != null)
            //{
            //    query = query.Where(a => a.Asset.ReceptionDate <= assetFilter.ToReceptionDate);
            //}

            //if (assetFilter.ErpCode != null && assetFilter.ErpCode == true)
            //{
            //    assetQuery = assetQuery.Where(a => a.ERPCode != null);
            //}
            //else if (assetFilter.ErpCode != null && assetFilter.ErpCode == false)
            //{
            //    assetQuery = assetQuery.Where(a => a.ERPCode == null);
            //}

            depTotal = new AssetDepTotal();
            depTotal.Count = query.Count();
            if (joinDep)
            {
                depTotal.DepFYStart = query.Sum(a => a.Dep.APCFYStart);
                depTotal.APCFYStart = query.Sum(a => a.Dep.DepFYStart);
                depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
                depTotal.CurrBkValue = query.Sum(a => a.Dep.Acquisition);
                depTotal.CurrentAPC = query.Sum(a => a.Dep.DepForYear);
                depTotal.DepTransfer = query.Sum(a => a.Dep.Retirement);
                depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
                depTotal.Acquisition = query.Sum(a => a.Dep.CurrBkValue);
                depTotal.DepForYear = query.Sum(a => a.Dep.CurrentAPC);
                depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
            }

            if (sorting != null)
            {
                query = sorting.Direction.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
            }

            if (paging != null)
                query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
            var list = query.ToList();

            return list;
        }

        public IEnumerable<AssetMonthDetail> GetMonthReco(AssetFilter assetFilter, string includes, Sorting sorting, Paging paging, out AssetDepTotal depTotal)
		{
            IQueryable<Model.Asset> assetQuery = null;
            IQueryable<AssetDepMD> depQuery = null;
            IQueryable<AssetAdmMD> admQuery = null;
            IQueryable<AssetAC> assetClassQuery = null;
            IQueryable<AssetMonthDetail> query = null;

            assetQuery = _context.Assets.AsQueryable();

            int? accSystemId = assetFilter.AccSystemId;
            int? accMonthId = assetFilter.AccMonthId;

            if (!accMonthId.HasValue || accMonthId.Value <= 0)
            {
                accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
            }

            if (!accSystemId.HasValue || accSystemId.Value <= 0)
            {
                Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
                if (accSystem != null) accSystemId = accSystem.Id;
            }

            depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
            admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));
            assetClassQuery = _context.AssetACs.AsQueryable();

            if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
			if (assetFilter.Filter != "" && assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.ERPCode.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter)));
            if (assetFilter.FilterDoc != "" && assetFilter.FilterDoc != null) assetQuery = assetQuery.Where(a => a.Document.DocNo1.Contains(assetFilter.FilterDoc));

            bool joinAdm = false;
			bool joinDep = false;
			bool joinAssetClass = false;

			includes = includes ?? string.Empty;

			foreach (var includeProperty in includes.Split
						(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
			{
				int dotIndex = includeProperty.IndexOf(".");
				string prefix = string.Empty;
				string property = string.Empty;

				if (dotIndex > 0)
				{
					prefix = includeProperty.Substring(0, dotIndex);
					property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
				}
				else
				{
					prefix = includeProperty;
				}

				//prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

				switch (prefix)
				{
					case "Asset":
						if (property.Length > 0) assetQuery = assetQuery.Include(property);
						break;
					case "Dep":
						if (property.Length > 0) depQuery = depQuery.Include(property);
						joinDep = true;
						break;
					case "Adm":
						if (property.Length > 0) admQuery = admQuery.Include(property);
						joinAdm = true;
						break;
					case "AssetClass":
						if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
						joinAssetClass = true;
						break;
					default:
						break;
				}
			}

			query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

			if (joinAdm)
			{
				query = query
					.Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
			}

			if (joinDep)
			{
				query = query
					.Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
			}

			//if ((assetFilter.AssetTypeIds != null) && (assetFilter.AssetTypeIds.Count > 0))
			//{
			//	query = query.Where(a => assetFilter.AssetTypeIds.Contains(a.Adm.AssetTypeId));
			//}

			//if ((assetFilter.UomIds != null) && (assetFilter.UomIds.Count > 0))
			//{
			//	query = query.Where(a => assetFilter.UomIds.Contains(a.Asset.UomId));
			//}

			//if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.DivisionIds.Contains(a.Asset.Administration.DivisionId));
			//}

			//if ((assetFilter.AssetStateIds != null) && (assetFilter.AssetStateIds.Count > 0))
			//{
			//	query = query.Where(a => assetFilter.AssetStateIds.Contains(a.Adm.AssetStateId));
			//}
			//else
			//{
			//	//query = query.Where(a => a.Adm.AssetStateId !=22 && a.Adm.AssetStateId != 27);
			//	//query = query.Where(a => assetFilter.AssetStateIds.Contains(20) || assetFilter.AssetStateIds.Contains(21) || assetFilter.AssetStateIds.Contains(24) || assetFilter.AssetStateIds.Contains(25) || assetFilter.AssetStateIds.Contains(26));
			//}

			//if ((assetFilter.InvStateIds != null) && (assetFilter.InvStateIds.Count > 0))
			//{
			//	query = query.Where(a => assetFilter.InvStateIds.Contains(a.Asset.InvStateId));
			//}
			//else
			//{
			//	//query = query.Where(a => a.Asset.InvStateId != 40);
			//}

			//if ((assetFilter.AssetCategoryIds != null) && (assetFilter.AssetCategoryIds.Count > 0))
			//{
			//	query = query.Where(a => assetFilter.AssetCategoryIds.Contains(a.Adm.AssetCategoryId));
			//}

			//if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
			//{
			//	query = query.Where(a => assetFilter.CostCenterIds.Contains(a.Adm.CostCenterId));
			//}
			//else
			//{
			//	if ((assetFilter.AdmCenterIds != null) && (assetFilter.AdmCenterIds.Count > 0))
			//	{
			//		query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.AdmCenter.Id == id; }, assetFilter.AdmCenterIds));
			//	}
			//}

			if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
			{
				query = query.Where(a => assetFilter.EmployeeIds.Contains(a.Adm.EmployeeId));
			}

			if ((assetFilter.RoomIds != null) && (assetFilter.RoomIds.Count > 0))
			{
				query = query.Where(a => assetFilter.RoomIds.Contains(a.Adm.RoomId));
			}
			else
			{
				if ((assetFilter.LocationIds != null) && (assetFilter.LocationIds.Count > 0))
				{
					query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Id == id; }, assetFilter.LocationIds));
				}
				else
				{
					if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
					{
						query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Region.Id == id; }, assetFilter.RegionIds));
					}
				}
			}

			//if ((assetFilter.AdministrationIds != null) && (assetFilter.AdministrationIds.Count > 0))
			//{
			//	query = query.Where(a => assetFilter.AdministrationIds.Contains(a.Adm.AdministrationId));
			//}
			//else
			//{
			//	if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
			//	{
			//		query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Administration.Division.Id == id; }, assetFilter.DivisionIds));
			//	}

			//}

			if (assetFilter.ShowReco)
			{
				query = query.Where(a => a.Asset.IsReconcile == false);
			}

			query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true);

			//if (assetFilter.FilterPurchaseDate != "false")
			//{


			//    var monthYear = DateTime.ParseExact(assetFilter.FilterPurchaseDate,
			//                      "yyyy-MM-dd",
			//                       CultureInfo.InvariantCulture);

			//    var firstDayOfMonth = new DateTime(monthYear.Year, monthYear.Month, 1);
			//    var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
			//    query = query.Where(a => a.Asset.PurchaseDate >= firstDayOfMonth && a.Asset.PurchaseDate <= lastDayOfMonth);
			//    // Console.Write("Iesiri: " + query.Count());
			//}

			//if (assetFilter.FromDate != null)
			//{
			//	query = query.Where(a => a.Asset.PurchaseDate >= assetFilter.FromDate);
			//}

			//if (assetFilter.ToDate != null)
			//{
			//	query = query.Where(a => a.Asset.PurchaseDate <= assetFilter.ToDate);
			//}

			depTotal = new AssetDepTotal();
			depTotal.Count = query.Count();
			if (joinDep)
			{
                depTotal.DepFYStart = query.Sum(a => a.Dep.APCFYStart);
                depTotal.APCFYStart = query.Sum(a => a.Dep.DepFYStart);
                depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
                depTotal.CurrBkValue = query.Sum(a => a.Dep.Acquisition);
                depTotal.CurrentAPC = query.Sum(a => a.Dep.DepForYear);
                depTotal.DepTransfer = query.Sum(a => a.Dep.Retirement);
                depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
                depTotal.Acquisition = query.Sum(a => a.Dep.CurrBkValue);
                depTotal.DepForYear = query.Sum(a => a.Dep.CurrentAPC);
                depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
            }

			if (sorting != null)
			{
				query = sorting.Direction.ToLower() == "asc"
					? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
					: query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
			}

			if (paging != null)
				query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
			var list = query.ToList();

			return list;
		}

		public IEnumerable<AssetMonthDetail> GetMonthExport(AssetFilter assetFilter, string includes)
        {
            IQueryable<Model.Asset> assetQuery = null;
            IQueryable<AssetDepMD> depQuery = null;
            IQueryable<AssetAdmMD> admQuery = null;
            IQueryable<AssetAC> assetClassQuery = null;
            IQueryable<AssetMonthDetail> query = null;

            assetQuery = _context.Assets.AsQueryable();

            int? accSystemId = assetFilter.AccSystemId;
            int? accMonthId = assetFilter.AccMonthId;

            if (!accMonthId.HasValue || accMonthId.Value <= 0)
            {
                accMonthId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();
            }

            if (!accSystemId.HasValue || accSystemId.Value <= 0)
            {
                Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
                if (accSystem != null) accSystemId = accSystem.Id;
            }

            depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && (a.AccMonthId == accMonthId));
            admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => (a.AccMonthId == accMonthId));
            assetClassQuery = _context.AssetACs.AsQueryable();

            if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
            if (assetFilter.Filter != null &&assetFilter.Filter != "") assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.ERPCode.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter) || a.SerialNumber.Contains(assetFilter.Filter)));

            bool joinAdm = false;
            bool joinDep = false;
            bool joinAssetClass = false;

            includes = includes ?? string.Empty;

            foreach (var includeProperty in includes.Split
                        (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                int dotIndex = includeProperty.IndexOf(".");
                string prefix = string.Empty;
                string property = string.Empty;

                if (dotIndex > 0)
                {
                    prefix = includeProperty.Substring(0, dotIndex);
                    property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
                }
                else
                {
                    prefix = includeProperty;
                }

                //prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

                switch (prefix)
                {
                    case "Asset":
                        if (property.Length > 0) assetQuery = assetQuery.Include(property);
                        break;
                    case "Dep":
                        if (property.Length > 0) depQuery = depQuery.Include(property);
                        joinDep = true;
                        break;
                    case "Adm":
                        if (property.Length > 0) admQuery = admQuery.Include(property);
                        joinAdm = true;
                        break;
                    case "AssetClass":
                        if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
                        joinAssetClass = true;
                        break;
                    default:
                        break;
                }
            }

            query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

            if (joinAdm)
            {
                query = query
                    .Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
            }

            if (joinDep)
            {
                query = query
                    .Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
            }

			//if ((assetFilter.AssetTypeIds != null) && (assetFilter.AssetTypeIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetTypeIds.Contains(a.Adm.AssetTypeId));
			//}

			//if ((assetFilter.UomIds != null) && (assetFilter.UomIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.UomIds.Contains(a.Asset.UomId));
			//}


			//if ((assetFilter.AssetStateIds != null) && (assetFilter.AssetStateIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.AssetStateIds.Contains(a.Adm.AssetStateId));
			//}
			//else
			//{
			//    //query = query.Where(a => a.Adm.AssetStateId !=22 && a.Adm.AssetStateId != 27);
			//    //query = query.Where(a => assetFilter.AssetStateIds.Contains(20) || assetFilter.AssetStateIds.Contains(21) || assetFilter.AssetStateIds.Contains(24) || assetFilter.AssetStateIds.Contains(25) || assetFilter.AssetStateIds.Contains(26));
			//}

			//if ((assetFilter.InvStateIds != null) && (assetFilter.InvStateIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.InvStateIds.Contains(a.Asset.InvStateId));
			//}
			//else
			//{
			//    //query = query.Where(a => a.Asset.InvStateId != 40);
			//}

			//if ((assetFilter.AssetCategoryIds != null) && (assetFilter.AssetCategoryIds.Count > 0))
			//{
			//	query = query.Where(a => assetFilter.AssetCategoryIds.Contains(a.Adm.AssetCategoryId));
			//}

			if ((assetFilter.CompanyIds != null) && (assetFilter.CompanyIds.Count > 0))
			{
				query = query.Where(a => assetFilter.CompanyIds.Contains(a.Asset.CompanyId));
			}


			if (assetFilter.FilterPurchaseDate != "false")
			{


				var monthYear = DateTime.ParseExact(assetFilter.FilterPurchaseDate,
								  "yyyy-MM-dd",
								   CultureInfo.InvariantCulture);

				var firstDayOfMonth = new DateTime(monthYear.Year, monthYear.Month, 1);
				var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
				query = query.Where(a => a.Asset.PurchaseDate >= firstDayOfMonth && a.Asset.PurchaseDate <= lastDayOfMonth);
				// Console.Write("Iesiri: " + query.Count());
			}

			//if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
			//{
			//    query = query.Where(a => assetFilter.CostCenterIds.Contains(a.Adm.CostCenterId));
			//}
			//else
			//{
			//    if ((assetFilter.AdmCenterIds != null) && (assetFilter.AdmCenterIds.Count > 0))
			//    {
			//        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.CostCenter.AdmCenter.Id == id; }, assetFilter.AdmCenterIds));
			//    }
			//}

			if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
            {
                query = query.Where(a => assetFilter.EmployeeIds.Contains(a.Adm.EmployeeId));
            }

            if ((assetFilter.RoomIds != null) && (assetFilter.RoomIds.Count > 0))
            {
                query = query.Where(a => assetFilter.RoomIds.Contains(a.Adm.RoomId));
            }
            else
            {
                if ((assetFilter.LocationIds != null) && (assetFilter.LocationIds.Count > 0))
                {
                    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Id == id; }, assetFilter.LocationIds));
                }
                else
                {
                    if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Room.Location.Region.Id == id; }, assetFilter.RegionIds));
                    }
                }
            }

            //if ((assetFilter.AdministrationIds != null) && (assetFilter.AdministrationIds.Count > 0))
            //{
            //    query = query.Where(a => assetFilter.AdministrationIds.Contains(a.Adm.AdministrationId));
            //}
            //else
            //{
            //    if ((assetFilter.DivisionIds != null) && (assetFilter.DivisionIds.Count > 0))
            //    {
            //        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetMonthDetail, int?>((id) => { return a => a.Adm.Administration.Division.Id == id; }, assetFilter.DivisionIds));
            //    }

            //}

            query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true);

            var list = query.ToList();

            return list;
        }

        public IEnumerable<Model.Asset> GetDetails(AssetFilter assetFilter, string includes, Paging paging, Sorting sorting, out int count)
        {
            IQueryable<Model.Asset> query = null;
            query = GetAssetQuery(includes);

            if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
            {
                query = query.Where(a => assetFilter.CostCenterIds.Contains(a.CostCenterId));
            }
            else
            {
                if ((assetFilter.AdmCenterIds != null) && (assetFilter.AdmCenterIds.Count > 0))
                {
                    query = query.Where(ExpressionHelper.GetInListPredicate<Model.Asset, int?>((id) => { return a => a.CostCenter.AdmCenter.Id == id; }, assetFilter.AdmCenterIds));
                }
            }

            if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
            {
                query = query.Where(a => assetFilter.EmployeeIds.Contains(a.EmployeeId));
            }

            if ((assetFilter.RoomIds != null) && (assetFilter.RoomIds.Count > 0))
            {
                query = query.Where(a => assetFilter.RoomIds.Contains(a.RoomId));
            }
            else
            {
                if ((assetFilter.LocationIds != null) && (assetFilter.LocationIds.Count > 0))
                {
                    query = query.Where(ExpressionHelper.GetInListPredicate<Model.Asset, int?>((id) => { return a => a.Room.Location.Id == id; }, assetFilter.LocationIds));
                }
                else
                {
                    if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.Asset, int?>((id) => { return a => a.Room.Location.Region.Id == id; }, assetFilter.RegionIds));
                    }
                }
            }

            if ((assetFilter.AssetStateIds != null) && (assetFilter.AssetStateIds.Count > 0))
            {
                query = query.Where(a => assetFilter.AssetStateIds.Contains(a.AssetStateId));
            }

            if (assetFilter.FilterInv)
            {
                query = query.Where(a => assetFilter.Filter == a.InvNo);
            }

            if (assetFilter.FilterName)
            {
                query = query.Where(a => assetFilter.Filter.Trim() == a.Name.Trim());
            }


            if (assetFilter.FilterPurchaseDate != "false")
            {


                var monthYear = DateTime.ParseExact(assetFilter.FilterPurchaseDate,
                                  "yyyy-MM-dd",
                                   CultureInfo.InvariantCulture);

                var firstDayOfMonth = new DateTime(monthYear.Year, monthYear.Month, 1);
                var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
                query = query.Where(a => a.PurchaseDate >= firstDayOfMonth && a.PurchaseDate <= lastDayOfMonth);
                Console.Write("Iesiri: " + query.Count());
            }

            if (assetFilter.Custody != null) query = query.Where(a => a.Custody == assetFilter.Custody);
            if (assetFilter.Filter != null) query = query.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter)));

            count = query.Count();

            if (sorting != null)
            {
                query = sorting.Direction.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<Model.Asset>(sorting.Column))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<Model.Asset>(sorting.Column));
            }

            if (paging != null)
            {
                query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
            }

            return query.ToList();
        }

        public IEnumerable<Model.Asset> GetAssetsOut(AssetFilter assetFilter, string includes, Paging paging, Sorting sorting, out int count)
        {
            IQueryable<Model.Asset> query = null;
            
            if (assetFilter.FilterPurchaseDate != "false")
            {


                var monthYear = DateTime.ParseExact(assetFilter.FilterPurchaseDate,
                                  "yyyy-MM-dd",
                                   CultureInfo.InvariantCulture);

                var firstDayOfMonth = new DateTime(monthYear.Year, monthYear.Month, 1);
                var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);

                var assetOps = _context.AssetOps
                     .Include(d => d.Document)
                     .Where(op => (op.Document.DocumentDate >= firstDayOfMonth && op.Document.DocumentDate <= lastDayOfMonth) && op.Document.DocumentTypeId == 6)
                     .Select(a => a.AssetId);

                List<int> IDs = new List<int>(assetOps.ToList());
                query = GetAssetQuery(includes);
                query = query.Where(x => IDs.Contains(x.Id));
            }

            count = query.Count();

            if (sorting != null)
            {
                query = sorting.Direction.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<Model.Asset>(sorting.Column))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<Model.Asset>(sorting.Column));
            }

            if (paging != null)
            {
                query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
            }

            return query.ToList();
        }

		public IEnumerable<Model.InventoryAsset> EmployeeValidate(int inventoryId, int documentTypeId, string includes, string filter, string userId, string reportType,
		bool? custody, bool? allowLabel, bool isExport,
		string sortColumn, string sortDirection, int? page, int? pageSize, out int count)
		{
			IQueryable<Model.InventoryAsset> query = null;

			Model.Inventory inventory = _context.Set<Model.Inventory>().AsNoTracking().Where(i => i.Active == true).SingleOrDefault();

			if (inventoryId == 0)
			{
				inventoryId = inventory.Id;
			}


			 query = GetInventoryEmployeeValidate(inventoryId, includes);

			// Console.WriteLine(query.Count());


			if (userId != "" && userId != null)
			{
				query = query.Where(a => a.Asset.Employee.Guid.ToString() == userId);
			}
			else
			{
				query = query.Where(a => a.EmployeeFinal.Guid.ToString() == "1234");
			}

			if (filter != null && filter != "") query = query.Where(a => (a.Asset.InvNo.Contains(filter) || a.Asset.Name.Contains(filter) || a.SerialNumber.Contains(filter) || a.Asset.ERPCode.Contains(filter)));


			//query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true).OrderBy(a => a.Asset.Name);

			count = query.Count();

			if ((sortColumn != null) && (sortColumn.Length > 0) && (sortDirection != null) && (sortDirection.Length > 0))
			{
				query = sortDirection.ToLower() == "asc"
					? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<Model.InventoryAsset>(sortColumn))
					: query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<Model.InventoryAsset>(sortColumn));
			}

			if (page.HasValue && pageSize.HasValue)
			{
				query = query.Skip((page.Value - 1) * pageSize.Value).Take(pageSize.Value);
			}

			return query.ToList();
		}

		public IQueryable<Model.InventoryAsset> GetInventoryEmployeeValidate(int inventoryId, string includes)
		{
			IQueryable<Model.InventoryAsset> query = null;
			query = _context.InventoryAssets.AsNoTracking();

			if (includes != null)
			{
				foreach (var includeProperty in includes.Split
					(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
				{
					query = query.Include(includeProperty);
				}
			}
			else
			{
				query = query
					.Include(i => i.Asset)
					//.ThenInclude(i => i.AssetInv)
					//.Include(i => i.Asset)
					//.ThenInclude(i => i.AssetClassification)
					.Include(i => i.RoomInitial)
						.ThenInclude(r => r.Location)
					//.ThenInclude(l => l.AdmCenter)
					//.ThenInclude(l => l.Region)
					//.Include(i => i.RoomInitial)
					//.ThenInclude(r => r.Location)
					//.ThenInclude(l => l.City)
					//.ThenInclude(l => l.County)
					//.Include(i => i.RoomInitial)
					//    .ThenInclude(r => r.Location)
					//        .ThenInclude(l => l.Company)
					//            .ThenInclude(l => l.Type)
					//.ThenInclude(e => e.Employee)
					//.Include(i => i.AdministrationInitial)
					//    .ThenInclude(r => r.Division)
					//.Include(i => i.AdministrationInitial)
					//.ThenInclude(r => r.CostCenter)
					.Include(i => i.EmployeeInitial)
					//.Include(i => i.CostCenterInitial)
					//    .ThenInclude(c => c.AdmCenter)
					//.Include(i => i.AdministrationFinal)
					//.Include(i => i.AdministrationFinal)
					//    .ThenInclude(i => i.Division)
					.Include(i => i.RoomFinal)
						.ThenInclude(r => r.Location)
					//.ThenInclude(l => l.AdmCenter)
					// .ThenInclude(l => l.Region)
					//.Include(i => i.AdministrationFinal)
					//   .ThenInclude(r => r.Division)
					// .Include(i => i.AdministrationFinal)
					//   .ThenInclude(r => r.CostCenter)
					//.Include(i => i.RoomFinal)
					//  .ThenInclude(r => r.Location)
					//      .ThenInclude(l => l.City)
					//          .ThenInclude(l => l.County)
					//.Include(i => i.RoomFinal)
					//.ThenInclude(r => r.Location)
					//    .ThenInclude(l => l.Company)
					//        .ThenInclude(l => l.Type)
					//              .Include(i => i.RoomFinal)
					//.ThenInclude(r => r.Location)
					//	.ThenInclude(l => l.Employee)
					//.ThenInclude(e => e.Employee)
					.Include(i => i.EmployeeFinal)
					//.Include(i => i.UomFinal)
					//               .Include(i => i.DimensionFinal)
					//.Include(i => i.StateInitial)
					.Include(i => i.ModifiedByUser);
				//.Include(i => i.CostCenterFinal)
				//    .ThenInclude(c => c.AdmCenter)
				//.Include(i => i.StateFinal);
			}

			query = query.Where(i => i.InventoryId == inventoryId && i.Asset.IsDeleted == false && i.Asset.Validated == true);
			 Console.WriteLine("InventoryAssets: " + query.Count());

			return query;
		}


		//public IEnumerable<Model.Asset> GetDetails(Paging paging, Sorting sorting, AssetFilter assetFilter, /*out AssetDepTotal assetTotal*/ out int count, out decimal sumValueInv, out decimal sumValueRem )
		//{
		//    IQueryable<Model.Asset> query = null;
		//    IQueryable<Model.AssetDep> assetDeps = _context.Set<Model.AssetDep>().AsQueryable();
		//    query = GetAssetQuery(assetFilter.Includes);

		//    //var res201 = _context.Assets
		//    //    .Join(_context.AssetDepMDs.Where(a => a.AccMonthId == 1), asset => asset.Id, assetDep => assetDep.AssetId, (asset, assetDep) => new { AssetId = asset.Id })
		//    //    .Join(_context.AssetAdmMDs.Where(a => a.AccMonthId == 1), asset => asset.AssetId, assetAdm => assetAdm.AssetId, (asset, assetAdm) => new { AssetId = asset.AssetId, RoomId = assetAdm.RoomId })
		//    //    .Join(_context.Rooms, assetAdm => assetAdm.RoomId, room => room.Id, (assetAdm, room) => new { AssetId = assetAdm.AssetId, LocationId = room.LocationId });

		//    //var res20 = res201
		//    //    .Join(_context.Locations, a => a.LocationId, location => location.Id, (a, location) => new { AssetId = a.AssetId, Name = location.Code });

		//    //var res21 = res20.OrderBy(r => r.Name).Select(a => new { AssetId = a.AssetId }).Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
		//    //var res22 = res21.ToList();

		//    //var res1 = from asset in _context.Assets.AsQueryable()
		//    //           join assetDep in _context.AssetDepMDs.AsQueryable() on asset.Id equals assetDep.AssetId
		//    //           join assetAdm in _context.AssetAdmMDs.AsQueryable() on asset.Id equals assetAdm.AssetId
		//    //           join room in _context.Set<Model.Room>().AsQueryable() on assetAdm.RoomId equals room.Id
		//    //           join location in _context.Set<Model.Location>().AsQueryable() on room.LocationId equals location.Id
		//    //           where ((assetAdm.AccMonthId == 1) && (assetDep.AccMonthId == 1))
		//    //           select new
		//    //           {
		//    //               AssetId = asset.Id,
		//    //               LocationName = location.Name
		//    //           };
		//    //res1 = res1.OrderBy(r => r.LocationName).Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);

		//    //if (assetFilter.AccSystemId.HasValue)
		//    //query = query.Where(a => a.AssetDepMDs.Any(i => i.AccSystemId == assetFilter.AccSystemId && i.AccMonthId == 1));
		//    //query = query.Where(a => a.AssetAdmMDs.Any(i => i.AccMonthId == 1));

		//    if ((assetFilter.AssetStateIds != null) && (assetFilter.AssetStateIds.Count > 0))
		//    {
		//        query = query.Where(a => assetFilter.AssetStateIds.Contains(a.AssetStateId));
		//    }

		//    if (assetFilter.FilterInv)
		//    {
		//        query = query.Where(a => assetFilter.Filter == a.InvNo);
		//    }

		//    if (assetFilter.FilterName)
		//    {
		//        query = query.Where(a => assetFilter.Filter.Trim() == a.Name.Trim());
		//    }


		//    if (assetFilter.FilterPurchaseDate != "false")
		//    {


		//        var monthYear = DateTime.ParseExact(assetFilter.FilterPurchaseDate,
		//                          "yyyy-MM-dd",
		//                           CultureInfo.InvariantCulture);

		//        var firstDayOfMonth = new DateTime(monthYear.Year, monthYear.Month, 1);
		//        var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
		//        query = query.Where(a => a.PurchaseDate >= firstDayOfMonth && a.PurchaseDate <= lastDayOfMonth);
		//    }


		//    //if (assetFilter.Custody ) query = query.Where(a => a.Custody );



		//    if ((assetFilter.CostCenterIds != null) && (assetFilter.CostCenterIds.Count > 0))
		//    {
		//        query = query.Where(a => assetFilter.CostCenterIds.Contains(a.CostCenterId));
		//    }
		//    else
		//    {
		//        if ((assetFilter.AdmCenterIds != null) && (assetFilter.AdmCenterIds.Count > 0))
		//        {
		//            query = query.Where(ExpressionHelper.GetInListPredicate<Model.Asset, int?>((id) => { return a => a.CostCenter.AdmCenter.Id == id; }, assetFilter.AdmCenterIds));
		//        }
		//    }

		//    if ((assetFilter.EmployeeIds != null) && (assetFilter.EmployeeIds.Count > 0))
		//    {
		//        query = query.Where(a => assetFilter.EmployeeIds.Contains(a.EmployeeId));
		//    }

		//    if ((assetFilter.AssetCategoryIds != null) && (assetFilter.AssetCategoryIds.Count > 0))
		//    {
		//        query = query.Where(a => assetFilter.AssetCategoryIds.Contains(a.AssetCategoryId));
		//    }

		//    if ((assetFilter.AssetClassIds != null) && (assetFilter.AssetClassIds.Count > 0))
		//    {
		//        query = query.Where(a => assetFilter.AssetClassIds.Contains(a.AdministrationId));
		//    }

		//    if ((assetFilter.AssetTypeIds != null) && (assetFilter.AssetTypeIds.Count > 0))
		//    {
		//        query = query.Where(a => assetFilter.AssetTypeIds.Contains(a.AssetTypeId));
		//    }


		//    if ((assetFilter.RoomIds != null) && (assetFilter.RoomIds.Count > 0))
		//    {
		//        query = query.Where(a => assetFilter.RoomIds.Contains(a.RoomId));
		//    }
		//    else
		//    {
		//        if ((assetFilter.LocationIds != null) && (assetFilter.LocationIds.Count > 0))
		//        {
		//            query = query.Where(ExpressionHelper.GetInListPredicate<Model.Asset, int?>((id) => { return a => a.Room.Location.Id == id; }, assetFilter.LocationIds));
		//        }
		//        else
		//        {
		//            if ((assetFilter.RegionIds != null) && (assetFilter.RegionIds.Count > 0))
		//            {
		//                query = query.Where(ExpressionHelper.GetInListPredicate<Model.Asset, int?>((id) => { return a => a.Room.Location.Region.Id == id; }, assetFilter.RegionIds));
		//            }
		//        }
		//    }

		//    if (assetFilter.Filter != null) query = query.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter)));

		//    query = query.Where(a => a.IsDeleted == false);

		//    count = query.Count();
		//    sumValueInv = query.Sum(a => a.ValueInv);
		//    sumValueRem = query.Sum(a => a.ValueRem);

		//    //var assetDepTotal = from q in query
		//    //                    group q by 0 into t
		//    //             select new AssetDepTotal()
		//    //             {
		//    //                 //Count = t.Count(),
		//    //                 //ValueInv = t.Sum(q => q.ValueInv),
		//    //                 //ValueRem = t.Sum(q => q.ValueRem),
		//    //                 //ValueDep = t.Sum(q => q.ValueInv - q.ValueRem),
		//    //                 //ValueDepYTD = 0
		//    //             };
		//    //assetTotal = assetDepTotal.SingleOrDefault();

		//    //if (assetTotal == null) assetTotal = new AssetDepTotal();

		//    if (sorting != null)
		//    {
		//        query = sorting.Direction.ToLower() == "asc"
		//            ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<Model.Asset>(sorting.Column))
		//            : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<Model.Asset>(sorting.Column));
		//    }

		//    if (paging != null)
		//    {
		//        query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
		//    }

		//    return query.ToList();
		//}

		//public IEnumerable<Dto.AssetInvDetail> GetInvDetailsByFilters(string filter, List<int> assetCategoryIds, List<int> assetTypeIds, List<int> partnerIds,
		//    List<int> departmentIds, List<int> employeeIds, List<int> locationIds, List<int> roomIds, List<int> costCenterIds, bool? custody,
		//    string sortColumn, string sortDirection, int? page, int? pageSize, out int count)
		//{
		//    IQueryable<Dto.AssetInvDetail> query = null;
		//    IQueryable<Model.Asset> assets = _context.Set<Model.Asset>().AsQueryable();
		//    //IQueryable<Model.AssetInv> assetInvs = _context.Set<Model.AssetInv>().AsQueryable();
		//    IQueryable<Model.AssetCategory> assetCategories = _context.Set<Model.AssetCategory>().AsQueryable();
		//    IQueryable<Model.AssetType> assetTypes = _context.Set<Model.AssetType>().AsQueryable();
		//    IQueryable<Model.Document> documents = _context.Set<Model.Document>().AsQueryable();
		//    IQueryable<Model.Partner> partners = _context.Set<Model.Partner>().AsQueryable();
		//    IQueryable<Model.Department> departments = _context.Set<Model.Department>().AsQueryable();
		//    IQueryable<Model.Employee> employees = _context.Set<Model.Employee>().AsQueryable();
		//    IQueryable<Model.Location> locations = _context.Set<Model.Location>().AsQueryable();
		//    IQueryable<Model.Room> rooms = _context.Set<Model.Room>().AsQueryable();
		//    IQueryable<Model.CostCenter> costCenters = _context.Set<Model.CostCenter>().AsQueryable();
		//    IQueryable<Model.AssetOp> assetOps = _context.Set<Model.AssetOp>().AsQueryable();

		//    if (custody.HasValue) assets = assets.Where(a => a.Custody == custody.Value);

		//    if ((assetCategoryIds != null) && (assetCategoryIds.Count > 0))
		//    {
		//        assetCategories = assetCategories.Where(a => assetCategoryIds.Contains(a.Id));
		//    }

		//    if ((assetTypeIds != null) && (assetTypeIds.Count > 0))
		//    {
		//        assetTypes = assetTypes.Where(a => assetTypeIds.Contains(a.Id));
		//    }

		//    if ((partnerIds != null) && (partnerIds.Count > 0))
		//    {
		//        partners = partners.Where(p => partnerIds.Contains(p.Id));
		//    }

		//    if ((departmentIds != null) && (departmentIds.Count > 0))
		//        departments = departments.Where(d => departmentIds.Contains(d.Id));
		//    if ((employeeIds != null) && (employeeIds.Count > 0))
		//        employees = employees.Where(e => employeeIds.Contains(e.Id));
		//    if ((locationIds != null) && (locationIds.Count > 0))
		//        locations = locations.Where(l => locationIds.Contains(l.Id));
		//    if ((roomIds != null) && (roomIds.Count > 0))
		//        rooms = rooms.Where(r => roomIds.Contains(r.Id));
		//    if ((costCenters != null) && (costCenterIds.Count > 0))
		//        costCenters = costCenters.Where(r => costCenterIds.Contains(r.Id));
		//    switch (filter)
		//    {
		//        case "DSTCONF":
		//            if (filter.Length > 0) assetOps = assetOps.Where(a => a.DstConfAt != null);
		//            break;
		//        case "REGISTERCONF":
		//            if (filter.Length > 0) assetOps = assetOps.Where(a => a.RegisterConfAt != null);
		//            break;
		//        case "RELEASECONF":
		//            if (filter.Length > 0) assetOps = assetOps.Where(a => a.ReleaseConfAt != null);
		//            break;
		//        case "SRCCONF":
		//            if (filter.Length > 0) assetOps = assetOps.Where(a => a.SrcConfAt != null);
		//            break;
		//        default:
		//            break;
		//    }






		//    query =
		//        from asset in assets
		//            //join assetInv in assetInvs on asset.Id equals assetInv.Id

		//            //join assetType in assetTypes on asset.AssetTypeId equals assetType.Id
		//            //join assetCategory in assetCategories on asset.AssetCategoryId equals assetCategory.Id
		//            //join document in documents on asset.DocumentId equals document.Id
		//            //join partner in partners on document.PartnerId equals partner.Id

		//        join employee in employees on asset.EmployeeId equals employee.Id
		//        //join department in departments on employee.DepartmentId equals department.Id
		//        join room in rooms on asset.RoomId equals room.Id
		//        join location in locations on room.LocationId equals location.Id

		//        // join aop in assetOps on asset.Id equals aop.AssetId 

		//        //join costCenter in costCenters on asset.CostCenterId equals costCenter.Id
		//        join cc in costCenters on asset.CostCenterId equals cc.Id into costCentersAll

		//        from costCenter in costCentersAll.DefaultIfEmpty()

		//        select new Dto.AssetInvDetail()
		//        {
		//            Id = asset.Id,
		//            InvNo = asset.InvNo,
		//            Name = asset.Name,
		//            PurchaseDate = asset.PurchaseDate,
		//            SerialNumber = asset.SerialNumber,
		//            AssetCategoryId = asset.AssetCategoryId,
		//            AssetCategory = string.Empty,// assetCategory.Name,
		//            AssetTypeId = asset.AssetTypeId,
		//            AssetType = string.Empty,// assetType.Name,
		//            DocumentId = asset.DocumentId,
		//            DocNo1 = string.Empty,// document.DocNo1,
		//            DocNo2 = string.Empty,// document.DocNo2,
		//            PartnerId = null, //document.PartnerId,
		//            Partner = string.Empty,// partner.Name,

		//            DepartmentId = null, //department.Id,
		//            Department = string.Empty,// department.Name,
		//            EmployeeId = employee.Id,
		//            InternalCode = employee.InternalCode,
		//            FirstName = employee.FirstName,
		//            LastName = employee.LastName,
		//            LocationId = location.Id,
		//            LocationCode = location.Code,
		//            LocationName = location.Name,
		//            RoomId = room.Id,
		//            RoomCode = room.Code,
		//            RoomName = room.Name,
		//            CreatedAt = asset.CreatedAt,
		//            //ModifiedAt= aop.ModifiedAt,

		//            CostCenterId = asset.CostCenterId,
		//            CostCenterName = costCenter != null ? costCenter.Name : string.Empty,
		//            CostCenterCode = costCenter != null ? costCenter.Code : string.Empty,

		//            Custody = asset.Custody,
		//            //RegisterConfAt= aop.RegisterConfAt,
		//            //RegisterConfBy = aop.RegisterConfBy,
		//            //DstConfAt =aop.DstConfAt,
		//            //DstConfBy=aop.DstConfBy,
		//            //ReleaseConfAt=aop.ReleaseConfAt,
		//            //ReleaseConfBy=aop.ReleaseConfBy,

		//            //AssetOpStateId =aop.AssetOpStateId,
		//            //AssetOpStateName = aop != null ? aop.AssetOpState.Name : string.Empty,
		//            //AssetOpStateCode = aop != null ? aop.AssetOpState.Code : string.Empty,


		//        };

		//    //if (assetTypeId.HasValue) query = query.Where(a => a.AssetTypeId == assetTypeId);
		//    //if (assetCategoryId.HasValue) query = query.Where(a => a.AssetCategoryId == assetCategoryId);
		//    //if (partnerId.HasValue) query = query.Where(a => a.PartnerId == partnerId);

		//    if (filter != null) query = query.Where(a => (a.InvNo.Contains(filter) || a.Name.Contains(filter)));

		//    if (costCenterIds.Count > 0) query = query.Where(a => costCenterIds.Contains(a.CostCenterId.GetValueOrDefault()));

		//    count = query.Count();

		//    if ((sortColumn != null) && (sortColumn.Length > 0) && (sortDirection != null) && (sortDirection.Length > 0))
		//    {
		//        query = sortDirection.ToLower() == "asc"
		//            ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<Dto.AssetInvDetail>(sortColumn))
		//            : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<Dto.AssetInvDetail>(sortColumn));
		//    }

		//    if (page.HasValue && pageSize.HasValue)
		//    {
		//        query = query.Skip((page.Value - 1) * pageSize.Value).Take(pageSize.Value);
		//    }

		//    return query.ToList();
		//}

		public IQueryable<Dto.InventoryAsset> GetInventoryAssetsNiQuery(int inventoryId)
        {
            IQueryable<Dto.InventoryAsset> invAssetNiQuery = null;

            //IQueryable<Dto.AssetNiInvDet> assetsNi = null;

            //assetsNi = _assetNiRepository.GetAssetNiInvDetQuery(inventoryId);

            //invAssetNiQuery = from assetNi in assetsNi
            //                  select new Dto.InventoryAsset()
            //                  {
            //                      Id = assetNi.Id,
            //                      InvNo = assetNi.Code1,
            //                      Name = assetNi.Name1,
            //                      PurchaseDate = null,

            //                      SerialNumber = assetNi.SerialNumber,
            //                      Uom = assetNi.Uom,
            //                      QIntial = 0,
            //                      QFinal = assetNi.Quantity,

            //                      EmployeeIdIni = null,
            //                      InternalCodeIni = string.Empty,
            //                      FirstNameIni = string.Empty,
            //                      LastNameIni = string.Empty,

            //                      RegionIdIni = null,
            //                      RegionCodeIni = string.Empty,
            //                      RegionNameIni = string.Empty,
            //                      LocationIdIni = null,
            //                      LocationCodeIni = string.Empty,
            //                      LocationNameIni = string.Empty,
            //                      RoomIdIni = null,
            //                      RoomCodeIni = string.Empty,
            //                      RoomNameIni = string.Empty,

            //                      EmployeeIdFin = assetNi.EmployeeId != null ? (int?)assetNi.EmployeeId : null,
            //                      InternalCodeFin = assetNi.EmployeeId != null ? assetNi.InternalCode : string.Empty,
            //                      FirstNameFin = assetNi.EmployeeId != null ? assetNi.FirstName : string.Empty,
            //                      LastNameFin = assetNi.EmployeeId != null ? assetNi.LastName : string.Empty,

            //                      RegionIdFin = assetNi.RegionId != null ? (int?)assetNi.RegionId : null,
            //                      RegionCodeFin = assetNi.RegionId != null ? assetNi.RegionCode : string.Empty,
            //                      RegionNameFin = assetNi.RegionId != null ? assetNi.RegionName : string.Empty,

            //                      LocationIdFin = assetNi.LocationId != null ? (int?)assetNi.LocationId : null,
            //                      LocationCodeFin = assetNi.LocationId != null ? assetNi.LocationCode : string.Empty,
            //                      LocationNameFin = assetNi.LocationId != null ? assetNi.LocationName : string.Empty,

            //                      RoomIdFin = assetNi.RoomId != null ? (int?)assetNi.RoomId : null,
            //                      RoomCodeFin = assetNi.RoomId != null ? assetNi.RoomCode : string.Empty,
            //                      RoomNameFin = assetNi.RoomId != null ? assetNi.RoomName : string.Empty,

            //                      CostCenterIdIni = null,
            //                      CostCenterCodeIni = string.Empty,
            //                      CostCenterNameIni = string.Empty,

            //                      CostCenterIdFin = assetNi.CostCenterId,
            //                      CostCenterCodeFin = assetNi.CostCenterCode,
            //                      CostCenterNameFin = assetNi.CostCenterName,

            //                      InvStateIdIni = null,
            //                      InvStateIdFin = assetNi.InvStateId,

            //                      ValueInv = 0,
            //                      ValueDep = 0,
            //                      Custody = assetNi.Custody
            //                  };

            return invAssetNiQuery;
        }

        public IQueryable<Dto.InventoryAsset> GetInventoryAssetsQuery(int inventoryId)
        {
            IQueryable<Dto.InventoryAsset> invAssetQuery = null;

            IQueryable<Model.Asset> assets = _context.Set<Model.Asset>().AsQueryable();

            IQueryable<Model.InventoryAsset> inventoryAssets = _context.Set<Model.InventoryAsset>().AsQueryable();
            IQueryable<Model.AssetCategory> assetCategories = _context.Set<Model.AssetCategory>().AsQueryable();
            IQueryable<Model.Uom> uoms = _context.Set<Model.Uom>().AsQueryable();
            IQueryable<Model.AssetType> assetTypes = _context.Set<Model.AssetType>().AsQueryable();
            IQueryable<Model.Document> documents = _context.Set<Model.Document>().AsQueryable();
            IQueryable<Model.Partner> partners = _context.Set<Model.Partner>().AsQueryable();

            IQueryable<Model.CostCenter> costCentersIni = _context.Set<Model.CostCenter>().AsQueryable();
            IQueryable<Model.CostCenter> costCentersFin = _context.Set<Model.CostCenter>().AsQueryable();

            IQueryable<Model.Employee> employeesIni = _context.Set<Model.Employee>().AsQueryable();
            IQueryable<Model.AdmCenter> admCentersIni = _context.Set<Model.AdmCenter>().AsQueryable();
            IQueryable<Model.Location> locationsIni = _context.Set<Model.Location>().AsQueryable();
            IQueryable<Model.Room> roomsIni = _context.Set<Model.Room>().AsQueryable();

            IQueryable<Model.Employee> employeesFin = _context.Set<Model.Employee>().AsQueryable();
            //var employeesFin = _context.Set<Model.Employee>().AsQueryable()
            //    .Select(e => new { Id = e.Id, InternalCode = e.InternalCode, FirstName = e.FirstName, LastName = e.LastName });
            IQueryable<Model.AdmCenter> admCentersFin = _context.Set<Model.AdmCenter>().AsQueryable();
            IQueryable<Model.Location> locationsFin = _context.Set<Model.Location>().AsQueryable();
            IQueryable<Model.Room> roomsFin = _context.Set<Model.Room>().AsQueryable();
            IQueryable<Model.Region> regions = _context.Set<Model.Region>().AsQueryable();

            //if ((assetCategoryIds != null) && (assetCategoryIds.Count > 0))
            //    assetCategories = assetCategories.Where(a => assetCategoryIds.Contains(a.Id));
            //if ((assetTypeIds != null) && (assetTypeIds.Count > 0))
            //    assetTypes = assetTypes.Where(a => assetTypeIds.Contains(a.Id));
            //if ((partnerIds != null) && (partnerIds.Count > 0))
            //    partners = partners.Where(p => partnerIds.Contains(p.Id));
            //if ((costCenterIds != null) && (costCenterIds.Count > 0))
            //    costCenters = costCenters.Where(r => costCenterIds.Contains(r.Id));

            invAssetQuery =
                from inventoryAsset in inventoryAssets
                join asset in assets on inventoryAsset.AssetId equals asset.Id
                join uom in uoms on asset.UomId equals uom.Id
                //join assetType in assetTypes on asset.AssetTypeId equals assetType.Id
                //join assetCategory in assetCategories on asset.AssetCategoryId equals assetCategory.Id
                //join document in documents on asset.DocumentId equals document.Id
                //join partner in partners on document.PartnerId equals partner.Id

                join employeeIni in employeesIni on inventoryAsset.EmployeeIdInitial equals employeeIni.Id

                //join admCenterIni in admCentersIni on costCenterIni.AdmCenterId equals admCenterIni.Id

                join ccI in costCentersIni on inventoryAsset.CostCenterIdInitial equals ccI.Id into costCentersInitial
                from costCenterInitial in costCentersInitial.DefaultIfEmpty()

                join acI in admCentersIni on costCenterInitial.AdmCenterId equals acI.Id into admCentersInitial
                from admCenterInitial in admCentersInitial.DefaultIfEmpty()

                join roomIni in roomsIni on inventoryAsset.RoomIdInitial equals roomIni.Id
                join locationIni in locationsIni on roomIni.LocationId equals locationIni.Id
                join rI in regions on locationIni.RegionId equals rI.Id into regionsInitial
                from regionInitial in regionsInitial.DefaultIfEmpty()

                    //join employeeFinal in employeesFin on inventoryAsset.EmployeeIdFinal equals employeeFinal.Id
                    //join roomFinal in roomsFin on inventoryAsset.RoomIdFinal equals roomFinal.Id
                    //join locationFinal in locationsFin on roomFinal.LocationId equals locationFinal.Id
                    //join admCenterFinal in admCentersFin on locationFinal.AdmCenterId equals admCenterFinal.Id

                join eF in employeesFin on inventoryAsset.EmployeeIdFinal equals eF.Id into employeesFinal
                from employeeFinal in employeesFinal.DefaultIfEmpty()
                    //join costCenterFin in costCentersFin on employeeFinal.CostCenterId equals costCenterFin.Id

                join costCenterFin in costCentersFin on inventoryAsset.CostCenterIdFinal equals costCenterFin.Id into costCentersFinal
                from costCenterFinal in costCentersFinal.DefaultIfEmpty()
                join acF in admCentersFin on costCenterFinal.AdmCenterId equals acF.Id into admCentersFinal
                from admCenterFinal in admCentersFinal.DefaultIfEmpty()

                join rF in roomsFin on inventoryAsset.RoomIdFinal equals rF.Id into roomsFinal
                from roomFinal in roomsFinal.DefaultIfEmpty()

                join lF in locationsFin on roomFinal.LocationId equals lF.Id into locationsFinal
                from locationFinal in locationsFinal.DefaultIfEmpty()
                join rF in regions on locationFinal.RegionId equals rF.Id into regionsFinal
                from regionFinal in regionsFinal.DefaultIfEmpty()

                    //where inventoryAsset.InventoryId == inventoryId
                    //&& (admCenterIdsFin.Contains(admCenterFinal.Id))

                select new Dto.InventoryAsset()
                {
                    Id = asset.Id,
                    InvNo = asset.InvNo,
                    Name = asset.Name,
                    //PurchaseDate = (asset.PurchaseDate.HasValue) ? (DateTime)asset.PurchaseDate : new DateTime(0001, 01, 01),

                    //SerialNumber = asset.SerialNumber,
                    //Uom = uom.Name,
                    //QIntial = inventoryAsset.QInitial,
                    //QFinal = inventoryAsset.QFinal,

                    //EmployeeIdIni = employeeIni.Id,
                    //InternalCodeIni = employeeIni.InternalCode,
                    //FirstNameIni = employeeIni.FirstName,
                    //LastNameIni = employeeIni.LastName,

                    //RegionIdIni = regionInitial != null ? (int?)regionInitial.Id : null,
                    //RegionCodeIni = regionInitial != null ? regionInitial.Code : string.Empty,
                    //RegionNameIni = regionInitial != null ? regionInitial.Name : string.Empty,
                    //LocationIdIni = locationIni.Id,
                    //LocationCodeIni = locationIni.Code,
                    //LocationNameIni = locationIni.Name,
                    //RoomIdIni = roomIni.Id,
                    //RoomCodeIni = roomIni.Code,
                    //RoomNameIni = roomIni.Name,

                    //EmployeeIdFin = employeeFinal != null ? (int?)employeeFinal.Id : null,
                    //InternalCodeFin = employeeFinal != null ? employeeFinal.InternalCode : string.Empty,
                    //FirstNameFin = employeeFinal != null ? employeeFinal.FirstName : string.Empty,
                    //LastNameFin = employeeFinal != null ? employeeFinal.LastName : string.Empty,

                    //AdmCenterIdIni = admCenterInitial != null ? (int?)admCenterInitial.Id : null,
                    //AdmCenterCodeIni = admCenterInitial != null ? admCenterInitial.Code : string.Empty,
                    //AdmCenterNameIni = admCenterInitial != null ? admCenterInitial.Name : string.Empty,

                    //AdmCenterIdFin = admCenterFinal != null ? (int?)admCenterFinal.Id : null,
                    //AdmCenterCodeFin = admCenterFinal != null ? admCenterFinal.Code : string.Empty,
                    //AdmCenterNameFin = admCenterFinal != null ? admCenterFinal.Name : string.Empty,

                    //RegionIdFin = regionFinal != null ? (int?)regionFinal.Id : null,
                    //RegionCodeFin = regionFinal != null ? regionFinal.Code : string.Empty,
                    //RegionNameFin = regionFinal != null ? regionFinal.Name : string.Empty,
                    //LocationIdFin = locationFinal != null ? (int?)locationFinal.Id : null,
                    //LocationCodeFin = locationFinal != null ? locationFinal.Code : string.Empty,
                    //LocationNameFin = locationFinal != null ? locationFinal.Name : string.Empty,
                    //RoomIdFin = roomFinal != null ? (int?)roomFinal.Id : null,
                    //RoomCodeFin = roomFinal != null ? roomFinal.Code : string.Empty,
                    //RoomNameFin = roomFinal != null ? roomFinal.Name : string.Empty,

                    //CostCenterIdIni = inventoryAsset.CostCenterIdInitial,
                    //CostCenterCodeIni = costCenterInitial != null ? costCenterInitial.Code : string.Empty,
                    //CostCenterNameIni = costCenterInitial != null ? costCenterInitial.Name : string.Empty,

                    ////CostCenterIdFin = (inventoryAsset.EmployeeIdInitial == inventoryAsset.EmployeeIdFinal) ? costCenterIni.Id : (costCenterFinal != null ? (int?)costCenterFinal.Id : null),
                    ////CostCenterCodeFin = (inventoryAsset.EmployeeIdInitial == inventoryAsset.EmployeeIdFinal) ? costCenterIni.Code : (costCenterFinal != null ? costCenterFinal.Code : string.Empty),
                    ////CostCenterNameFin = (inventoryAsset.EmployeeIdInitial == inventoryAsset.EmployeeIdFinal) ? costCenterIni.Name : (costCenterFinal != null ? costCenterFinal.Name : string.Empty),

                    //CostCenterIdFin = inventoryAsset.CostCenterIdFinal,
                    //CostCenterCodeFin = costCenterFinal != null ? costCenterFinal.Code : string.Empty,
                    //CostCenterNameFin = costCenterFinal != null ? costCenterFinal.Name : string.Empty,

                    //InvStateIdIni = inventoryAsset.StateIdInitial,
                    //InvStateIdFin = inventoryAsset.StateIdFinal,

                    //ValueInv = asset.ValueInv,
                    //ValueDep = asset.ValueInv - asset.ValueRem,
                    //Custody = asset.Custody
                };

            return invAssetQuery;
        }

        public IEnumerable<Dto.InventoryAsset> GetInventoryAssetsByFilters(int inventoryId, string filter, string reportType, string assetState, bool? custody,
            List<int> assetCategoryIds, List<int> assetTypeIds, List<int> partnerIds, 
            List<int> regionIdsIni, List<int> costCenterIdsIni, List<int> admCenterIdsIni, List<int> departmentIdsIni, List<int> employeeIdsIni, List<int> locationIdsIni, List<int> roomIdsIni,
            List<int> regionIdsFin, List<int> costCenterIdsFin, List<int> admCenterIdsFin, List<int> departmentIdsFin, List<int> employeeIdsFin, List<int> locationIdsFin, List<int> roomIdsFin,
            string sortColumn, string sortDirection, int? page, int? pageSize, out int count)
        {
            IQueryable<Dto.InventoryAsset> query = null;

            if (reportType.ToUpper() == "NOT_IDENTIFIED")
            {
                query = GetInventoryAssetsNiQuery(inventoryId);
            }
            else
            {
                query = GetInventoryAssetsQuery(inventoryId);
            }

            switch (reportType.ToUpper())
            {
                case "PLUS":
                    query = query.Where(i => ((i.EmployeeIdFin != null) && (i.EmployeeIdFin != i.EmployeeIdIni)));
                    break;
                case "MINUS":
                    query = query.Where(i => i.EmployeeIdFin == null);
                    break;
                case "NOT_SCANNED":
                    query = query.Where(i => i.RoomIdFin == null);
                    break;
                //case "TRANSFER_ROOM_SAME_LOCATION":
                //    query = query.Where(i => ((i.RoomIdFin != null) && (i.RoomIdIni != i.RoomIdFin) && (i.LocationIdIni == i.LocationIdFin)));
                //    break;
                //case "TRANSFER_LOCATION_SAME_ADMCENTER":
                //    query = query.Where(i => ((i.LocationIdFin != null) && (i.LocationIdIni != i.LocationIdFin) && (i.RegionIdIni == i.RegionIdFin)));
                //    break;
                //case "TRANSFER_LOCATION_DIFF_ADMCENTER":
                //    query = query.Where(i => ((i.LocationIdFin != null) && (i.LocationIdIni != i.LocationIdFin) && (i.RegionIdIni != i.RegionIdFin)));
                //    break;

                case "TRANSFER_ROOM_SAME_LOCATION":
                    query = query.Where(i => ((i.RoomIdIni != i.RoomIdFin) && (i.RoomIdFin != null)));
                    break;
                case "TRANSFER_LOCATION_SAME_ADMCENTER":
                    query = query.Where(i => ((i.RoomIdIni != i.RoomIdFin) && (i.RoomIdFin != null)));
                    break;
                case "TRANSFER_LOCATION_DIFF_ADMCENTER":
                    query = query.Where(i => ((i.RoomIdIni != i.RoomIdFin) && (i.RoomIdFin != null)));
                    break;

            }

            if (custody.HasValue) query = query.Where(a => a.Custody == custody.Value);

            if ((regionIdsIni != null) && (regionIdsIni.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Dto.InventoryAsset, int>((id) => { return i => i.RegionIdIni == id; }, regionIdsIni));
            }

            if ((costCenterIdsIni != null) && (costCenterIdsIni.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Dto.InventoryAsset, int>((id) => { return i => i.CostCenterIdIni == id; }, costCenterIdsIni));
            }
            else
            {
                if ((admCenterIdsIni != null) && (admCenterIdsIni.Count > 0))
                {
                    query = query.Where(ExpressionHelper.GetInListPredicate<Dto.InventoryAsset, int>((id) => { return i => i.AdmCenterIdIni == id; }, admCenterIdsIni));
                }
            }

            if ((employeeIdsIni != null) && (employeeIdsIni.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Dto.InventoryAsset, int>((id) => { return i => i.EmployeeIdIni == id; }, employeeIdsIni));
            }

            if ((roomIdsIni != null) && (roomIdsIni.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Dto.InventoryAsset, int>((id) => { return i => i.RoomIdIni == id; }, roomIdsIni));
            }
            else
            {
                if ((locationIdsIni != null) && (locationIdsIni.Count > 0))
                {
                    query = query.Where(ExpressionHelper.GetInListPredicate<Dto.InventoryAsset, int>((id) => { return i => i.LocationIdIni == id; }, locationIdsIni));
                }
                else
                {
                    if ((regionIdsIni != null) && (regionIdsIni.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Dto.InventoryAsset, int>((id) => { return i => i.RegionIdIni == id; }, regionIdsIni));
                    }
                }
            }

            if ((costCenterIdsFin != null) && (costCenterIdsFin.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Dto.InventoryAsset, int>((id) => { return i => i.CostCenterIdFin == id; }, costCenterIdsFin));
            }
            else
            {
                if ((admCenterIdsFin != null) && (admCenterIdsFin.Count > 0))
                {
                    query = query.Where(ExpressionHelper.GetInListPredicate<Dto.InventoryAsset, int>((id) => { return i => i.AdmCenterIdFin == id; }, admCenterIdsFin));
                }
            }

            if ((employeeIdsFin != null) && (employeeIdsFin.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Dto.InventoryAsset, int>((id) => { return i => i.EmployeeIdFin == id; }, employeeIdsFin));
            }

            if ((roomIdsFin != null) && (roomIdsFin.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Dto.InventoryAsset, int>((id) => { return i => i.RoomIdFin == id; }, roomIdsFin));
            }
            else
            {
                if ((locationIdsFin != null) && (locationIdsFin.Count > 0))
                {
                    query = query.Where(ExpressionHelper.GetInListPredicate<Dto.InventoryAsset, int>((id) => { return i => i.LocationIdFin == id; }, locationIdsFin));
                }
                else
                {
                    if ((regionIdsFin != null) && (regionIdsFin.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Dto.InventoryAsset, int>((id) => { return i => i.RegionIdFin == id; }, regionIdsFin));
                    }
                }
            }

            //if (assetTypeId.HasValue) query = query.Where(a => a.AssetTypeId == assetTypeId);
            //if (assetCategoryId.HasValue) query = query.Where(a => a.AssetCategoryId == assetCategoryId);
            //if (partnerId.HasValue) query = query.Where(a => a.PartnerId == partnerId);

            if (filter != null) query = query.Where(a => (a.InvNo.Contains(filter) || a.Name.Contains(filter)));

            count = query.Count();

            if ((sortColumn != null) && (sortColumn.Length > 0) && (sortDirection != null) && (sortDirection.Length > 0))
            {
                query = sortDirection.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<Dto.InventoryAsset>(sortColumn))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<Dto.InventoryAsset>(sortColumn));
            }

            if (page.HasValue && pageSize.HasValue)
            {
                query = query.Skip((page.Value - 1) * pageSize.Value).Take(pageSize.Value);
            }

            return query.ToList();
        }

        public IQueryable<Model.InventoryAsset> GetInventoryAssetsQuery2(int inventoryId, string includes)
        {
            IQueryable<Model.InventoryAsset> query = null;
            query = _context.InventoryAssets.AsNoTracking();

            if (includes != null)
            {
                foreach (var includeProperty in includes.Split
                    (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                {
                    query = query.Include(includeProperty);
                }
            }
            else
            {
                query = query
                    .Include(i => i.AdministrationInitial)
					.Include(i => i.AssetRecoState)
					.Include(i => i.Asset)
                        .ThenInclude(i => i.AssetCategory)
                     .Include(i => i.Asset)
                        .ThenInclude(i => i.Project)
                     .Include(i => i.Asset)
                        
                     .Include(i => i.Asset)
                        .ThenInclude(i => i.Material)
                     .Include(i => i.Asset)
                        .ThenInclude(i => i.AssetNature)
                      .Include(i => i.Asset)
                        .ThenInclude(i => i.BudgetManager)
                     .Include(i => i.Asset)
                        .ThenInclude(i => i.Division)
                     .Include(i => i.Asset)
                        .ThenInclude(i => i.Department)
                    .Include(i => i.Asset)
                     .ThenInclude(i => i.SubType)
                            .ThenInclude(i => i.Type)
                     .Include(i => i.Asset)
                        .ThenInclude(i => i.AssetType)
					.Include(i => i.Asset)
					   .ThenInclude(i => i.Document)
                            .ThenInclude(i => i.Partner)
                    .Include(i => i.RoomInitial)
                        .ThenInclude(r => r.Location)
                            .ThenInclude(l => l.City)
                                .ThenInclude(l => l.County)
                                    .ThenInclude(l => l.Country)
                    .Include(i => i.EmployeeInitial)
                    .Include(i => i.AdministrationFinal)
                        .ThenInclude(i => i.Division)
                    .Include(i => i.RoomFinal)
                        .ThenInclude(r => r.Location)
                            .ThenInclude(l => l.City)
                                .ThenInclude(l => l.County)
                                     .ThenInclude(l => l.Country)
                    .Include(i => i.EmployeeFinal)
                    .Include(i => i.StateInitial)
                    .Include(i => i.CostCenterFinal)
                            .ThenInclude(c => c.AdmCenter)
                     .Include(i => i.CostCenterFinal)
                            .ThenInclude(c => c.Region)
                      .Include(i => i.CostCenterInitial)
                            .ThenInclude(c => c.AdmCenter)
                     .Include(i => i.CostCenterInitial)
                            .ThenInclude(c => c.Region)
                    .Include(i => i.StateFinal);
            }

            query = query.Where(i => i.InventoryId == inventoryId && i.Asset.IsDeleted == false && i.Asset.Validated == true && i.IsTemp == false && i.Asset.IsPlus == true);
            //Console.WriteLine("InventoryAssets: " + query.Count());

            return query;
        }

        public IQueryable<Model.InventoryAsset> GetInventoryAssetsQuery3(int inventoryId, string includes)
        {
            IQueryable<Model.InventoryAsset> query = null;
            query = _context.InventoryAssets.AsNoTracking();

            if (includes != null)
            {
                foreach (var includeProperty in includes.Split
                    (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                {
                    query = query.Include(includeProperty);
                }
            }
            else
            {
                query = query
                    .Include(i => i.AdministrationInitial)
					.Include(i => i.AdministrationFinal)
					.Include(i => i.EmployeeFinal)
					.Include(i => i.EmployeeInitial)
					//.Include(i => i.Asset)
					//    .ThenInclude(i => i.AssetCategory)
					//.Include(i => i.Asset)
					//   .ThenInclude(i => i.Project)
					//.Include(i => i.Asset)
					//   .ThenInclude(i => i.InsuranceCategory)
					//.Include(i => i.Asset)
					//   
					//.Include(i => i.Asset)
					//   .ThenInclude(i => i.Material)
					//.Include(i => i.Asset)
					//   .ThenInclude(i => i.AssetNature)
					//.Include(i => i.Asset)
					//    .ThenInclude(i => i.Account)
					// .Include(i => i.Asset)
					//    .ThenInclude(i => i.ExpAccount)
					//.Include(i => i.Asset)
					//  .ThenInclude(i => i.BudgetManager)
					//.Include(i => i.Asset)
					//   .ThenInclude(i => i.Division)
					//.Include(i => i.Asset)
					//   .ThenInclude(i => i.Department)
					//.Include(i => i.Asset)
					//  .ThenInclude(i => i.Article)
					.Include(i => i.Asset)
                     .ThenInclude(i => i.AssetCategory)
                     //       .ThenInclude(i => i.Type)
                     //.Include(i => i.Asset)
                     //   .ThenInclude(i => i.AssetType)
                    //.Include(i => i.Asset)
                    //   .ThenInclude(i => i.Document)
                    //        .ThenInclude(i => i.Partner)
                    .Include(i => i.RoomInitial)
                        //.ThenInclude(r => r.Location)
                        //    .ThenInclude(l => l.City)
                        //        .ThenInclude(l => l.County)
                        //            .ThenInclude(l => l.Country)
                    .Include(i => i.EmployeeInitial)
                    //.Include(i => i.AdministrationFinal)
                    //    .ThenInclude(i => i.Division)
                    .Include(i => i.RoomFinal)
						//.ThenInclude(r => r.Location)
						//    .ThenInclude(l => l.City)
						//        .ThenInclude(l => l.County)
						//             .ThenInclude(l => l.Country)
					.Include(i => i.ModifiedByUser)
					.Include(i => i.EmployeeFinal)
                    .Include(i => i.StateInitial)
					.Include(i => i.CostCenterFinal)
							.ThenInclude(c => c.Division)
								.ThenInclude(c => c.Department)
					.Include(i => i.CostCenterFinal)
                            .ThenInclude(c => c.AdmCenter)
					//.Include(i => i.CostCenterFinal)
					//		.ThenInclude(c => c.Administration)
					 .Include(i => i.CostCenterFinal)
                            .ThenInclude(c => c.Region)
                      .Include(i => i.CostCenterInitial)
                            .ThenInclude(c => c.AdmCenter)
						 //.Include(i => i.CostCenterInitial)
							//.ThenInclude(c => c.Administration)
					 .Include(i => i.CostCenterInitial)
                            .ThenInclude(c => c.Region)
					.Include(i => i.CostCenterInitial)
							.ThenInclude(c => c.Division)
								.ThenInclude(c => c.Department)
					.Include(i => i.StateFinal);
            }

            query = query.Where(
                i => 
                i.InventoryId == inventoryId && 
                i.Asset.IsDeleted == false && 
                i.Asset.Validated == true &&
				//i.Asset.InInventory == true &&
				i.Asset.IsPlus == true &&
				(
                    (i.IsTemp == false) || 
                    (i.IsTemp == true && i.CostCenterIdFinal != null)
                )
                );
            // Console.WriteLine("InventoryAssets: " + query.Count());
   //         List<int?> expAccountIds = new List<int?>();
			//expAccountIds.Add(49);
			//expAccountIds.Add(50);
			//expAccountIds.Add(51);
			//expAccountIds.Add(52);
			//expAccountIds.Add(53);
			//expAccountIds.Add(54);
			//expAccountIds.Add(55);
			//expAccountIds.Add(56);
			//expAccountIds.Add(57);
			//expAccountIds.Add(58);
			//expAccountIds.Add(59);
			//expAccountIds.Add(60);
			//expAccountIds.Add(61);
			//expAccountIds.Add(66);
			//expAccountIds.Add(67);
			//expAccountIds.Add(68);
			//expAccountIds.Add(69);
			//expAccountIds.Add(70);
			//expAccountIds.Add(74);
			//query = query.Where(a => expAccountIds.Contains(a.Asset.ExpAccountId));
			return query;
        }

		public IQueryable<Model.InventoryAsset> GetInventoryAssetsQuery4(int inventoryId, string includes)
		{
			IQueryable<Model.InventoryAsset> query = null;
			query = _context.InventoryAssets.AsNoTracking();

			if (includes != null)
			{
				foreach (var includeProperty in includes.Split
					(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
				{
					query = query.Include(includeProperty);
				}
			}
			else
			{
				query = query
					//.Include(i => i.AdministrationInitial)
					//.Include(i => i.Asset)
					//    .ThenInclude(i => i.AssetCategory)
					//.Include(i => i.Asset)
					//   .ThenInclude(i => i.Project)
					//.Include(i => i.Asset)
					//   .ThenInclude(i => i.InsuranceCategory)
					//.Include(i => i.Asset)
					//   
					//.Include(i => i.Asset)
					//   .ThenInclude(i => i.Material)
					//.Include(i => i.Asset)
					//   .ThenInclude(i => i.AssetNature)
					//.Include(i => i.Asset)
					//    .ThenInclude(i => i.Account)
					// .Include(i => i.Asset)
					//    .ThenInclude(i => i.ExpAccount)
					//.Include(i => i.Asset)
					//  .ThenInclude(i => i.BudgetManager)
					//.Include(i => i.Asset)
					//   .ThenInclude(i => i.Division)
					//.Include(i => i.Asset)
					//   .ThenInclude(i => i.Department)
					//.Include(i => i.Asset)
					//  .ThenInclude(i => i.Article)
					.Include(i => i.Asset)
					 .ThenInclude(i => i.AssetCategory)
					//       .ThenInclude(i => i.Type)
					//.Include(i => i.Asset)
					//   .ThenInclude(i => i.AssetType)
					//.Include(i => i.Asset)
					//   .ThenInclude(i => i.Document)
					//        .ThenInclude(i => i.Partner)
					.Include(i => i.RoomInitial)
					//.ThenInclude(r => r.Location)
					//    .ThenInclude(l => l.City)
					//        .ThenInclude(l => l.County)
					//            .ThenInclude(l => l.Country)
					.Include(i => i.EmployeeInitial)
					//.Include(i => i.AdministrationFinal)
					//    .ThenInclude(i => i.Division)
					.Include(i => i.RoomFinal)
					//.ThenInclude(r => r.Location)
					//    .ThenInclude(l => l.City)
					//        .ThenInclude(l => l.County)
					//             .ThenInclude(l => l.Country)
					.Include(i => i.ModifiedByUser)
					.Include(i => i.EmployeeFinal)
					.Include(i => i.StateInitial)
					.Include(i => i.CostCenterFinal)
							.ThenInclude(c => c.Division)
								.ThenInclude(c => c.Department)
					.Include(i => i.CostCenterFinal)
							.ThenInclude(c => c.AdmCenter)
					.Include(i => i.CostCenterFinal)
							.ThenInclude(c => c.Administration)
					 .Include(i => i.CostCenterFinal)
							.ThenInclude(c => c.Region)
					  .Include(i => i.CostCenterInitial)
							.ThenInclude(c => c.AdmCenter)
						 .Include(i => i.CostCenterInitial)
							.ThenInclude(c => c.Administration)
					 .Include(i => i.CostCenterInitial)
							.ThenInclude(c => c.Region)
					.Include(i => i.CostCenterInitial)
							.ThenInclude(c => c.Division)
								.ThenInclude(c => c.Department)
					.Include(i => i.StateFinal);
			}

			query = query.Where(i => i.InventoryId == inventoryId && i.Asset.IsDeleted == false && i.Asset.Validated == true && ((i.IsTemp == false) || (i.IsTemp == true && i.CostCenterIdFinal != null)) && i.Asset.IsPlus == true);
			return query;
		}

		public IQueryable<Model.AssetAdmMD> GetAssetAdmMDsQuery(int inventoryId, int accMonthId, string includes)
        {
            IQueryable<Model.AssetAdmMD> query = null;
            query = _context.AssetAdmMDs.AsNoTracking();

            if (includes != null)
            {
                foreach (var includeProperty in includes.Split
                    (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                {
                    query = query.Include(includeProperty);
                }
            }
            else
            {
                query = query
                    .Include(i => i.Asset)
                         .ThenInclude(i => i.InventoryAsset)
                    .Include(i => i.Asset)
                        .ThenInclude(i => i.AssetDepMDs)
                    .Include(i => i.AssetCategory)
                    .Include(i => i.Room)
                        .ThenInclude(r => r.Location)
                            .ThenInclude(l => l.Region)
                    .Include(i => i.Employee);
            }
            Console.WriteLine(query.Count());
           
            query = query.Where(i => i.AccMonthId == accMonthId && i.Asset.InventoryAsset.InventoryId == inventoryId && i.Asset.IsDeleted == false && i.Asset.Validated == true);
            Console.WriteLine("Adm: " + query.Count());

            return query;
        }


        public IQueryable<Model.InventoryAsset> GetInventoryAssetsQueryTotal(int inventoryId, string includes)
        {
            IQueryable<Model.InventoryAsset> query = null;
            query = _context.InventoryAssets.AsNoTracking();

            if (includes != null)
            {
                foreach (var includeProperty in includes.Split
                    (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                {
                    query = query.Include(includeProperty);
                }
            }
            else
            {
                query = query
                    .Include(i => i.Asset)
                        .ThenInclude(i => i.Uom)
                    .Include(i => i.Asset)
                        .ThenInclude(i => i.AssetCategory)
                    .Include(i => i.Asset)
                        .ThenInclude(i => i.AssetInv)
                     .Include(i => i.Asset)
                        .ThenInclude(i => i.AssetType)
                    .Include(i => i.RoomInitial)
                        .ThenInclude(r => r.Location)
                            .ThenInclude(l => l.Region)
                    .Include(i => i.EmployeeInitial)
                    .Include(i => i.CostCenterInitial)
                        .ThenInclude(c => c.AdmCenter)
                    .Include(i => i.RoomFinal)
                        .ThenInclude(r => r.Location)
                            .ThenInclude(l => l.Region)
                    .Include(i => i.EmployeeFinal)
                    .Include(i => i.CostCenterFinal)
                        .ThenInclude(c => c.AdmCenter)
                    .Include(i => i.StateFinal);
                    
            }

            query = query.Where(i => i.InventoryId == inventoryId);
           


            return query;
        }

        public IEnumerable<Model.InventoryAsset> GetInventoryAssetsByFilters2(int inventoryId, string includes, string filter, string reportType, string assetState, bool? custody, bool? reconcile, bool isExport, string userName, string role, string employeeId,
            List<int?> assetCategoryIds, List<int?> assetTypeIds, List<int?> partnerIds, List<int?> administrationIdsIni, List<int?> administrationIdsFin, List<int?> divisionIdsIni, List<int?> divisionIdsFin,
            List<int?> invStateIdsIni, List<int?> invStateIdsFin, List<int?> invStateIdsAll, List<string> userIds,
            List<int?> regionIdsIni, List<int?> costCenterIdsIni, List<int?> admCenterIdsIni, List<int?> departmentIdsIni, List<int?> employeeIdsIni, List<int?> locationIdsIni, List<int?> roomIdsIni,
            List<int?> regionIdsFin, List<int?> costCenterIdsFin, List<int?> admCenterIdsFin, List<int?> departmentIdsFin, List<int?> employeeIdsFin, List<int?> locationIdsFin, List<int?> roomIdsFin,
            List<int?> admCenterIdsAll, List<int?> employeeIdsAll, List<int?> locationIdsAll, List<int?> regionIdsAll, List<int?> costCenterIdsAll, List<int?> divisionIdsAll, List<int?> departmentIdsAll, List<int?> administrationIdsAll, List<int?> roomIdsAll,
            string sortColumn, string sortDirection, int? page, int? pageSize, out int count)
        {
            IQueryable<Model.InventoryAsset> query = null;

            if (reportType == null) reportType = "";

            if (reportType != null && reportType.ToUpper() == "NOT_IDENTIFIED")
            {
                //query = GetInventoryAssetsNiQuery(inventoryId);
            }
            else
            {
                if (isExport == true)
                {
                    query = GetInventoryAssetsQuery3(inventoryId, includes);
                }
                else
                {
                    query = GetInventoryAssetsQuery2(inventoryId, includes);
                }
            }

            switch (reportType.ToUpper())
            {
                //case "EMPLOYEE_PLUS":
                //    query = query.Where(i => ((i.EmployeeFinal != null) && (i.EmployeeFinal.Id != i.EmployeeInitial.Id)));
                //    break;
                //case "EMPLOYEE_MINUS":
                //    query = query.Where(i => i.EmployeeFinal == null);
                //    break;
                //case "ROOM_PLUS":
                //    query = query.Where(i => ((i.RoomFinal != null) && (i.RoomFinal.Id != i.RoomInitial.Id)));
                //    break;
                //case "ROOM_MINUS":
                //    query = query.Where(i => i.RoomFinal == null);
                //    break;

                case "SCANNED":
                    query = query.Where(i => (i.CostCenterIdFinal != null));
                    break;
                case "NOT_SCANNED":
                    query = query.Where(i => (i.CostCenterIdFinal == null));
                    break;
                case "ROOM_NOT_SCANNED":
                    query = query.Where(i => (i.RoomIdFinal == null));
                    break;
                case "EMPLOYEE_NOT_SCANNED":
                    query = query.Where(i => (i.EmployeeIdFinal == null));
                    break;
                case "COSTCENTER_NOT_SCANNED":
                    query = query.Where(i => (i.CostCenterIdFinal == null));
                    break;

                //case "TRANSFER_ROOM":
                //    query = query.Where(i => ((i.RoomFinal != null) && (i.RoomIdInitial != i.RoomIdFinal)));
                //    break;
                //case "TRANSFER_ROOM_SAME_LOCATION":
                //    query = query.Where(i => ((i.RoomFinal != null) && (i.RoomIdInitial != i.RoomIdFinal) && (i.RoomInitial.LocationId == i.RoomFinal.LocationId)));
                //    break;
                //case "TRANSFER_ROOM_DIFF_LOCATION":
                //    query = query.Where(i => ((i.RoomFinal != null) && (i.RoomInitial.LocationId != i.RoomFinal.LocationId)));
                //    break;
                //case "TRANSFER_ROOM_SAME_REGION":
                //    query = query.Where(i => ((i.RoomFinal != null) && (i.RoomIdInitial != i.RoomIdFinal) && (i.RoomInitial.Location.RegionId == i.RoomFinal.Location.RegionId)));
                //    break;
                //case "TRANSFER_ROOM_DIFF_REGION":
                //    query = query.Where(i => ((i.RoomFinal != null) && (i.RoomInitial.Location.RegionId != i.RoomFinal.Location.RegionId)));
                //    break;

                //case "TRANSFER_EMPLOYEE":
                //    query = query.Where(i => ((i.EmployeeFinal != null) && (i.EmployeeIdInitial != i.EmployeeIdFinal)));
                //    break;

                case "TRANSFER_COSTCENTER":
                    query = query.Where(i => ((i.CostCenterIdFinal != null) && (i.CostCenterIdInitial != i.CostCenterIdFinal)));
                    break;
                //case "TRANSFER_SAME_ADMCENTER":
                //    query = query.Where(i => ((i.CostCenterFinal != null) && (i.CostCenterIdInitial != i.CostCenterIdFinal) && (i.CostCenterInitial.AdmCenterId == i.CostCenterFinal.AdmCenterId)));
                //    break;
                //case "TRANSFER_DIFF_ADMCENTER":
                //    query = query.Where(i => ((i.CostCenterFinal != null) && (i.CostCenterInitial.AdmCenterId != i.CostCenterFinal.AdmCenterId)));
                //    break;
            }

			List<int?> companiesIds = _context.Set<Model.EmployeeCompany>().AsNoTracking().Where(e => e.EmployeeId == int.Parse(employeeId) && e.IsDeleted == false).Select(c => (int?)c.CompanyId).ToList();

			if (companiesIds.Count == 0)
			{
				companiesIds = new List<int?>();
				companiesIds.Add(-1);

				query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return a => ((a.Asset.CompanyId == id)); }, companiesIds));
			}
			else
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return a => ((a.Asset.CompanyId == id)); }, companiesIds));
			}

			if (role != null && role != "")
            {
                if (role.ToUpper() == "ADMINISTRATOR")
                {
                    if ((costCenterIdsIni != null) && (costCenterIdsIni.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.Id == id; }, costCenterIdsIni));

                    }
                    else
                    {
						if ((divisionIdsIni != null) && (divisionIdsIni.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.DivisionId == id; }, divisionIdsIni));
						}
						else
						{

							if ((departmentIdsIni != null) && (departmentIdsIni.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.Division.DepartmentId == id; }, departmentIdsIni));
							}
						}

						if ((administrationIdsIni != null) && (administrationIdsIni.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.AdministrationIdInitial == id; }, administrationIdsIni));

						}

						if ((admCenterIdsIni != null) && (admCenterIdsIni.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return a => a.CostCenterInitial.AdmCenter.Id == id; }, admCenterIdsIni));
						}
					}

					if ((costCenterIdsAll != null) && (costCenterIdsAll.Count > 0))
					{
						query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.Id == id || i.CostCenterFinal.Id == id; }, costCenterIdsAll));
                    }
                    else
                    {
						if ((divisionIdsAll != null) && (divisionIdsAll.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.DivisionId == id || i.CostCenterFinal.DivisionId == id; }, divisionIdsAll));
						}
						else
						{
							if ((departmentIdsAll != null) && (departmentIdsAll.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.Division.DepartmentId == id || i.CostCenterFinal.Division.DepartmentId == id; }, departmentIdsAll));
							}

						}

						if ((administrationIdsAll != null) && (administrationIdsAll.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.AdministrationIdInitial == id || i.AdministrationIdFinal == id; }, administrationIdsAll));

						}

						if ((admCenterIdsAll != null) && (admCenterIdsAll.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return a => a.CostCenterInitial.AdmCenter.Id == id || a.CostCenterFinal.AdmCenter.Id == id; }, admCenterIdsAll));
						}
					}

					if ((costCenterIdsFin != null) && (costCenterIdsFin.Count > 0))
                    {
                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterFinal.Id == id; }, costCenterIdsFin));

                    }
                    else
                    {

						if ((divisionIdsFin != null) && (divisionIdsFin.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterFinal.DivisionId == id; }, divisionIdsFin));
						}
						else
						{
							if ((departmentIdsFin != null) && (departmentIdsFin.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterFinal.Division.DepartmentId == id; }, departmentIdsFin));
							}
						}

						if ((administrationIdsFin != null) && (administrationIdsFin.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.AdministrationIdFinal == id; }, administrationIdsFin));

						}

						if ((admCenterIdsFin != null) && (admCenterIdsFin.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return a => a.CostCenterFinal.AdmCenter.Id == id; }, admCenterIdsFin));
						}
					}
                }
                else
                {
                    if (role.ToUpper() == "USER")
                    {

						List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().AsNoTracking().Where(e => e.EmployeeId == int.Parse(employeeId) && e.IsDeleted == false).Select(c => (int?)c.CostCenterId).ToList();


                        if (costCenterIds.Count == 0)
                        {
                            costCenterIds = new List<int?>();
                            costCenterIds.Add(-1);
                        }

                        query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.Id == id || i.CostCenterFinal.Id == id; }, costCenterIds));


						if ((costCenterIdsIni != null) && (costCenterIdsIni.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.Id == id; }, costCenterIdsIni));

						}
						else
						{
							if ((divisionIdsIni != null) && (divisionIdsIni.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.DivisionId == id; }, divisionIdsIni));
							}
							else
							{

								if ((departmentIdsIni != null) && (departmentIdsIni.Count > 0))
								{
									query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.Division.DepartmentId == id; }, departmentIdsIni));
								}
							}

							if ((administrationIdsIni != null) && (administrationIdsIni.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.AdministrationIdInitial == id; }, administrationIdsIni));

							}

							if ((admCenterIdsIni != null) && (admCenterIdsIni.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return a => a.CostCenterInitial.AdmCenter.Id == id; }, admCenterIdsIni));
							}
						}

						if ((costCenterIdsAll != null) && (costCenterIdsAll.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.Id == id || i.CostCenterFinal.Id == id; }, costCenterIdsAll));
						}
						else
						{
							if ((divisionIdsAll != null) && (divisionIdsAll.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.DivisionId == id || i.CostCenterFinal.DivisionId == id; }, divisionIdsAll));
							}
							else
							{
								if ((departmentIdsAll != null) && (departmentIdsAll.Count > 0))
								{
									query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.Division.DepartmentId == id || i.CostCenterFinal.Division.DepartmentId == id; }, departmentIdsAll));
								}

							}

							if ((administrationIdsAll != null) && (administrationIdsAll.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.AdministrationIdInitial == id || i.AdministrationIdFinal == id; }, administrationIdsAll));

							}

							if ((admCenterIdsAll != null) && (admCenterIdsAll.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return a => a.CostCenterInitial.AdmCenter.Id == id || a.CostCenterFinal.AdmCenter.Id == id; }, admCenterIdsAll));
							}
						}

						if ((costCenterIdsFin != null) && (costCenterIdsFin.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterFinal.Id == id; }, costCenterIdsFin));

						}
						else
						{

							if ((divisionIdsFin != null) && (divisionIdsFin.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterFinal.DivisionId == id; }, divisionIdsFin));
							}
							else
							{
								if ((departmentIdsFin != null) && (departmentIdsFin.Count > 0))
								{
									query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterFinal.Division.DepartmentId == id; }, departmentIdsFin));
								}
							}

							if ((administrationIdsFin != null) && (administrationIdsFin.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.AdministrationIdFinal == id; }, administrationIdsFin));

							}

							if ((admCenterIdsFin != null) && (admCenterIdsFin.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return a => a.CostCenterFinal.AdmCenter.Id == id; }, admCenterIdsFin));
							}
						}

					}
                }
            }


            if ((invStateIdsIni != null) && (invStateIdsIni.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.StateInitial.Id == id; }, invStateIdsIni));

            }

            if ((invStateIdsAll != null) && (invStateIdsAll.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.StateInitial.Id == id || i.StateFinal.Id == id; }, invStateIdsAll));


            }

            if ((invStateIdsFin != null) && (invStateIdsFin.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.StateFinal.Id == id; }, invStateIdsFin));

            }

            if ((userIds != null) && (userIds.Count > 0))
            {

                query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, string>((id) => { return i => i.ModifiedBy == id; }, userIds));

            }

            

            //if ((employeeIdsIni != null) && (employeeIdsIni.Count > 0))
            //{
            //    //query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.EmployeeInitial.Id == id; }, employeeIdsIni));
            //    query = query.Where(i => employeeIdsIni.Contains(i.EmployeeIdInitial));
            //}
            //if ((roomIdsIni != null) && (roomIdsIni.Count > 0))
            //{
            //    //query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.RoomInitial.Id == id; }, roomIdsIni));
            //    query = query.Where(i => roomIdsIni.Contains(i.RoomIdInitial));
            //}
            //else
            //{
            //    if ((locationIdsIni != null) && (locationIdsIni.Count > 0))
            //    {
            //        query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.RoomInitial.Location.Id == id; }, locationIdsIni));
            //        //query = query.Where(i => locationIdsIni.Contains(i.RoomInitial.LocationId));
            //    }
            //    else
            //    {
            //        if ((regionIdsIni != null) && (regionIdsIni.Count > 0))
            //        {
            //            query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.RoomInitial.Location.Region.Id == id; }, regionIdsIni));
            //            //query = query.Where(i => regionIdsIni.Contains(i.RoomInitial.Location.RegionId));

            //        }
            //    }
            //}

            //Console.WriteLine(query.Count());

           

            //if ((employeeIdsAll != null) && (employeeIdsAll.Count > 0))
            //{
            //   query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.EmployeeInitial.Id == id || i.EmployeeFinal.Id == id; }, employeeIdsAll));
            //   // query = query.Where(i => employeeIdsIni.Contains(i.EmployeeIdInitial));
            //}


            //if ((roomIdsAll != null) && (roomIdsAll.Count > 0))
            //{
            //    query = query.Where(i => roomIdsAll.Contains(i.RoomIdFinal) || roomIdsAll.Contains(i.RoomIdInitial));
            //}
            //else
            //{
            //    if ((locationIdsAll != null) && (locationIdsAll.Count > 0))
            //    {
            //        query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.RoomInitial.Location.Id == id || i.RoomFinal.Location.Id == id; }, locationIdsAll));
            //        //query = query.Where(i => locationIdsIni.Contains(i.RoomInitial.LocationId));
            //    }
            //    else
            //    {
            //        if ((regionIdsAll != null) && (regionIdsAll.Count > 0))
            //        {
            //            query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.RoomInitial.Location.Region.Id == id || i.RoomFinal.Location.Region.Id == id; }, regionIdsAll));
            //            //query = query.Where(i => regionIdsIni.Contains(i.RoomInitial.Location.RegionId));
            //        }
            //    }
            //}
           

            

            //if ((assetTypeIds != null) && (assetTypeIds.Count > 0))
            //{
            //    query = query.Where(i => assetTypeIds.Contains(i.Asset.AssetTypeId));
            //}

            //if ((assetCategoryIds != null) && (assetCategoryIds.Count > 0))
            //{
            //    query = query.Where(i => assetCategoryIds.Contains(i.Asset.AssetCategoryId));
            //}


            //if ((costCenterIdsFin != null) && (costCenterIdsFin.Count > 0))
            //{
            //    query = query.Where(i => costCenterIdsFin.Contains(i.AdministrationFinal.CostCenterId));
            //}
            //else
            //{
            //    if ((admCenterIdsFin != null) && (admCenterIdsFin.Count > 0))
            //    {
            //        query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterFinal.AdmCenter.Id == id; }, admCenterIdsFin));
            //    }
            //}

            //if ((employeeIdsFin != null) && (employeeIdsFin.Count > 0))
            //{
            //    query = query.Where(i => employeeIdsFin.Contains(i.EmployeeIdFinal));
            //}

            //if ((roomIdsFin != null) && (roomIdsFin.Count > 0))
            //{
            //    query = query.Where(i => roomIdsFin.Contains(i.RoomIdFinal));
            //}
            //else
            //{
            //    if ((locationIdsFin != null) && (locationIdsFin.Count > 0))
            //    {
            //        query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.RoomFinal.Location.Id == id; }, locationIdsFin));
            //    }
            //    else
            //    {
            //        if ((regionIdsFin != null) && (regionIdsFin.Count > 0))
            //        {
            //            query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.RoomFinal.Location.Region.Id == id; }, regionIdsFin));
            //        }

            //    }
            //}

           
           

            if (reconcile == true)
            {
                query = query.Where(a => a.TempReco != null);

            }
            else if (reconcile == false)
            {
                query = query.Where(a => a.TempReco == null);
            }

            if (custody.HasValue)
            {
                if (custody == true)
                {
                    query = query.Where(a => a.ImageCount > 0);
                }
                else
                {
                    query = query.Where(a => a.ImageCount == 0);
                }
            }

   //         List<int?> expAccounts = new List<int?>();
   //         expAccounts.Add(49);
			//expAccounts.Add(50);
			//expAccounts.Add(51);
			//expAccounts.Add(52);
			//expAccounts.Add(53);
			//expAccounts.Add(54);
			//expAccounts.Add(55);
			//expAccounts.Add(56);
			//expAccounts.Add(57);
			//expAccounts.Add(58);
			//expAccounts.Add(59);
			//expAccounts.Add(60);
			//expAccounts.Add(61);
			//expAccounts.Add(66);
			//expAccounts.Add(67);
			//expAccounts.Add(68);
			//expAccounts.Add(69);
			//expAccounts.Add(70);
			//expAccounts.Add(74);

			//query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.Asset.ExpAccountId == id; }, expAccounts));

			if (filter != null) query = query.Where(a => (a.Asset.InvNo.Contains(filter) || a.Asset.Name.Contains(filter) || a.TempReco.Contains(filter) || a.Asset.SAPCode.Contains(filter) || a.SerialNumber.Contains(filter)));
            query = query.Where(a => !a.Asset.InvNo.Contains("/"));
           
            count = query.Count();

            if ((sortColumn != null) && (sortColumn.Length > 0) && (sortDirection != null) && (sortDirection.Length > 0))
            {
                query = sortDirection.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<Model.InventoryAsset>(sortColumn))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<Model.InventoryAsset>(sortColumn));
            }

            if (page.HasValue && pageSize.HasValue)
            {
                query = query.Skip((page.Value - 1) * pageSize.Value).Take(pageSize.Value);
            }

            return query.ToList();
        }

		public IEnumerable<Model.InventoryAsset> GetInventoryAllAssetsByFilters2(int inventoryId, string includes, string filter, string reportType, string assetState, bool? custody, bool? reconcile, bool isExport, string userName, string role, string employeeId,
		   List<int?> assetCategoryIds, List<int?> assetTypeIds, List<int?> partnerIds, List<int?> administrationIdsIni, List<int?> administrationIdsFin, List<int?> divisionIdsIni, List<int?> divisionIdsFin,
		   List<int?> invStateIdsIni, List<int?> invStateIdsFin, List<int?> invStateIdsAll, List<string> userIds,
		   List<int?> regionIdsIni, List<int?> costCenterIdsIni, List<int?> admCenterIdsIni, List<int?> departmentIdsIni, List<int?> employeeIdsIni, List<int?> locationIdsIni, List<int?> roomIdsIni,
		   List<int?> regionIdsFin, List<int?> costCenterIdsFin, List<int?> admCenterIdsFin, List<int?> departmentIdsFin, List<int?> employeeIdsFin, List<int?> locationIdsFin, List<int?> roomIdsFin,
		   List<int?> admCenterIdsAll, List<int?> employeeIdsAll, List<int?> locationIdsAll, List<int?> regionIdsAll, List<int?> costCenterIdsAll, List<int?> divisionIdsAll, List<int?> departmentIdsAll, List<int?> administrationIdsAll, List<int?> roomIdsAll,
		   string sortColumn, string sortDirection, int? page, int? pageSize, out int count)
		{
			IQueryable<Model.InventoryAsset> query = null;

			if (reportType == null) reportType = "";

			if (reportType != null && reportType.ToUpper() == "NOT_IDENTIFIED")
			{
				//query = GetInventoryAssetsNiQuery(inventoryId);
			}
			else
			{
				if (isExport == true)
				{
					query = GetInventoryAssetsQuery4(inventoryId, includes);
				}
				else
				{
					query = GetInventoryAssetsQuery2(inventoryId, includes);
				}
			}

			switch (reportType.ToUpper())
			{

				case "SCANNED":
					query = query.Where(i => (i.CostCenterIdFinal != null));
					break;

				case "NOT_SCANNED":
					query = query.Where(i => (i.CostCenterIdFinal == null));
					break;
				case "ROOM_NOT_SCANNED":
					query = query.Where(i => (i.RoomIdFinal == null));
					break;
				case "EMPLOYEE_NOT_SCANNED":
					query = query.Where(i => (i.EmployeeIdFinal == null));
					break;
				case "COSTCENTER_NOT_SCANNED":
					query = query.Where(i => (i.CostCenterIdFinal == null));
					break;
				case "TRANSFER_COSTCENTER":
					query = query.Where(i => ((i.CostCenterIdFinal != null) && (i.CostCenterIdInitial != i.CostCenterIdFinal)));
					break;
			}

			if (role != null && role != "")
			{
				if (role.ToUpper() == "ADMINISTRATOR")
				{
					if ((costCenterIdsIni != null) && (costCenterIdsIni.Count > 0))
					{
						query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.Id == id; }, costCenterIdsIni));

					}
					else
					{
						if ((divisionIdsIni != null) && (divisionIdsIni.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.DivisionId == id; }, divisionIdsIni));
						}
						else
						{

							if ((departmentIdsIni != null) && (departmentIdsIni.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.Division.DepartmentId == id; }, departmentIdsIni));
							}
						}

						if ((administrationIdsIni != null) && (administrationIdsIni.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.AdministrationId == id; }, administrationIdsIni));

						}

						if ((admCenterIdsIni != null) && (admCenterIdsIni.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return a => a.CostCenterInitial.AdmCenter.Id == id; }, admCenterIdsIni));
						}
					}

					if ((costCenterIdsAll != null) && (costCenterIdsAll.Count > 0))
					{
						query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.Id == id || i.CostCenterFinal.Id == id; }, costCenterIdsAll));
					}
					else
					{
						if ((divisionIdsAll != null) && (divisionIdsAll.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.DivisionId == id || i.CostCenterFinal.DivisionId == id; }, divisionIdsAll));
						}
						else
						{
							if ((departmentIdsAll != null) && (departmentIdsAll.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.Division.DepartmentId == id || i.CostCenterFinal.Division.DepartmentId == id; }, departmentIdsAll));
							}

						}

						if ((administrationIdsAll != null) && (administrationIdsAll.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.AdministrationId == id || i.CostCenterFinal.AdministrationId == id; }, administrationIdsAll));

						}

						if ((admCenterIdsAll != null) && (admCenterIdsAll.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return a => a.CostCenterInitial.AdmCenter.Id == id || a.CostCenterFinal.AdmCenter.Id == id; }, admCenterIdsAll));
						}
					}

					if ((costCenterIdsFin != null) && (costCenterIdsFin.Count > 0))
					{
						query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterFinal.Id == id; }, costCenterIdsFin));

					}
					else
					{

						if ((divisionIdsFin != null) && (divisionIdsFin.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterFinal.DivisionId == id; }, divisionIdsFin));
						}
						else
						{
							if ((departmentIdsFin != null) && (departmentIdsFin.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterFinal.Division.DepartmentId == id; }, departmentIdsFin));
							}
						}

						if ((administrationIdsFin != null) && (administrationIdsFin.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterFinal.AdministrationId == id; }, administrationIdsFin));

						}

						if ((admCenterIdsFin != null) && (admCenterIdsFin.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return a => a.CostCenterFinal.AdmCenter.Id == id; }, admCenterIdsFin));
						}
					}
				}
				else
				{
					if (role.ToUpper() == "USER")
					{

						List<int?> costCenterIds = _context.Set<Model.EmployeeCostCenter>().AsNoTracking().Where(e => e.EmployeeId == int.Parse(employeeId) && e.IsDeleted == false).Select(c => (int?)c.CostCenterId).ToList();


						if (costCenterIds.Count == 0)
						{
							costCenterIds = new List<int?>();
							costCenterIds.Add(10000000);
						}

						query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.Id == id || i.CostCenterFinal.Id == id; }, costCenterIds));


						if ((costCenterIdsIni != null) && (costCenterIdsIni.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.Id == id; }, costCenterIdsIni));

						}
						else
						{
							if ((divisionIdsIni != null) && (divisionIdsIni.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.DivisionId == id; }, divisionIdsIni));
							}
							else
							{

								if ((departmentIdsIni != null) && (departmentIdsIni.Count > 0))
								{
									query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.Division.DepartmentId == id; }, departmentIdsIni));
								}
							}

							if ((administrationIdsIni != null) && (administrationIdsIni.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.AdministrationId == id; }, administrationIdsIni));

							}

							if ((admCenterIdsIni != null) && (admCenterIdsIni.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return a => a.CostCenterInitial.AdmCenter.Id == id; }, admCenterIdsIni));
							}
						}

						if ((costCenterIdsAll != null) && (costCenterIdsAll.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.Id == id || i.CostCenterFinal.Id == id; }, costCenterIdsAll));
						}
						else
						{
							if ((divisionIdsAll != null) && (divisionIdsAll.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.DivisionId == id || i.CostCenterFinal.DivisionId == id; }, divisionIdsAll));
							}
							else
							{
								if ((departmentIdsAll != null) && (departmentIdsAll.Count > 0))
								{
									query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.Division.DepartmentId == id || i.CostCenterFinal.Division.DepartmentId == id; }, departmentIdsAll));
								}

							}

							if ((administrationIdsAll != null) && (administrationIdsAll.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterInitial.AdministrationId == id || i.CostCenterFinal.AdministrationId == id; }, administrationIdsAll));

							}

							if ((admCenterIdsAll != null) && (admCenterIdsAll.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return a => a.CostCenterInitial.AdmCenter.Id == id || a.CostCenterFinal.AdmCenter.Id == id; }, admCenterIdsAll));
							}
						}

						if ((costCenterIdsFin != null) && (costCenterIdsFin.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterFinal.Id == id; }, costCenterIdsFin));

						}
						else
						{

							if ((divisionIdsFin != null) && (divisionIdsFin.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterFinal.DivisionId == id; }, divisionIdsFin));
							}
							else
							{
								if ((departmentIdsFin != null) && (departmentIdsFin.Count > 0))
								{
									query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterFinal.Division.DepartmentId == id; }, departmentIdsFin));
								}
							}

							if ((administrationIdsFin != null) && (administrationIdsFin.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterFinal.AdministrationId == id; }, administrationIdsFin));

							}

							if ((admCenterIdsFin != null) && (admCenterIdsFin.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return a => a.CostCenterFinal.AdmCenter.Id == id; }, admCenterIdsFin));
							}
						}

					}
				}
			}


			if ((invStateIdsIni != null) && (invStateIdsIni.Count > 0))
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.StateInitial.Id == id; }, invStateIdsIni));

			}

			if ((invStateIdsAll != null) && (invStateIdsAll.Count > 0))
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.StateInitial.Id == id || i.StateFinal.Id == id; }, invStateIdsAll));


			}

			if ((invStateIdsFin != null) && (invStateIdsFin.Count > 0))
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.StateFinal.Id == id; }, invStateIdsFin));

			}

			if ((userIds != null) && (userIds.Count > 0))
			{

				query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, string>((id) => { return i => i.ModifiedBy == id; }, userIds));

			}

			if (reconcile == true)
			{
				query = query.Where(a => a.TempReco != null);

			}
			else if (reconcile == false)
			{
				query = query.Where(a => a.TempReco == null);
			}

			if (custody.HasValue)
			{
				if (custody == true)
				{
					query = query.Where(a => a.ImageCount > 0);
				}
				else
				{
					query = query.Where(a => a.ImageCount == 0);
				}
			}

			if (filter != null) query = query.Where(a => (a.Asset.InvNo.Contains(filter) || a.Asset.Name.Contains(filter) || a.TempReco.Contains(filter) || a.Asset.SAPCode.Contains(filter) || a.SerialNumber.Contains(filter)));
			query = query.Where(a => !a.Asset.InvNo.Contains("/"));

			count = query.Count();

			if ((sortColumn != null) && (sortColumn.Length > 0) && (sortDirection != null) && (sortDirection.Length > 0))
			{
				query = sortDirection.ToLower() == "asc"
					? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<Model.InventoryAsset>(sortColumn))
					: query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<Model.InventoryAsset>(sortColumn));
			}

			if (page.HasValue && pageSize.HasValue)
			{
				query = query.Skip((page.Value - 1) * pageSize.Value).Take(pageSize.Value);
			}

			return query.ToList();
		}

		public IEnumerable<Model.InventoryAsset> GetInventoryEmail(int inventoryId, int appStateId, string includes, string filter, bool? custody,
		 List<int?> invStateIdsAll,
		 List<int?> employeeIdsAll, List<int?> locationIdsAll, List<int?> regionIdsAll, List<int?> roomIdsAll, List<int?> companyIds,
		  string sortColumn, string sortDirection, int? page, int? pageSize, out int count)
		{
			IQueryable<Model.InventoryAsset> query = null;

			query = GetInventoryAssetsQuery2(inventoryId, includes);

			if ((companyIds != null) && (companyIds.Count > 0))
			{
				// query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.EmployeeInitial.Id == id || i.EmployeeFinal.Id == id; }, employeeIdsAll));
				query = query.Where(i => companyIds.Contains(i.Asset.CompanyId));
			}

			if ((invStateIdsAll != null) && (invStateIdsAll.Count > 0))
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.StateInitial.Id == id || i.StateFinal.Id == id; }, invStateIdsAll));


			}

			if ((employeeIdsAll != null) && (employeeIdsAll.Count > 0))
			{
				//query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.Asset.EmployeeInitial.Id == id || i.EmployeeFinal.Id == id; }, employeeIdsAll));
				 query = query.Where(i => employeeIdsAll.Contains(i.Asset.EmployeeId));
			}


			if ((roomIdsAll != null) && (roomIdsAll.Count > 0))
			{
				query = query.Where(i => roomIdsAll.Contains(i.RoomIdFinal) || roomIdsAll.Contains(i.RoomIdInitial));
			}
			else
			{
				if ((locationIdsAll != null) && (locationIdsAll.Count > 0))
				{
					query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.RoomInitial.Location.Id == id || i.RoomFinal.Location.Id == id; }, locationIdsAll));
					//query = query.Where(i => locationIdsIni.Contains(i.RoomInitial.LocationId));
				}
				else
				{
					if ((regionIdsAll != null) && (regionIdsAll.Count > 0))
					{
						query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.RoomInitial.Location.Region.Id == id || i.RoomFinal.Location.Region.Id == id; }, regionIdsAll));
						//query = query.Where(i => regionIdsIni.Contains(i.RoomInitial.Location.RegionId));
					}
				}
			}

			if (custody.HasValue)
			{
				if (custody == true)
				{
					query = query.Where(a => a.ImageCount > 0);
				}
				else
				{
					query = query.Where(a => a.ImageCount == 0);
				}
			}

			if (appStateId > 0)
			{
				if (appStateId == 6)
				{
					query = query.Where(a => a.Asset.AppStateId == appStateId || a.Asset.AppStateId == null);
				}
				else
				{
					query = query.Where(a => a.Asset.AppStateId == appStateId);
				}
				
			}


			if (filter != null) query = query.Where(a => (a.Asset.InvNo.Contains(filter) || a.Asset.Name.Contains(filter) || a.TempReco.Contains(filter)));

			count = query.Count();

			if ((sortColumn != null) && (sortColumn.Length > 0) && (sortDirection != null) && (sortDirection.Length > 0))
			{
				query = sortDirection.ToLower() == "asc"
					? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<Model.InventoryAsset>(sortColumn))
					: query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<Model.InventoryAsset>(sortColumn));
			}

			if (page.HasValue && pageSize.HasValue)
			{
				query = query.Skip((page.Value - 1) * pageSize.Value).Take(pageSize.Value);
			}

			return query.ToList();
		}


		public IEnumerable<Model.InventoryAsset> GetInventoryTempAssetsByFilters2(int inventoryId, string includes, List<string> filters, string conditionType, string reportType, bool? custody, string userName, string role, string employeeId,
		   List<int?> regionIds, List<int?> costCenterIds, // List<int?> admCenterIds, List<int?> departmentIds, 
           List<int?> employeeIds,
           List<int?> countyIds, List<int?> cityIds, List<int?> locationIds,
           List<int?> invStateIds, List<string> userIds, List<int?> companyIds, List<int?> divisionIds, List<int?> departmentIds, List<int?> uomIds, List<int?> dimensionIds,
           List<int?> roomIds,
           string sortColumn, string sortDirection, int? page, int? pageSize, out int count)
        {
            IQueryable<Model.InventoryAsset> query = null;

            query = GetInventoryTempAssetsQuery2(inventoryId, includes);

            Func<string, Expression<Func<Model.InventoryAsset, bool>>> filterPredicate =
            (filter) => { return (i) => (i.Asset.InvNo.Contains(filter) || i.Asset.Name.Contains(filter) || i.Asset.SAPCode.Contains(filter) || i.Asset.SerialNumber.Contains(filter) || i.Asset.ERPCode.Contains(filter)); };


            Expression<Func<Model.InventoryAsset, bool>> predicate = null;

            if ((filters != null) && (filters.Count > 0))
            {
                predicate = filterPredicate(filters[0]);

                for (int i = 1; i < filters.Count; i++)
                {
                    predicate = (conditionType.ToUpper() == "OR") ? ExpressionHelper.Or(predicate, filterPredicate(filters[i])) : ExpressionHelper.And(predicate, filterPredicate(filters[i]));
                }
            }

            if (predicate != null) query = query.Where(predicate);

			if (role != null && role != "")
			{
				if (role.ToUpper() == "ADMINISTRATOR")
				{
					if ((costCenterIds != null) && (costCenterIds.Count > 0))
					{
						query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterFinal.Id == id; }, costCenterIds));

					}
					else
					{

						if ((divisionIds != null) && (divisionIds.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterFinal.DivisionId == id; }, divisionIds));
						}
						else
						{
							if ((departmentIds != null) && (departmentIds.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterFinal.Division.DepartmentId == id; }, departmentIds));
							}
						}

						//if ((administrationIds != null) && (administrationIds.Count > 0))
						//{
						//	query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterFinal.AdministrationId == id; }, administrationIds));

						//}

						//if ((admCenterIdsFin != null) && (admCenterIdsFin.Count > 0))
						//{
						//	query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return a => a.CostCenterFinal.AdmCenter.Id == id; }, admCenterIdsFin));
						//}
					}
				}
				else
				{
					if (role.ToUpper() == "USER")
					{
						List<int?> cCenterIds = _context.Set<Model.EmployeeCostCenter>().AsNoTracking().Where(e => e.EmployeeId == int.Parse(employeeId) && e.IsDeleted == false).Select(c => (int?)c.CostCenterId).ToList();


						if (cCenterIds.Count == 0)
						{
							cCenterIds = new List<int?>();
							cCenterIds.Add(-1);
						}

						query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterFinal.Id == id; }, cCenterIds));

						if ((costCenterIds != null) && (costCenterIds.Count > 0))
						{
							query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterFinal.Id == id; }, costCenterIds));

						}
						else
						{

							if ((divisionIds != null) && (divisionIds.Count > 0))
							{
								query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterFinal.DivisionId == id; }, divisionIds));
							}
							else
							{
								if ((departmentIds != null) && (departmentIds.Count > 0))
								{
									query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterFinal.Division.DepartmentId == id; }, departmentIds));
								}
							}

							//if ((administrationIds != null) && (administrationIds.Count > 0))
							//{
							//	query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.CostCenterFinal.AdministrationId == id; }, administrationIds));

							//}

							//if ((admCenterIds != null) && (admCenterIds.Count > 0))
							//{
							//	query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return a => a.CostCenterFinal.AdmCenter.Id == id; }, admCenterIds));
							//}
						}

					}
				}
			}


			//if ((employeeIds != null) && (employeeIds.Count > 0))
			//         {
			//             query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.EmployeeIdFinal == id; }, employeeIds));
			//         }

			List<int?> companiesIds = _context.Set<Model.EmployeeCompany>().AsNoTracking().Where(e => e.EmployeeId == int.Parse(employeeId) && e.IsDeleted == false).Select(c => (int?)c.CompanyId).ToList();

			if (companiesIds.Count == 0)
			{
				companiesIds = new List<int?>();
				companiesIds.Add(-1);

				query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return a => ((a.Asset.CompanyId == id)); }, companiesIds));
			}
			else
			{
				query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return a => ((a.Asset.CompanyId == id)); }, companiesIds));
			}


			if ((invStateIds != null) && (invStateIds.Count > 0))
            {
                query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, int?>((id) => { return i => i.StateFinal.Id == id; }, invStateIds));

            }

            
            if ((userIds != null) && (userIds.Count > 0))
            {

                query = query.Where(ExpressionHelper.GetInListPredicate<Model.InventoryAsset, string>((id) => { return i => i.ModifiedBy == id; }, userIds));

            }


            // query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true);

            count = query.Count();

            if ((sortColumn != null) && (sortColumn.Length > 0) && (sortDirection != null) && (sortDirection.Length > 0))
            {
                query = sortDirection.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<Model.InventoryAsset>(sortColumn))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<Model.InventoryAsset>(sortColumn));
            }

            if (page.HasValue && pageSize.HasValue)
            {
                query = query.Skip((page.Value - 1) * pageSize.Value).Take(pageSize.Value);
            }

            return query.ToList();
        }

        public IEnumerable<Model.InventoryAsset> GetInventoryChart(out int count)
        {
            IQueryable<Model.InventoryAsset> query = null;

            query = _context.InventoryAssets.AsNoTracking();

                query = query
                    .Include(i => i.AdministrationInitial)
                     .Include(i => i.AdministrationInitial)
                        .ThenInclude(i => i.Division)
                    .Include(i => i.Asset)
                        .ThenInclude(i => i.AssetCategory)
                    .Include(i => i.Asset)
                        .ThenInclude(i => i.Uom)
                    .Include(i => i.Asset)
                        .ThenInclude(i => i.AssetInv)
                     .Include(i => i.Asset)
                        .ThenInclude(i => i.AssetType)
                    //.Include(i => i.Asset)
                    //   .ThenInclude(i => i.Document)
                    .Include(i => i.RoomInitial)
                        .ThenInclude(r => r.Location)
                            .ThenInclude(l => l.Region)
                    //.Include(i => i.AdministrationInitial)
                    //    .ThenInclude(r => r.Division)
                    //.Include(i => i.AdministrationInitial)
                    //.ThenInclude(r => r.CostCenter)
                    .Include(i => i.EmployeeInitial)
                    //.Include(i => i.CostCenterInitial)
                    //    .ThenInclude(c => c.AdmCenter)
                    .Include(i => i.AdministrationFinal)
                     .Include(i => i.AdministrationFinal)
                        .ThenInclude(i => i.Division)
                    .Include(i => i.RoomFinal)
                        .ThenInclude(r => r.Location)
                            .ThenInclude(l => l.Region)
                    //.Include(i => i.AdministrationFinal)
                    //   .ThenInclude(r => r.Division)
                    // .Include(i => i.AdministrationFinal)
                    //   .ThenInclude(r => r.CostCenter)
                    .Include(i => i.EmployeeFinal)
                    .Include(i => i.StateInitial)
                    //.Include(i => i.CostCenterFinal)
                    //    .ThenInclude(c => c.AdmCenter)
                    .Include(i => i.StateFinal);

            query = query.Where(i => i.InventoryId == 2 && i.Asset.IsDeleted == false && i.Asset.Validated == true);

            count = query.Count();

            return query.ToList();
        }

        //public IEnumerable<Dto.InventoryAssetResource> GetInventoryAssetsByFilters3(int inventoryId, string filter, string reportType, bool? custody,
        //    List<int?> assetCategoryIds, List<int?> assetTypeIds, List<int?> partnerIds,
        //    List<int?> regionIdsIni, List<int?> costCenterIdsIni, List<int?> admCenterIdsIni, List<int?> departmentIdsIni, List<int?> employeeIdsIni, List<int?> locationIdsIni, List<int?> roomIdsIni,
        //    List<int?> regionIdsFin, List<int?> costCenterIdsFin, List<int?> admCenterIdsFin, List<int?> departmentIdsFin, List<int?> employeeIdsFin, List<int?> locationIdsFin, List<int?> roomIdsFin,
        //    string sortColumn, string sortDirection, int? page, int? pageSize, out int count)
        //{
        //    var query = _context.InventoryAssets
        //        .Select(i => new Dto.InventoryAssetResource
        //        {
        //            Id = i.AssetId,
        //            Name = i.Asset.Name,
        //            SerialNumber = i.RoomInitial.Name,
        //            Producer = i.RoomInitial.Location.Name
        //            //RoomInitial = new CodeNameEntity { Id = 0, Code = i.RoomInitial.Code, Name = i.RoomInitial.Name },
        //            //LocationInitial = new CodeNameEntity { Id = 0, Code = i.RoomInitial.Location.Code, Name = i.RoomInitial.Location.Name }
        //        });

        //    count = 0; // query.Count();

        //    //if ((sortColumn != null) && (sortColumn.Length > 0) && (sortDirection != null) && (sortDirection.Length > 0))
        //    //{
        //    //    query = sortDirection.ToLower() == "asc"
        //    //        ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<Dto.InventoryAssetResource>(sortColumn))
        //    //        : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<Dto.InventoryAssetResource>(sortColumn));
        //    //}

        //    //if (page.HasValue && pageSize.HasValue)
        //    //{
        //    //    query = query.Skip((page.Value - 1) * pageSize.Value).Take(pageSize.Value);
        //    //}

        //    return query.ToList();
        //}

        public IEnumerable<Model.Asset> GetSync(string includes, int pageSize, int? lastId, DateTime? lastModifiedAt, out int totalItems)
        {
            var query = _context.Assets.AsNoTracking().Where(a => a.InInventory == true);

            if (lastId.HasValue)
            {
                query = query
                    .Where(r => (((r.ModifiedAt == lastModifiedAt) && (r.Id > lastId)) || (r.ModifiedAt > lastModifiedAt)));
                totalItems = query.Count();
                query = query
                    .OrderBy(a => a.ModifiedAt)
                    .ThenBy(a => a.Id)
                    .Take(pageSize);
            }
            else
            {
                totalItems = query.Count();
                query = query
                    .OrderBy(a => a.ModifiedAt)
                    .ThenBy(a => a.Id)
                    .Take(pageSize);
            }

            return query.ToList();
        }

        public IEnumerable<Dto.Sync.Asset> GetAssetInvSyncDetails(int pageSize, int lastId, DateTime lastModifiedAt)
        {

            IQueryable<Dto.Sync.Asset> query = null;
            IQueryable<Model.Asset> assets = _context.Set<Model.Asset>().AsQueryable();
            IQueryable<Model.InventoryAsset> assetInvs = _context.Set<Model.InventoryAsset>().AsQueryable();

            query =
                from asset in assets
                join ai in assetInvs on asset.Id equals ai.AssetId into aIs
                from assetInv in aIs.DefaultIfEmpty()

                select new Dto.Sync.Asset()
                {
                    Id = asset.Id,
                    InvNo = asset.InvNo,
                    Name = asset.Name,
                    InvStateId = asset.InvStateId,
                    RoomId = asset.RoomId,
                    EmployeeId = asset.EmployeeId,
                    SerialNumber = asset.SerialNumber,
                    // InvName = assetInv != null ? assetInv.InvName : "",
                    // Barcode = assetInv != null ? assetInv.Barcode : "",
                    Producer = assetInv != null ? assetInv.Producer : "",
                    Model = assetInv != null ? assetInv.Model : "",
                    // AllowLabel = assetInv != null ? assetInv.AllowLabel : null,
                    Info = assetInv != null ? assetInv.Info : "",
                    PurchaseDate = asset.PurchaseDate,
                    ModifiedAt = asset.ModifiedAt.Value,
                    ValueInv=(float)asset.ValueInv,
                    Quantity=asset.Quantity
                };

            query = query.Where(r => (((r.ModifiedAt == lastModifiedAt) && (r.Id > lastId)) || (r.ModifiedAt > lastModifiedAt)))
                .OrderBy(r => r.ModifiedAt).ThenBy(r => r.Id)
                .Take(pageSize);

            return query.ToList();
        }

        public IEnumerable<Model.InventoryAsset> GetInventoryAssetsByFilters(int inventoryId, string filter, string reportType,  string assetState, bool? custody, List<int> assetCategoryIds, List<int> assetTypeIds, List<int> partnerIds, List<int> costCenterIds, List<int> admCenterIdsIni, List<int> departmentIdsIni, List<int> employeeIdsIni, List<int> locationIdsIni, List<int> roomIdsIni, List<int> admCenterIdsFin, List<int> departmentIdsFin, List<int> employeeIdsFin, List<int> locationIdsFin, List<int> roomIdsFin, string sortColumn, string sortDirection, int? page, int? pageSize, out int count)
        {
            throw new NotImplementedException();
        }

        //public IEnumerable<Model.AssetInv> GetSyncDetails(int pageSize, int lastId, DateTime lastModifiedAt)
        //{
        //    var query = _context.Set<Model.AssetInv>().Include("Asset")
        //        .Where(r => (((r.Asset.ModifiedAt == lastModifiedAt) && (r.AssetId > lastId)) || (r.Asset.ModifiedAt > lastModifiedAt)))
        //        //.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<Model.AssetInv>("modifiedAt"))
        //        .OrderBy(p => p.Asset.ModifiedAt)
        //        //.ThenBy(ExpressionHelper.GenericEvaluateOrderBy<Model.AssetInv>("id"))
        //        .ThenBy(p => p.AssetId)
        //        .Take(pageSize);

        //    return query.ToList();
        //}

        public IEnumerable<Model.AssetInventoryDetail> GetInventoryExport(AssetInventoryFilter assetFilter, string includes)
        {
            IQueryable<Model.Asset> assetQuery = null;
            IQueryable<AssetDepMD> depQuery = null;
            IQueryable<Model.InventoryAsset> invQuery = null;
            IQueryable<Model.AssetInventoryDetail> query = null;
            Model.Inventory inventory = null;

            assetQuery = _context.Assets
                //    .Include(u => u.Uom)
                //   .Include(r => r.Room)
                //      .ThenInclude(l => l.Location)
                // .Include(c => c.CostCenter)
                //     .ThenInclude(a => a.AdmCenter)
                //  .Include(e => e.Employee)
                //  .Include(a => a.AssetState)
                .AsQueryable();

            int? accSystemId = assetFilter.AccSystemId;

            if (!accSystemId.HasValue || accSystemId.Value <= 0)
            {
                Model.AccSystem accSystem = _context.AccSystems.FirstOrDefault();
                if (accSystem != null) accSystemId = accSystem.Id;
            }


            inventory = _context.Set<Model.Inventory>().Where(i => i.Active == true).FirstOrDefault();
            //inventory = _context.Inventories.Single(i => i.Id == assetFilter.InventoryId);
            int accMonthId = 17;

            // assetFilter.InventoryId = 6;
            depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == accSystemId && a.AccMonthId == accMonthId);
            invQuery = _context.InventoryAssets.AsQueryable().Where(a => a.InventoryId == inventory.Id);

            invQuery = invQuery
                      .Include(i => i.Asset)
                          .ThenInclude(i => i.SubType)
                            .ThenInclude(i => i.Type)
                            .ThenInclude(i => i.MasterType)
                    .Include(i => i.RoomInitial)
                        .ThenInclude(r => r.Location)
                            .ThenInclude(l => l.Region)
                    .Include(i => i.EmployeeInitial)
                    //.Include(i => i.CostCenterInitial)
                    //    .ThenInclude(c => c.AdmCenter)
                    .Include(i => i.RoomFinal)
                        .ThenInclude(r => r.Location)
                            .ThenInclude(l => l.Region)
                    .Include(i => i.EmployeeFinal)
                    //.Include(i => i.CostCenterFinal)
                    //    .ThenInclude(c => c.AdmCenter)
                    //    .Include(i => i.StateFinal)
                    .Where(a => a.InventoryId == inventory.Id);

            //if (assetFilter.Custody != null) assetQuery = assetQuery.Where(a => a.Custody == assetFilter.Custody);
            if (assetFilter.Filter != "" && assetFilter.Filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(assetFilter.Filter) || a.Name.Contains(assetFilter.Filter)));
            //if (assetFilter.Filter != "") assetQuery = assetQuery.Where(a => a.InvNo == assetFilter.Filter);

            includes = includes ?? string.Empty;

            foreach (var includeProperty in includes.Split
                        (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                int dotIndex = includeProperty.IndexOf(".");
                string prefix = string.Empty;
                string property = string.Empty;

                if (dotIndex > 0)
                {
                    prefix = includeProperty.Substring(0, dotIndex);
                    property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
                }
                else
                {
                    prefix = includeProperty;
                }

                switch (prefix.ToLower())
                {
                    case "asset":
                        if (property.Length > 0) assetQuery = assetQuery.Include(property);
                        break;
                    case "dep":
                        if (property.Length > 0) depQuery = depQuery.Include(property);
                        break;
                    case "inventory":
                        if (property.Length > 0) invQuery = invQuery.Include(property);
                        break;
                    default:
                        break;
                }
            }

            query = assetQuery.Select(asset => new Model.AssetInventoryDetail { Asset = asset });

            query = query
                .Join(invQuery, q => q.Asset.Id, inv => inv.AssetId, (q, inv) => new Model.AssetInventoryDetail { Asset = q.Asset, Inventory = inv });

            query = query
                .Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new Model.AssetInventoryDetail { Asset = q.Asset, Inventory = q.Inventory, Dep = dep });

            query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Name.Length > 0);

            //if ((assetFilter.AssetTypeIds != null) && (assetFilter.AssetTypeIds.Count > 0))
            //{
            //    query = query.Where(a => assetFilter.AssetTypeIds.Contains(a.Asset.AssetTypeId));
            //}

            //if ((assetFilter.AssetStateIds != null) && (assetFilter.AssetStateIds.Count > 0))
            //{
            //    //  query = query.Where(a => assetFilter.AssetStateIds.Contains(a.Inventory.StateIdFinal));
            //    // query = query.Where(a => a.Inventory.StateIdFinal == 5);
            //    query = query.Where(a => assetFilter.AssetStateIds.Contains(a.Inventory.StateIdInitial) || (assetFilter.AssetStateIds.Contains(a.Inventory.StateIdFinal)));
            //}
            //else
            //{
            //    query = query.Where(a => a.Inventory.StateIdInitial != 4).Where(a => a.Inventory.StateIdInitial != 5).Where(a => a.Inventory.StateIdFinal != 4).Where(a => a.Inventory.StateIdFinal != 5);
            //}

            //if ((assetFilter.AssetStateIds != null) && (assetFilter.AssetStateIds.Count > 0))
            //{
            //    query = query.Where(a => assetFilter.AssetStateIds.Contains(a.Inventory.StateIdInitial) || (assetFilter.AssetStateIds.Contains(a.Inventory.StateIdFinal)));
            //}


            //if ((assetFilter.CostCenterIdsIni != null) && (assetFilter.CostCenterIdsIni.Count > 0))
            //{
            //    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetInventoryDetail, int?>((id) => { return a => a.Inventory.CostCenterInitial.Id == id; }, assetFilter.CostCenterIdsIni));
            //}
            //else
            //{
            //    if ((assetFilter.AdmCenterIdsIni != null) && (assetFilter.AdmCenterIdsIni.Count > 0))
            //    {
            //        Console.WriteLine("BEFORE: " + query.Count());
            //        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetInventoryDetail, int?>((id) => { return a => a.Inventory.CostCenterInitial.AdmCenter.Id == id; }, assetFilter.AdmCenterIdsIni));
            //        Console.WriteLine("AFTER: " + query.Count());
            //    }
            //}

            //if ((assetFilter.CostCenterIdsAll != null) && (assetFilter.CostCenterIdsAll.Count > 0))
            //{
            //    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetInventoryDetail, int?>((id) => { return a => (a.Inventory.CostCenterInitial.Id == id || a.Inventory.CostCenterFinal.Id == id); }, assetFilter.CostCenterIdsAll));
            //}
            //else
            //{
            //    if ((assetFilter.AdmCenterIdsAll != null) && (assetFilter.AdmCenterIdsAll.Count > 0))
            //    {
            //        Console.WriteLine("BEFORE: " + query.Count());
            //        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetInventoryDetail, int?>((id) => { return a =>( a.Inventory.CostCenterInitial.AdmCenter.Id == id || a.Inventory.CostCenterFinal.AdmCenter.Id == id); }, assetFilter.AdmCenterIdsAll));
            //        Console.WriteLine("AFTER: " + query.Count());
            //    }
            //}

            //if ((assetFilter.CostCenterIdsFin != null) && (assetFilter.CostCenterIdsFin.Count > 0))
            //{
            //    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetInventoryDetail, int?>((id) => { return a => a.Inventory.CostCenterFinal.Id == id; }, assetFilter.CostCenterIdsFin));
            //}
            //else
            //{
            //    if ((assetFilter.AdmCenterIdsFin != null) && (assetFilter.AdmCenterIdsFin.Count > 0))
            //    {
            //        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetInventoryDetail, int?>((id) => { return a => a.Inventory.CostCenterFinal.AdmCenter.Id == id; }, assetFilter.AdmCenterIdsFin));
            //    }
            //}

            //if ((assetFilter.EmployeeIdsIni != null) && (assetFilter.EmployeeIdsIni.Count > 0))
            //{
            //    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetInventoryDetail, int?>((id) => { return a => a.Inventory.EmployeeInitial.Id == id; }, assetFilter.EmployeeIdsIni));
            //}

            //if ((assetFilter.EmployeeIdsAll != null) && (assetFilter.EmployeeIdsAll.Count > 0))
            //{
            //    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetInventoryDetail, int?>((id) => { return a => (a.Inventory.EmployeeInitial.Id == id || a.Inventory.EmployeeFinal.Id == id); }, assetFilter.EmployeeIdsAll));
            //}

            //if ((assetFilter.RoomIdsIni != null) && (assetFilter.RoomIdsIni.Count > 0))
            //{
            //    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetInventoryDetail, int?>((id) => { return a => a.Inventory.RoomInitial.Id == id; }, assetFilter.RoomIdsIni));
            //}
            //else
            //{
            //    if ((assetFilter.LocationIdsIni != null) && (assetFilter.LocationIdsIni.Count > 0))
            //    {
            //        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetInventoryDetail, int?>((id) => { return a => a.Inventory.RoomInitial.Location.Id == id; }, assetFilter.LocationIdsIni));
            //    }
            //    else
            //    {
            //        if ((assetFilter.RegionIdsIni != null) && (assetFilter.RegionIdsIni.Count > 0))
            //        {
            //            Console.WriteLine("BEFORE: " + query.Count());
            //            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetInventoryDetail, int?>((id) => { return a => a.Inventory.RoomInitial.Location.Region.Id == id; }, assetFilter.RegionIdsIni));
            //            Console.WriteLine("AFTER: " + query.Count());
            //        }
            //    }
            //}

            //if ((assetFilter.RoomIdsAll != null) && (assetFilter.RoomIdsAll.Count > 0))
            //{
            //    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetInventoryDetail, int?>((id) => { return a => (a.Inventory.RoomInitial.Id == id || a.Inventory.RoomFinal.Id == id); }, assetFilter.RoomIdsAll));
            //}
            //else
            //{
            //    if ((assetFilter.LocationIdsAll != null) && (assetFilter.LocationIdsAll.Count > 0))
            //    {
            //        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetInventoryDetail, int?>((id) => { return a => (a.Inventory.RoomInitial.Location.Id == id || a.Inventory.RoomFinal.Location.Id == id); }, assetFilter.LocationIdsAll));
            //    }
            //    else
            //    {
            //        if ((assetFilter.RegionIdsAll != null) && (assetFilter.RegionIdsAll.Count > 0))
            //        {
            //            Console.WriteLine("BEFORE: " + query.Count());
            //            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetInventoryDetail, int?>((id) => { return a => (a.Inventory.RoomInitial.Location.Region.Id == id || a.Inventory.RoomFinal.Location.Region.Id == id); }, assetFilter.RegionIdsAll));
            //            Console.WriteLine("AFTER: " + query.Count());
            //        }
            //    }
            //}

            //if ((assetFilter.EmployeeIdsFin != null) && (assetFilter.EmployeeIdsFin.Count > 0))
            //{
            //    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetInventoryDetail, int?>((id) => { return a => a.Inventory.EmployeeFinal.Id == id; }, assetFilter.EmployeeIdsFin));
            //}

            //if ((assetFilter.RoomIdsFin != null) && (assetFilter.RoomIdsFin.Count > 0))
            //{
            //    query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetInventoryDetail, int?>((id) => { return a => a.Inventory.RoomFinal.Id == id; }, assetFilter.RoomIdsFin));
            //}
            //else
            //{
            //    if ((assetFilter.LocationIdsFin != null) && (assetFilter.LocationIdsFin.Count > 0))
            //    {
            //        query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetInventoryDetail, int?>((id) => { return a => a.Inventory.RoomFinal.Location.Id == id; }, assetFilter.LocationIdsFin));
            //    }
            //    else
            //    {
            //        if ((assetFilter.RegionIdsFin != null) && (assetFilter.RegionIdsFin.Count > 0))
            //        {
            //            query = query.Where(ExpressionHelper.GetInListPredicate<Model.AssetInventoryDetail, int?>((id) => { return a => a.Inventory.RoomFinal.Location.Region.Id == id; }, assetFilter.RegionIdsFin));
            //        }
            //    }
            //}

            //switch (assetFilter.ReportType.ToUpper())
            //{
            //    //case "EMPLOYEE_PLUS":
            //    //    query = query.Where(i => ((i.EmployeeFinal != null) && (i.EmployeeFinal.Id != i.EmployeeInitial.Id)));
            //    //    break;
            //    //case "EMPLOYEE_MINUS":
            //    //    query = query.Where(i => i.EmployeeFinal == null);
            //    //    break;
            //    //case "ROOM_PLUS":
            //    //    query = query.Where(i => ((i.RoomFinal != null) && (i.RoomFinal.Id != i.RoomInitial.Id)));
            //    //    break;
            //    //case "ROOM_MINUS":
            //    //    query = query.Where(i => i.RoomFinal == null);
            //    //    break;

            //    case "SCANNED":
            //        query = query.Where(i => ((i.Inventory.RoomIdFinal != null) || (i.Inventory.EmployeeIdFinal != null) || (i.Inventory.CostCenterIdFinal != null)));
            //        break;

            //    case "NOT_SCANNED":
            //        query = query.Where(i => ((i.Inventory.RoomIdFinal == null) && (i.Inventory.EmployeeIdFinal == null) && (i.Inventory.CostCenterIdFinal == null)));
            //        break;
            //    case "ROOM_NOT_SCANNED":
            //        query = query.Where(i => (i.Inventory.RoomIdFinal == null));
            //        break;
            //    case "EMPLOYEE_NOT_SCANNED":
            //        query = query.Where(i => (i.Inventory.EmployeeIdFinal == null));
            //        break;
            //    case "COSTCENTER_NOT_SCANNED":
            //        query = query.Where(i => (i.Inventory.CostCenterIdFinal == null));
            //        break;

            //    case "TRANSFER_ROOM":
            //        query = query.Where(i => ((i.Inventory.RoomIdFinal != null) && (i.Inventory.RoomIdInitial != i.Inventory.RoomIdFinal)));
            //        break;
            //    case "TRANSFER_ROOM_SAME_LOCATION":
            //        query = query.Where(i => ((i.Inventory.RoomIdFinal != null) && ((i.Inventory.RoomIdInitial != i.Inventory.RoomIdFinal) && (i.Inventory.RoomInitial.LocationId == i.Inventory.RoomFinal.LocationId))));
            //        break;
            //    case "TRANSFER_ROOM_DIFF_LOCATION":
            //        query = query.Where(i => ((i.Inventory.RoomIdFinal != null) && (i.Inventory.RoomInitial.LocationId != i.Inventory.RoomFinal.LocationId)));
            //        break;
            //    case "TRANSFER_ROOM_SAME_REGION":
            //        query = query.Where(i => ((i.Inventory.RoomIdFinal != null) && (i.Inventory.RoomIdInitial != i.Inventory.RoomIdFinal) && (i.Inventory.RoomInitial.Location.RegionId == i.Inventory.RoomFinal.Location.RegionId)));
            //        break;
            //    case "TRANSFER_ROOM_DIFF_REGION":
            //        query = query.Where(i => ((i.Inventory.RoomIdFinal != null) && (i.Inventory.RoomInitial.Location.RegionId != i.Inventory.RoomFinal.Location.RegionId)));
            //        break;

            //    case "TRANSFER_EMPLOYEE":
            //        query = query.Where(i => ((i.Inventory.EmployeeIdFinal != null) && (i.Inventory.EmployeeIdInitial != i.Inventory.EmployeeIdFinal)));
            //        break;

            //    case "TRANSFER_COSTCENTER":
            //        query = query.Where(i => ((i.Inventory.CostCenterIdFinal != null) && (i.Inventory.CostCenterIdInitial != i.Inventory.CostCenterIdFinal)));
            //        break;
            //    case "TRANSFER_SAME_ADMCENTER":
            //        query = query.Where(i => ((i.Inventory.CostCenterIdFinal != null) && (i.Inventory.CostCenterIdInitial != i.Inventory.CostCenterIdFinal) && (i.Inventory.CostCenterInitial.AdmCenterId == i.Inventory.CostCenterFinal.AdmCenterId)));
            //        break;
            //    case "TRANSFER_DIFF_ADMCENTER":
            //        query = query.Where(i => ((i.Inventory.CostCenterIdFinal != null) && (i.Inventory.CostCenterInitial.AdmCenterId != i.Inventory.CostCenterFinal.AdmCenterId)));
            //        break;
            //}


            var list = query.ToList();

            return list;
        }

        public IQueryable<Model.InventoryAsset> GetInventoryTempAssetsQuery2(int inventoryId, string includes)
        {
            IQueryable<Model.InventoryAsset> query = null;
            query = _context.InventoryAssets.AsNoTracking();

            if (includes != null)
            {
                foreach (var includeProperty in includes.Split
                    (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                {
                    query = query.Include(includeProperty);
                }
            }
            else
            {
                query = query
                    //.Include(i => i.AdministrationInitial)
                    //.Include(i => i.AdministrationInitial)
                    //.ThenInclude(i => i.Division)
                    .Include(i => i.Asset)
                        .ThenInclude(i => i.Department)
                         .Include(i => i.Asset)
                        .ThenInclude(i => i.Model)
                         .Include(i => i.Asset)
                        .ThenInclude(i => i.Brand)
                    .Include(i => i.Asset)
                        .ThenInclude(i => i.Company)
                    .Include(i => i.Asset)
                        .ThenInclude(i => i.AssetInv)
                        .Include(i => i.Asset)
                    .ThenInclude(i => i.Company)
                    //.Include(i => i.Asset)
                    //   .ThenInclude(i => i.AssetType)
                    //.Include(i => i.Asset)
                    //   .ThenInclude(i => i.Document)
                    .Include(i => i.RoomInitial)
                        .ThenInclude(r => r.Location)
                            .ThenInclude(l => l.Region)
                                // .ThenInclude(l => l.County)
                    //.Include(i => i.AdministrationInitial)
                    //    .ThenInclude(r => r.Division)
                    //.Include(i => i.AdministrationInitial)
                    //.ThenInclude(r => r.CostCenter)
                    //.Include(i => i.EmployeeInitial)
                    //.Include(i => i.RoomInitial)
                    //    .ThenInclude(r => r.Location)
                    //      .ThenInclude(l => l.AdmCenter)
                    //          .ThenInclude(e => e.Employee)
                    //.Include(i => i.CostCenterInitial)
                    //    .ThenInclude(c => c.AdmCenter)
                    //.Include(i => i.AdministrationFinal)
                    //.Include(i => i.AdministrationFinal)
                    //.ThenInclude(i => i.Division)
                    .Include(i => i.RoomFinal)
                        .ThenInclude(r => r.Location)
                            .ThenInclude(l => l.Region)
                                //.ThenInclude(l => l.County)
                    //.Include(i => i.AdministrationFinal)
                    //   .ThenInclude(r => r.Division)
                    // .Include(i => i.AdministrationFinal)
                    //   .ThenInclude(r => r.CostCenter)
                    .Include(i => i.EmployeeFinal)
                    //.Include(i => i.RoomFinal)
                    //                 .ThenInclude(r => r.Location)
                    //                     .ThenInclude(l => l.AdmCenter)
                    //                         .ThenInclude(e => e.Employee)
                    .Include(i => i.StateInitial)
                     .Include(i => i.UomFinal)
                    .Include(i => i.DimensionFinal)
                    .Include(i => i.ModifiedByUser)
                    //.Include(i => i.CostCenterFinal)
                    //    .ThenInclude(c => c.AdmCenter)
                    .Include(i => i.StateFinal);
            }

            query = query.Where(i => i.InventoryId == inventoryId && i.Asset.IsDeleted == false && i.Asset.Validated == true && i.IsTemp == true && (i.Asset.InInventory == true || i.Asset.InvNo.StartsWith("WFH2023")) && i.CostCenterIdFinal != null);
            // Console.WriteLine("InventoryAssets: " + query.Count());

            return query;
        }

        public IEnumerable<AssetMonthDetail> GetComponent(string includes, Sorting sorting, Paging paging, string filter, out AssetDepTotal depTotal)
        {
            IQueryable<Model.Asset> assetQuery = null;
            IQueryable<AssetDepMD> depQuery = null;
            IQueryable<AssetAdmMD> admQuery = null;
            IQueryable<AssetAC> assetClassQuery = null;
            IQueryable<AssetMonthDetail> query = null;

            assetQuery = _context.Assets.AsQueryable();



            Model.AccMonth accMonth = _context.Set<Model.AccMonth>().Where(a => a.IsActive == true).SingleOrDefault();


            depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == 1 && a.AccMonthId == accMonth.Id);
            admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => a.AccMonthId == accMonth.Id);
            assetClassQuery = _context.AssetACs.AsQueryable();

            if (filter != "" && filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(filter) || a.Name.Contains(filter) || a.SerialNumber.Contains(filter)));

            bool joinAdm = false;
            bool joinDep = false;
            bool joinAssetClass = false;

            includes = includes ?? string.Empty;

            foreach (var includeProperty in includes.Split
                        (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                int dotIndex = includeProperty.IndexOf(".");
                string prefix = string.Empty;
                string property = string.Empty;

                if (dotIndex > 0)
                {
                    prefix = includeProperty.Substring(0, dotIndex);
                    property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
                }
                else
                {
                    prefix = includeProperty;
                }

                //prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

                switch (prefix)
                {
                    case "Asset":
                        if (property.Length > 0) assetQuery = assetQuery.Include(property);
                        break;
                    case "Dep":
                        if (property.Length > 0) depQuery = depQuery.Include(property);
                        joinDep = true;
                        break;
                    case "Adm":
                        if (property.Length > 0) admQuery = admQuery.Include(property);
                        joinAdm = true;
                        break;
                    case "AssetClass":
                        if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
                        joinAssetClass = true;
                        break;
                    default:
                        break;
                }
            }

            query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

            if (joinAdm)
            {
                query = query
                    .Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
            }

            if (joinDep)
            {
                query = query
                    .Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
            }


            query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && (a.Adm.EmployeeId == null || (a.Adm.Employee != null && a.Adm.Employee.InternalCode.Length < 5)));


            depTotal = new AssetDepTotal();
            depTotal.Count = query.Count();
            if (joinDep)
            {
                depTotal.DepFYStart = query.Sum(a => a.Dep.APCFYStart);
                depTotal.APCFYStart = query.Sum(a => a.Dep.DepFYStart);
                depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
                depTotal.CurrBkValue = query.Sum(a => a.Dep.Acquisition);
                depTotal.CurrentAPC = query.Sum(a => a.Dep.DepForYear);
                depTotal.DepTransfer = query.Sum(a => a.Dep.Retirement);
                depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
                depTotal.Acquisition = query.Sum(a => a.Dep.CurrBkValue);
                depTotal.DepForYear = query.Sum(a => a.Dep.CurrentAPC);
                depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
            }

            if (sorting != null)
            {
                query = sorting.Direction.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
            }

            if (paging != null)
                query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
            var list = query.ToList();

            return list;
        }

		public IEnumerable<AssetMonthDetail> AddNewAssetValidate(string includes, Sorting sorting, Paging paging, string filter, out AssetDepTotal depTotal)
		{
			IQueryable<Model.Asset> assetQuery = null;
			IQueryable<AssetDepMD> depQuery = null;
			IQueryable<AssetAdmMD> admQuery = null;
			IQueryable<AssetAC> assetClassQuery = null;
			IQueryable<AssetMonthDetail> query = null;

			assetQuery = _context.Assets.AsQueryable();



			Model.AccMonth accMonth = _context.Set<Model.AccMonth>().Where(a => a.Id == 26).SingleOrDefault();


			depQuery = _context.AssetDepMDs.AsQueryable().Where(a => a.AccSystemId == 1 && a.AccMonthId == accMonth.Id);
			admQuery = _context.AssetAdmMDs.AsQueryable().Where(a => a.AccMonthId == accMonth.Id);
			assetClassQuery = _context.AssetACs.AsQueryable();

			if (filter != "" && filter != null) assetQuery = assetQuery.Where(a => (a.InvNo.Contains(filter) || a.Name.Contains(filter) || a.SerialNumber.Contains(filter)));

			bool joinAdm = true;
			bool joinDep = false;
			bool joinAssetClass = false;

			includes = includes ?? string.Empty;

			foreach (var includeProperty in includes.Split
						(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
			{
				int dotIndex = includeProperty.IndexOf(".");
				string prefix = string.Empty;
				string property = string.Empty;

				if (dotIndex > 0)
				{
					prefix = includeProperty.Substring(0, dotIndex);
					property = includeProperty.Length > dotIndex ? includeProperty.Substring(dotIndex + 1) : string.Empty;
				}
				else
				{
					prefix = includeProperty;
				}

				//prefix = dotIndex > 0 ? property.Substring(0, dotIndex).ToLower() : string.Empty;

				switch (prefix)
				{
					case "Asset":
						if (property.Length > 0) assetQuery = assetQuery.Include(property);
						break;
					case "Dep":
						if (property.Length > 0) depQuery = depQuery.Include(property);
						joinDep = true;
						break;
					case "Adm":
						if (property.Length > 0) admQuery = admQuery.Include(property);
						joinAdm = true;
						break;
					case "AssetClass":
						if (property.Length > 0) assetClassQuery = assetClassQuery.Include(property);
						joinAssetClass = true;
						break;
					default:
						break;
				}
			}

			query = assetQuery.Select(asset => new AssetMonthDetail { Asset = asset });

			if (joinAdm)
			{
				query = query
					.Join(admQuery, q => q.Asset.Id, adm => adm.AssetId, (q, adm) => new AssetMonthDetail { Asset = q.Asset, Adm = adm });
			}

			if (joinDep)
			{
				query = query
					.Join(depQuery, q => q.Asset.Id, dep => dep.AssetId, (q, dep) => new AssetMonthDetail { Asset = q.Asset, Adm = q.Adm, Dep = dep });
			}


			query = query.Where(a => a.Asset.IsDeleted == false && a.Asset.Validated == true && ((a.Asset.AppStateId == null || a.Asset.AppStateId == 8) && a.Asset.IsTemp == false) || (a.Asset.IsTemp == true && a.Asset.Name.Length > 0 && a.Asset.AppStateId == null));


			depTotal = new AssetDepTotal();
			depTotal.Count = query.Count();
			if (joinDep)
			{
                depTotal.DepFYStart = query.Sum(a => a.Dep.APCFYStart);
                depTotal.APCFYStart = query.Sum(a => a.Dep.DepFYStart);
                depTotal.BkValFYStart = query.Sum(a => a.Dep.BkValFYStart);
                depTotal.CurrBkValue = query.Sum(a => a.Dep.Acquisition);
                depTotal.CurrentAPC = query.Sum(a => a.Dep.DepForYear);
                depTotal.DepTransfer = query.Sum(a => a.Dep.Retirement);
                depTotal.DepRetirement = query.Sum(a => a.Dep.DepRetirement);
                depTotal.Acquisition = query.Sum(a => a.Dep.CurrBkValue);
                depTotal.DepForYear = query.Sum(a => a.Dep.CurrentAPC);
                depTotal.AccumulDep = query.Sum(a => a.Dep.AccumulDep);
            }

			if (sorting != null)
			{
				query = sorting.Direction.ToLower() == "asc"
					? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column))
					: query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<AssetMonthDetail>(sorting.Column));
			}

			if (paging != null)
				query = query.Skip((paging.Page - 1) * paging.PageSize).Take(paging.PageSize);
			var list = query.ToList();

			return list;
		}

		public IEnumerable<Model.Asset> GetFilteredDetailUI(string includes, int? assetId, int? employeeId, string sortColumn, string sortDirection, int? page, int? pageSize, out int count)
        {

            IQueryable<Model.Asset> query = null;
            query = _context.Assets.AsNoTracking();

            if (includes != null)
            {
                foreach (var includeProperty in includes.Split
                    (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                {
                    query = query.Include(includeProperty);
                }
            }
            else
            {
                query = query
                    .AsQueryable();

            }

            Model.Inventory inventory = _context.Set<Model.Inventory>().Where(a => a.Active == true).SingleOrDefault();

            query = query.Include(d => d.Document).Where(a => a.Document.ParentDocumentId == inventory.DocumentId);

            if (assetId.HasValue) query = query.Where(a => a.Id == assetId);
            if (employeeId.HasValue) query = query.Where(a => a.EmployeeId == employeeId);

            count = query.Count();

            if ((sortColumn != null) && (sortColumn.Length > 0) && (sortDirection != null) && (sortDirection.Length > 0))
            {
                query = sortDirection.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<Model.Asset>(sortColumn))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<Model.Asset>(sortColumn));
            }

            if (page.HasValue && pageSize.HasValue)
            {
                query = query.Skip((page.Value - 1) * pageSize.Value).Take(pageSize.Value);
            }




            return query.ToList();
        }


        public static string StringsADD(string s1, string s2)
        {
            int l1 = s1.Count();
            int l2 = s2.Count();

            int[] l3 = { l1, l2 };
            int minlength = l3.Min();
            int maxlength = l3.Max();
            int komsu = 0;
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < maxlength; i++)
            {

                Int32 e1 = Convert.ToInt32(s1.PadLeft(maxlength, '0').ElementAt(maxlength - 1 - i).ToString());
                Int32 e2 = Convert.ToInt32(s2.PadLeft(maxlength, '0').ElementAt(maxlength - 1 - i).ToString());
                Int32 sum = e1 + e2 + komsu;
                if (sum >= 10)
                {
                    sb.Append(sum - 10);
                    komsu = 1;
                }
                else
                {
                    sb.Append(sum);
                    komsu = 0;
                }
                if (i == maxlength - 1 && komsu == 1)
                {
                    sb.Append("1");
                }

            }

            return new string(sb.ToString().Reverse().ToArray());
        }

        public IEnumerable<string> SplitToLines(string stringToSplit, int maximumLineLength)
        {
            var words = stringToSplit.Split(' ').Concat(new[] { "" });
            return
                words
                    .Skip(1)
                    .Aggregate(
                        words.Take(1).ToList(),
                        (a, w) =>
                        {
                            var last = a.Last();
                            while (last.Length > maximumLineLength)
                            {
                                a[a.Count() - 1] = last.Substring(0, maximumLineLength);
                                last = last.Substring(maximumLineLength);
                                a.Add(last);
                            }
                            var test = last + " " + w;
                            if (test.Length > maximumLineLength)
                            {
                                a.Add(w);
                            }
                            else
                            {
                                a[a.Count() - 1] = test;
                            }
                            return a;
                        });
        }

        public IQueryable<Model.InventoryAsset> GetInventoryAssetReportsQuery2(int inventoryId, string includes)
        {
            IQueryable<Model.InventoryAsset> query = null;
            query = _context.InventoryAssets.AsNoTracking();

            if (includes != null)
            {
                foreach (var includeProperty in includes.Split
                    (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                {
                    query = query.Include(includeProperty);
                }
            }
            else
            {
                query = query
                    .Include(i => i.Asset)
                    .Include(i => i.CostCenterInitial)
                        .ThenInclude(c => c.Administration)
                    .Include(i => i.CostCenterFinal)
                        .ThenInclude(c => c.Administration);
            }

            query = query.Where(i => i.InventoryId == inventoryId && i.Asset.IsDeleted == false && i.Asset.Validated == true);
            return query;
        }

        public IEnumerable<Model.InventoryAsset> EmployeeValidateNew(string includes, string role, int employeeId, string sortColumn, string sortDirection, int? page, int? pageSize, out int count)
        {
            IQueryable<Model.InventoryAsset> query = null;

			int inventoryId = _context.Set<Model.AccMonth>().AsNoTracking().Where(a => a.IsActive == true).Select(a => a.Id).SingleOrDefault();

			query = GetInventoryEmployeeValidateNew(inventoryId, includes);


            //        if (role != "" && role != null)
            //        {
            //            if(role.ToUpper() == "USER")
            //{
            //                query = query.Where(a => a.EmployeeIdInitial == employeeId);
            //            }

            //        }
            //        else
            //        {
            //            query = query.Where(a => a.EmployeeIdInitial == -1);
            //        }

            query = query.Where(a => a.EmployeeIdInitial == employeeId);


            count = query.Count();

            if ((sortColumn != null) && (sortColumn.Length > 0) && (sortDirection != null) && (sortDirection.Length > 0))
            {
                query = sortDirection.ToLower() == "asc"
                    ? query.OrderBy(ExpressionHelper.GenericEvaluateOrderBy<Model.InventoryAsset>(sortColumn))
                    : query.OrderByDescending(ExpressionHelper.GenericEvaluateOrderBy<Model.InventoryAsset>(sortColumn));
            }

            if (page.HasValue && pageSize.HasValue)
            {
                query = query.Skip((page.Value - 1) * pageSize.Value).Take(pageSize.Value);
            }

            return query.ToList();
        }


        public IQueryable<Model.InventoryAsset> GetInventoryEmployeeValidateNew(int inventoryId, string includes)
        {
            IQueryable<Model.InventoryAsset> query = null;
            query = _context.InventoryAssets.AsNoTracking();

            if (includes != null)
            {
                foreach (var includeProperty in includes.Split
                    (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                {
                    query = query.Include(includeProperty);
                }
            }
            else
            {
                query = query
                    .Include(i => i.Asset)
                        .ThenInclude(b => b.Brand)
                            // .ThenInclude(b => b.DictionaryItem)
                    .Include(i => i.Asset)
                        .ThenInclude(b => b.Model)
                    .Include(i => i.Asset)
                        .ThenInclude(b => b.DictionaryItem)
                    //.Include(i => i.RoomInitial)
                    //    .ThenInclude(r => r.Location)
                    //.Include(i => i.EmployeeInitial)
                    //.Include(i => i.RoomFinal)
                    //    .ThenInclude(r => r.Location)
                    .Include(i => i.EmployeeFinal)
                    .Include(i => i.ModifiedByUser);
            }

            query = query.Where(i => i.InventoryId == inventoryId && i.Asset.IsDeleted == false && i.Asset.Validated == true  && i.Asset.InvNo.Substring(0, 7) == "WFH2022");

            return query;
        }

        public async Task<Model.WFHResult> CreateOrUpdateAssetEmployee(AssetEmployeeSave assetDto, int employeeId)
        {
            Model.Asset asset = null;
            Model.AssetDep assetDep = null;
            Model.AssetDepMD assetDepMD = null;
            Model.AssetAC assetAC = null;
            Model.AssetAdmMD assetAdmMD = null;
            Model.Document document = null;
            Model.AssetOp assetOp = null;
            Model.InventoryAsset inventoryAsset = null;
            Model.AssetInv assetInv = null;
            Model.Employee employee = null;
            Model.DictionaryItem dictionaryItem = null;
            Model.Brand brand = null;
            Model.Model model = null;
            Model.EntityType entityType = null;
            Model.Inventory inventory = null;
            Model.Asset wfhCheck = null;
            Model.AppState appState = null;
            Model.WFHCheck check = null;

            appState = await _context.Set<Model.AppState>().Where(r => r.Code == "WFH_VALIDATED").FirstOrDefaultAsync();
            if (appState == null) return new WFHResult { Success = false, Message = "Starea nu exista!" };

            employee = await _context.Set<Model.Employee>().Where(r => r.Id == employeeId).FirstOrDefaultAsync();
            if (employee == null) return new WFHResult { Success = false, Message = "Userul nu exista!"};

			inventory = await _context.Set<Model.Inventory>().Where(r => r.Active == true).FirstOrDefaultAsync();
			if (inventory == null) return new WFHResult { Success = false, Message = "Nu exista un inventar activ!" };


			// check //

			dictionaryItem = await _context.Set<Model.DictionaryItem>().Where(a => a.Name.Trim() == assetDto.Name.Trim()).FirstOrDefaultAsync();

			if (dictionaryItem != null)
            {
                if(dictionaryItem.Code != "TEL")// || dictionaryItem.Code == "D" || dictionaryItem.Code == "AIO" || dictionaryItem.Code == "APF" || dictionaryItem.Code == "A&V" || dictionaryItem.Code == "MPC" || dictionaryItem.Code == "M" || dictionaryItem.Code == "D" || dictionaryItem.Code == "P" || dictionaryItem.Code == "R" || dictionaryItem.Code == "S" || dictionaryItem.Code == "TAB" || dictionaryItem.Code == "TV" || dictionaryItem.Code == "UPC")
                {
                    if(assetDto.SerialNumber != null && assetDto.SerialNumber.Trim() != "" && assetDto.SerialNumber.Trim().ToUpper() != "N/A")
                    {
						wfhCheck = await _context.Set<Model.Asset>()
                            .Include(b => b.Brand)
						    .Include(b => b.Employee)
						    .Where(a => a.IsDeleted == false && a.BudgetManagerId == inventory.BudgetManagerId && 
					         a.SerialNumber.Trim() == assetDto.SerialNumber.Trim()).FirstOrDefaultAsync();

                        if(wfhCheck != null)
                        {
							if (wfhCheck.Brand.Name.Trim() != assetDto.BrandName.Trim())
							{
								return new WFHResult { Success = false, Message = $"Seria {assetDto.SerialNumber} nu corespunde cu marca {assetDto.BrandName}! Corect este {wfhCheck.Brand.Name}!" };
							}

							if (wfhCheck.EmployeeId != null && wfhCheck.EmployeeId == employeeId)
                            {
                                return new WFHResult { Success = false, Message = $"Seria {assetDto.SerialNumber} a fost declarata deja de {wfhCheck.Employee.Email}!" };
                            }
                        }
					}
                } 
                else //if (dictionaryItem.Code != "L")
				{
					if (assetDto.Imei != null && assetDto.Imei.Trim() != "" && assetDto.Imei.Trim().ToUpper() != "N/A")
					{
						wfhCheck = await _context.Set<Model.Asset>()
						    .Include(b => b.Brand)
						    .Where(a => a.IsDeleted == false && a.BudgetManagerId == inventory.BudgetManagerId && 
						    a.Imei.Trim() == assetDto.Imei.Trim()).FirstOrDefaultAsync();

						if (wfhCheck != null)
						{
							if (wfhCheck.Brand.Name.Trim() != assetDto.BrandName.Trim())
							{
								return new WFHResult { Success = false, Message = $"Imei -ul {assetDto.Imei} nu corespunde cu marca {assetDto.BrandName}! Corect este {wfhCheck.Brand.Name}! " };
							}

							if (wfhCheck.EmployeeId != null && wfhCheck.EmployeeId == employeeId)
							{
								return new WFHResult { Success = false, Message = $"Imei- ul {assetDto.Imei} a fost declarat deja de {wfhCheck.Employee.Email} " };
							}


							//if (wfhCheck.Imei != null && wfhCheck.Imei.Trim() != assetDto.Imei.Trim())
							//{
							//	return new WFHResult { Success = false, Message = $"Seria {assetDto.SerialNumber} nu corespunde cu IMEI- ul {assetDto.Imei} " };
							//}
						}
					}
				}
			}

			// check //

			if (assetDto.Id > 0)
            {
              
                asset = await _context.Set<Model.Asset>().Include(a => a.Document).Where(a => a.Id == assetDto.Id).FirstOrDefaultAsync();
				if (asset == null) return new WFHResult { Success = false, Message = "Echipamentul nu exista in baza de date!" };

                assetAdmMD = await _context.Set<Model.AssetAdmMD>().Where(a => a.AccMonthId == inventory.AccMonthId && a.AssetId == assetDto.Id).SingleOrDefaultAsync();
                if (assetAdmMD == null) return new WFHResult { Success = false, Message = "Echipamentul nu exista in baza de date!" };

                asset.Name = assetDto.Name;
                asset.SerialNumber = assetDto.SerialNumber;
                asset.SAPCode = assetDto.SapCode;
                asset.Info = assetDto.Info;
                asset.EmployeeId = employee.Id;
                asset.Imei = assetDto.Imei;
				asset.PhoneNumber = assetDto.PhoneNumber;
                asset.WFHStateId = appState.Id;
                //asset.IsWFH = asset.InvNo != null && asset.InvNo.StartsWith("WFH") ? true : false;
                asset.IsWFH = true;

                if (assetDto.BrandId > 0)
                {
                    asset.BrandId = assetDto.BrandId;
                    assetAdmMD.BrandId = assetDto.BrandId;
                }
                else
                {
                    if (assetDto.BrandName != null && assetDto.BrandName != "")
                    {
                        brand = await _context.Set<Model.Brand>().Where(a => a.Name.Trim() == assetDto.BrandName.Trim()).FirstOrDefaultAsync();

                        if (brand == null)
                        {
                            brand = new Model.Brand()
                            {
                                Code = "NEW",
                                Name = assetDto.BrandName != null && assetDto.BrandName != "" ? assetDto.BrandName.Trim() : "",
                                IsDeleted = true,
                            };

                            _context.Add(brand);
                        }

                    }
                    else
                    {
                        brand = new Model.Brand()
                        {
                            Code = "NEW",
                            Name = assetDto.BrandName != null && assetDto.BrandName != "" ? assetDto.BrandName.Trim() : "",
                            IsDeleted = true,
                        };

                        _context.Add(brand);
                    }

                    asset.Brand = brand;
                    assetAdmMD.Brand = brand;
                }

                if (assetDto.ModelId > 0)
                {
                    asset.ModelId = assetDto.ModelId;
                    assetAdmMD.ModelId = assetDto.ModelId;
                }
                else
                {
                    if (assetDto.ModelName != null && assetDto.ModelName != "")
                    {
                        model = await _context.Set<Model.Model>().Where(a => a.Name.Trim() == assetDto.ModelName.Trim()).FirstOrDefaultAsync();

                        if (model == null)
                        {
                            model = new Model.Model()
                            {
                                Code = "NEW",
                                Name = assetDto.ModelName != null && assetDto.ModelName != "" ? assetDto.ModelName.Trim() : "",
                                IsDeleted = true,
                            };

                            _context.Add(model);
                        }

                    }
                    else
                    {
                        model = new Model.Model()
                        {
                            Code = "NEW",
                            Name = assetDto.ModelName != null && assetDto.ModelName != "" ? assetDto.ModelName.Trim() : "",
                            IsDeleted = true,
                        };

                        _context.Add(model);
                    }

                    asset.Model = model;
                    assetAdmMD.Model = model;
                }

                if (assetDto.DictionaryItemId > 0)
                {
                    asset.DictionaryItemId = assetDto.DictionaryItemId;
                }
                else
                {
                    if (assetDto.Name != null && assetDto.Name != "")
                    {
                        dictionaryItem = await _context.Set<Model.DictionaryItem>().Where(a => a.Name.Trim() == assetDto.Name.Trim()).FirstOrDefaultAsync();

                        if (dictionaryItem == null)
                        {
                            dictionaryItem = new Model.DictionaryItem()
                            {
                                Code = "NEW",
                                Name = assetDto.Name != null && assetDto.Name != "" ? assetDto.Name.Trim() : "",
                                IsDeleted = true,
                            };

                            _context.Add(dictionaryItem);
                        }

                    }
                    else
                    {
                        dictionaryItem = new Model.DictionaryItem()
                        {
                            Code = "NEW",
                            Name = assetDto.Name != null && assetDto.Name != "" ? assetDto.Name.Trim() : "",
                            IsDeleted = true,
                        };

                        _context.Add(dictionaryItem);
                    }

                    asset.DictionaryItem = dictionaryItem;
                }

                _context.Set<Model.Asset>().Update(asset);


                inventoryAsset = await _context.Set<Model.InventoryAsset>().Where(a => a.AssetId == assetDto.Id && a.InventoryId == inventory.Id).FirstOrDefaultAsync();

                inventoryAsset.Info = assetDto.Info;
                inventoryAsset.Info2019 = assetDto.Info2019;
                inventoryAsset.SerialNumber = assetDto.SerialNumber;
                inventoryAsset.EmployeeIdFinal = employee.Id;

                _context.Set<Model.InventoryAsset>().Update(inventoryAsset);

                if(wfhCheck == null)
                {
                    check = new Model.WFHCheck
					{
						//BrandId = brand.Id,
						BudgetManagerId = inventory.BudgetManagerId,
						CreatedAt = DateTime.Now,
						CreatedBy = _context.UserId,
						DictionaryItemId = dictionaryItem.Id,
						EmployeeId = employeeId,
						Imei = assetDto.Imei.Trim(),
						InventoryNumber = assetDto.InvNo != null ? assetDto.InvNo.Trim() : "",
						IsDeleted = false,
						Model = model,
						ModifiedAt = DateTime.Now,
						ModifiedBy = _context.UserId,
						SerialNumber = assetDto.SerialNumber.Trim(),
						Asset = asset
					};

					if (assetDto.BrandId > 0)
					{
                        check.BrandId = assetDto.BrandId;

					}
					else
					{
                        check.Brand = brand;

					}

					if (assetDto.ModelId > 0)
					{
                        check.ModelId = assetDto.ModelId;

					}
					else
					{
                        check.Model = model;

					}

					_context.Add(check);
                }
                else
                {
                    check.EmployeeId = employeeId;
                    check.DictionaryItemId = dictionaryItem.Id;
                    check.Model = model;
                    check.Asset = asset;
					_context.Update(check);
				}

                _context.Set<Model.AssetAdmMD>().Update(assetAdmMD);


                employee.IsConfirmed = true;
                _context.Update(employee);

                _context.SaveChanges();

				return new WFHResult { Success = true, Message = "Datele au fost actualizate cu sucess!", Employee = $"{employee.Email} a modificat datele WFH!" };

			}
            else
            {

                var invNew = 0;

                entityType = await _context.Set<Model.EntityType>().Where(e => e.Code == "NEWASSETEMPLOYEE").FirstOrDefaultAsync();
				if (entityType == null) return new WFHResult { Success = false, Message = "Nu exista tip document!" };

				invNew = int.Parse(entityType.Name);

                document = new Model.Document
                {
                    Approved = true,
                    DocumentTypeId = 31,
                    DocNo1 = "",
                    DocNo2 = "",
                    DocumentDate = DateTime.Now,
                    RegisterDate = DateTime.Now,
                    PartnerId = 93,
                    ParentDocumentId = inventory.DocumentId,
                };

                _context.Add(document);

                asset = new Model.Asset()
                {
                    AdministrationId = null,
                    AssetCategoryId = null,
                    AssetStateId = null,
                    AssetTypeId = null,
                    CompanyId = null,
                    CostCenterId = 310,
                    CreatedAt = DateTime.Now,
                    CreatedBy = null,
                    Custody = false,
                    DepartmentId = null,
                    Document = document,
                    ERPCode = assetDto.SapCode.Trim(),
                    EmployeeId = employee.Id,
                    InvNo = "WFH2024" + entityType.Name,
                    InvStateId = null,
                    IsDeleted = false,
                    ModifiedAt = DateTime.Now,
                    ModifiedBy = null,
                    // Name = Encoding.ASCII.GetString(Encoding.ASCII.GetBytes(assetDto.Description)),
                    ParentAssetId = null,
                    PurchaseDate = null,
                    Quantity = 1,
                    RoomId = 34072,
                    SerialNumber = assetDto.SerialNumber.Trim(),
                    UomId = null,
                    Validated = true,
                    ValueInv = 0,
                    ValueRem = 0,
                    //OutDate = assetImport.RemovalDate,
                    //QuantityOut = assetImport.Quantity,
                    //ValueInvOut = assetImport.ValueInv,
                    
                    BudgetManagerId = inventory.BudgetManagerId,
                    AssetNatureId = null,
                    
                    TempReco = null,
                    TempName = null,
                    SAPCode = assetDto.SapCode.Trim(),
                    IsInTransfer = false,
                    SubTypeId = null,
                    InsuranceCategoryId = null,
                    // Brand = brand,
                    // ModelId = 148,
                    ProjectId = null,
                    InvoiceDate = null,
                    RemovalDate = null,
                    IsTemp = true,
                    ImageCount = 0,
                    DimensionId = null,
                    IsPrinted = false,
                    PrintDate = null,
                    IsDuplicate = false,
                    IsAccepted = false,
                    //DictionaryItemId = null,
                    IsReconcile = false,
                    AppStateId = null,
                    InfoMinus = null,
                    InfoPlus = null,
                    IsMinus = false,
                    IsPlus = false,
                    CreatedByUser = null,
                    NIRDate = null,
                    NIRNumber = 0,
                    PIFDate = null,
                    PIFNumber = 0,
                    Budget = null,
                    Order = null,
                    AllowLabel = true,
                    AgreementNo = "",
                    Manufacturer = "",
                    MaterialId = null,
                    SubNo = "",
                    DivisionId = null,
                    Info = assetDto.Info,
                    Imei= assetDto.Imei,
                    PhoneNumber = assetDto.PhoneNumber,
                    WFHStateId = appState.Id,
                    IsWFH = true
                };


                _context.Add(asset);

                assetOp = new Model.AssetOp()
                {
                    AccSystemId = 3,
                    Asset = asset,
                    Document = document,
                    AssetCategoryIdInitial = null,
                    AssetCategoryIdFinal = null,
                    AssetStateIdFinal = null,
                    AssetStateIdInitial = null,
                    InvStateIdInitial = null,
                    InvStateIdFinal = null,
                    CostCenterIdInitial = 310,
                    CostCenterIdFinal = 310,
                    DepartmentIdInitial = null,
                    DepartmentIdFinal = null,
                    RoomIdInitial = 34072,
                    RoomIdFinal = 34072,
                    AdministrationIdInitial = null,
                    AdministrationIdFinal = null,
                    BudgetManagerIdInitial = null,
                    BudgetManagerIdFinal = null,
                    AssetNatureIdInitial = null,
                    AssetNatureIdFinal = null,
                    EmployeeIdInitial = employee.Id,
                    EmployeeIdFinal = employee.Id,
                    InsuranceCategoryId = null,
                    AssetTypeIdInitial = null,
                    AssetTypeIdFinal = null,
                    ProjectIdInitial = null,
                    ProjectIdFinal = null,
                    Quantity = 1,
                    SerialNumber = assetDto.SerialNumber.Trim(),
                    CompanyId = null,
                    UomId = null,
                    Info = assetDto.Info
                };

                _context.Add(assetOp);


                var inventoryAssetOld = await _context.Set<Model.InventoryAsset>().Where(ia => ia.InventoryId == inventory.Id && ia.AssetId == asset.Id).FirstOrDefaultAsync();

                inventoryAsset = new Model.InventoryAsset()
                {
                    CostCenterIdInitial = 310,
                    CostCenterIdFinal = 310,
                    EmployeeIdInitial = employee.Id,
                    EmployeeIdFinal = employee.Id,
                    Model = string.Empty,
                    Producer = string.Empty,
                    QFinal = 0,
                    QInitial = 1,
                    RoomIdInitial = 34072,
                    RoomIdFinal = 34072,
                    SerialNumber = assetDto.SerialNumber.Trim(),
                    StateIdInitial = null,
                    StateIdFinal = null,
                    AdministrationIdInitial = null,
                    AdministrationIdFinal = null,
                    Asset = asset,
                    InventoryId = inventory.Id,
                    SNInitial = assetDto.SerialNumber.Trim(),
                    IsTemp = true,
                    Info = assetDto.Info
                };

                _context.Add(inventoryAsset);

                assetAC = new Model.AssetAC
                {
                    AssetClassTypeId = 13,
                    Asset = asset,
                    AssetClassId = 23,
                    AssetClassIdIn = 23
                };


                _context.Set<Model.AssetAC>().Add(assetAC);


                assetDep = new Model.AssetDep
                {
                    AccSystemId = 3,
                    Asset = asset,
                    DepPeriod = 0,
                    DepPeriodIn = 0,
                    DepPeriodMonth = 0,
                    DepPeriodMonthIn = 0,
                    DepPeriodRem = 0,
                    DepPeriodRemIn = 0,
                    UsageStartDate = null,
                    //UsageEndDate = assetImport.UsageEndDate,
                    ValueDep = 0,
                    ValueDepIn = 0,
                    ValueDepPU = 0,
                    ValueDepPUIn = 0,
                    ValueDepYTD = 0,
                    ValueDepYTDIn = 0,
                    ValueInv = 0,
                    ValueInvIn = 0,
                    ValueRem = 0,
                    ValueRemIn = 0,
                    ValueRet = 0,
                    ValueRetIn = 0,
                    ValueTr = 0,
                    ValueTrIn = 0
                };

                _context.Set<Model.AssetDep>().Add(assetDep);

                assetInv = new Model.AssetInv
                {
                    Asset = asset,
                    AllowLabel = true,
                    Info = string.Empty,
                    InvName = string.Empty,
                    InvNoOld = "",
                    Model = string.Empty,
                    Producer = string.Empty,
                    InvStateId = 1
                };

                _context.Set<Model.AssetInv>().Add(assetInv);

                assetDepMD = new Model.AssetDepMD
                {
                    AccMonthId = inventory.AccMonthId.Value,
                    AccSystemId = 3,
                    Asset = asset,
                    UsefulLife = 0,
                    TotLifeInpPeriods = 0,
                    RemLifeInPeriods = 0,
                    AccumulDep = 0,
                    BkValFYStart = 0,
                    DepForYear = 0,
                    CurrentAPC = 0,
                    PosCap = 0,
                    ExpLifeInPeriods = 0,
                    DepFYStart = 0,
                    CurrBkValue = 0,
                    Acquisition = 0,
                    APCFYStart = 0,
                    DepPostCap = 0,
                    DepRetirement = 0,
                    Retirement = 0,
                    DepTransfer = 0,
                    Transfer = 0,
                    InvestSupport = 0,
                    WriteUps = 0
                };

                _context.Set<Model.AssetDepMD>().Add(assetDepMD);



                assetAdmMD = new Model.AssetAdmMD
                {
                    AccMonthId = inventory.AccMonthId.Value,
                    Asset = asset,
                    AdministrationId = null,
                    AssetCategoryId = null,
                    AssetStateId = null,
                    AssetTypeId = null,
                    CostCenterId = 310,
                    DepartmentId = null,
                    EmployeeId = employee.Id,
                    RoomId = 34072,
                    AssetClassId = 23,
                    
                    AssetNatureId = null,
                    BudgetManagerId = null,
                    
                    SubTypeId = null,
                    InsuranceCategoryId = null,
                    // BrandId = brand.Id,
                    // ModelId = 148,
                    ProjectId = null,
                    DivisionId = null
                };

                _context.Set<Model.AssetAdmMD>().Add(assetAdmMD);

                if (assetDto.BrandId > 0)
                {
                    asset.BrandId = assetDto.BrandId;
                    assetAdmMD.BrandId = assetDto.BrandId;
                    // assetOp.BrandId = assetDto.BrandId;
                }
                else
                {
                    if (assetDto.BrandName != null && assetDto.BrandName != "")
                    {
                        brand = await _context.Set<Model.Brand>().Where(a => a.Name.Trim() == assetDto.BrandName.Trim()).FirstOrDefaultAsync();

                        if (brand == null)
                        {
                            brand = new Model.Brand()
                            {
                                Code = "NEW",
                                Name = assetDto.BrandName.Trim(),
                                IsDeleted = true,
                            };

                            _context.Add(brand);
                        }

                    }
                    else
                    {
                        brand = new Model.Brand()
                        {
                            Code = "NEW",
                            Name = assetDto.BrandName.Trim(),
                            IsDeleted = true,
                        };

                        _context.Add(brand);
                    }

                    asset.Brand = brand;
                    assetAdmMD.Brand = brand;
                    // assetOp.Brand = brand;
                }

                if (assetDto.ModelId > 0)
                {
                    asset.ModelId = assetDto.ModelId;
                    assetAdmMD.ModelId = assetDto.ModelId;
                    // assetOp.ModelId = assetDto.ModelId;
                }
                else
                {
                    if (assetDto.ModelName != null && assetDto.ModelName != "")
                    {
                        model = await _context.Set<Model.Model>().Where(a => a.Name.Trim() == assetDto.ModelName.Trim()).FirstOrDefaultAsync();

                        if (model == null)
                        {
                            model = new Model.Model()
                            {
                                Code = "NEW",
                                Name = assetDto.ModelName.Trim(),
                                IsDeleted = true,
                            };

                            _context.Add(model);
                        }

                    }
                    else
                    {
                        model = new Model.Model()
                        {
                            Code = "NEW",
                            Name = assetDto.ModelName.Trim(),
                            IsDeleted = true,
                        };

                        _context.Add(model);
                    }

                    asset.Model = model;
                    assetAdmMD.Model = model;
                    // assetOp.Model = model;
                }

                if (assetDto.DictionaryItemId > 0)
                {
                    asset.DictionaryItemId = assetDto.DictionaryItemId;
                    asset.Name = assetDto.Name;
                }
                else
                {
                    if (assetDto.Name != null && assetDto.Name != "")
                    {
                        dictionaryItem = await _context.Set<Model.DictionaryItem>().Where(a => a.Name.Trim() == assetDto.Name.Trim()).FirstOrDefaultAsync();

                        if (dictionaryItem == null)
                        {
                            dictionaryItem = new Model.DictionaryItem()
                            {
                                Code = "NEW",
                                Name = assetDto.Name.Trim(),
                                IsDeleted = true,
                            };

                            _context.Add(dictionaryItem);
                        }

                    }
                    else
                    {
                        dictionaryItem = new Model.DictionaryItem()
                        {
                            Code = "NEW",
                            Name = assetDto.Name.Trim(),
                            IsDeleted = true,
                        };

                        _context.Add(dictionaryItem);
                    }

                    asset.DictionaryItem = dictionaryItem;
                    asset.Name = dictionaryItem.Name;
                }

                entityType.Name = (invNew + 1).ToString();
                _context.Update(entityType);

				if (wfhCheck == null)
				{
					check = new Model.WFHCheck
					{
						//BrandId = brand.Id,
						BudgetManagerId = 70,
						CreatedAt = DateTime.Now,
						CreatedBy = _context.UserId,
						DictionaryItemId = dictionaryItem.Id,
						EmployeeId = employeeId,
						Imei = assetDto.Imei.Trim(),
						InventoryNumber = assetDto.InvNo != null ? assetDto.InvNo.Trim() : "",
						IsDeleted = false,
						Model = model,
						ModifiedAt = DateTime.Now,
						ModifiedBy = _context.UserId,
						SerialNumber = assetDto.SerialNumber.Trim(),
                        Asset = asset
					};

					if (assetDto.BrandId > 0)
                    {
                        check.BrandId = assetDto.BrandId;

                    }
                    else
                    {
                        check.Brand = brand;

					}

					if (assetDto.ModelId > 0)
					{
                        check.ModelId = assetDto.ModelId;

					}
					else
					{
                        check.Model = model;

					}

					_context.Add(check);
				}
				else
				{
                    check.EmployeeId = employeeId;
                    check.DictionaryItemId = dictionaryItem.Id;
                    check.Model = model;
                    check.Asset = asset;
					_context.Update(check);
				}

				employee.IsConfirmed = true;
                _context.Update(employee);

                _context.SaveChanges();

				return new WFHResult { Success = true, Message = "Datele au fost salvate cu sucess!", Employee = $"{employee.Email} a adaugat un nou echipament WFH!" };
			}

        }

        public async Task<WFHResult> DeleteAssetValidation(int assetId, int employeeId)
        {
            Model.Employee employee = await _context.Set<Model.Employee>().Where(r => r.Id == employeeId).FirstOrDefaultAsync();
            if(employee == null) return new WFHResult { Success = false, Message = "Userul nu a fost gasit!" };

			if (employee != null)
            {
                var asset = await _context.Set<Model.Asset>().Where(a => a.Id == assetId).FirstOrDefaultAsync();
				if (asset == null)  return new WFHResult { Success = true, Message = "Echipamentul nu a fost gasit!" };

				asset.IsDeleted = true;

                _context.Update(asset);

                _context.SaveChanges();

                int count = _context.Set<Model.Asset>().Where(a => a.IsDeleted == false && a.InvNo.StartsWith("WFH2023") && a.EmployeeId == employee.Id).ToList().Count;

                if (count > 0)
                {
                    employee.IsConfirmed = true;
                    _context.Update(employee);

                    _context.SaveChanges();
                }
                else
                {
                    employee.IsConfirmed = false;
                    _context.Update(employee);

                    _context.SaveChanges();
                }
            }

            return new WFHResult { Success = true, Message = "Echipamentul a fost sters!"};
        }

        //public async Task<List<Model.Reporting.InventoryListAppendixA>> GetInventoryListAsync(int inventoryId, int? costCenterId)
        //{
        //    Expression<Func<Model.InventoryAsset, bool>> predicate = (p) => p.InventoryId == inventoryId;

        //    if (costCenterId.HasValue) predicate = ExpressionHelper.And(predicate, p => p.CostCenterIdInitial == costCenterId || p.CostCenterIdFinal == costCenterId);

        //    var query = GetQueryable(predicate)
        //        .Where(p => p.Asset.CommitteeTypeId == committeeTypeId)
        //        .Select(p => new Model.Reporting.InventoryListAppendixA
        //        {
        //            InventoryNumber = p.Asset.InventoryNumber,
        //            InvNo = p.Asset.InvNo,
        //            SubNo = p.Asset.SubNo,
        //            AssetName = p.Asset.Name,
        //            IdleGroup = p.Asset.IdleGroup.Code,
        //            Uom = p.Asset.Uom.Name,
        //            QRegister = p.QRegister.GetValueOrDefault(0),
        //            QActual = p.QActual.GetValueOrDefault(0),
        //            ValueInv = p.Asset.DepDetail.ValueRemIfrs.GetValueOrDefault(0),
        //            ValueDep = p.Asset.DepDetail.ValueRemRas.GetValueOrDefault(0),
        //            Reason = p.Reason.Name,
        //            Temporary = p.Asset.Temporary.GetValueOrDefault(false),
        //            CostCenterRegisterId = p.CostCenterRegisterId.GetValueOrDefault(0),
        //            CostCenterActualId = p.CostCenterActualId.GetValueOrDefault(0),
        //            AdministrationRegisterId = p.AdministrationRegisterId.GetValueOrDefault(0),
        //            AdministrationActualId = p.AdministrationActualId.GetValueOrDefault(0)

        //        });

        //    return await query.ToListAsync();
        //}


        public async Task<List<Model.Reporting.InventoryListAppendixA>> GetInventoryListAsync(int inventoryId, ReportFilter reportFilter)
        {
            IQueryable<Model.InventoryAsset> query = null;
            List<Model.Reporting.InventoryListAppendixA> listInventoryAssets = null;
            query = _context.InventoryAssets.AsNoTracking();

            Model.AccMonth accMonth = await _context.Set<Model.Inventory>().Where(i => i.Id == inventoryId).Select(i => i.AccMonth).FirstOrDefaultAsync();

            query = query
                    .Include(i => i.Asset).ThenInclude(a => a.AssetDepMDs)
                    .Include(c => c.Asset.Company)
                    .Include(i => i.CostCenterInitial)
                    .Include(i => i.CostCenterFinal)
                    .Include(i => i.AdministrationInitial)
                    .Include(i => i.AdministrationFinal)
                    .Where
                        (i => i.InventoryId == inventoryId &&
                        i.Asset.IsDeleted == false &&
                        i.Asset.Validated == true &&
                        i.Asset.InInventory == true && !i.Asset.InvNo.Contains("/"));
            /*
            List<int?> expAccountIds = new List<int?>();
			expAccountIds.Add(49);
			expAccountIds.Add(50);
			expAccountIds.Add(51);
			expAccountIds.Add(52);
			expAccountIds.Add(53);
			expAccountIds.Add(54);
			expAccountIds.Add(55);
			expAccountIds.Add(56);
			expAccountIds.Add(57);
			expAccountIds.Add(58);
			expAccountIds.Add(59);
			expAccountIds.Add(60);
			expAccountIds.Add(61);
			expAccountIds.Add(66);
			expAccountIds.Add(67);
			expAccountIds.Add(68);
			expAccountIds.Add(69);
			expAccountIds.Add(70);
			expAccountIds.Add(74);
			expAccountIds.Add(75);
			query = query.Where(a => expAccountIds.Contains(a.Asset.ExpAccountId));
            */

            if (reportFilter.IsDuplicate != null) query = query.Where(a => a.Asset.IsDuplicate == reportFilter.IsDuplicate);

			if ((reportFilter.CostCenterIds != null) && (reportFilter.CostCenterIds.Count > 0))
			{
                query = query.Where(a => ((reportFilter.CostCenterIds.Contains(a.CostCenterIdInitial)) || (reportFilter.CostCenterIds.Contains(a.CostCenterIdFinal))));
            }
            else
            {
                if ((reportFilter.AdministrationIds != null) && (reportFilter.AdministrationIds.Count > 0))
			    {
				    query = query.Where(a => ((reportFilter.AdministrationIds.Contains(a.AdministrationIdInitial)) || (reportFilter.AdministrationIds.Contains(a.AdministrationIdFinal))));
			    }
			}
			
			listInventoryAssets = query.Select(p => new Model.Reporting.InventoryListAppendixA
            {
				ERPCode = p.Asset.ERPCode,
				InvNo = p.Asset.InvNo,
				SubNo = p.Asset.SubNo,
				AssetName = p.Asset.Name,
				Company = p.Asset.Company.Code,
				Uom = "BUC",
				QInitial = (decimal)p.QInitial,
				QFinal = (decimal)p.QFinal,
				CurrBkValue = p.Asset.AssetDepMDs.Where(md => md.AccMonthId == accMonth.Id).Select(md => md.CurrBkValue).First(),
				CurrentAPC = p.Asset.AssetDepMDs.Where(md => md.AccMonthId == accMonth.Id).Select(md => md.CurrentAPC).First(),
                AccumulDep = p.Asset.AssetDepMDs.Where(md => md.AccMonthId == accMonth.Id).Select(md => md.AccumulDep).First(),
                Info = p.Info,
				IsTemp = p.IsTemp.GetValueOrDefault(false),
				CostCenterIdFinal = p.CostCenterIdFinal.GetValueOrDefault(0),
				CostCenterIdInitial = p.CostCenterIdInitial.GetValueOrDefault(0),
				DivisionIdFinal = p.CostCenterIdFinal != null ? p.CostCenterFinal.DivisionId.GetValueOrDefault(0) : 0,
				DivisionIdInitial = p.CostCenterIdInitial != null ? p.CostCenterInitial.DivisionId.GetValueOrDefault(0) : 0,
				DepartmentIdFinal = p.CostCenterIdFinal != null && p.CostCenterFinal.DivisionId != null ? p.CostCenterFinal.Division.DepartmentId.GetValueOrDefault(0) : 0,
				DepartmentIdInitial = p.CostCenterIdInitial != null && p.CostCenterInitial.Division != null ? p.CostCenterInitial.Division.DepartmentId.GetValueOrDefault(0) : 0,
				AdministrationIdFinal = p.AdministrationIdFinal != null ? p.AdministrationIdFinal.GetValueOrDefault(0) : 0,
				AdministrationIdInitial = p.AdministrationIdInitial != null ? p.AdministrationIdInitial.GetValueOrDefault(0) : 0,

			}).ToList();

            return listInventoryAssets;
        }

		public async Task<List<Model.Reporting.InventoryListAppendixA>> GetInventoryMinusListAsync(int inventoryId, ReportFilter reportFilter)
		{
			IQueryable<Model.InventoryAsset> query = null;
			List<Model.Reporting.InventoryListAppendixA> listInventoryAssets = null;
			query = _context.InventoryAssets.AsNoTracking();

            Model.AccMonth accMonth = await _context.Set<Model.Inventory>().Where(i => i.Id == inventoryId).Select(i => i.AccMonth).FirstOrDefaultAsync();

            query = query
                   .Include(i => i.Asset).ThenInclude(a => a.AssetDepMDs)
                   .Include(c => c.Asset.Company)
                   .Include(i => i.CostCenterInitial).ThenInclude(d => d.Division)
				   .Include(i => i.CostCenterFinal).ThenInclude(d => d.Division)
                   .Where
                        (i => i.InventoryId == inventoryId &&
                        i.Asset.IsDeleted == false &&
                        i.Asset.Validated == true &&
                        i.Asset.InInventory == true &&
                        i.Asset.IsPlus == true &&
                        !i.Asset.InvNo.Contains("/") 
                        );
        
			if (reportFilter.IsDuplicate != null) query = query.Where(a => a.Asset.IsDuplicate == reportFilter.IsDuplicate);


			if ((reportFilter.CostCenterIds != null) && (reportFilter.CostCenterIds.Count > 0))
			{
				query = query.Where(a => (reportFilter.CostCenterIds.Contains(a.CostCenterIdInitial) && ((a.CostCenterIdFinal == null) || ((a.CostCenterIdFinal != null) && (!reportFilter.CostCenterIds.Contains(a.CostCenterIdFinal))))));
            }
            else
            {
				if ((reportFilter.DivisionIds != null) && (reportFilter.DivisionIds.Count > 0))
				{
					query = query.Where(a => (reportFilter.DivisionIds.Contains(a.CostCenterInitial.DivisionId) && ((a.CostCenterIdFinal == null) || ((a.CostCenterIdFinal != null) && (!reportFilter.DivisionIds.Contains(a.CostCenterFinal.DivisionId))))));
                }
                else
                {
					if ((reportFilter.DepartmentIds != null) && (reportFilter.DepartmentIds.Count > 0))
					{
						query = query.Where(a => (reportFilter.DepartmentIds.Contains(a.CostCenterInitial.Division.DepartmentId) && ((a.CostCenterIdFinal == null) || ((a.CostCenterIdFinal != null) && (!reportFilter.DepartmentIds.Contains(a.CostCenterFinal.Division.DepartmentId))))));
                    }
                    else
                    {

						if ((reportFilter.AdministrationIds != null) && (reportFilter.AdministrationIds.Count > 0))
						{
							query = query.Where(a => (reportFilter.AdministrationIds.Contains(a.AdministrationIdInitial) && ((a.CostCenterIdFinal == null) || ((a.CostCenterIdFinal != null) && (!reportFilter.AdministrationIds.Contains(a.AdministrationIdFinal))))));
						}
					}
				}
			}

			listInventoryAssets = query.Select(p => new Model.Reporting.InventoryListAppendixA
			{
				ERPCode = p.Asset.ERPCode,
				InvNo = p.Asset.InvNo,
				SubNo = p.Asset.SubNo,
				AssetName = p.Asset.Name,
				Company = p.Asset.Company.Code,
				Uom = "BUC",
				QInitial = (decimal)p.QInitial,
				QFinal = (decimal)p.QFinal,
                CurrBkValue = p.Asset.AssetDepMDs.Where(md => md.AccMonthId == accMonth.Id).Select(md => md.CurrBkValue).First(),
                CurrentAPC = p.Asset.AssetDepMDs.Where(md => md.AccMonthId == accMonth.Id).Select(md => md.CurrentAPC).First(),
                AccumulDep = p.Asset.AssetDepMDs.Where(md => md.AccMonthId == accMonth.Id).Select(md => md.AccumulDep).First(),
                Info = p.Info,
				IsTemp = p.IsTemp.GetValueOrDefault(false),
				CostCenterIdFinal = p.CostCenterIdFinal.GetValueOrDefault(0),
				CostCenterIdInitial = p.CostCenterIdInitial.GetValueOrDefault(0),
				DivisionIdFinal = p.CostCenterIdFinal != null ? p.CostCenterFinal.DivisionId.GetValueOrDefault(0) : 0,
				DivisionIdInitial = p.CostCenterIdInitial != null ? p.CostCenterInitial.DivisionId.GetValueOrDefault(0) : 0,
				DepartmentIdFinal = p.CostCenterIdFinal != null && p.CostCenterFinal.DivisionId != null ? p.CostCenterFinal.Division.DepartmentId.GetValueOrDefault(0) : 0,
				DepartmentIdInitial = p.CostCenterIdInitial != null && p.CostCenterInitial.Division != null ? p.CostCenterInitial.Division.DepartmentId.GetValueOrDefault(0) : 0,
				AdministrationIdFinal = p.AdministrationIdFinal.GetValueOrDefault(0),
				AdministrationIdInitial = p.AdministrationIdInitial.GetValueOrDefault(0)

			}).ToList();

			return listInventoryAssets;
		}

		public async Task<List<Model.Reporting.InventoryListAppendixA>> GetInventoryPlusListAsync(int inventoryId, ReportFilter reportFilter)
		{
			IQueryable<Model.InventoryAsset> query = null;
			List<Model.Reporting.InventoryListAppendixA> listInventoryAssets = null;
			query = _context.InventoryAssets.AsNoTracking();

            Model.AccMonth accMonth = await _context.Set<Model.Inventory>().Where(i => i.Id == inventoryId).Select(i => i.AccMonth).FirstOrDefaultAsync();

            query = query
                   .Include(i => i.Asset).ThenInclude(a => a.AssetDepMDs)
                   .Include(c => c.Asset.Company)
                   .Include(i => i.CostCenterInitial).ThenInclude(d => d.Division)
                   .Include(i => i.CostCenterFinal).ThenInclude(d => d.Division)
                   .Where
                        (i => i.InventoryId == inventoryId &&
                        i.Asset.IsDeleted == false &&
                        i.Asset.Validated == true &&
                        i.Asset.InInventory == true &&
                        i.Asset.IsPlus == true &&
                        !i.Asset.InvNo.Contains("/")
                        );


            if (reportFilter.IsDuplicate != null) query = query.Where(a => a.Asset.IsDuplicate == reportFilter.IsDuplicate);

			if ((reportFilter.CostCenterIds != null) && (reportFilter.CostCenterIds.Count > 0))
			{
				query = query.Where(a => ((a.CostCenterIdInitial != null) && (!reportFilter.CostCenterIds.Contains(a.CostCenterIdInitial)) && (reportFilter.CostCenterIds.Contains(a.CostCenterIdFinal))));
            }
            else
            {
				if ((reportFilter.DivisionIds != null) && (reportFilter.DivisionIds.Count > 0))
				{
					query = query.Where(a => ((a.CostCenterIdInitial != null) && (!reportFilter.DivisionIds.Contains(a.CostCenterInitial.DivisionId)) && (reportFilter.DivisionIds.Contains(a.CostCenterFinal.DivisionId))));
                }
                else
                {
					if ((reportFilter.DepartmentIds != null) && (reportFilter.DepartmentIds.Count > 0))
					{
						query = query.Where(a => ((a.CostCenterIdInitial != null) && (!reportFilter.DepartmentIds.Contains(a.CostCenterInitial.Division.DepartmentId)) && (reportFilter.DepartmentIds.Contains(a.CostCenterFinal.Division.DepartmentId))));
                    }
                    else
                    {

						if ((reportFilter.AdministrationIds != null) && (reportFilter.AdministrationIds.Count > 0))
						{
							query = query.Where(a => ((a.CostCenterIdInitial != null) && (!reportFilter.AdministrationIds.Contains(a.AdministrationIdInitial)) && (reportFilter.AdministrationIds.Contains(a.AdministrationIdFinal))));
						}
					}
				}
			}

			listInventoryAssets = query.Select(p => new Model.Reporting.InventoryListAppendixA
			{
				ERPCode = p.Asset.ERPCode,
				InvNo = p.Asset.InvNo,
				SubNo = p.Asset.SubNo,
				AssetName = p.Asset.Name,
				Company = p.Asset.Company.Code,
				Uom = "BUC",
				QInitial = (decimal)p.QInitial,
				QFinal = (decimal)p.QFinal,
				CurrBkValue = p.Asset.AssetDepMDs.Where(md => md.AccMonthId == accMonth.Id).Select(md => md.CurrBkValue).First(),
                CurrentAPC = p.Asset.AssetDepMDs.Where(md => md.AccMonthId == accMonth.Id).Select(md => md.CurrentAPC).First(),
                AccumulDep = p.Asset.AssetDepMDs.Where(md => md.AccMonthId == accMonth.Id).Select(md => md.AccumulDep).First(),
				Info = p.Info,
				IsTemp = p.IsTemp.GetValueOrDefault(false),
				CostCenterIdFinal = p.CostCenterIdFinal.GetValueOrDefault(0),
				CostCenterIdInitial = p.CostCenterIdInitial.GetValueOrDefault(0),
				DivisionIdFinal = p.CostCenterIdFinal != null ? p.CostCenterFinal.DivisionId.GetValueOrDefault(0) : 0,
				DivisionIdInitial = p.CostCenterIdInitial != null ? p.CostCenterInitial.DivisionId.GetValueOrDefault(0) : 0,
				DepartmentIdFinal = p.CostCenterIdFinal != null && p.CostCenterFinal.DivisionId != null ? p.CostCenterFinal.Division.DepartmentId.GetValueOrDefault(0) : 0,
				DepartmentIdInitial = p.CostCenterIdInitial != null && p.CostCenterInitial.Division != null ? p.CostCenterInitial.Division.DepartmentId.GetValueOrDefault(0) : 0,
				AdministrationIdFinal = p.AdministrationIdFinal.GetValueOrDefault(0),
				AdministrationIdInitial = p.AdministrationIdInitial.GetValueOrDefault(0)
			}).ToList();

			return listInventoryAssets;
		}

		public async Task<List<Model.Reporting.InventoryListAppendixA>> GetInventoryListAllowLabelAsync(int inventoryId, ReportFilter reportFilter)
		{
			IQueryable<Model.InventoryAsset> query = null;
			List<Model.Reporting.InventoryListAppendixA> listInventoryAssets = null;
			query = _context.InventoryAssets.AsNoTracking();

            Model.AccMonth accMonth = await _context.Set<Model.Inventory>().Where(i => i.Id == inventoryId).Select(i => i.AccMonth).FirstOrDefaultAsync();

            query = query
                 .Include(i => i.Asset).ThenInclude(a => a.AssetDepMDs)
                 .Include(c => c.Asset.Company)
                 .Include(i => i.CostCenterInitial).ThenInclude(d => d.Division)
                 .Include(i => i.CostCenterFinal).ThenInclude(d => d.Division)
                 .Where
                      (i => i.InventoryId == inventoryId &&
                      i.Asset.IsDeleted == false &&
                      i.Asset.Validated == true &&
                      i.Asset.InInventory == true &&
                      i.Asset.IsPlus == true &&
                      i.Asset.AllowLabel == false);

			if (reportFilter.IsDuplicate != null) query = query.Where(a => a.Asset.IsDuplicate == reportFilter.IsDuplicate);

			if ((reportFilter.CostCenterIds != null) && (reportFilter.CostCenterIds.Count > 0))
			{
				query = query.Where(a => ((reportFilter.CostCenterIds.Contains(a.CostCenterIdInitial)) || (reportFilter.CostCenterIds.Contains(a.CostCenterIdFinal))));
            }
            else
            {
				if ((reportFilter.DivisionIds != null) && (reportFilter.DivisionIds.Count > 0))
				{
					query = query.Where(a => ((reportFilter.DivisionIds.Contains(a.CostCenterInitial.DivisionId)) || (reportFilter.DivisionIds.Contains(a.CostCenterFinal.DivisionId))));
                }
                else
                {

					if ((reportFilter.DepartmentIds != null) && (reportFilter.DepartmentIds.Count > 0))
					{
						query = query.Where(a => ((reportFilter.DepartmentIds.Contains(a.CostCenterInitial.Division.DepartmentId)) || (reportFilter.DepartmentIds.Contains(a.CostCenterFinal.Division.DepartmentId))));
                    }
                    else
                    {

						if ((reportFilter.AdministrationIds != null) && (reportFilter.AdministrationIds.Count > 0))
						{
							query = query.Where(a => ((reportFilter.AdministrationIds.Contains(a.AdministrationIdInitial)) || (reportFilter.AdministrationIds.Contains(a.AdministrationIdFinal))));
						}
					}
				}
			}

			listInventoryAssets = query.Select(p => new Model.Reporting.InventoryListAppendixA
			{
				ERPCode = p.Asset.ERPCode,
				InvNo = p.Asset.InvNo,
				SubNo = p.Asset.SubNo,
				AssetName = p.Asset.Name,
				Company = p.Asset.Company.Code,
				Uom = "BUC",
				QInitial = (decimal)p.QInitial,
				QFinal = (decimal)p.QFinal,
                CurrBkValue = p.Asset.AssetDepMDs.Where(md => md.AccMonthId == accMonth.Id).Select(md => md.CurrBkValue).First(),
                CurrentAPC = p.Asset.AssetDepMDs.Where(md => md.AccMonthId == accMonth.Id).Select(md => md.CurrentAPC).First(),
                AccumulDep = p.Asset.AssetDepMDs.Where(md => md.AccMonthId == accMonth.Id).Select(md => md.AccumulDep).First(),
                Info = p.Info,
				IsTemp = p.IsTemp.GetValueOrDefault(false),
				CostCenterIdFinal = p.CostCenterIdFinal.GetValueOrDefault(0),
				CostCenterIdInitial = p.CostCenterIdInitial.GetValueOrDefault(0),
				DivisionIdFinal = p.CostCenterIdFinal != null ? p.CostCenterFinal.DivisionId.GetValueOrDefault(0) : 0,
				DivisionIdInitial = p.CostCenterIdInitial != null ? p.CostCenterInitial.DivisionId.GetValueOrDefault(0) : 0,
				DepartmentIdFinal = p.CostCenterIdFinal != null && p.CostCenterFinal.DivisionId != null ? p.CostCenterFinal.Division.DepartmentId.GetValueOrDefault(0) : 0,
				DepartmentIdInitial = p.CostCenterIdInitial != null && p.CostCenterInitial.Division != null ? p.CostCenterInitial.Division.DepartmentId.GetValueOrDefault(0) : 0,
				AdministrationIdFinal = p.AdministrationIdFinal.GetValueOrDefault(0),
				AdministrationIdInitial = p.AdministrationIdInitial.GetValueOrDefault(0)

			}).ToList();

			return listInventoryAssets;
		}

        public async Task<List<Model.AuditInventoryResult>> GetLocationAuditInventoryAsync(int inventoryId, ReportFilter reportFilter)
        {
            List<AuditInventoryResult> auditInventoryResults = null;
         
            auditInventoryResults = await _context.Set<AuditInventoryResult>().FromSql("LocationAuditInventory {0}", inventoryId).ToListAsync();

            return auditInventoryResults;
        }

        public async Task<List<Model.AuditInventoryResult>> GetCostCenterAuditInventoryAsync(int inventoryId, ReportFilter reportFilter)
		{
            List<AuditInventoryResult> auditInventoryResults = null;
            Model.ReportBook reportBook = null;
            Guid guid = Guid.NewGuid();
                
                
			//await this._context.Database.ExecuteSqlRawAsync("CostCenterAuditInventory {0}", paramTable);
              
            if ((reportFilter.CostCenterIds != null) && (reportFilter.CostCenterIds.Count > 0))
            {
                for (int i = 0; i < reportFilter.CostCenterIds.Count; i++)
                {
					reportBook = new ReportBook();
                    reportBook.Code = "";
					reportBook.Name = "";
                    reportBook.CreatedAt = DateTime.Now;
                    reportBook.ModifiedAt = DateTime.Now;
                    reportBook.IsDeleted = false;
                    reportBook.CostCenterId = reportFilter.CostCenterIds[i];
                    reportBook.Guid = guid;

                    _context.Add(reportBook);
                    _context.SaveChanges();
				}

                auditInventoryResults = await _context.Set<AuditInventoryResult>().FromSql("CostCenterAuditInventory {0}, {1}", inventoryId, guid).ToListAsync();
            }
            else
            {

              if ((reportFilter.DivisionIds != null) && (reportFilter.DivisionIds.Count > 0))
                {
                    auditInventoryResults = await _context.Set<AuditInventoryResult>().FromSql("DivisionAuditInventory {0}, {1}", inventoryId, reportFilter.DivisionIds[0]).ToListAsync();

                }
                else
                {
                    if ((reportFilter.DepartmentIds != null) && (reportFilter.DepartmentIds.Count > 0))
                    {
                        auditInventoryResults = await _context.Set<AuditInventoryResult>().FromSql("DepartmentAuditInventory {0}, {1}", inventoryId, reportFilter.DepartmentIds[0]).ToListAsync();
                    }
                    else
                    {
                        if ((reportFilter.AdministrationIds != null) && (reportFilter.AdministrationIds.Count > 0))
                        {
                            auditInventoryResults = await _context.Set<AuditInventoryResult>().FromSql("AdministrationAuditInventory {0}, {1}", inventoryId, reportFilter.AdministrationIds[0]).ToListAsync();
                        }
                    }
                }
            }

            return auditInventoryResults;
		}

        private async void AddPrereceptionExportHeader(ExcelWorksheet sheet)
        {
            int rIndex = 1;
            int cIndex = 0;
            sheet.Cells[rIndex, ++cIndex].Value = "Nr. crt.";
            sheet.Cells[rIndex, ++cIndex].Value = "Asset";
            sheet.Cells[rIndex, ++cIndex].Value = "Sub number";
            sheet.Cells[rIndex, ++cIndex].Value = "State";
            sheet.Cells[rIndex, ++cIndex].Value = "PCS";
            sheet.Cells[rIndex, ++cIndex].Value = "Validation SAP";
            sheet.Cells[rIndex, ++cIndex].Value = "Maaterial";
            sheet.Cells[rIndex, ++cIndex].Value = "Description";
            sheet.Cells[rIndex, ++cIndex].Value = "Vendor number";
            sheet.Cells[rIndex, ++cIndex].Value = "Supplier name";
            sheet.Cells[rIndex, ++cIndex].Value = "Invoice number";
            sheet.Cells[rIndex, ++cIndex].Value = "Cost center code";
            sheet.Cells[rIndex, ++cIndex].Value = "Cost center name";
            sheet.Cells[rIndex, ++cIndex].Value = "Order number";
            sheet.Cells[rIndex, ++cIndex].Value = "Offer number";
            sheet.Cells[rIndex, ++cIndex].Value = "WBS code";
            sheet.Cells[rIndex, ++cIndex].Value = "Company code";
        }

        private void AddPrereceptionExportAutoFilter(ExcelWorksheet sheet, int rows, int columns)
        {
            for (int i = 1; i <= columns; i++)
            {
                sheet.Cells[1, i].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                sheet.Cells[1, i].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                sheet.Cells[1, i].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                sheet.Cells[1, i].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                sheet.Cells[1, i].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                sheet.Cells[1, i].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                sheet.Cells[1, i].Style.Fill.PatternType = ExcelFillStyle.Solid;
                sheet.Cells[1, i].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(0, 104, 174));
                sheet.Column(i).AutoFit();
            }
            sheet.Row(1).Height = 35.00;
            sheet.Row(1).Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            sheet.Row(1).Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            sheet.View.FreezePanes(2, 1);
            using (var cells = sheet.Cells[1, 1, 1, columns])
            {
                cells.Style.Font.Bold = true;
                cells.Style.Fill.PatternType = ExcelFillStyle.Solid;
                cells.Style.Fill.BackgroundColor.SetColor(Color.FromArgb(173, 216, 230));
                cells.Style.Font.Color.SetColor(Color.Black);
            }
            using (var cells = sheet.Cells[2, 1, rows + 1, columns])
            {
                cells.Style.Font.Bold = false;
                cells.Style.Fill.PatternType = ExcelFillStyle.Solid;
                cells.Style.Fill.BackgroundColor.SetColor(Color.FromArgb(255, 255, 255));
                cells.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                cells.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                cells.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                cells.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                cells.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                cells.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                cells.Style.Fill.PatternType = ExcelFillStyle.Solid;
            }
            sheet.View.ShowGridLines = false;
            sheet.View.ZoomScale = 100;
            sheet.Cells["A1:Q1"].AutoFilter = true;
        }

        public async Task<byte[]> ExportPrereceptionAsync(AssetFilter assetFilter, string includes)
        {
            int cIndex = 0;
            int rIndex = 2;
            AssetDepTotal depTotal;
            includes = includes + ",Asset.InvState,Asset.Order.Offer,Asset.Material,Asset.Document.Partner,Asset.CostCenter,Asset.Project,Asset.Company";
            var items =  this.GetMonthInPreReception(assetFilter, null, includes, null, null, out depTotal);

            using (ExcelPackage package = new ExcelPackage())
            {
                ExcelWorksheet worksheet = package.Workbook.Worksheets.Add("pre-reception");
                AddPrereceptionExportHeader(worksheet);

                foreach (var item in items)
                {
                    cIndex = 0;
                    worksheet.Cells[rIndex, ++cIndex].Value = rIndex - 1;
                    worksheet.Cells[rIndex, ++cIndex].Value = item.Asset.InvNo;
                    worksheet.Cells[rIndex, ++cIndex].Value = item.Asset.SubNo;
                    worksheet.Cells[rIndex, ++cIndex].Value = item.Asset.InvState != null ? item.Asset.InvState.Name : string.Empty;
                    worksheet.Cells[rIndex, ++cIndex].Value = (float)item.Asset.Quantity;
                    worksheet.Cells[rIndex, ++cIndex].Value = item.Asset.InSapValidation;
                    worksheet.Cells[rIndex, ++cIndex].Value = item.Asset.Material != null ? item.Asset.Material.Name : string.Empty;
                    worksheet.Cells[rIndex, ++cIndex].Value = item.Asset.Name != null ? item.Asset.Name : string.Empty;
                    worksheet.Cells[rIndex, ++cIndex].Value = (item.Asset.Document != null && item.Asset.Document.Partner != null) ? item.Asset.Document.Partner.RegistryNumber : string.Empty;
                    worksheet.Cells[rIndex, ++cIndex].Value = (item.Asset.Document != null && item.Asset.Document.Partner != null) ? item.Asset.Document.Partner.Name : string.Empty;
                    worksheet.Cells[rIndex, ++cIndex].Value = item.Asset.Document != null ? item.Asset.Document.DocNo1 : string.Empty;
                    worksheet.Cells[rIndex, ++cIndex].Value = item.Asset.CostCenter != null ? item.Asset.CostCenter.Code : string.Empty;
                    worksheet.Cells[rIndex, ++cIndex].Value = item.Asset.CostCenter != null ? item.Asset.CostCenter.Name : string.Empty;
                    worksheet.Cells[rIndex, ++cIndex].Value = item.Asset.Order != null ? item.Asset.Order.Code : string.Empty;
                    worksheet.Cells[rIndex, ++cIndex].Value = (item.Asset.Order != null && item.Asset.Order.Offer != null) ? item.Asset.Order.Offer.Code : string.Empty;
                    worksheet.Cells[rIndex, ++cIndex].Value = (item.Asset.Project != null) ? item.Asset.Project.Code : string.Empty;
                    worksheet.Cells[rIndex, ++cIndex].Value = (item.Asset.Company != null) ? item.Asset.Company.Code : string.Empty;

                    rIndex++;
                }
                AddPrereceptionExportAutoFilter(worksheet, rIndex, cIndex);
                return package.GetAsByteArray();
            }
        }

        private static readonly SqlMetaData[] myRecordSchema = {
            new SqlMetaData("Id", SqlDbType.Int)
        };

		private SqlDataRecord AssetToSqlDataRecord(int? id)
		{
			int index = 0;
			var record = new SqlDataRecord(myRecordSchema);
			record.SetInt32(index, (int)id);

			return record;
		}
	}
}
