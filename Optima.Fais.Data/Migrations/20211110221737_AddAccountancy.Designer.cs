// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Optima.Fais.Data;
using System;

namespace Optima.Fais.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211110221737_AddAccountancy")]
    partial class AddAccountancy
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Optima.Fais.Model.AccMonth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AccMonthId");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<int>("Month");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("AccMonth");
                });

            modelBuilder.Entity("Optima.Fais.Model.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Optima.Fais.Model.Accountancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("AccountId");

                    b.Property<int>("AssetCategoryId");

                    b.Property<int>("AssetTypeId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int>("ExpAccountId");

                    b.Property<int>("InterCompanyId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AssetCategoryId");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("ExpAccountId");

                    b.HasIndex("InterCompanyId");

                    b.ToTable("Accountancy");
                });

            modelBuilder.Entity("Optima.Fais.Model.AccSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AccSystemId");

                    b.Property<int>("AssetClassTypeId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AssetClassTypeId");

                    b.HasIndex("CompanyId");

                    b.ToTable("AccSystem");
                });

            modelBuilder.Entity("Optima.Fais.Model.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ActivityId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("Optima.Fais.Model.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AddressId");

                    b.Property<string>("AddressDetail");

                    b.Property<int?>("CityId");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Fax")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PostalCode");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Optima.Fais.Model.AdmCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AdmCenterId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("EmployeeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AdmCenter");
                });

            modelBuilder.Entity("Optima.Fais.Model.AdmCenterDynamicGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdmCenter");

                    b.Property<string>("Code");

                    b.Property<decimal>("Fy2019Actual");

                    b.Property<decimal>("Fy2020Actual");

                    b.Property<decimal>("Fy2021Actual");

                    b.Property<decimal>("Fy2022BudgetBase");

                    b.Property<decimal>("Fy2022BudgetDynamic");

                    b.Property<string>("Name");

                    b.Property<int>("Parent");

                    b.Property<string>("Table");

                    b.Property<decimal>("VarPerMonthActual");

                    b.Property<decimal>("VarPerMonthBudget");

                    b.Property<decimal>("VarView12MonthActual");

                    b.Property<decimal>("VarView12MonthBudget");

                    b.Property<decimal>("VarYTDActual");

                    b.Property<decimal>("VarYTDBudget");

                    b.Property<decimal>("ViewPerMonthActual");

                    b.Property<decimal>("ViewPerMonthBudgetBase");

                    b.Property<decimal>("ViewPerMonthBudgetDynamic");

                    b.Property<decimal>("ViewYTDActual");

                    b.Property<decimal>("ViewYTDBudgetBase");

                    b.Property<decimal>("ViewYTDBudgetDynamic");

                    b.HasKey("Id");

                    b.ToTable("AdmCenterDynamicGroups");
                });

            modelBuilder.Entity("Optima.Fais.Model.AdmCenterGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Month");

                    b.Property<decimal>("Value");

                    b.Property<decimal>("ValueDep");

                    b.HasKey("Id");

                    b.ToTable("AdmCenterGroups");
                });

            modelBuilder.Entity("Optima.Fais.Model.Administration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AdministrationId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("DivisionId");

                    b.Property<int?>("ERPId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DivisionId");

                    b.ToTable("Administration");
                });

            modelBuilder.Entity("Optima.Fais.Model.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Optima.Fais.Model.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<int?>("AdmCenterId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int?>("DeviceId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int?>("EmployeeId");

                    b.Property<string>("FamilyName");

                    b.Property<string>("GivenName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AdmCenterId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Optima.Fais.Model.AppState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AppStateId");

                    b.Property<string>("Code")
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Mask")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("ParentCode")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("AppState");
                });

            modelBuilder.Entity("Optima.Fais.Model.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("Optima.Fais.Model.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssetId");

                    b.Property<int?>("AccountId");

                    b.Property<int?>("AdministrationId");

                    b.Property<string>("AgreementNo");

                    b.Property<bool?>("AllowLabel");

                    b.Property<int?>("AppStateId");

                    b.Property<int?>("ArticleId");

                    b.Property<int?>("AssetCategoryId");

                    b.Property<int?>("AssetNatureId");

                    b.Property<int?>("AssetStateId");

                    b.Property<int?>("AssetTypeId");

                    b.Property<int?>("BrandId");

                    b.Property<int?>("BudgetId");

                    b.Property<int?>("BudgetManagerId");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CostCenterId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(450);

                    b.Property<bool?>("Custody");

                    b.Property<int?>("DepartmentId");

                    b.Property<int?>("DictionaryItemId");

                    b.Property<int?>("DimensionId");

                    b.Property<int?>("DivisionId");

                    b.Property<int?>("DocumentId");

                    b.Property<string>("ERPCode")
                        .HasMaxLength(50);

                    b.Property<int?>("EmployeeId");

                    b.Property<int?>("ExpAccountId");

                    b.Property<int>("ImageCount");

                    b.Property<string>("Info");

                    b.Property<string>("InfoMinus");

                    b.Property<string>("InfoPlus");

                    b.Property<int?>("InsuranceCategoryId");

                    b.Property<int?>("InterCompanyId");

                    b.Property<string>("InvNo")
                        .HasMaxLength(30);

                    b.Property<int?>("InvStateId");

                    b.Property<DateTime?>("InvoiceDate");

                    b.Property<bool>("IsAccepted");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDuplicate");

                    b.Property<bool>("IsInTransfer");

                    b.Property<bool>("IsMinus");

                    b.Property<bool>("IsPlus");

                    b.Property<bool>("IsPrinted");

                    b.Property<bool>("IsReconcile");

                    b.Property<bool?>("IsTemp");

                    b.Property<string>("Manufacturer");

                    b.Property<int?>("MaterialId");

                    b.Property<int?>("ModelId");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("NIRDate");

                    b.Property<int>("NIRNumber");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120);

                    b.Property<int?>("OrderId");

                    b.Property<DateTime?>("PIFDate");

                    b.Property<int>("PIFNumber");

                    b.Property<DateTime?>("PODate");

                    b.Property<int?>("ParentAssetId");

                    b.Property<DateTime?>("PrintDate");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("ProjectTypeId");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("date");

                    b.Property<float>("Quantity");

                    b.Property<DateTime?>("ReceptionDate");

                    b.Property<DateTime?>("RemovalDate");

                    b.Property<int?>("RoomId");

                    b.Property<string>("SAPCode");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(50);

                    b.Property<int?>("StockId");

                    b.Property<int>("SubNo");

                    b.Property<int?>("SubTypeId");

                    b.Property<string>("TempName");

                    b.Property<string>("TempReco");

                    b.Property<int?>("UomId");

                    b.Property<bool>("Validated");

                    b.Property<decimal>("ValueInv")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("ValueRem")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AdministrationId");

                    b.HasIndex("AppStateId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AssetCategoryId");

                    b.HasIndex("AssetNatureId");

                    b.HasIndex("AssetStateId");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("BrandId");

                    b.HasIndex("BudgetId");

                    b.HasIndex("BudgetManagerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("CreatedUser");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DictionaryItemId");

                    b.HasIndex("DimensionId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ExpAccountId");

                    b.HasIndex("InsuranceCategoryId");

                    b.HasIndex("InterCompanyId");

                    b.HasIndex("InvStateId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ModelId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ParentAssetId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectTypeId");

                    b.HasIndex("RoomId");

                    b.HasIndex("StockId");

                    b.HasIndex("SubTypeId");

                    b.HasIndex("UomId");

                    b.ToTable("Asset");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetAC", b =>
                {
                    b.Property<int>("AssetClassTypeId");

                    b.Property<int>("AssetId");

                    b.Property<int>("AssetClassId");

                    b.Property<int>("AssetClassIdIn");

                    b.HasKey("AssetClassTypeId", "AssetId");

                    b.HasIndex("AssetClassId");

                    b.HasIndex("AssetClassIdIn");

                    b.HasIndex("AssetId");

                    b.ToTable("AssetAC");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetAdmIn", b =>
                {
                    b.Property<int>("AssetId")
                        .HasColumnName("AssetId");

                    b.Property<int?>("AdministrationId");

                    b.Property<int?>("AssetCategoryId");

                    b.Property<int?>("AssetStateId");

                    b.Property<int?>("AssetTypeId");

                    b.Property<int?>("CostCenterId");

                    b.Property<int?>("DepartmentId");

                    b.Property<int?>("EmployeeId");

                    b.Property<int?>("InvStateId");

                    b.Property<int?>("RoomId");

                    b.HasKey("AssetId");

                    b.HasIndex("AdministrationId");

                    b.HasIndex("AssetCategoryId");

                    b.HasIndex("AssetStateId");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("InvStateId");

                    b.HasIndex("RoomId");

                    b.ToTable("AssetAdmIn");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetAdmMD", b =>
                {
                    b.Property<int>("AccMonthId");

                    b.Property<int>("AssetId");

                    b.Property<int?>("AccountId");

                    b.Property<int?>("AdmCenterId");

                    b.Property<int?>("AdministrationId");

                    b.Property<int?>("ArticleId");

                    b.Property<int?>("AssetCategoryId");

                    b.Property<int?>("AssetClassId");

                    b.Property<int?>("AssetNatureId");

                    b.Property<int?>("AssetStateId");

                    b.Property<int?>("AssetTypeId");

                    b.Property<int?>("BrandId");

                    b.Property<int?>("BudgetManagerId");

                    b.Property<int?>("CostCenterId");

                    b.Property<int?>("DepartmentId");

                    b.Property<int?>("DivisionId");

                    b.Property<int?>("EmployeeId");

                    b.Property<int?>("ExpAccountId");

                    b.Property<int?>("InsuranceCategoryId");

                    b.Property<int?>("InterCompanyId");

                    b.Property<int?>("ModelId");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("ProjectTypeId");

                    b.Property<int?>("RegionId");

                    b.Property<int?>("RoomId");

                    b.Property<int?>("SubTypeId");

                    b.HasKey("AccMonthId", "AssetId");

                    b.HasIndex("AccountId");

                    b.HasIndex("AdmCenterId");

                    b.HasIndex("AdministrationId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AssetCategoryId");

                    b.HasIndex("AssetClassId");

                    b.HasIndex("AssetId");

                    b.HasIndex("AssetNatureId");

                    b.HasIndex("AssetStateId");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("BrandId");

                    b.HasIndex("BudgetManagerId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ExpAccountId");

                    b.HasIndex("InsuranceCategoryId");

                    b.HasIndex("InterCompanyId");

                    b.HasIndex("ModelId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectTypeId");

                    b.HasIndex("RegionId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SubTypeId");

                    b.ToTable("AssetAdmMD");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssetCategoryId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Prefix")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("AssetCategory");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssetClassId");

                    b.Property<int>("AssetClassTypeId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int>("DepPeriodDefault");

                    b.Property<int>("DepPeriodMax");

                    b.Property<int>("DepPeriodMin");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("ParentAssetClassId");

                    b.HasKey("Id");

                    b.HasIndex("AssetClassTypeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ParentAssetClassId");

                    b.ToTable("AssetClass");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetClassType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssetClassTypeId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("AssetClassType");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssetComponentId");

                    b.Property<int?>("AppStateId");

                    b.Property<int?>("AssetId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("EmployeeId");

                    b.Property<string>("Info");

                    b.Property<int?>("InvStateId");

                    b.Property<bool>("IsAccepted");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Prefix")
                        .HasMaxLength(30);

                    b.Property<int?>("SubTypeId");

                    b.HasKey("Id");

                    b.HasIndex("AppStateId");

                    b.HasIndex("AssetId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("InvStateId");

                    b.HasIndex("SubTypeId");

                    b.ToTable("AssetComponent");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetComponentOp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssetComponentOpId");

                    b.Property<int>("AssetComponentId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int>("DocumentId");

                    b.Property<int?>("EmployeeIdFinal");

                    b.Property<int?>("EmployeeIdInitial");

                    b.Property<int?>("InvStateId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<float>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("AssetComponentId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("EmployeeIdFinal");

                    b.HasIndex("EmployeeIdInitial");

                    b.HasIndex("InvStateId");

                    b.ToTable("AssetComponentOp");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetDep", b =>
                {
                    b.Property<int>("AccSystemId");

                    b.Property<int>("AssetId");

                    b.Property<int>("DepPeriod");

                    b.Property<int>("DepPeriodIn");

                    b.Property<int>("DepPeriodMonth");

                    b.Property<int>("DepPeriodMonthIn");

                    b.Property<int>("DepPeriodRem");

                    b.Property<int>("DepPeriodRemIn");

                    b.Property<bool?>("DirectExpense");

                    b.Property<DateTime?>("UsageEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("UsageStartDate")
                        .HasColumnType("date");

                    b.Property<decimal>("ValueDep")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("ValueDepIn")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("ValueDepPU")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("ValueDepPUIn")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("ValueDepYTD")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("ValueDepYTDIn")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("ValueInv")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("ValueInvIn")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("ValueRem")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("ValueRemIn")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("ValueRet");

                    b.Property<decimal>("ValueRetIn");

                    b.Property<decimal>("ValueTr");

                    b.Property<decimal>("ValueTrIn");

                    b.HasKey("AccSystemId", "AssetId");

                    b.HasIndex("AssetId");

                    b.ToTable("AssetDep");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetDepMD", b =>
                {
                    b.Property<int>("AccMonthId");

                    b.Property<int>("AccSystemId");

                    b.Property<int>("AssetId");

                    b.Property<int>("DepPeriod");

                    b.Property<int>("DepPeriodMonth");

                    b.Property<int>("DepPeriodRem");

                    b.Property<int>("DepPeriodRemIn");

                    b.Property<decimal>("InvestSupport");

                    b.Property<decimal>("ValueDep")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("ValueDepIn");

                    b.Property<decimal>("ValueDepPU")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("ValueDepPUIn");

                    b.Property<decimal>("ValueDepYTD")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("ValueDepYTDIn");

                    b.Property<decimal>("ValueInv")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("ValueInvIn");

                    b.Property<decimal>("ValueRem")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("ValueRemIn");

                    b.Property<decimal>("ValueRet");

                    b.Property<decimal>("ValueRetIn");

                    b.Property<decimal>("ValueTr");

                    b.Property<decimal>("ValueTrIn");

                    b.Property<decimal>("WriteUps");

                    b.HasKey("AccMonthId", "AccSystemId", "AssetId");

                    b.HasIndex("AccSystemId");

                    b.HasIndex("AssetId");

                    b.ToTable("AssetDepMD");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetInv", b =>
                {
                    b.Property<int>("AssetId");

                    b.Property<bool?>("AllowLabel");

                    b.Property<string>("Barcode")
                        .HasMaxLength(30);

                    b.Property<string>("Info")
                        .HasMaxLength(200);

                    b.Property<string>("InvName")
                        .HasMaxLength(120);

                    b.Property<string>("InvNoOld")
                        .HasMaxLength(30);

                    b.Property<int>("InvStateId");

                    b.Property<string>("Model")
                        .HasMaxLength(30);

                    b.Property<string>("Producer")
                        .HasMaxLength(30);

                    b.HasKey("AssetId");

                    b.HasIndex("InvStateId");

                    b.ToTable("AssetInv");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetNature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("AssetTypeId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("CompanyId");

                    b.ToTable("AssetNature");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetNi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssetNiId");

                    b.Property<bool>("AllowLabel");

                    b.Property<int?>("AssetId");

                    b.Property<string>("Code1")
                        .HasMaxLength(30);

                    b.Property<string>("Code2")
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CostCenterId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("EmployeeId");

                    b.Property<string>("Info")
                        .HasMaxLength(200);

                    b.Property<int?>("InvStateId");

                    b.Property<int>("InventoryId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Model")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name1")
                        .IsRequired()
                        .HasMaxLength(120);

                    b.Property<string>("Name2")
                        .IsRequired()
                        .HasMaxLength(120);

                    b.Property<string>("Producer")
                        .HasMaxLength(30);

                    b.Property<float>("Quantity");

                    b.Property<int?>("RoomId");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("InvStateId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("RoomId");

                    b.ToTable("AssetNi");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetOp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssetOpId");

                    b.Property<int?>("AccSystemId");

                    b.Property<int?>("AdministrationIdFinal");

                    b.Property<int?>("AdministrationIdInitial");

                    b.Property<bool>("AllowLabel");

                    b.Property<int?>("AssetCategoryIdFinal");

                    b.Property<int?>("AssetCategoryIdInitial");

                    b.Property<int>("AssetId");

                    b.Property<int?>("AssetNatureIdFinal");

                    b.Property<int?>("AssetNatureIdInitial");

                    b.Property<int?>("AssetOpStateId");

                    b.Property<int?>("AssetRecoStateId");

                    b.Property<int?>("AssetStateIdFinal");

                    b.Property<int?>("AssetStateIdInitial");

                    b.Property<int?>("AssetTypeFinalId");

                    b.Property<int?>("AssetTypeIdFinal");

                    b.Property<int?>("AssetTypeIdInitial");

                    b.Property<int?>("AssetTypeInitialId");

                    b.Property<int?>("BudgetManagerIdFinal");

                    b.Property<int?>("BudgetManagerIdInitial");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CostCenterIdFinal");

                    b.Property<int?>("CostCenterIdInitial");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool?>("DepUpdate");

                    b.Property<int?>("DepartmentIdFinal");

                    b.Property<int?>("DepartmentIdInitial");

                    b.Property<int?>("DimensionIdFinal");

                    b.Property<int?>("DimensionIdInitial");

                    b.Property<int>("DocumentId");

                    b.Property<DateTime?>("DstConfAt");

                    b.Property<string>("DstConfBy")
                        .HasMaxLength(450);

                    b.Property<int?>("EmployeeIdFinal");

                    b.Property<int?>("EmployeeIdInitial");

                    b.Property<int?>("EntityTypeId");

                    b.Property<string>("Info")
                        .HasMaxLength(200);

                    b.Property<string>("Info2019");

                    b.Property<string>("InfoMinus");

                    b.Property<string>("InfoPlus");

                    b.Property<int?>("InsuranceCategoryId");

                    b.Property<int?>("InterCompanyId");

                    b.Property<string>("InvName");

                    b.Property<int?>("InvStateIdFinal");

                    b.Property<int?>("InvStateIdInitial");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsMinus");

                    b.Property<bool>("IsPlus");

                    b.Property<string>("Model");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Producer");

                    b.Property<int?>("ProjectIdFinal");

                    b.Property<int?>("ProjectIdInitial");

                    b.Property<float>("Quantity");

                    b.Property<DateTime?>("RegisterConfAt");

                    b.Property<string>("RegisterConfBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("ReleaseConfAt");

                    b.Property<string>("ReleaseConfBy")
                        .HasMaxLength(450);

                    b.Property<int?>("RoomIdFinal");

                    b.Property<int?>("RoomIdInitial");

                    b.Property<string>("SerialNumber");

                    b.Property<DateTime?>("SrcConfAt");

                    b.Property<string>("SrcConfBy")
                        .HasMaxLength(450);

                    b.Property<int?>("UomId");

                    b.Property<decimal?>("ValueAdd");

                    b.HasKey("Id");

                    b.HasIndex("AccSystemId");

                    b.HasIndex("AdministrationIdFinal");

                    b.HasIndex("AdministrationIdInitial");

                    b.HasIndex("AssetCategoryIdFinal");

                    b.HasIndex("AssetCategoryIdInitial");

                    b.HasIndex("AssetId");

                    b.HasIndex("AssetNatureIdFinal");

                    b.HasIndex("AssetNatureIdInitial");

                    b.HasIndex("AssetOpStateId");

                    b.HasIndex("AssetRecoStateId");

                    b.HasIndex("AssetStateIdFinal");

                    b.HasIndex("AssetStateIdInitial");

                    b.HasIndex("AssetTypeFinalId");

                    b.HasIndex("AssetTypeInitialId");

                    b.HasIndex("BudgetManagerIdFinal");

                    b.HasIndex("BudgetManagerIdInitial");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CostCenterIdFinal");

                    b.HasIndex("CostCenterIdInitial");

                    b.HasIndex("DepartmentIdFinal");

                    b.HasIndex("DepartmentIdInitial");

                    b.HasIndex("DimensionIdFinal");

                    b.HasIndex("DimensionIdInitial");

                    b.HasIndex("DocumentId");

                    b.HasIndex("DstConfBy");

                    b.HasIndex("EmployeeIdFinal");

                    b.HasIndex("EmployeeIdInitial");

                    b.HasIndex("EntityTypeId");

                    b.HasIndex("InsuranceCategoryId");

                    b.HasIndex("InterCompanyId");

                    b.HasIndex("InvStateIdFinal");

                    b.HasIndex("InvStateIdInitial");

                    b.HasIndex("ProjectIdFinal");

                    b.HasIndex("ProjectIdInitial");

                    b.HasIndex("RegisterConfBy");

                    b.HasIndex("ReleaseConfBy");

                    b.HasIndex("RoomIdFinal");

                    b.HasIndex("RoomIdInitial");

                    b.HasIndex("SrcConfBy");

                    b.HasIndex("UomId");

                    b.ToTable("AssetOp");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssetStateId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("HasDep");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFinal");

                    b.Property<bool>("IsInitial");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("AssetState");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssetTypeId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("AssetType");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetTypeDynamicGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AssetType");

                    b.Property<string>("Code");

                    b.Property<decimal>("Fy2019Actual");

                    b.Property<decimal>("Fy2020Actual");

                    b.Property<decimal>("Fy2021Actual");

                    b.Property<decimal>("Fy2022BudgetBase");

                    b.Property<decimal>("Fy2022BudgetDynamic");

                    b.Property<string>("Name");

                    b.Property<int>("Parent");

                    b.Property<string>("Table");

                    b.Property<decimal>("VarPerMonthActual");

                    b.Property<decimal>("VarPerMonthBudget");

                    b.Property<decimal>("VarView12MonthActual");

                    b.Property<decimal>("VarView12MonthBudget");

                    b.Property<decimal>("VarYTDActual");

                    b.Property<decimal>("VarYTDBudget");

                    b.Property<decimal>("ViewPerMonthActual");

                    b.Property<decimal>("ViewPerMonthBudgetBase");

                    b.Property<decimal>("ViewPerMonthBudgetDynamic");

                    b.Property<decimal>("ViewYTDActual");

                    b.Property<decimal>("ViewYTDBudgetBase");

                    b.Property<decimal>("ViewYTDBudgetDynamic");

                    b.HasKey("Id");

                    b.ToTable("AssetTypeDynamicGroups");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetTypeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Month");

                    b.Property<decimal>("Value");

                    b.Property<decimal>("ValueDep");

                    b.HasKey("Id");

                    b.ToTable("AssetTypeGroups");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetTypeReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("InvNo");

                    b.Property<string>("Name");

                    b.Property<DateTime>("PurchaseDate");

                    b.Property<string>("SerialNumber");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("AssetTypeReports");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetTypeTotal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<int>("Initial");

                    b.Property<decimal>("Procentage");

                    b.Property<int>("Scanned");

                    b.Property<decimal>("ValueInv");

                    b.Property<decimal>("ValueRem");

                    b.HasKey("Id");

                    b.ToTable("AssetTypeTotals");
                });

            modelBuilder.Entity("Optima.Fais.Model.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdministrationCode");

                    b.Property<string>("AdministrationName");

                    b.Property<string>("DivisionCode");

                    b.Property<string>("DivisionName");

                    b.Property<int>("FinalScanned");

                    b.Property<decimal>("FinalScannedValue");

                    b.Property<int>("Initial");

                    b.Property<decimal>("InitialValue");

                    b.Property<int>("Minus");

                    b.Property<decimal>("MinusValue");

                    b.Property<int>("NotScanned");

                    b.Property<decimal>("NotScannedValue");

                    b.Property<int>("Plus");

                    b.Property<decimal>("PlusValue");

                    b.Property<int>("Scanned");

                    b.Property<decimal>("ScannedValue");

                    b.Property<int>("Temporary");

                    b.Property<int>("TranInDivision");

                    b.Property<int>("TranInDivisionDIFFCC");

                    b.Property<int>("TranInDivisionDIFFEMP");

                    b.Property<int>("TranInDivisionDIFFRR");

                    b.HasKey("Id");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("Optima.Fais.Model.AuditBudget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("AuditBudgets");
                });

            modelBuilder.Entity("Optima.Fais.Model.AuditHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AffectedColumns");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("NewValues");

                    b.Property<string>("OldValues");

                    b.Property<string>("PrimaryKey");

                    b.Property<string>("TableName");

                    b.Property<string>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Optima.Fais.Model.AuditInventoryResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Cassation");

                    b.Property<DateTime?>("InventoryEndDate");

                    b.Property<string>("InventoryName");

                    b.Property<DateTime?>("InventoryStartDate");

                    b.Property<int>("Items");

                    b.Property<string>("Location");

                    b.Property<string>("Member1");

                    b.Property<string>("Member2");

                    b.Property<string>("Member3");

                    b.Property<string>("Member4");

                    b.Property<string>("Member5");

                    b.Property<string>("Member6");

                    b.Property<string>("Member7");

                    b.Property<int>("Minus");

                    b.Property<int>("NotScanned");

                    b.Property<int>("Plus");

                    b.Property<string>("Region");

                    b.Property<decimal>("ValueMinus");

                    b.Property<decimal>("ValueNotScanned");

                    b.HasKey("Id");

                    b.ToTable("AuditInventoryResults");
                });

            modelBuilder.Entity("Optima.Fais.Model.AuditInventoryV1T1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Initial");

                    b.Property<int>("Items");

                    b.Property<string>("Location");

                    b.Property<int>("Minus");

                    b.Property<int>("NotScanned");

                    b.Property<int>("Plus");

                    b.Property<string>("Region");

                    b.Property<int>("Temporary");

                    b.Property<int>("TranBetweenAdmCenters");

                    b.Property<int>("TranBetweenLocations");

                    b.Property<int>("TranInAdmCenter");

                    b.Property<int>("TranInLocation");

                    b.HasKey("Id");

                    b.ToTable("AuditInventoryV1T1s");
                });

            modelBuilder.Entity("Optima.Fais.Model.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Text")
                        .HasMaxLength(100);

                    b.Property<string>("Variant")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Badge");
                });

            modelBuilder.Entity("Optima.Fais.Model.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("Optima.Fais.Model.Budget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("AccMonthId");

                    b.Property<int?>("AccountId");

                    b.Property<int?>("ActivityId");

                    b.Property<int?>("AdmCenterId");

                    b.Property<int?>("AdministrationId");

                    b.Property<int?>("AppStateId");

                    b.Property<int?>("AssetTypeId");

                    b.Property<int?>("BudgetManagerId");

                    b.Property<string>("Code")
                        .HasMaxLength(120);

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CostCenterId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int>("DepPeriod");

                    b.Property<int>("DepPeriodRem");

                    b.Property<int?>("DepartmentId");

                    b.Property<int?>("DivisionId");

                    b.Property<int?>("EmployeeId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Info")
                        .HasMaxLength(120);

                    b.Property<int?>("InterCompanyId");

                    b.Property<bool>("IsAccepted");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnabled");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .HasMaxLength(120);

                    b.Property<int?>("PartnerId");

                    b.Property<decimal>("Price");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("ProjectTypeId");

                    b.Property<float>("Quantity");

                    b.Property<float>("QuantityRem");

                    b.Property<int?>("RegionId");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("SubTypeId");

                    b.Property<decimal>("Total");

                    b.Property<int?>("UomId");

                    b.Property<string>("UserId")
                        .HasMaxLength(450);

                    b.Property<bool>("Validated");

                    b.Property<decimal>("ValueFin")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("ValueIni")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("Id");

                    b.HasIndex("AccMonthId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("AdmCenterId");

                    b.HasIndex("AdministrationId");

                    b.HasIndex("AppStateId");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("BudgetManagerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("InterCompanyId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectTypeId");

                    b.HasIndex("RegionId");

                    b.HasIndex("SubTypeId");

                    b.HasIndex("UomId");

                    b.HasIndex("UserId");

                    b.ToTable("Budget");
                });

            modelBuilder.Entity("Optima.Fais.Model.BudgetCompanyProcentage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Approved");

                    b.Property<string>("Code");

                    b.Property<int>("Denied");

                    b.Property<string>("Name");

                    b.Property<decimal>("Procentage");

                    b.Property<double>("Quantity");

                    b.Property<double>("QuantityRem");

                    b.Property<int>("Total");

                    b.Property<decimal>("ValueFin");

                    b.Property<decimal>("ValueIni");

                    b.Property<int>("Waiting");

                    b.HasKey("Id");

                    b.ToTable("BudgetCompanyProcentages");
                });

            modelBuilder.Entity("Optima.Fais.Model.BudgetCostCenterProcentage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Approved");

                    b.Property<string>("Code");

                    b.Property<int>("Denied");

                    b.Property<string>("Name");

                    b.Property<decimal>("Procentage");

                    b.Property<double>("Quantity");

                    b.Property<double>("QuantityRem");

                    b.Property<int>("Total");

                    b.Property<decimal>("ValueFin");

                    b.Property<decimal>("ValueIni");

                    b.Property<int>("Waiting");

                    b.HasKey("Id");

                    b.ToTable("BudgetCostCenterProcentages");
                });

            modelBuilder.Entity("Optima.Fais.Model.BudgetEmployeeProcentage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Approved");

                    b.Property<string>("Code");

                    b.Property<int>("Denied");

                    b.Property<string>("Name");

                    b.Property<decimal>("Procentage");

                    b.Property<double>("Quantity");

                    b.Property<double>("QuantityRem");

                    b.Property<int>("Total");

                    b.Property<decimal>("ValueFin");

                    b.Property<decimal>("ValueIni");

                    b.Property<int>("Waiting");

                    b.HasKey("Id");

                    b.ToTable("BudgetEmployeeProcentages");
                });

            modelBuilder.Entity("Optima.Fais.Model.BudgetExpenceTypeProcentage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Approved");

                    b.Property<string>("Code");

                    b.Property<int>("Denied");

                    b.Property<string>("Name");

                    b.Property<decimal>("Procentage");

                    b.Property<double>("Quantity");

                    b.Property<double>("QuantityRem");

                    b.Property<int>("Total");

                    b.Property<decimal>("ValueFin");

                    b.Property<decimal>("ValueIni");

                    b.Property<int>("Waiting");

                    b.HasKey("Id");

                    b.ToTable("BudgetExpenceTypeProcentages");
                });

            modelBuilder.Entity("Optima.Fais.Model.BudgetManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("ERPId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("UomId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UomId");

                    b.ToTable("BudgetManager");
                });

            modelBuilder.Entity("Optima.Fais.Model.BudgetManagerTotal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<int>("Initial");

                    b.Property<string>("Name");

                    b.Property<decimal>("Procentage");

                    b.Property<int>("Scanned");

                    b.Property<decimal>("ValueInv");

                    b.Property<decimal>("ValueRem");

                    b.HasKey("Id");

                    b.ToTable("BudgetManagerTotals");
                });

            modelBuilder.Entity("Optima.Fais.Model.BudgetMonth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("AccMonthId");

                    b.Property<int>("BudgetId");

                    b.Property<int>("BudgetTypeId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<decimal>("Value");

                    b.Property<decimal>("ValueDep");

                    b.HasKey("Id");

                    b.HasIndex("AccMonthId");

                    b.HasIndex("BudgetId");

                    b.HasIndex("BudgetTypeId");

                    b.ToTable("BudgetMonth");
                });

            modelBuilder.Entity("Optima.Fais.Model.BudgetOp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("AccMonthId");

                    b.Property<int?>("AccSystemId");

                    b.Property<int?>("AccountIdFinal");

                    b.Property<int?>("AccountIdInitial");

                    b.Property<int?>("ActivityIdFinal");

                    b.Property<int?>("ActivityIdInitial");

                    b.Property<int?>("AdmCenterIdFinal");

                    b.Property<int?>("AdmCenterIdInitial");

                    b.Property<int?>("AdministrationIdFinal");

                    b.Property<int?>("AdministrationIdInitial");

                    b.Property<int?>("AssetTypeIdFinal");

                    b.Property<int?>("AssetTypeIdInitial");

                    b.Property<int>("BudgetId");

                    b.Property<int?>("BudgetManagerIdFinal");

                    b.Property<int?>("BudgetManagerIdInitial");

                    b.Property<int?>("BudgetStateId");

                    b.Property<int?>("BudgetStateIdFinal");

                    b.Property<int?>("CompanyIdFinal");

                    b.Property<int?>("CompanyIdInitial");

                    b.Property<int?>("CostCenterIdFinal");

                    b.Property<int?>("CostCenterIdInitial");

                    b.Property<int?>("CountryIdFinal");

                    b.Property<int?>("CountryIdInitial");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int>("DepPeriodFinal");

                    b.Property<int>("DepPeriodInitial");

                    b.Property<int>("DepPeriodRemFinal");

                    b.Property<int>("DepPeriodRemInitial");

                    b.Property<int>("DocumentId");

                    b.Property<DateTime?>("DstConfAt");

                    b.Property<string>("DstConfBy")
                        .HasMaxLength(450);

                    b.Property<int?>("EmployeeIdFinal");

                    b.Property<int?>("EmployeeIdInitial");

                    b.Property<Guid>("Guid");

                    b.Property<string>("InfoFin")
                        .HasMaxLength(450);

                    b.Property<string>("InfoIni")
                        .HasMaxLength(450);

                    b.Property<int?>("InterCompanyIdFinal");

                    b.Property<int?>("InterCompanyIdInitial");

                    b.Property<bool>("IsAccepted");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("PartnerIdFinal");

                    b.Property<int?>("PartnerIdInitial");

                    b.Property<int?>("ProjectIdFinal");

                    b.Property<int?>("ProjectIdInitial");

                    b.Property<int?>("ProjectTypeFinalId");

                    b.Property<int?>("ProjectTypeIdFinal");

                    b.Property<int?>("ProjectTypeIdInitial");

                    b.Property<int?>("ProjectTypeInitialId");

                    b.Property<float>("QuantityFin");

                    b.Property<float>("QuantityIni");

                    b.Property<int?>("RegionIdFinal");

                    b.Property<int?>("RegionIdInitial");

                    b.Property<DateTime?>("RegisterConfAt");

                    b.Property<string>("RegisterConfBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("ReleaseConfAt");

                    b.Property<string>("ReleaseConfBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("SrcConfAt");

                    b.Property<string>("SrcConfBy")
                        .HasMaxLength(450);

                    b.Property<int?>("SubTypeIdFinal");

                    b.Property<int?>("SubTypeIdInitial");

                    b.Property<bool>("Validated");

                    b.Property<decimal>("ValueFin1");

                    b.Property<decimal>("ValueFin2");

                    b.Property<decimal>("ValueIni1");

                    b.Property<decimal>("ValueIni2");

                    b.HasKey("Id");

                    b.HasIndex("AccMonthId");

                    b.HasIndex("AccSystemId");

                    b.HasIndex("AccountIdFinal");

                    b.HasIndex("AccountIdInitial");

                    b.HasIndex("ActivityIdFinal");

                    b.HasIndex("ActivityIdInitial");

                    b.HasIndex("AdministrationIdFinal");

                    b.HasIndex("AdministrationIdInitial");

                    b.HasIndex("AssetTypeIdFinal");

                    b.HasIndex("AssetTypeIdInitial");

                    b.HasIndex("BudgetId");

                    b.HasIndex("BudgetManagerIdFinal");

                    b.HasIndex("BudgetManagerIdInitial");

                    b.HasIndex("BudgetStateId");

                    b.HasIndex("BudgetStateIdFinal");

                    b.HasIndex("CompanyIdFinal");

                    b.HasIndex("CompanyIdInitial");

                    b.HasIndex("CostCenterIdFinal");

                    b.HasIndex("CostCenterIdInitial");

                    b.HasIndex("CountryIdFinal");

                    b.HasIndex("CountryIdInitial");

                    b.HasIndex("DocumentId");

                    b.HasIndex("DstConfBy");

                    b.HasIndex("EmployeeIdFinal");

                    b.HasIndex("EmployeeIdInitial");

                    b.HasIndex("InterCompanyIdFinal");

                    b.HasIndex("InterCompanyIdInitial");

                    b.HasIndex("PartnerIdFinal");

                    b.HasIndex("PartnerIdInitial");

                    b.HasIndex("ProjectIdFinal");

                    b.HasIndex("ProjectIdInitial");

                    b.HasIndex("ProjectTypeFinalId");

                    b.HasIndex("ProjectTypeInitialId");

                    b.HasIndex("RegionIdFinal");

                    b.HasIndex("RegionIdInitial");

                    b.HasIndex("RegisterConfBy");

                    b.HasIndex("ReleaseConfBy");

                    b.HasIndex("SrcConfBy");

                    b.HasIndex("SubTypeIdFinal");

                    b.HasIndex("SubTypeIdInitial");

                    b.ToTable("BudgetOp");
                });

            modelBuilder.Entity("Optima.Fais.Model.BudgetProjectProcentage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Approved");

                    b.Property<string>("Code");

                    b.Property<int>("Denied");

                    b.Property<string>("Name");

                    b.Property<decimal>("Procentage");

                    b.Property<double>("Quantity");

                    b.Property<double>("QuantityRem");

                    b.Property<int>("Total");

                    b.Property<decimal>("ValueFin");

                    b.Property<decimal>("ValueIni");

                    b.Property<int>("Waiting");

                    b.HasKey("Id");

                    b.ToTable("BudgetProjectProcentages");
                });

            modelBuilder.Entity("Optima.Fais.Model.BudgetStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Activity");

                    b.Property<decimal>("Procentage");

                    b.Property<string>("User");

                    b.Property<decimal>("ValueFin");

                    b.Property<decimal>("ValueIni");

                    b.HasKey("Id");

                    b.ToTable("BudgetStatus");
                });

            modelBuilder.Entity("Optima.Fais.Model.BudgetSubTypeProcentage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Approved");

                    b.Property<string>("Code");

                    b.Property<int>("Denied");

                    b.Property<string>("Name");

                    b.Property<decimal>("Procentage");

                    b.Property<double>("Quantity");

                    b.Property<double>("QuantityRem");

                    b.Property<int>("Total");

                    b.Property<decimal>("ValueFin");

                    b.Property<decimal>("ValueIni");

                    b.Property<int>("Waiting");

                    b.HasKey("Id");

                    b.ToTable("BudgetSubTypeProcentages");
                });

            modelBuilder.Entity("Optima.Fais.Model.BudgetTotalProcentage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Approved");

                    b.Property<int>("Denied");

                    b.Property<decimal>("Procentage");

                    b.Property<double>("Quantity");

                    b.Property<double>("QuantityRem");

                    b.Property<int>("Total");

                    b.Property<decimal>("Value");

                    b.Property<decimal>("ValueFin");

                    b.Property<decimal>("ValueIni");

                    b.HasKey("Id");

                    b.ToTable("BudgetTotalProcentages");
                });

            modelBuilder.Entity("Optima.Fais.Model.BudgetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("BudgetType");
                });

            modelBuilder.Entity("Optima.Fais.Model.BusinessSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BusinessSystemId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("BusinessSystem");
                });

            modelBuilder.Entity("Optima.Fais.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CategoryENId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("InterCompanyId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CategoryENId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("InterCompanyId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Optima.Fais.Model.CategoryEN", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("InterCompanyENId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("InterCompanyENId");

                    b.ToTable("CategoryEN");
                });

            modelBuilder.Entity("Optima.Fais.Model.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CityId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountyId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Optima.Fais.Model.ColumnDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ColumnDefinitionId");

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Format")
                        .HasMaxLength(50);

                    b.Property<string>("HeaderCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Include")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Pipe")
                        .HasMaxLength(50);

                    b.Property<int>("Position");

                    b.Property<string>("Property")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("RoleId");

                    b.Property<string>("SortBy")
                        .HasMaxLength(50);

                    b.Property<int>("TableDefinitionId");

                    b.Property<string>("TextAlign")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TableDefinitionId");

                    b.ToTable("ColumnDefinition");
                });

            modelBuilder.Entity("Optima.Fais.Model.Committee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("AdministrationId");

                    b.Property<int?>("CostCenterId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Document1");

                    b.Property<string>("Document2");

                    b.Property<int?>("EmployeeId");

                    b.Property<int?>("EmployeeId2");

                    b.Property<int?>("EmployeeId3");

                    b.Property<int?>("EmployeeId4");

                    b.Property<int?>("EmployeeId5");

                    b.Property<int?>("EmployeeId6");

                    b.Property<int?>("EmployeeId7");

                    b.Property<int?>("InventoryId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("RoomId");

                    b.HasKey("Id");

                    b.HasIndex("AdministrationId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeId2");

                    b.HasIndex("EmployeeId3");

                    b.HasIndex("EmployeeId4");

                    b.HasIndex("EmployeeId5");

                    b.HasIndex("EmployeeId6");

                    b.HasIndex("EmployeeId7");

                    b.HasIndex("InventoryId");

                    b.HasIndex("RoomId");

                    b.ToTable("Committees");
                });

            modelBuilder.Entity("Optima.Fais.Model.Commodity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<int>("ContractId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Domain");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name");

                    b.Property<string>("UniqueName");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContractId");

                    b.ToTable("Commodity");
                });

            modelBuilder.Entity("Optima.Fais.Model.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CompanyId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Optima.Fais.Model.CompanyDynamicGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<decimal>("Fy2019Actual");

                    b.Property<decimal>("Fy2020Actual");

                    b.Property<decimal>("Fy2021Actual");

                    b.Property<decimal>("Fy2022BudgetBase");

                    b.Property<decimal>("Fy2022BudgetDynamic");

                    b.Property<string>("Name");

                    b.Property<int>("Parent");

                    b.Property<string>("Table");

                    b.Property<decimal>("VarPerMonthActual");

                    b.Property<decimal>("VarPerMonthBudget");

                    b.Property<decimal>("VarView12MonthActual");

                    b.Property<decimal>("VarView12MonthBudget");

                    b.Property<decimal>("VarYTDActual");

                    b.Property<decimal>("VarYTDBudget");

                    b.Property<decimal>("ViewPerMonthActual");

                    b.Property<decimal>("ViewPerMonthBudgetBase");

                    b.Property<decimal>("ViewPerMonthBudgetDynamic");

                    b.Property<decimal>("ViewYTDActual");

                    b.Property<decimal>("ViewYTDBudgetBase");

                    b.Property<decimal>("ViewYTDBudgetDynamic");

                    b.HasKey("Id");

                    b.ToTable("CompanyDynamicGroups");
                });

            modelBuilder.Entity("Optima.Fais.Model.CompanyDynamicGroupMonth", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Month");

                    b.Property<string>("Name");

                    b.Property<decimal>("Value");

                    b.Property<decimal>("ValueDep");

                    b.HasKey("Id");

                    b.ToTable("CompanyDynamicGroupMonths");
                });

            modelBuilder.Entity("Optima.Fais.Model.CompanyGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Month");

                    b.Property<decimal>("Value");

                    b.Property<decimal>("ValueDep");

                    b.HasKey("Id");

                    b.ToTable("CompanyGroups");
                });

            modelBuilder.Entity("Optima.Fais.Model.ConfigValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ConfigValueId");

                    b.Property<bool?>("BoolValue");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DateValue")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Group")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<decimal?>("NumericValue")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("RoleId");

                    b.Property<string>("TextValue")
                        .HasMaxLength(200);

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RoleId");

                    b.ToTable("ConfigValue");
                });

            modelBuilder.Entity("Optima.Fais.Model.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("AccMonthId");

                    b.Property<DateTime?>("AgreementDate")
                        .HasColumnType("date");

                    b.Property<string>("AmendmentReason");

                    b.Property<string>("AmendmentType");

                    b.Property<int?>("AppStateId");

                    b.Property<int>("AutoRenewalInterval");

                    b.Property<int?>("BusinessSystemId");

                    b.Property<string>("Code")
                        .HasMaxLength(120);

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("ContractAmountId");

                    b.Property<string>("ContractId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("date");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("date");

                    b.Property<int?>("EmployeeId");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<string>("ExpirationTermType");

                    b.Property<string>("HierarchicalType");

                    b.Property<string>("Info")
                        .HasMaxLength(120);

                    b.Property<bool>("IsAccepted");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnabled");

                    b.Property<bool>("IsTestProject");

                    b.Property<int>("MaximumNumberOfRenewals");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .HasMaxLength(120);

                    b.Property<int>("Origin");

                    b.Property<int?>("OwnerId");

                    b.Property<int?>("PartnerId");

                    b.Property<string>("RelatedId");

                    b.Property<string>("TemplateId");

                    b.Property<string>("Title");

                    b.Property<bool>("Validated");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.HasIndex("AccMonthId");

                    b.HasIndex("AppStateId");

                    b.HasIndex("BusinessSystemId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContractAmountId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PartnerId");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("Optima.Fais.Model.ContractAmount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ContractAmountId");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("AmountRem");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("UomId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UomId");

                    b.ToTable("ContractAmount");
                });

            modelBuilder.Entity("Optima.Fais.Model.ContractDivision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<int>("ContractId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name");

                    b.Property<string>("UniqueName");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractDivision");
                });

            modelBuilder.Entity("Optima.Fais.Model.ContractOp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("AccMonthId");

                    b.Property<int?>("AccSystemId");

                    b.Property<int?>("BusinessSystemId");

                    b.Property<int?>("CommodityId");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("ContractAmountId");

                    b.Property<int?>("ContractDivisionId");

                    b.Property<int>("ContractId");

                    b.Property<int?>("ContractRegionId");

                    b.Property<int?>("ContractStateId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int>("DocumentId");

                    b.Property<DateTime?>("DstConfAt");

                    b.Property<string>("DstConfBy")
                        .HasMaxLength(450);

                    b.Property<int?>("EmployeeId");

                    b.Property<string>("Info")
                        .HasMaxLength(450);

                    b.Property<bool>("IsAccepted");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("PartnerId");

                    b.Property<DateTime?>("RegisterConfAt");

                    b.Property<string>("RegisterConfBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("ReleaseConfAt");

                    b.Property<string>("ReleaseConfBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("SrcConfAt");

                    b.Property<string>("SrcConfBy")
                        .HasMaxLength(450);

                    b.Property<bool>("Validated");

                    b.HasKey("Id");

                    b.HasIndex("AccMonthId");

                    b.HasIndex("AccSystemId");

                    b.HasIndex("BusinessSystemId");

                    b.HasIndex("CommodityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContractAmountId");

                    b.HasIndex("ContractDivisionId");

                    b.HasIndex("ContractId");

                    b.HasIndex("ContractRegionId");

                    b.HasIndex("ContractStateId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("DstConfBy");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("RegisterConfBy");

                    b.HasIndex("ReleaseConfBy");

                    b.HasIndex("SrcConfBy");

                    b.ToTable("ContractOp");
                });

            modelBuilder.Entity("Optima.Fais.Model.ContractRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<int>("ContractId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name");

                    b.Property<string>("UniqueName");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractRegion");
                });

            modelBuilder.Entity("Optima.Fais.Model.CostCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CostCenterId");

                    b.Property<int?>("AdmCenterId");

                    b.Property<int?>("AdministrationId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("DivisionId");

                    b.Property<string>("ERPCode")
                        .HasMaxLength(50);

                    b.Property<int?>("ERPId");

                    b.Property<int?>("EmployeeId");

                    b.Property<int?>("EmployeeId2");

                    b.Property<int?>("EmployeeId3");

                    b.Property<int?>("EmployeeId4");

                    b.Property<int?>("EmployeeId5");

                    b.Property<int?>("EmployeeId6");

                    b.Property<int?>("EmployeeId7");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("LocationId");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("RegionId");

                    b.Property<int?>("RoomId");

                    b.HasKey("Id");

                    b.HasIndex("AdmCenterId");

                    b.HasIndex("AdministrationId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeId2");

                    b.HasIndex("EmployeeId3");

                    b.HasIndex("EmployeeId4");

                    b.HasIndex("EmployeeId5");

                    b.HasIndex("EmployeeId6");

                    b.HasIndex("EmployeeId7");

                    b.HasIndex("LocationId");

                    b.HasIndex("RegionId");

                    b.HasIndex("RoomId");

                    b.ToTable("CostCenter");
                });

            modelBuilder.Entity("Optima.Fais.Model.CostCenterReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CostCenter");

                    b.Property<string>("InvNo");

                    b.Property<string>("Name");

                    b.Property<DateTime>("PurchaseDate");

                    b.Property<string>("SerialNumber");

                    b.HasKey("Id");

                    b.ToTable("CostCenterReports");
                });

            modelBuilder.Entity("Optima.Fais.Model.CostCenterTotal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Administration");

                    b.Property<string>("Code");

                    b.Property<string>("Department");

                    b.Property<string>("Division");

                    b.Property<int>("Initial");

                    b.Property<DateTime?>("LastScan");

                    b.Property<string>("Name");

                    b.Property<decimal>("Procentage");

                    b.Property<string>("Room");

                    b.Property<int>("Scanned");

                    b.Property<decimal>("ValueInv");

                    b.Property<decimal>("ValueRem");

                    b.HasKey("Id");

                    b.ToTable("CostCenterTotals");
                });

            modelBuilder.Entity("Optima.Fais.Model.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CountryId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Optima.Fais.Model.CountryGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Month");

                    b.Property<decimal>("Value");

                    b.Property<decimal>("ValueDep");

                    b.HasKey("Id");

                    b.ToTable("CountryGroups");
                });

            modelBuilder.Entity("Optima.Fais.Model.County", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CountyId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.ToTable("County");
                });

            modelBuilder.Entity("Optima.Fais.Model.DashboardExport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AssetType");

                    b.Property<string>("CostCenterFinalCode");

                    b.Property<string>("CostCenterFinalName");

                    b.Property<string>("CostCenterInitialCode");

                    b.Property<string>("CostCenterInitialName");

                    b.Property<string>("DepartmentFinal");

                    b.Property<string>("DepartmentInitial");

                    b.Property<string>("DivisionFinal");

                    b.Property<string>("DivisionInitial");

                    b.Property<string>("InvNo");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("PurchaseDate");

                    b.Property<string>("SerialNumber");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("DashboardExports");
                });

            modelBuilder.Entity("Optima.Fais.Model.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DepartmentId");

                    b.Property<int?>("ActivityId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("ERPCode")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("TeamLeaderId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TeamLeaderId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("Optima.Fais.Model.DepartmentDynamicGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<decimal>("Fy2019Actual");

                    b.Property<decimal>("Fy2020Actual");

                    b.Property<decimal>("Fy2021Actual");

                    b.Property<decimal>("Fy2022BudgetBase");

                    b.Property<decimal>("Fy2022BudgetDynamic");

                    b.Property<string>("Name");

                    b.Property<int>("Parent");

                    b.Property<string>("Table");

                    b.Property<decimal>("VarPerMonthActual");

                    b.Property<decimal>("VarPerMonthBudget");

                    b.Property<decimal>("VarView12MonthActual");

                    b.Property<decimal>("VarView12MonthBudget");

                    b.Property<decimal>("VarYTDActual");

                    b.Property<decimal>("VarYTDBudget");

                    b.Property<decimal>("ViewPerMonthActual");

                    b.Property<decimal>("ViewPerMonthBudgetBase");

                    b.Property<decimal>("ViewPerMonthBudgetDynamic");

                    b.Property<decimal>("ViewYTDActual");

                    b.Property<decimal>("ViewYTDBudgetBase");

                    b.Property<decimal>("ViewYTDBudgetDynamic");

                    b.HasKey("Id");

                    b.ToTable("DepartmentDynamicGroups");
                });

            modelBuilder.Entity("Optima.Fais.Model.DepartmentReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Department");

                    b.Property<string>("InvNo");

                    b.Property<string>("Name");

                    b.Property<DateTime>("PurchaseDate");

                    b.Property<string>("SerialNumber");

                    b.HasKey("Id");

                    b.ToTable("DepartmentReports");
                });

            modelBuilder.Entity("Optima.Fais.Model.DepartmentTotal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<int>("Initial");

                    b.Property<decimal>("Procentage");

                    b.Property<int>("Scanned");

                    b.Property<decimal>("ValueInv");

                    b.Property<decimal>("ValueRem");

                    b.HasKey("Id");

                    b.ToTable("DepartmentTotals");
                });

            modelBuilder.Entity("Optima.Fais.Model.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeviceId");

                    b.Property<int?>("AssetId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("DeviceTypeId");

                    b.Property<int?>("EmployeeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Model");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Platform");

                    b.Property<string>("Producer");

                    b.Property<string>("Serial");

                    b.Property<string>("Type");

                    b.Property<string>("UUI");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DeviceTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("Optima.Fais.Model.DeviceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeviceTypeId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("DeviceType");
                });

            modelBuilder.Entity("Optima.Fais.Model.DictionaryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("AssetCategoryId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("DictionaryTypeId");

                    b.Property<int?>("ERPId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name2");

                    b.Property<string>("Name3");

                    b.HasKey("Id");

                    b.HasIndex("AssetCategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DictionaryTypeId");

                    b.ToTable("DictionaryItem");
                });

            modelBuilder.Entity("Optima.Fais.Model.DictionaryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("ERPId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("DictionaryType");
                });

            modelBuilder.Entity("Optima.Fais.Model.Dimension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("AssetCategoryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("ERPId");

                    b.Property<string>("Height")
                        .HasMaxLength(30);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Length")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Width")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AssetCategoryId");

                    b.ToTable("Dimension");
                });

            modelBuilder.Entity("Optima.Fais.Model.DimensionERP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("DimensionERPS");
                });

            modelBuilder.Entity("Optima.Fais.Model.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DivisionId");

                    b.Property<int?>("ActivityId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("DepartmentId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("LocationId");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LocationId");

                    b.ToTable("Division");
                });

            modelBuilder.Entity("Optima.Fais.Model.DivisionDynamicGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Division");

                    b.Property<decimal>("Fy2019Actual");

                    b.Property<decimal>("Fy2020Actual");

                    b.Property<decimal>("Fy2021Actual");

                    b.Property<decimal>("Fy2022BudgetBase");

                    b.Property<decimal>("Fy2022BudgetDynamic");

                    b.Property<string>("Name");

                    b.Property<int>("Parent");

                    b.Property<string>("Table");

                    b.Property<decimal>("VarPerMonthActual");

                    b.Property<decimal>("VarPerMonthBudget");

                    b.Property<decimal>("VarView12MonthActual");

                    b.Property<decimal>("VarView12MonthBudget");

                    b.Property<decimal>("VarYTDActual");

                    b.Property<decimal>("VarYTDBudget");

                    b.Property<decimal>("ViewPerMonthActual");

                    b.Property<decimal>("ViewPerMonthBudgetBase");

                    b.Property<decimal>("ViewPerMonthBudgetDynamic");

                    b.Property<decimal>("ViewYTDActual");

                    b.Property<decimal>("ViewYTDBudgetBase");

                    b.Property<decimal>("ViewYTDBudgetDynamic");

                    b.HasKey("Id");

                    b.ToTable("DivisionDynamicGroups");
                });

            modelBuilder.Entity("Optima.Fais.Model.DivisionReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Division");

                    b.Property<string>("InvNo");

                    b.Property<string>("Name");

                    b.Property<DateTime>("PurchaseDate");

                    b.Property<string>("SerialNumber");

                    b.HasKey("Id");

                    b.ToTable("DivisionReports");
                });

            modelBuilder.Entity("Optima.Fais.Model.DivisionTotal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<int>("Initial");

                    b.Property<decimal>("Procentage");

                    b.Property<int>("Scanned");

                    b.Property<decimal>("ValueInv");

                    b.Property<decimal>("ValueRem");

                    b.HasKey("Id");

                    b.ToTable("DivisionTotals");
                });

            modelBuilder.Entity("Optima.Fais.Model.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocumentId");

                    b.Property<bool?>("Approved");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CostCenterId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("date");

                    b.Property<string>("Details")
                        .HasMaxLength(255);

                    b.Property<string>("DocNo1")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("DocNo2")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnType("date");

                    b.Property<int>("DocumentTypeId");

                    b.Property<bool?>("Exported");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("ParentDocumentId");

                    b.Property<int?>("PartnerId");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ValidationDate");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("ParentDocumentId");

                    b.HasIndex("PartnerId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("Optima.Fais.Model.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DocumentTypeId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Mask")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ParentCode")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Prefix")
                        .HasMaxLength(10);

                    b.Property<string>("Suffix")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("DocumentType");
                });

            modelBuilder.Entity("Optima.Fais.Model.EmailManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("AppStateId");

                    b.Property<int?>("AssetComponentId");

                    b.Property<int?>("AssetId");

                    b.Property<int?>("BudgetId");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int>("EmailTypeId");

                    b.Property<int?>("EmployeeIdFinal");

                    b.Property<int?>("EmployeeIdInitial");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("GuidAll");

                    b.Property<string>("Info");

                    b.Property<bool>("IsAccepted");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("OfferId");

                    b.Property<int?>("OrderId");

                    b.Property<int?>("PartnerId");

                    b.Property<int?>("RoomIdFinal");

                    b.Property<int?>("RoomIdInitial");

                    b.Property<int?>("SubTypeId");

                    b.HasKey("Id");

                    b.HasIndex("AppStateId");

                    b.HasIndex("AssetComponentId");

                    b.HasIndex("AssetId");

                    b.HasIndex("BudgetId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmailTypeId");

                    b.HasIndex("EmployeeIdFinal");

                    b.HasIndex("EmployeeIdInitial");

                    b.HasIndex("OfferId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("RoomIdFinal");

                    b.HasIndex("RoomIdInitial");

                    b.HasIndex("SubTypeId");

                    b.ToTable("EmailManager");
                });

            modelBuilder.Entity("Optima.Fais.Model.EmailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("CustomMsg");

                    b.Property<string>("FooterMsg");

                    b.Property<string>("HeaderMsg");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("NotifyEnabled");

                    b.Property<DateTime?>("NotifyEnd");

                    b.Property<int>("NotifyInterval");

                    b.Property<DateTime?>("NotifyLast");

                    b.Property<DateTime?>("NotifyStart");

                    b.Property<string>("UploadFolder")
                        .HasMaxLength(200);

                    b.Property<string>("Year");

                    b.HasKey("Id");

                    b.ToTable("EmailType");
                });

            modelBuilder.Entity("Optima.Fais.Model.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EmployeeId");

                    b.Property<int?>("AdmCenterId");

                    b.Property<int>("AssetCount");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CostCenterId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("DepartmentId");

                    b.Property<int?>("DivisionId");

                    b.Property<string>("ERPCode")
                        .HasMaxLength(50);

                    b.Property<int?>("ERPId");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid>("Guid");

                    b.Property<string>("InternalCode")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<bool>("IsConfirmed");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmailSend");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("NotifyLast");

                    b.HasKey("Id");

                    b.HasIndex("AdmCenterId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DivisionId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Optima.Fais.Model.EmployeeCostCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("CostCenterId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int>("EmployeeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeCostCenter");
                });

            modelBuilder.Entity("Optima.Fais.Model.EmployeeEmailResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<int>("NotifyEnabled");

                    b.Property<DateTime?>("NotifyEnd");

                    b.Property<int>("NotifyInterval");

                    b.Property<DateTime?>("NotifyLast");

                    b.Property<DateTime?>("NotifyStart");

                    b.HasKey("Id");

                    b.ToTable("EmployeeEmailResults");
                });

            modelBuilder.Entity("Optima.Fais.Model.EmployeeNotValidatedEmailResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<int>("NotifyInterval");

                    b.Property<DateTime?>("NotifyLast");

                    b.HasKey("Id");

                    b.ToTable("EmployeeNotValidatedEmailResults");
                });

            modelBuilder.Entity("Optima.Fais.Model.EntityFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EntityFileId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int>("EntityId");

                    b.Property<int>("EntityTypeId");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Info")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("RoomId");

                    b.Property<double>("Size");

                    b.Property<string>("StoredAs")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("EntityTypeId");

                    b.HasIndex("RoomId");

                    b.ToTable("EntityFile");
                });

            modelBuilder.Entity("Optima.Fais.Model.EntityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EntityTypeId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("UploadFolder")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("EntityType");
                });

            modelBuilder.Entity("Optima.Fais.Model.ERPImportResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("ERPImportResults");
                });

            modelBuilder.Entity("Optima.Fais.Model.ExpAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ExpAccount");
                });

            modelBuilder.Entity("Optima.Fais.Model.IconRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("IconRoute");
                });

            modelBuilder.Entity("Optima.Fais.Model.Info", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InfoId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("InfoTypeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("InfoTypeId");

                    b.ToTable("Info");
                });

            modelBuilder.Entity("Optima.Fais.Model.InfoType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InfoTypeId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("InfoType");
                });

            modelBuilder.Entity("Optima.Fais.Model.InsuranceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("InsuranceCategory");
                });

            modelBuilder.Entity("Optima.Fais.Model.InterCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("AccountId");

                    b.Property<int?>("AssetCategoryId");

                    b.Property<int?>("AssetTypeId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("ERPId");

                    b.Property<int?>("ExpAccountId");

                    b.Property<int?>("InterCompanyENId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AssetCategoryId");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ExpAccountId");

                    b.HasIndex("InterCompanyENId");

                    b.ToTable("InterCompany");
                });

            modelBuilder.Entity("Optima.Fais.Model.InterCompanyEN", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("InterCompanyEN");
                });

            modelBuilder.Entity("Optima.Fais.Model.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InventoryId");

                    b.Property<int?>("AccMonthId");

                    b.Property<bool>("Active");

                    b.Property<int?>("AdministrationId");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CostCenterId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("DocumentId");

                    b.Property<int?>("EmployeeId");

                    b.Property<DateTime?>("End")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("RoomId");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("AccMonthId");

                    b.HasIndex("AdministrationId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RoomId");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("Optima.Fais.Model.InventoryAsset", b =>
                {
                    b.Property<int>("InventoryId");

                    b.Property<int>("AssetId");

                    b.Property<int?>("AdministrationIdFinal");

                    b.Property<int?>("AdministrationIdInitial");

                    b.Property<bool>("AllowLabelInitial");

                    b.Property<int?>("AssetRecoStateId");

                    b.Property<int?>("CostCenterIdFinal");

                    b.Property<int?>("CostCenterIdInitial");

                    b.Property<int?>("DetailStateId");

                    b.Property<int?>("DimensionIdFinal");

                    b.Property<int?>("EmployeeIdFinal");

                    b.Property<int?>("EmployeeIdInitial");

                    b.Property<int>("ImageCount");

                    b.Property<string>("Info")
                        .HasMaxLength(200);

                    b.Property<string>("Info2019");

                    b.Property<string>("InfoMinus");

                    b.Property<string>("InfoPlus");

                    b.Property<bool>("IsMinus");

                    b.Property<bool>("IsPlus");

                    b.Property<bool>("IsReconcile");

                    b.Property<bool?>("IsTemp");

                    b.Property<string>("Model")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Producer")
                        .HasMaxLength(100);

                    b.Property<float>("QFinal");

                    b.Property<float>("QInitial");

                    b.Property<int?>("RoomIdFinal");

                    b.Property<int?>("RoomIdInitial");

                    b.Property<string>("SNInitial");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(50);

                    b.Property<int?>("StateIdFinal");

                    b.Property<int?>("StateIdInitial");

                    b.Property<string>("TempName");

                    b.Property<string>("TempReco");

                    b.Property<int?>("UomIdFinal");

                    b.HasKey("InventoryId", "AssetId");

                    b.HasIndex("AdministrationIdFinal");

                    b.HasIndex("AdministrationIdInitial");

                    b.HasIndex("AssetId")
                        .IsUnique();

                    b.HasIndex("AssetRecoStateId");

                    b.HasIndex("CostCenterIdFinal");

                    b.HasIndex("CostCenterIdInitial");

                    b.HasIndex("DetailStateId");

                    b.HasIndex("DimensionIdFinal");

                    b.HasIndex("EmployeeIdFinal");

                    b.HasIndex("EmployeeIdInitial");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("RoomIdFinal");

                    b.HasIndex("RoomIdInitial");

                    b.HasIndex("StateIdFinal");

                    b.HasIndex("StateIdInitial");

                    b.HasIndex("UomIdFinal");

                    b.ToTable("InventoryAsset");
                });

            modelBuilder.Entity("Optima.Fais.Model.InventoryChartProcentage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Initial");

                    b.Property<string>("LocationCode");

                    b.Property<string>("LocationName");

                    b.Property<decimal>("Procentage");

                    b.Property<int>("Scanned");

                    b.HasKey("Id");

                    b.ToTable("InventoryChartProcentages");
                });

            modelBuilder.Entity("Optima.Fais.Model.InventoryEmployeeProcentage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DivisionCode");

                    b.Property<string>("DivisionName");

                    b.Property<int>("IsFinished");

                    b.Property<decimal>("Procentage");

                    b.Property<int>("Scanned");

                    b.Property<int>("Total");

                    b.HasKey("Id");

                    b.ToTable("InventoryEmployeeProcentages");
                });

            modelBuilder.Entity("Optima.Fais.Model.InventoryListApn", b =>
                {
                    b.Property<int>("AssetId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AssetCategory");

                    b.Property<string>("AssetStateFinal");

                    b.Property<string>("AssetStateInitial");

                    b.Property<string>("CostCenterNameFinal");

                    b.Property<string>("CostCenterNameInitial");

                    b.Property<string>("Description");

                    b.Property<string>("GpsCoordinates");

                    b.Property<string>("Info");

                    b.Property<string>("InvNo");

                    b.Property<string>("InvNoParent");

                    b.Property<DateTime?>("InventoryDate");

                    b.Property<string>("LocationNameFinal");

                    b.Property<string>("LocationNameInitial");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<float>("QFinal");

                    b.Property<float>("Qinitial");

                    b.Property<string>("RoomCodeFinal");

                    b.Property<string>("RoomCodeInitial");

                    b.Property<string>("RoomNameFinal");

                    b.Property<string>("RoomNameInitial");

                    b.Property<string>("SerialNumber");

                    b.Property<string>("StoredAs");

                    b.Property<string>("StreetCodeFinal");

                    b.Property<string>("StreetCodeInitial");

                    b.Property<string>("StreetNameFinal");

                    b.Property<string>("StreetNameInitial");

                    b.Property<string>("Um");

                    b.Property<string>("UserEmployeeFullNameFinal");

                    b.Property<string>("UserEmployeeFullNameInitial");

                    b.Property<string>("UserEmployeeInternalCodeFinal");

                    b.Property<string>("UserEmployeeInternalCodeInitial");

                    b.HasKey("AssetId");

                    b.ToTable("InventoryListApns");
                });

            modelBuilder.Entity("Optima.Fais.Model.InventoryLocationProcentage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IsFinished");

                    b.Property<string>("LocationCode");

                    b.Property<string>("LocationName");

                    b.Property<decimal>("Procentage");

                    b.Property<int>("Scanned");

                    b.Property<int>("Total");

                    b.HasKey("Id");

                    b.ToTable("InventoryLocationProcentage");
                });

            modelBuilder.Entity("Optima.Fais.Model.InventoryPieChartByDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ScanDate");

                    b.Property<int>("Scanned");

                    b.HasKey("Id");

                    b.ToTable("InventoryPieChartByDays");
                });

            modelBuilder.Entity("Optima.Fais.Model.InventoryRegionProcentage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IsFinished");

                    b.Property<decimal>("Procentage");

                    b.Property<string>("RegionCode");

                    b.Property<string>("RegionName");

                    b.Property<int>("Scanned");

                    b.Property<int>("Total");

                    b.HasKey("Id");

                    b.ToTable("InventoryRegionProcentages");
                });

            modelBuilder.Entity("Optima.Fais.Model.InventoryReportByAdmCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdmCenterCode");

                    b.Property<string>("AdmCenterName");

                    b.Property<decimal>("Procentage");

                    b.Property<int>("Scanned");

                    b.Property<int>("Total");

                    b.HasKey("Id");

                    b.ToTable("InventoryReportByAdmCenters");
                });

            modelBuilder.Entity("Optima.Fais.Model.InventoryRoomProcentage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdministrationCode");

                    b.Property<string>("AdministrationName");

                    b.Property<int>("IsFinished");

                    b.Property<decimal>("Procentage");

                    b.Property<int>("Scanned");

                    b.Property<int>("Total");

                    b.HasKey("Id");

                    b.ToTable("InventoryRoomProcentages");
                });

            modelBuilder.Entity("Optima.Fais.Model.InventoryTotal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Initial");

                    b.Property<decimal>("Procentage");

                    b.Property<int>("Scanned");

                    b.Property<decimal>("ValueInv");

                    b.HasKey("Id");

                    b.ToTable("InventoryTotals");
                });

            modelBuilder.Entity("Optima.Fais.Model.InventoryUserBuildingScanDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Data");

                    b.Property<string>("Hour");

                    b.Property<string>("LocationName");

                    b.Property<string>("RegionName");

                    b.Property<string>("UserEmail");

                    b.Property<string>("UserFirstName");

                    b.Property<string>("UserLastName");

                    b.HasKey("Id");

                    b.ToTable("InventoryUserBuildingScanDetails");
                });

            modelBuilder.Entity("Optima.Fais.Model.InvState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InvStateId");

                    b.Property<string>("Code")
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Mask")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("ParentCode")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("InvState");
                });

            modelBuilder.Entity("Optima.Fais.Model.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LocationId");

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<int?>("AdmCenterId");

                    b.Property<int>("AssetCount");

                    b.Property<int?>("CityId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("ERPCode")
                        .HasMaxLength(50);

                    b.Property<int>("ImageCount");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("Latitude");

                    b.Property<int?>("LocationTypeId");

                    b.Property<decimal>("Longitude");

                    b.Property<string>("Member1");

                    b.Property<string>("Member2");

                    b.Property<string>("Member3");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Prefix")
                        .HasMaxLength(30);

                    b.Property<int?>("RegionId");

                    b.HasKey("Id");

                    b.HasIndex("AdmCenterId");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LocationTypeId");

                    b.HasIndex("RegionId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Optima.Fais.Model.LocationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.ToTable("LocationStatus");
                });

            modelBuilder.Entity("Optima.Fais.Model.LocationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LocationTypeId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("LocationType");
                });

            modelBuilder.Entity("Optima.Fais.Model.MasterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("MasterType");
                });

            modelBuilder.Entity("Optima.Fais.Model.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("AccountId");

                    b.Property<int?>("AssetCategoryId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("EAN");

                    b.Property<int?>("ExpAccountId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("MaterialTypeId");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("PartNumber");

                    b.Property<decimal>("Price");

                    b.Property<decimal>("Quantity");

                    b.Property<int?>("SubCategoryENId");

                    b.Property<int?>("SubCategoryId");

                    b.Property<int?>("SubTypeId");

                    b.Property<decimal>("Value");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AssetCategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ExpAccountId");

                    b.HasIndex("MaterialTypeId");

                    b.HasIndex("SubCategoryENId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("SubTypeId");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("Optima.Fais.Model.MaterialType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MaterialTypeId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("MaterialType");
                });

            modelBuilder.Entity("Optima.Fais.Model.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssetCount");

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Model");
                });

            modelBuilder.Entity("Optima.Fais.Model.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("AccMonthId");

                    b.Property<int?>("AccountId");

                    b.Property<int?>("AdmCenterId");

                    b.Property<int?>("AdministrationId");

                    b.Property<int?>("AppStateId");

                    b.Property<int?>("AssetTypeId");

                    b.Property<int?>("BudgetId");

                    b.Property<int?>("BudgetManagerId");

                    b.Property<string>("Code")
                        .HasMaxLength(120);

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CostCenterId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("EmployeeId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Info")
                        .HasMaxLength(120);

                    b.Property<int?>("InterCompanyId");

                    b.Property<bool>("IsAccepted");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnabled");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .HasMaxLength(120);

                    b.Property<int?>("PartnerId");

                    b.Property<decimal>("Price");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("ProjectTypeId");

                    b.Property<float>("Quantity");

                    b.Property<float>("QuantityRem");

                    b.Property<int?>("RateId");

                    b.Property<int?>("RegionId");

                    b.Property<int?>("RequestId");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("SubTypeId");

                    b.Property<int?>("UomId");

                    b.Property<string>("UserId")
                        .HasMaxLength(450);

                    b.Property<bool>("Validated");

                    b.Property<decimal>("ValueFin")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("ValueIni")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("Id");

                    b.HasIndex("AccMonthId");

                    b.HasIndex("AccountId");

                    b.HasIndex("AdmCenterId");

                    b.HasIndex("AdministrationId");

                    b.HasIndex("AppStateId");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("BudgetId");

                    b.HasIndex("BudgetManagerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("InterCompanyId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectTypeId");

                    b.HasIndex("RateId");

                    b.HasIndex("RegionId");

                    b.HasIndex("RequestId");

                    b.HasIndex("SubTypeId");

                    b.HasIndex("UomId");

                    b.HasIndex("UserId");

                    b.ToTable("Offer");
                });

            modelBuilder.Entity("Optima.Fais.Model.OfferMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("AppStateId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int>("EmailManagerId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MaterialId");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<int>("OfferId");

                    b.Property<decimal>("OrdersPrice");

                    b.Property<decimal>("OrdersQuantity");

                    b.Property<decimal>("OrdersValue");

                    b.Property<decimal>("Price");

                    b.Property<decimal>("PriceIni");

                    b.Property<decimal>("Quantity");

                    b.Property<decimal>("QuantityIni");

                    b.Property<int?>("RateId");

                    b.Property<decimal>("ReceptionsPrice");

                    b.Property<decimal>("ReceptionsQuantity");

                    b.Property<decimal>("ReceptionsValue");

                    b.Property<int?>("RequestId");

                    b.Property<decimal>("Value");

                    b.Property<decimal>("ValueIni");

                    b.HasKey("Id");

                    b.HasIndex("AppStateId");

                    b.HasIndex("EmailManagerId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("OfferId");

                    b.HasIndex("RateId");

                    b.HasIndex("RequestId");

                    b.ToTable("OfferMaterial");
                });

            modelBuilder.Entity("Optima.Fais.Model.OfferOp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("AccMonthId");

                    b.Property<int?>("AccSystemId");

                    b.Property<int?>("AccountIdFinal");

                    b.Property<int?>("AccountIdInitial");

                    b.Property<int?>("AdmCenterIdFinal");

                    b.Property<int?>("AdmCenterIdInitial");

                    b.Property<int?>("AdministrationIdFinal");

                    b.Property<int?>("AdministrationIdInitial");

                    b.Property<int?>("AssetTypeIdFinal");

                    b.Property<int?>("AssetTypeIdInitial");

                    b.Property<int?>("BudgetFinalId");

                    b.Property<int?>("BudgetIdFinal");

                    b.Property<int?>("BudgetIdInitial");

                    b.Property<int?>("BudgetInitialId");

                    b.Property<int?>("BudgetManagerIdFinal");

                    b.Property<int?>("BudgetManagerIdInitial");

                    b.Property<int?>("BudgetStateId");

                    b.Property<int?>("CompanyIdFinal");

                    b.Property<int?>("CompanyIdInitial");

                    b.Property<int?>("CostCenterIdFinal");

                    b.Property<int?>("CostCenterIdInitial");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int>("DocumentId");

                    b.Property<DateTime?>("DstConfAt");

                    b.Property<string>("DstConfBy")
                        .HasMaxLength(450);

                    b.Property<int?>("EmployeeIdFinal");

                    b.Property<int?>("EmployeeIdInitial");

                    b.Property<Guid>("Guid");

                    b.Property<string>("InfoFin")
                        .HasMaxLength(450);

                    b.Property<string>("InfoIni")
                        .HasMaxLength(450);

                    b.Property<int?>("InterCompanyIdFinal");

                    b.Property<int?>("InterCompanyIdInitial");

                    b.Property<bool>("IsAccepted");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<int>("OfferId");

                    b.Property<int?>("PartnerIdFinal");

                    b.Property<int?>("PartnerIdInitial");

                    b.Property<int?>("ProjectIdFinal");

                    b.Property<int?>("ProjectIdInitial");

                    b.Property<int?>("ProjectTypeIdFinal");

                    b.Property<int?>("ProjectTypeIdInitial");

                    b.Property<float>("QuantityFin");

                    b.Property<float>("QuantityIni");

                    b.Property<int?>("RegionIdFinal");

                    b.Property<int?>("RegionIdInitial");

                    b.Property<DateTime?>("RegisterConfAt");

                    b.Property<string>("RegisterConfBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("ReleaseConfAt");

                    b.Property<string>("ReleaseConfBy")
                        .HasMaxLength(450);

                    b.Property<int?>("RequestId");

                    b.Property<DateTime?>("SrcConfAt");

                    b.Property<string>("SrcConfBy")
                        .HasMaxLength(450);

                    b.Property<int?>("SubTypeIdFinal");

                    b.Property<int?>("SubTypeIdInitial");

                    b.Property<int?>("UomId");

                    b.Property<bool>("Validated");

                    b.Property<decimal>("ValueFin1");

                    b.Property<decimal>("ValueFin2");

                    b.Property<decimal>("ValueIni1");

                    b.Property<decimal>("ValueIni2");

                    b.HasKey("Id");

                    b.HasIndex("AccMonthId");

                    b.HasIndex("AccSystemId");

                    b.HasIndex("AccountIdFinal");

                    b.HasIndex("AccountIdInitial");

                    b.HasIndex("AdmCenterIdFinal");

                    b.HasIndex("AdmCenterIdInitial");

                    b.HasIndex("AdministrationIdFinal");

                    b.HasIndex("AdministrationIdInitial");

                    b.HasIndex("AssetTypeIdFinal");

                    b.HasIndex("AssetTypeIdInitial");

                    b.HasIndex("BudgetFinalId");

                    b.HasIndex("BudgetInitialId");

                    b.HasIndex("BudgetManagerIdFinal");

                    b.HasIndex("BudgetManagerIdInitial");

                    b.HasIndex("BudgetStateId");

                    b.HasIndex("CompanyIdFinal");

                    b.HasIndex("CompanyIdInitial");

                    b.HasIndex("CostCenterIdFinal");

                    b.HasIndex("CostCenterIdInitial");

                    b.HasIndex("DocumentId");

                    b.HasIndex("DstConfBy");

                    b.HasIndex("EmployeeIdFinal");

                    b.HasIndex("EmployeeIdInitial");

                    b.HasIndex("InterCompanyIdFinal");

                    b.HasIndex("InterCompanyIdInitial");

                    b.HasIndex("OfferId");

                    b.HasIndex("PartnerIdFinal");

                    b.HasIndex("PartnerIdInitial");

                    b.HasIndex("ProjectIdFinal");

                    b.HasIndex("ProjectIdInitial");

                    b.HasIndex("ProjectTypeIdFinal");

                    b.HasIndex("ProjectTypeIdInitial");

                    b.HasIndex("RegionIdFinal");

                    b.HasIndex("RegionIdInitial");

                    b.HasIndex("RegisterConfBy");

                    b.HasIndex("ReleaseConfBy");

                    b.HasIndex("RequestId");

                    b.HasIndex("SrcConfBy");

                    b.HasIndex("SubTypeIdFinal");

                    b.HasIndex("SubTypeIdInitial");

                    b.HasIndex("UomId");

                    b.ToTable("OfferOp");
                });

            modelBuilder.Entity("Optima.Fais.Model.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("AccMonthId");

                    b.Property<int?>("AccountId");

                    b.Property<int?>("AdministrationId");

                    b.Property<int?>("AppStateId");

                    b.Property<int?>("BudgetId");

                    b.Property<int?>("BudgetManagerId");

                    b.Property<string>("Code")
                        .HasMaxLength(120);

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("ContractId");

                    b.Property<int?>("CostCenterId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("EmployeeId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Info")
                        .HasMaxLength(120);

                    b.Property<int?>("InterCompanyId");

                    b.Property<bool>("IsAccepted");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnabled");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .HasMaxLength(120);

                    b.Property<int?>("OfferId");

                    b.Property<int?>("PartnerId");

                    b.Property<decimal>("Price");

                    b.Property<int?>("ProjectId");

                    b.Property<float>("Quantity");

                    b.Property<float>("QuantityRem");

                    b.Property<int?>("RateId");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("SubTypeId");

                    b.Property<int?>("UomId");

                    b.Property<string>("UserId")
                        .HasMaxLength(450);

                    b.Property<bool>("Validated");

                    b.Property<decimal>("ValueFin")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("ValueIni")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("Id");

                    b.HasIndex("AccMonthId");

                    b.HasIndex("AccountId");

                    b.HasIndex("AdministrationId");

                    b.HasIndex("AppStateId");

                    b.HasIndex("BudgetId");

                    b.HasIndex("BudgetManagerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContractId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("InterCompanyId");

                    b.HasIndex("OfferId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RateId");

                    b.HasIndex("SubTypeId");

                    b.HasIndex("UomId");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Optima.Fais.Model.OrderMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int>("AppStateId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("MaterialId");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<int>("OrderId");

                    b.Property<decimal>("OrdersPrice");

                    b.Property<decimal>("OrdersQuantity");

                    b.Property<decimal>("OrdersValue");

                    b.Property<decimal>("Price");

                    b.Property<decimal>("PriceIni");

                    b.Property<decimal>("Quantity");

                    b.Property<decimal>("QuantityIni");

                    b.Property<int?>("RateId");

                    b.Property<decimal>("ReceptionsPrice");

                    b.Property<decimal>("ReceptionsQuantity");

                    b.Property<decimal>("ReceptionsValue");

                    b.Property<decimal>("Value");

                    b.Property<decimal>("ValueIni");

                    b.HasKey("Id");

                    b.HasIndex("AppStateId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("OrderId");

                    b.HasIndex("RateId");

                    b.ToTable("OrderMaterial");
                });

            modelBuilder.Entity("Optima.Fais.Model.OrderOp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("AccMonthId");

                    b.Property<int?>("AccSystemId");

                    b.Property<int?>("AccountIdFinal");

                    b.Property<int?>("AccountIdInitial");

                    b.Property<int?>("AdministrationIdFinal");

                    b.Property<int?>("AdministrationIdInitial");

                    b.Property<int?>("BudgetFinalId");

                    b.Property<int?>("BudgetIdFinal");

                    b.Property<int?>("BudgetIdInitial");

                    b.Property<int?>("BudgetInitialId");

                    b.Property<int?>("BudgetManagerIdFinal");

                    b.Property<int?>("BudgetManagerIdInitial");

                    b.Property<int?>("BudgetStateId");

                    b.Property<int?>("CompanyIdFinal");

                    b.Property<int?>("CompanyIdInitial");

                    b.Property<int?>("CostCenterIdFinal");

                    b.Property<int?>("CostCenterIdInitial");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int>("DocumentId");

                    b.Property<DateTime?>("DstConfAt");

                    b.Property<string>("DstConfBy")
                        .HasMaxLength(450);

                    b.Property<int?>("EmployeeIdFinal");

                    b.Property<int?>("EmployeeIdInitial");

                    b.Property<Guid>("Guid");

                    b.Property<string>("InfoFin")
                        .HasMaxLength(450);

                    b.Property<string>("InfoIni")
                        .HasMaxLength(450);

                    b.Property<int?>("InterCompanyIdFinal");

                    b.Property<int?>("InterCompanyIdInitial");

                    b.Property<bool>("IsAccepted");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("OfferFinalId");

                    b.Property<int?>("OfferIdFinal");

                    b.Property<int?>("OfferIdInitial");

                    b.Property<int?>("OfferInitialId");

                    b.Property<int>("OrderId");

                    b.Property<int?>("PartnerIdFinal");

                    b.Property<int?>("PartnerIdInitial");

                    b.Property<int?>("ProjectIdFinal");

                    b.Property<int?>("ProjectIdInitial");

                    b.Property<float>("QuantityFin");

                    b.Property<float>("QuantityIni");

                    b.Property<DateTime?>("RegisterConfAt");

                    b.Property<string>("RegisterConfBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("ReleaseConfAt");

                    b.Property<string>("ReleaseConfBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("SrcConfAt");

                    b.Property<string>("SrcConfBy")
                        .HasMaxLength(450);

                    b.Property<int?>("SubTypeIdFinal");

                    b.Property<int?>("SubTypeIdInitial");

                    b.Property<int?>("UomId");

                    b.Property<bool>("Validated");

                    b.Property<decimal>("ValueFin1");

                    b.Property<decimal>("ValueFin2");

                    b.Property<decimal>("ValueIni1");

                    b.Property<decimal>("ValueIni2");

                    b.HasKey("Id");

                    b.HasIndex("AccMonthId");

                    b.HasIndex("AccSystemId");

                    b.HasIndex("AccountIdFinal");

                    b.HasIndex("AccountIdInitial");

                    b.HasIndex("AdministrationIdFinal");

                    b.HasIndex("AdministrationIdInitial");

                    b.HasIndex("BudgetFinalId");

                    b.HasIndex("BudgetInitialId");

                    b.HasIndex("BudgetManagerIdFinal");

                    b.HasIndex("BudgetManagerIdInitial");

                    b.HasIndex("BudgetStateId");

                    b.HasIndex("CompanyIdFinal");

                    b.HasIndex("CompanyIdInitial");

                    b.HasIndex("CostCenterIdFinal");

                    b.HasIndex("CostCenterIdInitial");

                    b.HasIndex("DocumentId");

                    b.HasIndex("DstConfBy");

                    b.HasIndex("EmployeeIdFinal");

                    b.HasIndex("EmployeeIdInitial");

                    b.HasIndex("InterCompanyIdFinal");

                    b.HasIndex("InterCompanyIdInitial");

                    b.HasIndex("OfferFinalId");

                    b.HasIndex("OfferInitialId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PartnerIdFinal");

                    b.HasIndex("PartnerIdInitial");

                    b.HasIndex("ProjectIdFinal");

                    b.HasIndex("ProjectIdInitial");

                    b.HasIndex("RegisterConfBy");

                    b.HasIndex("ReleaseConfBy");

                    b.HasIndex("SrcConfBy");

                    b.HasIndex("SubTypeIdFinal");

                    b.HasIndex("SubTypeIdInitial");

                    b.HasIndex("UomId");

                    b.ToTable("OrderOp");
                });

            modelBuilder.Entity("Optima.Fais.Model.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OwnerId");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<int?>("EmployeeId");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("FullName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("OrgANId");

                    b.Property<string>("OrgName");

                    b.Property<string>("Organization");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Owner");
                });

            modelBuilder.Entity("Optima.Fais.Model.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PartnerId");

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<int?>("AddressDetailId");

                    b.Property<string>("Bank")
                        .HasMaxLength(100);

                    b.Property<string>("BankAccount")
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("ERPId");

                    b.Property<string>("ErpCode")
                        .HasMaxLength(30);

                    b.Property<string>("FiscalCode")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("InterCompanyId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("PartnerLocationId");

                    b.Property<string>("PayingAccount")
                        .HasMaxLength(30);

                    b.Property<string>("RegistryNumber")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("SubTypeId");

                    b.HasKey("Id");

                    b.HasIndex("AddressDetailId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("InterCompanyId");

                    b.HasIndex("PartnerLocationId");

                    b.HasIndex("SubTypeId");

                    b.ToTable("Partner");
                });

            modelBuilder.Entity("Optima.Fais.Model.PartnerLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<int?>("AddressDetailId");

                    b.Property<string>("Bank")
                        .HasMaxLength(100);

                    b.Property<string>("BankAccount")
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("ERPId");

                    b.Property<string>("ErpCode")
                        .HasMaxLength(30);

                    b.Property<string>("FiscalCode")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PayingAccount")
                        .HasMaxLength(30);

                    b.Property<string>("RegistryNumber")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("AddressDetailId");

                    b.HasIndex("CompanyId");

                    b.ToTable("PartnerLocation");
                });

            modelBuilder.Entity("Optima.Fais.Model.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int?>("PermissionTypeId");

                    b.HasKey("Id");

                    b.HasIndex("PermissionTypeId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Optima.Fais.Model.PermissionRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int?>("PermissionId");

                    b.Property<int?>("PermissionTypeId");

                    b.Property<string>("RoleId");

                    b.Property<int?>("RouteId");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("PermissionTypeId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RouteId");

                    b.ToTable("PermissionRole");
                });

            modelBuilder.Entity("Optima.Fais.Model.PermissionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("PermissionType");
                });

            modelBuilder.Entity("Optima.Fais.Model.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("ERPId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name");

                    b.Property<int?>("ProjectTypeId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProjectTypeId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Optima.Fais.Model.ProjectDynamicGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<decimal>("Fy2019Act");

                    b.Property<decimal>("Fy2020Act");

                    b.Property<decimal>("Fy2021Act");

                    b.Property<decimal>("Fy2022Budget");

                    b.Property<decimal>("Fy2022BudgetRem");

                    b.Property<string>("Name");

                    b.Property<int>("Parent");

                    b.Property<string>("Project");

                    b.Property<string>("Table");

                    b.HasKey("Id");

                    b.ToTable("ProjectDynamicGroups");
                });

            modelBuilder.Entity("Optima.Fais.Model.ProjectGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Month");

                    b.Property<decimal>("Value");

                    b.Property<decimal>("ValueDep");

                    b.HasKey("Id");

                    b.ToTable("ProjectGroups");
                });

            modelBuilder.Entity("Optima.Fais.Model.ProjectTotal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<int>("Initial");

                    b.Property<decimal>("Procentage");

                    b.Property<int>("Scanned");

                    b.Property<decimal>("ValueInv");

                    b.Property<decimal>("ValueRem");

                    b.HasKey("Id");

                    b.ToTable("ProjectTotals");
                });

            modelBuilder.Entity("Optima.Fais.Model.ProjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProjectTypeId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ProjectType");
                });

            modelBuilder.Entity("Optima.Fais.Model.ProjectTypeDynamicGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<decimal>("Fy2019Actual");

                    b.Property<decimal>("Fy2020Actual");

                    b.Property<decimal>("Fy2021Actual");

                    b.Property<decimal>("Fy2022BudgetBase");

                    b.Property<decimal>("Fy2022BudgetDynamic");

                    b.Property<string>("Name");

                    b.Property<int>("Parent");

                    b.Property<string>("ProjectType");

                    b.Property<string>("Table");

                    b.Property<decimal>("VarPerMonthActual");

                    b.Property<decimal>("VarPerMonthBudget");

                    b.Property<decimal>("VarView12MonthActual");

                    b.Property<decimal>("VarView12MonthBudget");

                    b.Property<decimal>("VarYTDActual");

                    b.Property<decimal>("VarYTDBudget");

                    b.Property<decimal>("ViewPerMonthActual");

                    b.Property<decimal>("ViewPerMonthBudgetBase");

                    b.Property<decimal>("ViewPerMonthBudgetDynamic");

                    b.Property<decimal>("ViewYTDActual");

                    b.Property<decimal>("ViewYTDBudgetBase");

                    b.Property<decimal>("ViewYTDBudgetDynamic");

                    b.HasKey("Id");

                    b.ToTable("ProjectTypeDynamicGroups");
                });

            modelBuilder.Entity("Optima.Fais.Model.Rate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RateId");

                    b.Property<int?>("AccMonthId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("UomId");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("Id");

                    b.HasIndex("AccMonthId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UomId");

                    b.ToTable("Rate");
                });

            modelBuilder.Entity("Optima.Fais.Model.RecordCount", b =>
                {
                    b.Property<int>("Count")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Count");

                    b.ToTable("RecordCounts");
                });

            modelBuilder.Entity("Optima.Fais.Model.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RegionId");

                    b.Property<int>("AssetCount");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("Optima.Fais.Model.RegionDynamicGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<decimal>("Fy2019Actual");

                    b.Property<decimal>("Fy2020Actual");

                    b.Property<decimal>("Fy2021Actual");

                    b.Property<decimal>("Fy2022BudgetBase");

                    b.Property<decimal>("Fy2022BudgetDynamic");

                    b.Property<string>("Name");

                    b.Property<int>("Parent");

                    b.Property<string>("Region");

                    b.Property<string>("Table");

                    b.Property<decimal>("VarPerMonthActual");

                    b.Property<decimal>("VarPerMonthBudget");

                    b.Property<decimal>("VarView12MonthActual");

                    b.Property<decimal>("VarView12MonthBudget");

                    b.Property<decimal>("VarYTDActual");

                    b.Property<decimal>("VarYTDBudget");

                    b.Property<decimal>("ViewPerMonthActual");

                    b.Property<decimal>("ViewPerMonthBudgetBase");

                    b.Property<decimal>("ViewPerMonthBudgetDynamic");

                    b.Property<decimal>("ViewYTDActual");

                    b.Property<decimal>("ViewYTDBudgetBase");

                    b.Property<decimal>("ViewYTDBudgetDynamic");

                    b.HasKey("Id");

                    b.ToTable("RegionDynamicGroups");
                });

            modelBuilder.Entity("Optima.Fais.Model.RegionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Month");

                    b.Property<decimal>("Value");

                    b.Property<decimal>("ValueDep");

                    b.HasKey("Id");

                    b.ToTable("RegionGroups");
                });

            modelBuilder.Entity("Optima.Fais.Model.Reporting.InventoryListEmail", b =>
                {
                    b.Property<int>("AssetId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AppState");

                    b.Property<string>("Brand");

                    b.Property<string>("Description");

                    b.Property<string>("FullName");

                    b.Property<string>("InternalCode");

                    b.Property<string>("InvNo");

                    b.Property<string>("MasterType");

                    b.Property<string>("Model");

                    b.Property<DateTime?>("PurchaseDate");

                    b.Property<string>("Reason");

                    b.Property<string>("SerialNumber");

                    b.Property<string>("Type");

                    b.Property<decimal>("ValueDep");

                    b.HasKey("AssetId");

                    b.ToTable("InventoryListEmails");
                });

            modelBuilder.Entity("Optima.Fais.Model.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("AccMonthId");

                    b.Property<int?>("AppStateId");

                    b.Property<int?>("BudgetId");

                    b.Property<int?>("BudgetManagerId");

                    b.Property<string>("Code")
                        .HasMaxLength(120);

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CostCenterId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("EmployeeId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Info")
                        .HasMaxLength(450);

                    b.Property<bool>("IsAccepted");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .HasMaxLength(450);

                    b.Property<int?>("ProjectId");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("UserId")
                        .HasMaxLength(450);

                    b.Property<bool>("Validated");

                    b.HasKey("Id");

                    b.HasIndex("AccMonthId");

                    b.HasIndex("AppStateId");

                    b.HasIndex("BudgetId");

                    b.HasIndex("BudgetManagerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("Optima.Fais.Model.RequestOp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("AccMonthId");

                    b.Property<int?>("AccSystemId");

                    b.Property<int?>("BudgetIdFinal");

                    b.Property<int?>("BudgetIdInitial");

                    b.Property<int?>("BudgetManagerId");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CostCenterIdFinal");

                    b.Property<int?>("CostCenterIdInitial");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int>("DocumentId");

                    b.Property<DateTime?>("DstConfAt");

                    b.Property<string>("DstConfBy")
                        .HasMaxLength(450);

                    b.Property<int?>("EmployeeIdFinal");

                    b.Property<int?>("EmployeeIdInitial");

                    b.Property<Guid>("Guid");

                    b.Property<string>("InfoFin")
                        .HasMaxLength(450);

                    b.Property<string>("InfoIni")
                        .HasMaxLength(450);

                    b.Property<bool>("IsAccepted");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("ProjectIdFinal");

                    b.Property<int?>("ProjectIdInitial");

                    b.Property<DateTime?>("RegisterConfAt");

                    b.Property<string>("RegisterConfBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("ReleaseConfAt");

                    b.Property<string>("ReleaseConfBy")
                        .HasMaxLength(450);

                    b.Property<int>("RequestId");

                    b.Property<int?>("RequestStateId");

                    b.Property<DateTime?>("SrcConfAt");

                    b.Property<string>("SrcConfBy")
                        .HasMaxLength(450);

                    b.Property<bool>("Validated");

                    b.HasKey("Id");

                    b.HasIndex("AccMonthId");

                    b.HasIndex("AccSystemId");

                    b.HasIndex("BudgetIdFinal");

                    b.HasIndex("BudgetIdInitial");

                    b.HasIndex("BudgetManagerId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CostCenterIdFinal");

                    b.HasIndex("CostCenterIdInitial");

                    b.HasIndex("DocumentId");

                    b.HasIndex("DstConfBy");

                    b.HasIndex("EmployeeIdFinal");

                    b.HasIndex("EmployeeIdInitial");

                    b.HasIndex("ProjectIdFinal");

                    b.HasIndex("ProjectIdInitial");

                    b.HasIndex("RegisterConfBy");

                    b.HasIndex("ReleaseConfBy");

                    b.HasIndex("RequestId");

                    b.HasIndex("RequestStateId");

                    b.HasIndex("SrcConfBy");

                    b.ToTable("RequestOp");
                });

            modelBuilder.Entity("Optima.Fais.Model.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoomId");

                    b.Property<int>("AssetCount");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("ERPCode")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFinished");

                    b.Property<int>("LocationId");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("ParentRoomId");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ParentRoomId");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("Optima.Fais.Model.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<bool>("Active");

                    b.Property<int?>("BadgeId");

                    b.Property<string>("Class");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("Divider");

                    b.Property<string>("Href")
                        .HasMaxLength(100);

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("IconRouteId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name");

                    b.Property<int>("Position");

                    b.Property<string>("RoleId");

                    b.Property<bool>("Title");

                    b.Property<string>("Url");

                    b.Property<string>("Variant");

                    b.HasKey("Id");

                    b.HasIndex("BadgeId");

                    b.HasIndex("IconRouteId");

                    b.HasIndex("RoleId");

                    b.ToTable("Route");
                });

            modelBuilder.Entity("Optima.Fais.Model.RouteChildren", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<bool>("Active");

                    b.Property<int?>("BadgeId");

                    b.Property<string>("Class");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("Divider");

                    b.Property<string>("Href")
                        .HasMaxLength(100);

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("IconRouteId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name");

                    b.Property<int>("Position");

                    b.Property<string>("RoleId");

                    b.Property<int?>("RouteId");

                    b.Property<bool>("Title");

                    b.Property<string>("Url");

                    b.Property<string>("Variant");

                    b.HasKey("Id");

                    b.HasIndex("BadgeId");

                    b.HasIndex("IconRouteId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RouteId");

                    b.ToTable("RouteChildren");
                });

            modelBuilder.Entity("Optima.Fais.Model.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("BrandId");

                    b.Property<int?>("CategoryId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("Last_Incoming_Date");

                    b.Property<string>("LongName")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int?>("MaterialId");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int?>("PartnerId");

                    b.Property<string>("Plant");

                    b.Property<decimal>("Quantity");

                    b.Property<string>("Storage_Location");

                    b.Property<string>("UM");

                    b.Property<int?>("UomId");

                    b.Property<decimal>("Value");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("UomId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("Optima.Fais.Model.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CategoryENId");

                    b.Property<int?>("CategoryId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CategoryENId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.ToTable("SubCategory");
                });

            modelBuilder.Entity("Optima.Fais.Model.SubCategoryEN", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("CategoryENId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CategoryENId");

                    b.HasIndex("CompanyId");

                    b.ToTable("SubCategoryEN");
                });

            modelBuilder.Entity("Optima.Fais.Model.SubType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name");

                    b.Property<int?>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("SubType");
                });

            modelBuilder.Entity("Optima.Fais.Model.SubTypePartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<int>("PartnerId");

                    b.Property<int>("SubTypeId");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.HasIndex("SubTypeId");

                    b.ToTable("SubTypePartner");
                });

            modelBuilder.Entity("Optima.Fais.Model.SubTypeReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<int>("Total");

                    b.HasKey("Id");

                    b.ToTable("SubTypeReports");
                });

            modelBuilder.Entity("Optima.Fais.Model.TableDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TableDefinitionId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("TableDefinition");
                });

            modelBuilder.Entity("Optima.Fais.Model.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("MasterTypeId");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("MasterTypeId");

                    b.ToTable("Type");
                });

            modelBuilder.Entity("Optima.Fais.Model.TypeReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("InvNo");

                    b.Property<string>("Name");

                    b.Property<DateTime>("PurchaseDate");

                    b.Property<string>("SerialNumber");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("TypeReports");
                });

            modelBuilder.Entity("Optima.Fais.Model.TypeTotal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<int>("Initial");

                    b.Property<decimal>("Procentage");

                    b.Property<int>("Scanned");

                    b.Property<decimal>("ValueInv");

                    b.Property<decimal>("ValueRem");

                    b.HasKey("Id");

                    b.ToTable("TypeTotals");
                });

            modelBuilder.Entity("Optima.Fais.Model.Uom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UomId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int?>("CompanyId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450);

                    b.Property<int?>("ERPId");

                    b.Property<int?>("ERPInitialId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("PartnerLocationId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PartnerLocationId");

                    b.ToTable("Uom");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Optima.Fais.Model.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Optima.Fais.Model.ApplicationUser")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Optima.Fais.Model.ApplicationUser")
                        .WithMany("Logins")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Optima.Fais.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Optima.Fais.Model.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.ApplicationUser")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Optima.Fais.Model.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Optima.Fais.Model.AccMonth", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Account", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Accountancy", b =>
                {
                    b.HasOne("Optima.Fais.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.AssetCategory", "AssetCategory")
                        .WithMany()
                        .HasForeignKey("AssetCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.AssetType", "AssetType")
                        .WithMany()
                        .HasForeignKey("AssetTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.ExpAccount", "ExpAccount")
                        .WithMany()
                        .HasForeignKey("ExpAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.InterCompany", "InterCompany")
                        .WithMany("Accountancies")
                        .HasForeignKey("InterCompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Optima.Fais.Model.AccSystem", b =>
                {
                    b.HasOne("Optima.Fais.Model.AssetClassType", "AssetClassType")
                        .WithMany()
                        .HasForeignKey("AssetClassTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Activity", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Address", b =>
                {
                    b.HasOne("Optima.Fais.Model.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.AdmCenter", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Administration", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.Division", "Division")
                        .WithMany("Administrations")
                        .HasForeignKey("DivisionId");
                });

            modelBuilder.Entity("Optima.Fais.Model.ApplicationUser", b =>
                {
                    b.HasOne("Optima.Fais.Model.AdmCenter", "AdmCenter")
                        .WithMany()
                        .HasForeignKey("AdmCenterId");

                    b.HasOne("Optima.Fais.Model.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("Optima.Fais.Model.AppState", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Article", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Asset", b =>
                {
                    b.HasOne("Optima.Fais.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Optima.Fais.Model.Administration", "Administration")
                        .WithMany()
                        .HasForeignKey("AdministrationId");

                    b.HasOne("Optima.Fais.Model.AppState", "AppState")
                        .WithMany()
                        .HasForeignKey("AppStateId");

                    b.HasOne("Optima.Fais.Model.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId");

                    b.HasOne("Optima.Fais.Model.AssetCategory", "AssetCategory")
                        .WithMany()
                        .HasForeignKey("AssetCategoryId");

                    b.HasOne("Optima.Fais.Model.AssetNature", "AssetNature")
                        .WithMany()
                        .HasForeignKey("AssetNatureId");

                    b.HasOne("Optima.Fais.Model.AssetState", "AssetState")
                        .WithMany()
                        .HasForeignKey("AssetStateId");

                    b.HasOne("Optima.Fais.Model.AssetType", "AssetType")
                        .WithMany()
                        .HasForeignKey("AssetTypeId");

                    b.HasOne("Optima.Fais.Model.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("Optima.Fais.Model.Budget", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId");

                    b.HasOne("Optima.Fais.Model.BudgetManager", "BudgetManager")
                        .WithMany()
                        .HasForeignKey("BudgetManagerId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId");

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedUser");

                    b.HasOne("Optima.Fais.Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Optima.Fais.Model.DictionaryItem", "DictionaryItem")
                        .WithMany()
                        .HasForeignKey("DictionaryItemId");

                    b.HasOne("Optima.Fais.Model.Dimension", "Dimension")
                        .WithMany()
                        .HasForeignKey("DimensionId");

                    b.HasOne("Optima.Fais.Model.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId");

                    b.HasOne("Optima.Fais.Model.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Optima.Fais.Model.ExpAccount", "ExpAccount")
                        .WithMany()
                        .HasForeignKey("ExpAccountId");

                    b.HasOne("Optima.Fais.Model.InsuranceCategory", "InsuranceCategory")
                        .WithMany()
                        .HasForeignKey("InsuranceCategoryId");

                    b.HasOne("Optima.Fais.Model.InterCompany", "InterCompany")
                        .WithMany()
                        .HasForeignKey("InterCompanyId");

                    b.HasOne("Optima.Fais.Model.InvState", "InvState")
                        .WithMany()
                        .HasForeignKey("InvStateId");

                    b.HasOne("Optima.Fais.Model.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId");

                    b.HasOne("Optima.Fais.Model.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId");

                    b.HasOne("Optima.Fais.Model.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("Optima.Fais.Model.Asset", "ParentAsset")
                        .WithMany("ChildAssets")
                        .HasForeignKey("ParentAssetId");

                    b.HasOne("Optima.Fais.Model.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("Optima.Fais.Model.ProjectType", "ProjectType")
                        .WithMany()
                        .HasForeignKey("ProjectTypeId");

                    b.HasOne("Optima.Fais.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.HasOne("Optima.Fais.Model.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId");

                    b.HasOne("Optima.Fais.Model.SubType", "SubType")
                        .WithMany()
                        .HasForeignKey("SubTypeId");

                    b.HasOne("Optima.Fais.Model.Uom", "Uom")
                        .WithMany()
                        .HasForeignKey("UomId");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetAC", b =>
                {
                    b.HasOne("Optima.Fais.Model.AssetClass", "AssetClass")
                        .WithMany()
                        .HasForeignKey("AssetClassId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Optima.Fais.Model.AssetClass", "AssetClassIn")
                        .WithMany()
                        .HasForeignKey("AssetClassIdIn")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Optima.Fais.Model.AssetClassType", "AssetClassType")
                        .WithMany()
                        .HasForeignKey("AssetClassTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetAdmIn", b =>
                {
                    b.HasOne("Optima.Fais.Model.Administration", "Administration")
                        .WithMany()
                        .HasForeignKey("AdministrationId");

                    b.HasOne("Optima.Fais.Model.AssetCategory", "AssetCategory")
                        .WithMany()
                        .HasForeignKey("AssetCategoryId");

                    b.HasOne("Optima.Fais.Model.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.AssetState", "AssetState")
                        .WithMany()
                        .HasForeignKey("AssetStateId");

                    b.HasOne("Optima.Fais.Model.AssetType", "AssetType")
                        .WithMany()
                        .HasForeignKey("AssetTypeId");

                    b.HasOne("Optima.Fais.Model.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId");

                    b.HasOne("Optima.Fais.Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Optima.Fais.Model.InvState", "InvState")
                        .WithMany()
                        .HasForeignKey("InvStateId");

                    b.HasOne("Optima.Fais.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetAdmMD", b =>
                {
                    b.HasOne("Optima.Fais.Model.AccMonth", "AccMonth")
                        .WithMany()
                        .HasForeignKey("AccMonthId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Optima.Fais.Model.AdmCenter", "AdmCenter")
                        .WithMany()
                        .HasForeignKey("AdmCenterId");

                    b.HasOne("Optima.Fais.Model.Administration", "Administration")
                        .WithMany()
                        .HasForeignKey("AdministrationId");

                    b.HasOne("Optima.Fais.Model.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId");

                    b.HasOne("Optima.Fais.Model.AssetCategory", "AssetCategory")
                        .WithMany()
                        .HasForeignKey("AssetCategoryId");

                    b.HasOne("Optima.Fais.Model.AssetClass", "AssetClass")
                        .WithMany()
                        .HasForeignKey("AssetClassId");

                    b.HasOne("Optima.Fais.Model.Asset", "Asset")
                        .WithMany("AssetAdmMDs")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.AssetNature", "AssetNature")
                        .WithMany()
                        .HasForeignKey("AssetNatureId");

                    b.HasOne("Optima.Fais.Model.AssetState", "AssetState")
                        .WithMany()
                        .HasForeignKey("AssetStateId");

                    b.HasOne("Optima.Fais.Model.AssetType", "AssetType")
                        .WithMany()
                        .HasForeignKey("AssetTypeId");

                    b.HasOne("Optima.Fais.Model.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("Optima.Fais.Model.BudgetManager", "BudgetManager")
                        .WithMany()
                        .HasForeignKey("BudgetManagerId");

                    b.HasOne("Optima.Fais.Model.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId");

                    b.HasOne("Optima.Fais.Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Optima.Fais.Model.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Optima.Fais.Model.ExpAccount", "ExpAccount")
                        .WithMany()
                        .HasForeignKey("ExpAccountId");

                    b.HasOne("Optima.Fais.Model.InsuranceCategory", "InsuranceCategory")
                        .WithMany()
                        .HasForeignKey("InsuranceCategoryId");

                    b.HasOne("Optima.Fais.Model.InterCompany", "InterCompany")
                        .WithMany()
                        .HasForeignKey("InterCompanyId");

                    b.HasOne("Optima.Fais.Model.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId");

                    b.HasOne("Optima.Fais.Model.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("Optima.Fais.Model.ProjectType", "ProjectType")
                        .WithMany()
                        .HasForeignKey("ProjectTypeId");

                    b.HasOne("Optima.Fais.Model.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.HasOne("Optima.Fais.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.HasOne("Optima.Fais.Model.SubType", "SubType")
                        .WithMany()
                        .HasForeignKey("SubTypeId");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetCategory", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetClass", b =>
                {
                    b.HasOne("Optima.Fais.Model.AssetClassType", "AssetClassType")
                        .WithMany("AssetClasses")
                        .HasForeignKey("AssetClassTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.AssetClass", "ParentAssetClass")
                        .WithMany("ChildAssetClasses")
                        .HasForeignKey("ParentAssetClassId");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetClassType", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetComponent", b =>
                {
                    b.HasOne("Optima.Fais.Model.AppState", "AppState")
                        .WithMany()
                        .HasForeignKey("AppStateId");

                    b.HasOne("Optima.Fais.Model.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Optima.Fais.Model.InvState", "InvState")
                        .WithMany()
                        .HasForeignKey("InvStateId");

                    b.HasOne("Optima.Fais.Model.SubType", "SubType")
                        .WithMany()
                        .HasForeignKey("SubTypeId");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetComponentOp", b =>
                {
                    b.HasOne("Optima.Fais.Model.AssetComponent", "AssetComponent")
                        .WithMany()
                        .HasForeignKey("AssetComponentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.Employee", "EmployeeFinal")
                        .WithMany()
                        .HasForeignKey("EmployeeIdFinal");

                    b.HasOne("Optima.Fais.Model.Employee", "EmployeeInitial")
                        .WithMany()
                        .HasForeignKey("EmployeeIdInitial");

                    b.HasOne("Optima.Fais.Model.InvState", "InvState")
                        .WithMany()
                        .HasForeignKey("InvStateId");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetDep", b =>
                {
                    b.HasOne("Optima.Fais.Model.AccSystem", "AccSystem")
                        .WithMany()
                        .HasForeignKey("AccSystemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.Asset", "Asset")
                        .WithMany("AssetDeps")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetDepMD", b =>
                {
                    b.HasOne("Optima.Fais.Model.AccMonth", "AccMonth")
                        .WithMany()
                        .HasForeignKey("AccMonthId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.AccSystem", "AccSystem")
                        .WithMany()
                        .HasForeignKey("AccSystemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.Asset", "Asset")
                        .WithMany("AssetDepMDs")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetInv", b =>
                {
                    b.HasOne("Optima.Fais.Model.Asset", "Asset")
                        .WithOne("AssetInv")
                        .HasForeignKey("Optima.Fais.Model.AssetInv", "AssetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.InvState", "InvState")
                        .WithMany()
                        .HasForeignKey("InvStateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetNature", b =>
                {
                    b.HasOne("Optima.Fais.Model.AssetType", "AssetType")
                        .WithMany()
                        .HasForeignKey("AssetTypeId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetNi", b =>
                {
                    b.HasOne("Optima.Fais.Model.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Optima.Fais.Model.InvState", "InvState")
                        .WithMany()
                        .HasForeignKey("InvStateId");

                    b.HasOne("Optima.Fais.Model.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetOp", b =>
                {
                    b.HasOne("Optima.Fais.Model.AccSystem", "AccSystem")
                        .WithMany()
                        .HasForeignKey("AccSystemId");

                    b.HasOne("Optima.Fais.Model.Administration", "AdministrationFinal")
                        .WithMany()
                        .HasForeignKey("AdministrationIdFinal");

                    b.HasOne("Optima.Fais.Model.Administration", "AdministrationInitial")
                        .WithMany()
                        .HasForeignKey("AdministrationIdInitial");

                    b.HasOne("Optima.Fais.Model.AssetCategory", "AssetCategoryFinal")
                        .WithMany()
                        .HasForeignKey("AssetCategoryIdFinal");

                    b.HasOne("Optima.Fais.Model.AssetCategory", "AssetCategoryInitial")
                        .WithMany()
                        .HasForeignKey("AssetCategoryIdInitial");

                    b.HasOne("Optima.Fais.Model.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.AssetNature", "AssetNatureFinal")
                        .WithMany()
                        .HasForeignKey("AssetNatureIdFinal");

                    b.HasOne("Optima.Fais.Model.AssetNature", "AssetNatureInitial")
                        .WithMany()
                        .HasForeignKey("AssetNatureIdInitial");

                    b.HasOne("Optima.Fais.Model.AppState", "AssetOpState")
                        .WithMany()
                        .HasForeignKey("AssetOpStateId");

                    b.HasOne("Optima.Fais.Model.AppState", "AssetRecoState")
                        .WithMany()
                        .HasForeignKey("AssetRecoStateId");

                    b.HasOne("Optima.Fais.Model.AssetState", "AssetStateFinal")
                        .WithMany()
                        .HasForeignKey("AssetStateIdFinal");

                    b.HasOne("Optima.Fais.Model.AssetState", "AssetStateInitial")
                        .WithMany()
                        .HasForeignKey("AssetStateIdInitial");

                    b.HasOne("Optima.Fais.Model.AssetType", "AssetTypeFinal")
                        .WithMany()
                        .HasForeignKey("AssetTypeFinalId");

                    b.HasOne("Optima.Fais.Model.AssetType", "AssetTypeInitial")
                        .WithMany()
                        .HasForeignKey("AssetTypeInitialId");

                    b.HasOne("Optima.Fais.Model.BudgetManager", "BudgetManagerFinal")
                        .WithMany()
                        .HasForeignKey("BudgetManagerIdFinal");

                    b.HasOne("Optima.Fais.Model.BudgetManager", "BudgetManagerInitial")
                        .WithMany()
                        .HasForeignKey("BudgetManagerIdInitial");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.CostCenter", "CostCenterFinal")
                        .WithMany()
                        .HasForeignKey("CostCenterIdFinal");

                    b.HasOne("Optima.Fais.Model.CostCenter", "CostCenterInitial")
                        .WithMany()
                        .HasForeignKey("CostCenterIdInitial");

                    b.HasOne("Optima.Fais.Model.Department", "DepartmentFinal")
                        .WithMany()
                        .HasForeignKey("DepartmentIdFinal");

                    b.HasOne("Optima.Fais.Model.Department", "DepartmentInitial")
                        .WithMany()
                        .HasForeignKey("DepartmentIdInitial");

                    b.HasOne("Optima.Fais.Model.Dimension", "DimensionFinal")
                        .WithMany()
                        .HasForeignKey("DimensionIdFinal");

                    b.HasOne("Optima.Fais.Model.Dimension", "DimensionInitial")
                        .WithMany()
                        .HasForeignKey("DimensionIdInitial");

                    b.HasOne("Optima.Fais.Model.Document", "Document")
                        .WithMany("Operations")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "DstConfUser")
                        .WithMany()
                        .HasForeignKey("DstConfBy");

                    b.HasOne("Optima.Fais.Model.Employee", "EmployeeFinal")
                        .WithMany()
                        .HasForeignKey("EmployeeIdFinal");

                    b.HasOne("Optima.Fais.Model.Employee", "EmployeeInitial")
                        .WithMany()
                        .HasForeignKey("EmployeeIdInitial");

                    b.HasOne("Optima.Fais.Model.EntityType", "EntityType")
                        .WithMany()
                        .HasForeignKey("EntityTypeId");

                    b.HasOne("Optima.Fais.Model.InsuranceCategory", "InsuranceCategory")
                        .WithMany()
                        .HasForeignKey("InsuranceCategoryId");

                    b.HasOne("Optima.Fais.Model.InterCompany", "InterCompany")
                        .WithMany()
                        .HasForeignKey("InterCompanyId");

                    b.HasOne("Optima.Fais.Model.InvState", "InvStateFinal")
                        .WithMany()
                        .HasForeignKey("InvStateIdFinal");

                    b.HasOne("Optima.Fais.Model.InvState", "InvStateInitial")
                        .WithMany()
                        .HasForeignKey("InvStateIdInitial");

                    b.HasOne("Optima.Fais.Model.Project", "ProjectFinal")
                        .WithMany()
                        .HasForeignKey("ProjectIdFinal");

                    b.HasOne("Optima.Fais.Model.Project", "ProjectInitial")
                        .WithMany()
                        .HasForeignKey("ProjectIdInitial");

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "RegisterConfUser")
                        .WithMany()
                        .HasForeignKey("RegisterConfBy");

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "ReleaseConfUser")
                        .WithMany()
                        .HasForeignKey("ReleaseConfBy");

                    b.HasOne("Optima.Fais.Model.Room", "RoomFinal")
                        .WithMany()
                        .HasForeignKey("RoomIdFinal");

                    b.HasOne("Optima.Fais.Model.Room", "RoomInitial")
                        .WithMany()
                        .HasForeignKey("RoomIdInitial");

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "SrcConfUser")
                        .WithMany()
                        .HasForeignKey("SrcConfBy");

                    b.HasOne("Optima.Fais.Model.Uom", "Uom")
                        .WithMany()
                        .HasForeignKey("UomId");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetState", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.AssetType", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Brand", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Budget", b =>
                {
                    b.HasOne("Optima.Fais.Model.AccMonth", "AccMonth")
                        .WithMany()
                        .HasForeignKey("AccMonthId");

                    b.HasOne("Optima.Fais.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Optima.Fais.Model.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId");

                    b.HasOne("Optima.Fais.Model.AdmCenter", "AdmCenter")
                        .WithMany()
                        .HasForeignKey("AdmCenterId");

                    b.HasOne("Optima.Fais.Model.Administration", "Administration")
                        .WithMany()
                        .HasForeignKey("AdministrationId");

                    b.HasOne("Optima.Fais.Model.AppState", "AppState")
                        .WithMany()
                        .HasForeignKey("AppStateId");

                    b.HasOne("Optima.Fais.Model.AssetType", "AssetType")
                        .WithMany()
                        .HasForeignKey("AssetTypeId");

                    b.HasOne("Optima.Fais.Model.BudgetManager", "BudgetManager")
                        .WithMany()
                        .HasForeignKey("BudgetManagerId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId");

                    b.HasOne("Optima.Fais.Model.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Optima.Fais.Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Optima.Fais.Model.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Optima.Fais.Model.InterCompany", "InterCompany")
                        .WithMany()
                        .HasForeignKey("InterCompanyId");

                    b.HasOne("Optima.Fais.Model.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("Optima.Fais.Model.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("Optima.Fais.Model.ProjectType", "ProjectType")
                        .WithMany()
                        .HasForeignKey("ProjectTypeId");

                    b.HasOne("Optima.Fais.Model.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.HasOne("Optima.Fais.Model.SubType", "SubType")
                        .WithMany()
                        .HasForeignKey("SubTypeId");

                    b.HasOne("Optima.Fais.Model.Uom", "Uom")
                        .WithMany()
                        .HasForeignKey("UomId");

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Optima.Fais.Model.BudgetManager", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.Uom", "Uom")
                        .WithMany()
                        .HasForeignKey("UomId");
                });

            modelBuilder.Entity("Optima.Fais.Model.BudgetMonth", b =>
                {
                    b.HasOne("Optima.Fais.Model.AccMonth", "AccMonth")
                        .WithMany()
                        .HasForeignKey("AccMonthId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.Budget", "Budget")
                        .WithMany("BudgetMonths")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.BudgetType", "BudgetType")
                        .WithMany()
                        .HasForeignKey("BudgetTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Optima.Fais.Model.BudgetOp", b =>
                {
                    b.HasOne("Optima.Fais.Model.AccMonth", "AccMonth")
                        .WithMany()
                        .HasForeignKey("AccMonthId");

                    b.HasOne("Optima.Fais.Model.AccSystem", "AccSystem")
                        .WithMany()
                        .HasForeignKey("AccSystemId");

                    b.HasOne("Optima.Fais.Model.Account", "AccountFinal")
                        .WithMany()
                        .HasForeignKey("AccountIdFinal");

                    b.HasOne("Optima.Fais.Model.Account", "AccountInitial")
                        .WithMany()
                        .HasForeignKey("AccountIdInitial");

                    b.HasOne("Optima.Fais.Model.Activity", "ActivityFinal")
                        .WithMany()
                        .HasForeignKey("ActivityIdFinal");

                    b.HasOne("Optima.Fais.Model.Activity", "ActivityInitial")
                        .WithMany()
                        .HasForeignKey("ActivityIdInitial");

                    b.HasOne("Optima.Fais.Model.AdmCenter", "AdmCenterFinal")
                        .WithMany()
                        .HasForeignKey("AdministrationIdFinal");

                    b.HasOne("Optima.Fais.Model.Administration", "AdministrationFinal")
                        .WithMany()
                        .HasForeignKey("AdministrationIdFinal");

                    b.HasOne("Optima.Fais.Model.AdmCenter", "AdmCenterInitial")
                        .WithMany()
                        .HasForeignKey("AdministrationIdInitial");

                    b.HasOne("Optima.Fais.Model.Administration", "AdministrationInitial")
                        .WithMany()
                        .HasForeignKey("AdministrationIdInitial");

                    b.HasOne("Optima.Fais.Model.AssetType", "AssetTypeFinal")
                        .WithMany()
                        .HasForeignKey("AssetTypeIdFinal");

                    b.HasOne("Optima.Fais.Model.AssetType", "AssetTypeInitial")
                        .WithMany()
                        .HasForeignKey("AssetTypeIdInitial");

                    b.HasOne("Optima.Fais.Model.Budget", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.BudgetManager", "BudgetManagerFinal")
                        .WithMany()
                        .HasForeignKey("BudgetManagerIdFinal");

                    b.HasOne("Optima.Fais.Model.BudgetManager", "BudgetManagerInitial")
                        .WithMany()
                        .HasForeignKey("BudgetManagerIdInitial");

                    b.HasOne("Optima.Fais.Model.AppState", "BudgetState")
                        .WithMany()
                        .HasForeignKey("BudgetStateId");

                    b.HasOne("Optima.Fais.Model.AppState", "BudgetStateFinal")
                        .WithMany()
                        .HasForeignKey("BudgetStateIdFinal");

                    b.HasOne("Optima.Fais.Model.Company", "CompanyFinal")
                        .WithMany()
                        .HasForeignKey("CompanyIdFinal");

                    b.HasOne("Optima.Fais.Model.Company", "CompanyInitial")
                        .WithMany()
                        .HasForeignKey("CompanyIdInitial");

                    b.HasOne("Optima.Fais.Model.CostCenter", "CostCenterFinal")
                        .WithMany()
                        .HasForeignKey("CostCenterIdFinal");

                    b.HasOne("Optima.Fais.Model.CostCenter", "CostCenterInitial")
                        .WithMany()
                        .HasForeignKey("CostCenterIdInitial");

                    b.HasOne("Optima.Fais.Model.Country", "CountryFinal")
                        .WithMany()
                        .HasForeignKey("CountryIdFinal");

                    b.HasOne("Optima.Fais.Model.Country", "CountryInitial")
                        .WithMany()
                        .HasForeignKey("CountryIdInitial");

                    b.HasOne("Optima.Fais.Model.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "DstConfUser")
                        .WithMany()
                        .HasForeignKey("DstConfBy");

                    b.HasOne("Optima.Fais.Model.Employee", "EmployeeFinal")
                        .WithMany()
                        .HasForeignKey("EmployeeIdFinal");

                    b.HasOne("Optima.Fais.Model.Employee", "EmployeeInitial")
                        .WithMany()
                        .HasForeignKey("EmployeeIdInitial");

                    b.HasOne("Optima.Fais.Model.InterCompany", "InterCompanyFinal")
                        .WithMany()
                        .HasForeignKey("InterCompanyIdFinal");

                    b.HasOne("Optima.Fais.Model.InterCompany", "InterCompanyInitial")
                        .WithMany()
                        .HasForeignKey("InterCompanyIdInitial");

                    b.HasOne("Optima.Fais.Model.Partner", "PartnerFinal")
                        .WithMany()
                        .HasForeignKey("PartnerIdFinal");

                    b.HasOne("Optima.Fais.Model.Partner", "PartnerInitial")
                        .WithMany()
                        .HasForeignKey("PartnerIdInitial");

                    b.HasOne("Optima.Fais.Model.Project", "ProjectFinal")
                        .WithMany()
                        .HasForeignKey("ProjectIdFinal");

                    b.HasOne("Optima.Fais.Model.Project", "ProjectInitial")
                        .WithMany()
                        .HasForeignKey("ProjectIdInitial");

                    b.HasOne("Optima.Fais.Model.ProjectType", "ProjectTypeFinal")
                        .WithMany()
                        .HasForeignKey("ProjectTypeFinalId");

                    b.HasOne("Optima.Fais.Model.ProjectType", "ProjectTypeInitial")
                        .WithMany()
                        .HasForeignKey("ProjectTypeInitialId");

                    b.HasOne("Optima.Fais.Model.Region", "RegionFinal")
                        .WithMany()
                        .HasForeignKey("RegionIdFinal");

                    b.HasOne("Optima.Fais.Model.Region", "RegionInitial")
                        .WithMany()
                        .HasForeignKey("RegionIdInitial");

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "RegisterConfUser")
                        .WithMany()
                        .HasForeignKey("RegisterConfBy");

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "ReleaseConfUser")
                        .WithMany()
                        .HasForeignKey("ReleaseConfBy");

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "SrcConfUser")
                        .WithMany()
                        .HasForeignKey("SrcConfBy");

                    b.HasOne("Optima.Fais.Model.SubType", "SubTypeFinal")
                        .WithMany()
                        .HasForeignKey("SubTypeIdFinal");

                    b.HasOne("Optima.Fais.Model.SubType", "SubTypeInitial")
                        .WithMany()
                        .HasForeignKey("SubTypeIdInitial");
                });

            modelBuilder.Entity("Optima.Fais.Model.BudgetType", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.BusinessSystem", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Category", b =>
                {
                    b.HasOne("Optima.Fais.Model.CategoryEN", "CategoryEN")
                        .WithMany()
                        .HasForeignKey("CategoryENId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.InterCompany", "InterCompany")
                        .WithMany()
                        .HasForeignKey("InterCompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.CategoryEN", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.InterCompanyEN", "InterCompanyEN")
                        .WithMany()
                        .HasForeignKey("InterCompanyENId");
                });

            modelBuilder.Entity("Optima.Fais.Model.City", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.County", "County")
                        .WithMany("Cities")
                        .HasForeignKey("CountyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.ColumnDefinition", b =>
                {
                    b.HasOne("Optima.Fais.Model.ApplicationRole", "AspNetRole")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("Optima.Fais.Model.TableDefinition", "TableDefinition")
                        .WithMany("ColumnDefinitions")
                        .HasForeignKey("TableDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Optima.Fais.Model.Committee", b =>
                {
                    b.HasOne("Optima.Fais.Model.Administration", "Administration")
                        .WithMany()
                        .HasForeignKey("AdministrationId");

                    b.HasOne("Optima.Fais.Model.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee2")
                        .WithMany()
                        .HasForeignKey("EmployeeId2");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee3")
                        .WithMany()
                        .HasForeignKey("EmployeeId3");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee4")
                        .WithMany()
                        .HasForeignKey("EmployeeId4");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee5")
                        .WithMany()
                        .HasForeignKey("EmployeeId5");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee6")
                        .WithMany()
                        .HasForeignKey("EmployeeId6");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee7")
                        .WithMany()
                        .HasForeignKey("EmployeeId7");

                    b.HasOne("Optima.Fais.Model.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId");

                    b.HasOne("Optima.Fais.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Commodity", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.Contract", "Contract")
                        .WithMany("Commodities")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Optima.Fais.Model.ConfigValue", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.ApplicationRole", "AspNetRole")
                        .WithMany()
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Contract", b =>
                {
                    b.HasOne("Optima.Fais.Model.AccMonth", "AccMonth")
                        .WithMany()
                        .HasForeignKey("AccMonthId");

                    b.HasOne("Optima.Fais.Model.AppState", "AppState")
                        .WithMany()
                        .HasForeignKey("AppStateId");

                    b.HasOne("Optima.Fais.Model.BusinessSystem", "BusinessSystem")
                        .WithMany()
                        .HasForeignKey("BusinessSystemId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.ContractAmount", "ContractAmount")
                        .WithMany()
                        .HasForeignKey("ContractAmountId");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Optima.Fais.Model.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("Optima.Fais.Model.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");
                });

            modelBuilder.Entity("Optima.Fais.Model.ContractAmount", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.Uom", "Uom")
                        .WithMany()
                        .HasForeignKey("UomId");
                });

            modelBuilder.Entity("Optima.Fais.Model.ContractDivision", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.Contract", "Contract")
                        .WithMany("ContractDivisions")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Optima.Fais.Model.ContractOp", b =>
                {
                    b.HasOne("Optima.Fais.Model.AccMonth", "AccMonth")
                        .WithMany()
                        .HasForeignKey("AccMonthId");

                    b.HasOne("Optima.Fais.Model.AccSystem", "AccSystem")
                        .WithMany()
                        .HasForeignKey("AccSystemId");

                    b.HasOne("Optima.Fais.Model.BusinessSystem", "BusinessSystem")
                        .WithMany()
                        .HasForeignKey("BusinessSystemId");

                    b.HasOne("Optima.Fais.Model.Commodity", "Commodity")
                        .WithMany()
                        .HasForeignKey("CommodityId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.ContractAmount", "ContractAmount")
                        .WithMany()
                        .HasForeignKey("ContractAmountId");

                    b.HasOne("Optima.Fais.Model.ContractDivision", "ContractDivision")
                        .WithMany()
                        .HasForeignKey("ContractDivisionId");

                    b.HasOne("Optima.Fais.Model.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.ContractRegion", "ContractRegion")
                        .WithMany()
                        .HasForeignKey("ContractRegionId");

                    b.HasOne("Optima.Fais.Model.AppState", "ContractState")
                        .WithMany()
                        .HasForeignKey("ContractStateId");

                    b.HasOne("Optima.Fais.Model.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "DstConfUser")
                        .WithMany()
                        .HasForeignKey("DstConfBy");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Optima.Fais.Model.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "RegisterConfUser")
                        .WithMany()
                        .HasForeignKey("RegisterConfBy");

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "ReleaseConfUser")
                        .WithMany()
                        .HasForeignKey("ReleaseConfBy");

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "SrcConfUser")
                        .WithMany()
                        .HasForeignKey("SrcConfBy");
                });

            modelBuilder.Entity("Optima.Fais.Model.ContractRegion", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.Contract", "Contract")
                        .WithMany("ContractRegions")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Optima.Fais.Model.CostCenter", b =>
                {
                    b.HasOne("Optima.Fais.Model.AdmCenter", "AdmCenter")
                        .WithMany("CostCenters")
                        .HasForeignKey("AdmCenterId");

                    b.HasOne("Optima.Fais.Model.Administration", "Administration")
                        .WithMany()
                        .HasForeignKey("AdministrationId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee2")
                        .WithMany()
                        .HasForeignKey("EmployeeId2");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee3")
                        .WithMany()
                        .HasForeignKey("EmployeeId3");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee4")
                        .WithMany()
                        .HasForeignKey("EmployeeId4");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee5")
                        .WithMany()
                        .HasForeignKey("EmployeeId5");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee6")
                        .WithMany()
                        .HasForeignKey("EmployeeId6");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee7")
                        .WithMany()
                        .HasForeignKey("EmployeeId7");

                    b.HasOne("Optima.Fais.Model.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("Optima.Fais.Model.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.HasOne("Optima.Fais.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Country", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.County", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.Country", "Country")
                        .WithMany("Counties")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Department", b =>
                {
                    b.HasOne("Optima.Fais.Model.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.Employee", "TeamLeader")
                        .WithMany()
                        .HasForeignKey("TeamLeaderId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Device", b =>
                {
                    b.HasOne("Optima.Fais.Model.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.DeviceType", "DeviceType")
                        .WithMany()
                        .HasForeignKey("DeviceTypeId");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("Optima.Fais.Model.DeviceType", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.DictionaryItem", b =>
                {
                    b.HasOne("Optima.Fais.Model.AssetCategory", "AssetCategory")
                        .WithMany()
                        .HasForeignKey("AssetCategoryId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.DictionaryType", "DictionaryType")
                        .WithMany("DictionaryItems")
                        .HasForeignKey("DictionaryTypeId");
                });

            modelBuilder.Entity("Optima.Fais.Model.DictionaryType", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Dimension", b =>
                {
                    b.HasOne("Optima.Fais.Model.AssetCategory", "AssetCategory")
                        .WithMany()
                        .HasForeignKey("AssetCategoryId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Division", b =>
                {
                    b.HasOne("Optima.Fais.Model.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId");

                    b.HasOne("Optima.Fais.Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Optima.Fais.Model.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Document", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId");

                    b.HasOne("Optima.Fais.Model.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.Document", "ParentDocument")
                        .WithMany("ChildDocuments")
                        .HasForeignKey("ParentDocumentId");

                    b.HasOne("Optima.Fais.Model.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");
                });

            modelBuilder.Entity("Optima.Fais.Model.DocumentType", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.EmailManager", b =>
                {
                    b.HasOne("Optima.Fais.Model.AppState", "AppState")
                        .WithMany()
                        .HasForeignKey("AppStateId");

                    b.HasOne("Optima.Fais.Model.AssetComponent", "AssetComponent")
                        .WithMany()
                        .HasForeignKey("AssetComponentId");

                    b.HasOne("Optima.Fais.Model.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId");

                    b.HasOne("Optima.Fais.Model.Budget", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.EmailType", "EmailType")
                        .WithMany()
                        .HasForeignKey("EmailTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.Employee", "EmployeeFinal")
                        .WithMany()
                        .HasForeignKey("EmployeeIdFinal");

                    b.HasOne("Optima.Fais.Model.Employee", "EmployeeInitial")
                        .WithMany()
                        .HasForeignKey("EmployeeIdInitial");

                    b.HasOne("Optima.Fais.Model.Offer", "Offer")
                        .WithMany()
                        .HasForeignKey("OfferId");

                    b.HasOne("Optima.Fais.Model.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("Optima.Fais.Model.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("Optima.Fais.Model.Room", "RoomFinal")
                        .WithMany()
                        .HasForeignKey("RoomIdFinal");

                    b.HasOne("Optima.Fais.Model.Room", "RoomInitial")
                        .WithMany()
                        .HasForeignKey("RoomIdInitial");

                    b.HasOne("Optima.Fais.Model.SubType", "SubType")
                        .WithMany()
                        .HasForeignKey("SubTypeId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Employee", b =>
                {
                    b.HasOne("Optima.Fais.Model.AdmCenter", "AdmCenter")
                        .WithMany("Employees")
                        .HasForeignKey("AdmCenterId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId");

                    b.HasOne("Optima.Fais.Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Optima.Fais.Model.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId");
                });

            modelBuilder.Entity("Optima.Fais.Model.EmployeeCostCenter", b =>
                {
                    b.HasOne("Optima.Fais.Model.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Optima.Fais.Model.EntityFile", b =>
                {
                    b.HasOne("Optima.Fais.Model.EntityType", "EntityType")
                        .WithMany()
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("Optima.Fais.Model.ExpAccount", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Info", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.InfoType", "InfoType")
                        .WithMany()
                        .HasForeignKey("InfoTypeId");
                });

            modelBuilder.Entity("Optima.Fais.Model.InfoType", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.InsuranceCategory", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.InterCompany", b =>
                {
                    b.HasOne("Optima.Fais.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Optima.Fais.Model.AssetCategory", "AssetCategory")
                        .WithMany()
                        .HasForeignKey("AssetCategoryId");

                    b.HasOne("Optima.Fais.Model.AssetType", "AssetType")
                        .WithMany()
                        .HasForeignKey("AssetTypeId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.ExpAccount", "ExpAccount")
                        .WithMany()
                        .HasForeignKey("ExpAccountId");

                    b.HasOne("Optima.Fais.Model.InterCompanyEN", "InterCompanyEN")
                        .WithMany()
                        .HasForeignKey("InterCompanyENId");
                });

            modelBuilder.Entity("Optima.Fais.Model.InterCompanyEN", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Inventory", b =>
                {
                    b.HasOne("Optima.Fais.Model.AccMonth", "AccMonth")
                        .WithMany()
                        .HasForeignKey("AccMonthId");

                    b.HasOne("Optima.Fais.Model.Administration", "Administration")
                        .WithMany()
                        .HasForeignKey("AdministrationId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId");

                    b.HasOne("Optima.Fais.Model.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Optima.Fais.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("Optima.Fais.Model.InventoryAsset", b =>
                {
                    b.HasOne("Optima.Fais.Model.Administration", "AdministrationFinal")
                        .WithMany()
                        .HasForeignKey("AdministrationIdFinal");

                    b.HasOne("Optima.Fais.Model.Administration", "AdministrationInitial")
                        .WithMany()
                        .HasForeignKey("AdministrationIdInitial");

                    b.HasOne("Optima.Fais.Model.Asset", "Asset")
                        .WithOne("InventoryAsset")
                        .HasForeignKey("Optima.Fais.Model.InventoryAsset", "AssetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.AppState", "AssetRecoState")
                        .WithMany()
                        .HasForeignKey("AssetRecoStateId");

                    b.HasOne("Optima.Fais.Model.CostCenter", "CostCenterFinal")
                        .WithMany()
                        .HasForeignKey("CostCenterIdFinal");

                    b.HasOne("Optima.Fais.Model.CostCenter", "CostCenterInitial")
                        .WithMany()
                        .HasForeignKey("CostCenterIdInitial");

                    b.HasOne("Optima.Fais.Model.InvState", "DetailState")
                        .WithMany()
                        .HasForeignKey("DetailStateId");

                    b.HasOne("Optima.Fais.Model.Dimension", "DimensionFinal")
                        .WithMany()
                        .HasForeignKey("DimensionIdFinal");

                    b.HasOne("Optima.Fais.Model.Employee", "EmployeeFinal")
                        .WithMany()
                        .HasForeignKey("EmployeeIdFinal");

                    b.HasOne("Optima.Fais.Model.Employee", "EmployeeInitial")
                        .WithMany()
                        .HasForeignKey("EmployeeIdInitial");

                    b.HasOne("Optima.Fais.Model.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy");

                    b.HasOne("Optima.Fais.Model.Room", "RoomFinal")
                        .WithMany()
                        .HasForeignKey("RoomIdFinal");

                    b.HasOne("Optima.Fais.Model.Room", "RoomInitial")
                        .WithMany()
                        .HasForeignKey("RoomIdInitial");

                    b.HasOne("Optima.Fais.Model.InvState", "StateFinal")
                        .WithMany()
                        .HasForeignKey("StateIdFinal");

                    b.HasOne("Optima.Fais.Model.InvState", "StateInitial")
                        .WithMany()
                        .HasForeignKey("StateIdInitial");

                    b.HasOne("Optima.Fais.Model.Uom", "UomFinal")
                        .WithMany()
                        .HasForeignKey("UomIdFinal");
                });

            modelBuilder.Entity("Optima.Fais.Model.InvState", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Location", b =>
                {
                    b.HasOne("Optima.Fais.Model.AdmCenter", "AdmCenter")
                        .WithMany()
                        .HasForeignKey("AdmCenterId");

                    b.HasOne("Optima.Fais.Model.City", "City")
                        .WithMany("Locations")
                        .HasForeignKey("CityId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.LocationType", "LocationType")
                        .WithMany()
                        .HasForeignKey("LocationTypeId");

                    b.HasOne("Optima.Fais.Model.Region", "Region")
                        .WithMany("Locations")
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("Optima.Fais.Model.LocationType", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.MasterType", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Material", b =>
                {
                    b.HasOne("Optima.Fais.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Optima.Fais.Model.AssetCategory", "AssetCategory")
                        .WithMany()
                        .HasForeignKey("AssetCategoryId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.ExpAccount", "ExpAccount")
                        .WithMany()
                        .HasForeignKey("ExpAccountId");

                    b.HasOne("Optima.Fais.Model.MaterialType", "MaterialType")
                        .WithMany()
                        .HasForeignKey("MaterialTypeId");

                    b.HasOne("Optima.Fais.Model.SubCategoryEN", "SubCategoryEN")
                        .WithMany()
                        .HasForeignKey("SubCategoryENId");

                    b.HasOne("Optima.Fais.Model.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId");

                    b.HasOne("Optima.Fais.Model.SubType", "SubType")
                        .WithMany()
                        .HasForeignKey("SubTypeId");
                });

            modelBuilder.Entity("Optima.Fais.Model.MaterialType", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Model", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Offer", b =>
                {
                    b.HasOne("Optima.Fais.Model.AccMonth", "AccMonth")
                        .WithMany()
                        .HasForeignKey("AccMonthId");

                    b.HasOne("Optima.Fais.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Optima.Fais.Model.AdmCenter", "AdmCenter")
                        .WithMany()
                        .HasForeignKey("AdmCenterId");

                    b.HasOne("Optima.Fais.Model.Administration", "Administration")
                        .WithMany()
                        .HasForeignKey("AdministrationId");

                    b.HasOne("Optima.Fais.Model.AppState", "AppState")
                        .WithMany()
                        .HasForeignKey("AppStateId");

                    b.HasOne("Optima.Fais.Model.AssetType", "AssetType")
                        .WithMany()
                        .HasForeignKey("AssetTypeId");

                    b.HasOne("Optima.Fais.Model.Budget", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId");

                    b.HasOne("Optima.Fais.Model.BudgetManager", "BudgetManager")
                        .WithMany()
                        .HasForeignKey("BudgetManagerId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Optima.Fais.Model.InterCompany", "InterCompany")
                        .WithMany()
                        .HasForeignKey("InterCompanyId");

                    b.HasOne("Optima.Fais.Model.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("Optima.Fais.Model.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("Optima.Fais.Model.ProjectType", "ProjectType")
                        .WithMany()
                        .HasForeignKey("ProjectTypeId");

                    b.HasOne("Optima.Fais.Model.Rate", "Rate")
                        .WithMany()
                        .HasForeignKey("RateId");

                    b.HasOne("Optima.Fais.Model.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId");

                    b.HasOne("Optima.Fais.Model.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId");

                    b.HasOne("Optima.Fais.Model.SubType", "SubType")
                        .WithMany()
                        .HasForeignKey("SubTypeId");

                    b.HasOne("Optima.Fais.Model.Uom", "Uom")
                        .WithMany()
                        .HasForeignKey("UomId");

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Optima.Fais.Model.OfferMaterial", b =>
                {
                    b.HasOne("Optima.Fais.Model.AppState", "AppState")
                        .WithMany()
                        .HasForeignKey("AppStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.EmailManager", "EmailManager")
                        .WithMany()
                        .HasForeignKey("EmailManagerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.Offer", "Offer")
                        .WithMany("OfferMaterials")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.Rate", "Rate")
                        .WithMany()
                        .HasForeignKey("RateId");

                    b.HasOne("Optima.Fais.Model.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId");
                });

            modelBuilder.Entity("Optima.Fais.Model.OfferOp", b =>
                {
                    b.HasOne("Optima.Fais.Model.AccMonth", "AccMonth")
                        .WithMany()
                        .HasForeignKey("AccMonthId");

                    b.HasOne("Optima.Fais.Model.AccSystem", "AccSystem")
                        .WithMany()
                        .HasForeignKey("AccSystemId");

                    b.HasOne("Optima.Fais.Model.Account", "AccountFinal")
                        .WithMany()
                        .HasForeignKey("AccountIdFinal");

                    b.HasOne("Optima.Fais.Model.Account", "AccountInitial")
                        .WithMany()
                        .HasForeignKey("AccountIdInitial");

                    b.HasOne("Optima.Fais.Model.AdmCenter", "AdmCenterFinal")
                        .WithMany()
                        .HasForeignKey("AdmCenterIdFinal");

                    b.HasOne("Optima.Fais.Model.AdmCenter", "AdmCenterInitial")
                        .WithMany()
                        .HasForeignKey("AdmCenterIdInitial");

                    b.HasOne("Optima.Fais.Model.Administration", "AdministrationFinal")
                        .WithMany()
                        .HasForeignKey("AdministrationIdFinal");

                    b.HasOne("Optima.Fais.Model.Administration", "AdministrationInitial")
                        .WithMany()
                        .HasForeignKey("AdministrationIdInitial");

                    b.HasOne("Optima.Fais.Model.AssetType", "AssetTypeFinal")
                        .WithMany()
                        .HasForeignKey("AssetTypeIdFinal");

                    b.HasOne("Optima.Fais.Model.AssetType", "AssetTypeInitial")
                        .WithMany()
                        .HasForeignKey("AssetTypeIdInitial");

                    b.HasOne("Optima.Fais.Model.Budget", "BudgetFinal")
                        .WithMany()
                        .HasForeignKey("BudgetFinalId");

                    b.HasOne("Optima.Fais.Model.Budget", "BudgetInitial")
                        .WithMany()
                        .HasForeignKey("BudgetInitialId");

                    b.HasOne("Optima.Fais.Model.BudgetManager", "BudgetManagerFinal")
                        .WithMany()
                        .HasForeignKey("BudgetManagerIdFinal");

                    b.HasOne("Optima.Fais.Model.BudgetManager", "BudgetManagerInitial")
                        .WithMany()
                        .HasForeignKey("BudgetManagerIdInitial");

                    b.HasOne("Optima.Fais.Model.AppState", "BudgetState")
                        .WithMany()
                        .HasForeignKey("BudgetStateId");

                    b.HasOne("Optima.Fais.Model.Company", "CompanyFinal")
                        .WithMany()
                        .HasForeignKey("CompanyIdFinal");

                    b.HasOne("Optima.Fais.Model.Company", "CompanyInitial")
                        .WithMany()
                        .HasForeignKey("CompanyIdInitial");

                    b.HasOne("Optima.Fais.Model.CostCenter", "CostCenterFinal")
                        .WithMany()
                        .HasForeignKey("CostCenterIdFinal");

                    b.HasOne("Optima.Fais.Model.CostCenter", "CostCenterInitial")
                        .WithMany()
                        .HasForeignKey("CostCenterIdInitial");

                    b.HasOne("Optima.Fais.Model.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "DstConfUser")
                        .WithMany()
                        .HasForeignKey("DstConfBy");

                    b.HasOne("Optima.Fais.Model.Employee", "EmployeeFinal")
                        .WithMany()
                        .HasForeignKey("EmployeeIdFinal");

                    b.HasOne("Optima.Fais.Model.Employee", "EmployeeInitial")
                        .WithMany()
                        .HasForeignKey("EmployeeIdInitial");

                    b.HasOne("Optima.Fais.Model.InterCompany", "InterCompanyFinal")
                        .WithMany()
                        .HasForeignKey("InterCompanyIdFinal");

                    b.HasOne("Optima.Fais.Model.InterCompany", "InterCompanyInitial")
                        .WithMany()
                        .HasForeignKey("InterCompanyIdInitial");

                    b.HasOne("Optima.Fais.Model.Offer", "Offer")
                        .WithMany()
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.Partner", "PartnerFinal")
                        .WithMany()
                        .HasForeignKey("PartnerIdFinal");

                    b.HasOne("Optima.Fais.Model.Partner", "PartnerInitial")
                        .WithMany()
                        .HasForeignKey("PartnerIdInitial");

                    b.HasOne("Optima.Fais.Model.Project", "ProjectFinal")
                        .WithMany()
                        .HasForeignKey("ProjectIdFinal");

                    b.HasOne("Optima.Fais.Model.Project", "ProjectInitial")
                        .WithMany()
                        .HasForeignKey("ProjectIdInitial");

                    b.HasOne("Optima.Fais.Model.ProjectType", "ProjectTypeFinal")
                        .WithMany()
                        .HasForeignKey("ProjectTypeIdFinal");

                    b.HasOne("Optima.Fais.Model.ProjectType", "ProjectTypeInitial")
                        .WithMany()
                        .HasForeignKey("ProjectTypeIdInitial");

                    b.HasOne("Optima.Fais.Model.Region", "RegionFinal")
                        .WithMany()
                        .HasForeignKey("RegionIdFinal");

                    b.HasOne("Optima.Fais.Model.Region", "RegionInitial")
                        .WithMany()
                        .HasForeignKey("RegionIdInitial");

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "RegisterConfUser")
                        .WithMany()
                        .HasForeignKey("RegisterConfBy");

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "ReleaseConfUser")
                        .WithMany()
                        .HasForeignKey("ReleaseConfBy");

                    b.HasOne("Optima.Fais.Model.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId");

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "SrcConfUser")
                        .WithMany()
                        .HasForeignKey("SrcConfBy");

                    b.HasOne("Optima.Fais.Model.SubType", "SubTypeFinal")
                        .WithMany()
                        .HasForeignKey("SubTypeIdFinal");

                    b.HasOne("Optima.Fais.Model.SubType", "SubTypeInitial")
                        .WithMany()
                        .HasForeignKey("SubTypeIdInitial");

                    b.HasOne("Optima.Fais.Model.Uom", "Uom")
                        .WithMany()
                        .HasForeignKey("UomId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Order", b =>
                {
                    b.HasOne("Optima.Fais.Model.AccMonth", "AccMonth")
                        .WithMany()
                        .HasForeignKey("AccMonthId");

                    b.HasOne("Optima.Fais.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Optima.Fais.Model.Administration", "Administration")
                        .WithMany()
                        .HasForeignKey("AdministrationId");

                    b.HasOne("Optima.Fais.Model.AppState", "AppState")
                        .WithMany()
                        .HasForeignKey("AppStateId");

                    b.HasOne("Optima.Fais.Model.Budget", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId");

                    b.HasOne("Optima.Fais.Model.BudgetManager", "BudgetManager")
                        .WithMany()
                        .HasForeignKey("BudgetManagerId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId");

                    b.HasOne("Optima.Fais.Model.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Optima.Fais.Model.InterCompany", "InterCompany")
                        .WithMany()
                        .HasForeignKey("InterCompanyId");

                    b.HasOne("Optima.Fais.Model.Offer", "Offer")
                        .WithMany()
                        .HasForeignKey("OfferId");

                    b.HasOne("Optima.Fais.Model.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("Optima.Fais.Model.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("Optima.Fais.Model.Rate", "Rate")
                        .WithMany()
                        .HasForeignKey("RateId");

                    b.HasOne("Optima.Fais.Model.SubType", "SubType")
                        .WithMany()
                        .HasForeignKey("SubTypeId");

                    b.HasOne("Optima.Fais.Model.Uom", "Uom")
                        .WithMany()
                        .HasForeignKey("UomId");

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Optima.Fais.Model.OrderMaterial", b =>
                {
                    b.HasOne("Optima.Fais.Model.AppState", "AppState")
                        .WithMany()
                        .HasForeignKey("AppStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.Order", "Order")
                        .WithMany("OrderMaterials")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.Rate", "Rate")
                        .WithMany()
                        .HasForeignKey("RateId");
                });

            modelBuilder.Entity("Optima.Fais.Model.OrderOp", b =>
                {
                    b.HasOne("Optima.Fais.Model.AccMonth", "AccMonth")
                        .WithMany()
                        .HasForeignKey("AccMonthId");

                    b.HasOne("Optima.Fais.Model.AccSystem", "AccSystem")
                        .WithMany()
                        .HasForeignKey("AccSystemId");

                    b.HasOne("Optima.Fais.Model.Account", "AccountFinal")
                        .WithMany()
                        .HasForeignKey("AccountIdFinal");

                    b.HasOne("Optima.Fais.Model.Account", "AccountInitial")
                        .WithMany()
                        .HasForeignKey("AccountIdInitial");

                    b.HasOne("Optima.Fais.Model.Administration", "AdministrationFinal")
                        .WithMany()
                        .HasForeignKey("AdministrationIdFinal");

                    b.HasOne("Optima.Fais.Model.Administration", "AdministrationInitial")
                        .WithMany()
                        .HasForeignKey("AdministrationIdInitial");

                    b.HasOne("Optima.Fais.Model.Budget", "BudgetFinal")
                        .WithMany()
                        .HasForeignKey("BudgetFinalId");

                    b.HasOne("Optima.Fais.Model.Budget", "BudgetInitial")
                        .WithMany()
                        .HasForeignKey("BudgetInitialId");

                    b.HasOne("Optima.Fais.Model.BudgetManager", "BudgetManagerFinal")
                        .WithMany()
                        .HasForeignKey("BudgetManagerIdFinal");

                    b.HasOne("Optima.Fais.Model.BudgetManager", "BudgetManagerInitial")
                        .WithMany()
                        .HasForeignKey("BudgetManagerIdInitial");

                    b.HasOne("Optima.Fais.Model.AppState", "BudgetState")
                        .WithMany()
                        .HasForeignKey("BudgetStateId");

                    b.HasOne("Optima.Fais.Model.Company", "CompanyFinal")
                        .WithMany()
                        .HasForeignKey("CompanyIdFinal");

                    b.HasOne("Optima.Fais.Model.Company", "CompanyInitial")
                        .WithMany()
                        .HasForeignKey("CompanyIdInitial");

                    b.HasOne("Optima.Fais.Model.CostCenter", "CostCenterFinal")
                        .WithMany()
                        .HasForeignKey("CostCenterIdFinal");

                    b.HasOne("Optima.Fais.Model.CostCenter", "CostCenterInitial")
                        .WithMany()
                        .HasForeignKey("CostCenterIdInitial");

                    b.HasOne("Optima.Fais.Model.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "DstConfUser")
                        .WithMany()
                        .HasForeignKey("DstConfBy");

                    b.HasOne("Optima.Fais.Model.Employee", "EmployeeFinal")
                        .WithMany()
                        .HasForeignKey("EmployeeIdFinal");

                    b.HasOne("Optima.Fais.Model.Employee", "EmployeeInitial")
                        .WithMany()
                        .HasForeignKey("EmployeeIdInitial");

                    b.HasOne("Optima.Fais.Model.InterCompany", "InterCompanyFinal")
                        .WithMany()
                        .HasForeignKey("InterCompanyIdFinal");

                    b.HasOne("Optima.Fais.Model.InterCompany", "InterCompanyInitial")
                        .WithMany()
                        .HasForeignKey("InterCompanyIdInitial");

                    b.HasOne("Optima.Fais.Model.Offer", "OfferFinal")
                        .WithMany()
                        .HasForeignKey("OfferFinalId");

                    b.HasOne("Optima.Fais.Model.Offer", "OfferInitial")
                        .WithMany()
                        .HasForeignKey("OfferInitialId");

                    b.HasOne("Optima.Fais.Model.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.Partner", "PartnerFinal")
                        .WithMany()
                        .HasForeignKey("PartnerIdFinal");

                    b.HasOne("Optima.Fais.Model.Partner", "PartnerInitial")
                        .WithMany()
                        .HasForeignKey("PartnerIdInitial");

                    b.HasOne("Optima.Fais.Model.Project", "ProjectFinal")
                        .WithMany()
                        .HasForeignKey("ProjectIdFinal");

                    b.HasOne("Optima.Fais.Model.Project", "ProjectInitial")
                        .WithMany()
                        .HasForeignKey("ProjectIdInitial");

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "RegisterConfUser")
                        .WithMany()
                        .HasForeignKey("RegisterConfBy");

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "ReleaseConfUser")
                        .WithMany()
                        .HasForeignKey("ReleaseConfBy");

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "SrcConfUser")
                        .WithMany()
                        .HasForeignKey("SrcConfBy");

                    b.HasOne("Optima.Fais.Model.SubType", "SubTypeFinal")
                        .WithMany()
                        .HasForeignKey("SubTypeIdFinal");

                    b.HasOne("Optima.Fais.Model.SubType", "SubTypeInitial")
                        .WithMany()
                        .HasForeignKey("SubTypeIdInitial");

                    b.HasOne("Optima.Fais.Model.Uom", "Uom")
                        .WithMany()
                        .HasForeignKey("UomId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Owner", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Partner", b =>
                {
                    b.HasOne("Optima.Fais.Model.Address", "AddressDetail")
                        .WithMany()
                        .HasForeignKey("AddressDetailId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.InterCompany", "InterCompany")
                        .WithMany()
                        .HasForeignKey("InterCompanyId");

                    b.HasOne("Optima.Fais.Model.PartnerLocation", "PartnerLocation")
                        .WithMany()
                        .HasForeignKey("PartnerLocationId");

                    b.HasOne("Optima.Fais.Model.SubType", "SubType")
                        .WithMany()
                        .HasForeignKey("SubTypeId");
                });

            modelBuilder.Entity("Optima.Fais.Model.PartnerLocation", b =>
                {
                    b.HasOne("Optima.Fais.Model.Address", "AddressDetail")
                        .WithMany()
                        .HasForeignKey("AddressDetailId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Permission", b =>
                {
                    b.HasOne("Optima.Fais.Model.PermissionType", "PermissionType")
                        .WithMany()
                        .HasForeignKey("PermissionTypeId");
                });

            modelBuilder.Entity("Optima.Fais.Model.PermissionRole", b =>
                {
                    b.HasOne("Optima.Fais.Model.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId");

                    b.HasOne("Optima.Fais.Model.PermissionType", "PermissionType")
                        .WithMany()
                        .HasForeignKey("PermissionTypeId");

                    b.HasOne("Optima.Fais.Model.ApplicationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("Optima.Fais.Model.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Project", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.ProjectType", "ProjectType")
                        .WithMany()
                        .HasForeignKey("ProjectTypeId");
                });

            modelBuilder.Entity("Optima.Fais.Model.ProjectType", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Rate", b =>
                {
                    b.HasOne("Optima.Fais.Model.AccMonth", "AccMonth")
                        .WithMany()
                        .HasForeignKey("AccMonthId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.Uom", "Uom")
                        .WithMany()
                        .HasForeignKey("UomId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Region", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Request", b =>
                {
                    b.HasOne("Optima.Fais.Model.AccMonth", "AccMonth")
                        .WithMany()
                        .HasForeignKey("AccMonthId");

                    b.HasOne("Optima.Fais.Model.AppState", "AppState")
                        .WithMany()
                        .HasForeignKey("AppStateId");

                    b.HasOne("Optima.Fais.Model.Budget", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId");

                    b.HasOne("Optima.Fais.Model.BudgetManager", "BudgetManager")
                        .WithMany()
                        .HasForeignKey("BudgetManagerId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId");

                    b.HasOne("Optima.Fais.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Optima.Fais.Model.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Optima.Fais.Model.RequestOp", b =>
                {
                    b.HasOne("Optima.Fais.Model.AccMonth", "AccMonth")
                        .WithMany()
                        .HasForeignKey("AccMonthId");

                    b.HasOne("Optima.Fais.Model.AccSystem", "AccSystem")
                        .WithMany()
                        .HasForeignKey("AccSystemId");

                    b.HasOne("Optima.Fais.Model.Budget", "BudgetFinal")
                        .WithMany()
                        .HasForeignKey("BudgetIdFinal");

                    b.HasOne("Optima.Fais.Model.Budget", "BudgetInitial")
                        .WithMany()
                        .HasForeignKey("BudgetIdInitial");

                    b.HasOne("Optima.Fais.Model.BudgetManager", "BudgetManager")
                        .WithMany()
                        .HasForeignKey("BudgetManagerId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.CostCenter", "CostCenterFinal")
                        .WithMany()
                        .HasForeignKey("CostCenterIdFinal");

                    b.HasOne("Optima.Fais.Model.CostCenter", "CostCenterInitial")
                        .WithMany()
                        .HasForeignKey("CostCenterIdInitial");

                    b.HasOne("Optima.Fais.Model.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "DstConfUser")
                        .WithMany()
                        .HasForeignKey("DstConfBy");

                    b.HasOne("Optima.Fais.Model.Employee", "EmployeeFinal")
                        .WithMany()
                        .HasForeignKey("EmployeeIdFinal");

                    b.HasOne("Optima.Fais.Model.Employee", "EmployeeInitial")
                        .WithMany()
                        .HasForeignKey("EmployeeIdInitial");

                    b.HasOne("Optima.Fais.Model.Project", "ProjectFinal")
                        .WithMany()
                        .HasForeignKey("ProjectIdFinal");

                    b.HasOne("Optima.Fais.Model.Project", "ProjectInitial")
                        .WithMany()
                        .HasForeignKey("ProjectIdInitial");

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "RegisterConfUser")
                        .WithMany()
                        .HasForeignKey("RegisterConfBy");

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "ReleaseConfUser")
                        .WithMany()
                        .HasForeignKey("ReleaseConfBy");

                    b.HasOne("Optima.Fais.Model.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.AppState", "RequestState")
                        .WithMany()
                        .HasForeignKey("RequestStateId");

                    b.HasOne("Optima.Fais.Model.ApplicationUser", "SrcConfUser")
                        .WithMany()
                        .HasForeignKey("SrcConfBy");
                });

            modelBuilder.Entity("Optima.Fais.Model.Room", b =>
                {
                    b.HasOne("Optima.Fais.Model.Location", "Location")
                        .WithMany("Rooms")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.Room", "ParentRoom")
                        .WithMany("ChildRooms")
                        .HasForeignKey("ParentRoomId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Route", b =>
                {
                    b.HasOne("Optima.Fais.Model.Badge", "Badge")
                        .WithMany()
                        .HasForeignKey("BadgeId");

                    b.HasOne("Optima.Fais.Model.IconRoute", "IconRoute")
                        .WithMany()
                        .HasForeignKey("IconRouteId");

                    b.HasOne("Optima.Fais.Model.ApplicationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("Optima.Fais.Model.RouteChildren", b =>
                {
                    b.HasOne("Optima.Fais.Model.Badge", "Badge")
                        .WithMany()
                        .HasForeignKey("BadgeId");

                    b.HasOne("Optima.Fais.Model.IconRoute", "IconRoute")
                        .WithMany()
                        .HasForeignKey("IconRouteId");

                    b.HasOne("Optima.Fais.Model.ApplicationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("Optima.Fais.Model.Route", "Route")
                        .WithMany("RouteChildrens")
                        .HasForeignKey("RouteId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Stock", b =>
                {
                    b.HasOne("Optima.Fais.Model.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("Optima.Fais.Model.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId");

                    b.HasOne("Optima.Fais.Model.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.HasOne("Optima.Fais.Model.Uom", "Uom")
                        .WithMany()
                        .HasForeignKey("UomId");
                });

            modelBuilder.Entity("Optima.Fais.Model.SubCategory", b =>
                {
                    b.HasOne("Optima.Fais.Model.CategoryEN", "CategoryEN")
                        .WithMany()
                        .HasForeignKey("CategoryENId");

                    b.HasOne("Optima.Fais.Model.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.SubCategoryEN", b =>
                {
                    b.HasOne("Optima.Fais.Model.CategoryEN", "CategoryEN")
                        .WithMany()
                        .HasForeignKey("CategoryENId");

                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.SubType", b =>
                {
                    b.HasOne("Optima.Fais.Model.Type", "Type")
                        .WithMany("SubTypes")
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("Optima.Fais.Model.SubTypePartner", b =>
                {
                    b.HasOne("Optima.Fais.Model.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optima.Fais.Model.SubType", "SubType")
                        .WithMany()
                        .HasForeignKey("SubTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Optima.Fais.Model.TableDefinition", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Type", b =>
                {
                    b.HasOne("Optima.Fais.Model.MasterType", "MasterType")
                        .WithMany("Types")
                        .HasForeignKey("MasterTypeId");
                });

            modelBuilder.Entity("Optima.Fais.Model.Uom", b =>
                {
                    b.HasOne("Optima.Fais.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Optima.Fais.Model.PartnerLocation", "PartnerLocation")
                        .WithMany()
                        .HasForeignKey("PartnerLocationId");
                });
#pragma warning restore 612, 618
        }
    }
}
